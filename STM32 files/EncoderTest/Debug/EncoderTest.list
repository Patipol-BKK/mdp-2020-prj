
EncoderTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005188  08005188  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005190  08005190  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005190  08005190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004d78  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d88  20004d88  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ff6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fc  00000000  00000000  00032036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00034938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  00035648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003260  00000000  00000000  00036240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc7e  00000000  00000000  000394a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9deb  00000000  00000000  0004711e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00110f09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000347c  00000000  00000000  00110f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004670 	.word	0x08004670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004670 	.word	0x08004670

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fba4 	bl	8000c18 <HAL_Init>

  /* USER CODE BEGIN Init */
  OLED_Init();
 80004d0:	f000 fa8a 	bl	80009e8 <OLED_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f824 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f880 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f001 fb3e 	bl	8001b5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <main+0x40>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x44>)
 80004e6:	f001 fb83 	bl	8001bf0 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <main+0x48>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <main+0x4c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x50>)
 80004f6:	f001 fb7b 	bl	8001bf0 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <main+0x54>)
 80004fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000500:	f001 fb50 	bl	8001ba4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x3c>
 8000506:	bf00      	nop
 8000508:	080046cc 	.word	0x080046cc
 800050c:	08000645 	.word	0x08000645
 8000510:	2000493c 	.word	0x2000493c
 8000514:	080046f0 	.word	0x080046f0
 8000518:	08000655 	.word	0x08000655
 800051c:	20004940 	.word	0x20004940

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f004 f896 	bl	8004660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xb4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xb4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <SystemClock_Config+0xb8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <SystemClock_Config+0xb8>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fe9b 	bl	80012cc <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800059c:	f000 f878 	bl	8000690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f8fe 	bl	80017bc <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005c6:	f000 f863 	bl	8000690 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_GPIO_Init+0x60>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_GPIO_Init+0x60>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_GPIO_Init+0x60>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0x64>)
 8000614:	f000 fe18 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin;
 8000618:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800061c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0x64>)
 8000630:	f000 fc6e 	bl	8000f10 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40021000 	.word	0x40021000

08000644 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fb61 	bl	8001d14 <osDelay>
 8000652:	e7fb      	b.n	800064c <StartDefaultTask+0x8>

08000654 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "Hello World!\0";
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <Display+0x38>)
 800065e:	f107 040c 	add.w	r4, r7, #12
 8000662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000664:	c407      	stmia	r4!, {r0, r1, r2}
 8000666:	8023      	strh	r3, [r4, #0]
 8000668:	f107 031a 	add.w	r3, r7, #26
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	OLED_ShowString(10,10,hello);
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	461a      	mov	r2, r3
 8000678:	210a      	movs	r1, #10
 800067a:	200a      	movs	r0, #10
 800067c:	f000 f982 	bl	8000984 <OLED_ShowString>
	OLED_Refresh_Gram();
 8000680:	f000 f856 	bl	8000730 <OLED_Refresh_Gram>
    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f001 fb45 	bl	8001d14 <osDelay>
	OLED_ShowString(10,10,hello);
 800068a:	e7f2      	b.n	8000672 <Display+0x1e>
 800068c:	080046a0 	.word	0x080046a0

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d106      	bne.n	80006c0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	481c      	ldr	r0, [pc, #112]	; (800072c <OLED_WR_Byte+0x90>)
 80006ba:	f000 fdc5 	bl	8001248 <HAL_GPIO_WritePin>
 80006be:	e005      	b.n	80006cc <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <OLED_WR_Byte+0x90>)
 80006c8:	f000 fdbe 	bl	8001248 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	e01e      	b.n	8000710 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	4815      	ldr	r0, [pc, #84]	; (800072c <OLED_WR_Byte+0x90>)
 80006d8:	f000 fdb6 	bl	8001248 <HAL_GPIO_WritePin>
		if(dat & 0x80)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	da05      	bge.n	80006f0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80006e4:	2201      	movs	r2, #1
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <OLED_WR_Byte+0x90>)
 80006ea:	f000 fdad 	bl	8001248 <HAL_GPIO_WritePin>
 80006ee:	e004      	b.n	80006fa <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 80006f0:	2200      	movs	r2, #0
 80006f2:	2140      	movs	r1, #64	; 0x40
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <OLED_WR_Byte+0x90>)
 80006f6:	f000 fda7 	bl	8001248 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80006fa:	2201      	movs	r2, #1
 80006fc:	2120      	movs	r1, #32
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <OLED_WR_Byte+0x90>)
 8000700:	f000 fda2 	bl	8001248 <HAL_GPIO_WritePin>
		dat <<= 1;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b07      	cmp	r3, #7
 8000714:	d9dd      	bls.n	80006d2 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <OLED_WR_Byte+0x90>)
 800071e:	f000 fd93 	bl	8001248 <HAL_GPIO_WritePin>
} 
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	e026      	b.n	800078a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	3b50      	subs	r3, #80	; 0x50
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffa9 	bl	800069c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800074a:	2100      	movs	r1, #0
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ffa5 	bl	800069c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8000752:	2100      	movs	r1, #0
 8000754:	2010      	movs	r0, #16
 8000756:	f7ff ffa1 	bl	800069c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	e00d      	b.n	800077c <OLED_Refresh_Gram+0x4c>
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	490d      	ldr	r1, [pc, #52]	; (800079c <OLED_Refresh_Gram+0x6c>)
 8000766:	00d2      	lsls	r2, r2, #3
 8000768:	440a      	add	r2, r1
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ff93 	bl	800069c <OLED_WR_Byte>
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	3301      	adds	r3, #1
 800077a:	71bb      	strb	r3, [r7, #6]
 800077c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000780:	2b00      	cmp	r3, #0
 8000782:	daed      	bge.n	8000760 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	3301      	adds	r3, #1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b07      	cmp	r3, #7
 800078e:	d9d5      	bls.n	800073c <OLED_Refresh_Gram+0xc>
	}
}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20004944 	.word	0x20004944

080007a0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e014      	b.n	80007d6 <OLED_Clear+0x36>
 80007ac:	2300      	movs	r3, #0
 80007ae:	71bb      	strb	r3, [r7, #6]
 80007b0:	e00a      	b.n	80007c8 <OLED_Clear+0x28>
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	490c      	ldr	r1, [pc, #48]	; (80007e8 <OLED_Clear+0x48>)
 80007b8:	00d2      	lsls	r2, r2, #3
 80007ba:	440a      	add	r2, r1
 80007bc:	4413      	add	r3, r2
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	3301      	adds	r3, #1
 80007c6:	71bb      	strb	r3, [r7, #6]
 80007c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	daf0      	bge.n	80007b2 <OLED_Clear+0x12>
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3301      	adds	r3, #1
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	d9e7      	bls.n	80007ac <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80007dc:	f7ff ffa8 	bl	8000730 <OLED_Refresh_Gram>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20004944 	.word	0x20004944

080007ec <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b085      	sub	sp, #20
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	460b      	mov	r3, r1
 80007f8:	71bb      	strb	r3, [r7, #6]
 80007fa:	4613      	mov	r3, r2
 80007fc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db41      	blt.n	800088e <OLED_DrawPoint+0xa2>
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b3f      	cmp	r3, #63	; 0x3f
 800080e:	d83e      	bhi.n	800088e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8000824:	7b7b      	ldrb	r3, [r7, #13]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2201      	movs	r2, #1
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8000832:	797b      	ldrb	r3, [r7, #5]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d012      	beq.n	800085e <OLED_DrawPoint+0x72>
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	4917      	ldr	r1, [pc, #92]	; (800089c <OLED_DrawPoint+0xb0>)
 800083e:	00d2      	lsls	r2, r2, #3
 8000840:	440a      	add	r2, r1
 8000842:	4413      	add	r3, r2
 8000844:	7818      	ldrb	r0, [r3, #0]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	7bf9      	ldrb	r1, [r7, #15]
 800084c:	4301      	orrs	r1, r0
 800084e:	b2c8      	uxtb	r0, r1
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <OLED_DrawPoint+0xb0>)
 8000852:	00d2      	lsls	r2, r2, #3
 8000854:	440a      	add	r2, r1
 8000856:	4413      	add	r3, r2
 8000858:	4602      	mov	r2, r0
 800085a:	701a      	strb	r2, [r3, #0]
 800085c:	e018      	b.n	8000890 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800085e:	79fa      	ldrb	r2, [r7, #7]
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	490e      	ldr	r1, [pc, #56]	; (800089c <OLED_DrawPoint+0xb0>)
 8000864:	00d2      	lsls	r2, r2, #3
 8000866:	440a      	add	r2, r1
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25a      	sxtb	r2, r3
 800086e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000872:	43db      	mvns	r3, r3
 8000874:	b25b      	sxtb	r3, r3
 8000876:	4013      	ands	r3, r2
 8000878:	b259      	sxtb	r1, r3
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	b2c8      	uxtb	r0, r1
 8000880:	4906      	ldr	r1, [pc, #24]	; (800089c <OLED_DrawPoint+0xb0>)
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	440a      	add	r2, r1
 8000886:	4413      	add	r3, r2
 8000888:	4602      	mov	r2, r0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e000      	b.n	8000890 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800088e:	bf00      	nop
}
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20004944 	.word	0x20004944

080008a0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4604      	mov	r4, r0
 80008a8:	4608      	mov	r0, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	461a      	mov	r2, r3
 80008ae:	4623      	mov	r3, r4
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4603      	mov	r3, r0
 80008b4:	71bb      	strb	r3, [r7, #6]
 80008b6:	460b      	mov	r3, r1
 80008b8:	717b      	strb	r3, [r7, #5]
 80008ba:	4613      	mov	r3, r2
 80008bc:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80008c2:	797b      	ldrb	r3, [r7, #5]
 80008c4:	3b20      	subs	r3, #32
 80008c6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	73bb      	strb	r3, [r7, #14]
 80008cc:	e04d      	b.n	800096a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	2b0c      	cmp	r3, #12
 80008d2:	d10b      	bne.n	80008ec <OLED_ShowChar+0x4c>
 80008d4:	797a      	ldrb	r2, [r7, #5]
 80008d6:	7bb9      	ldrb	r1, [r7, #14]
 80008d8:	4828      	ldr	r0, [pc, #160]	; (800097c <OLED_ShowChar+0xdc>)
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4403      	add	r3, r0
 80008e4:	440b      	add	r3, r1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	e007      	b.n	80008fc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80008ec:	797a      	ldrb	r2, [r7, #5]
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	4923      	ldr	r1, [pc, #140]	; (8000980 <OLED_ShowChar+0xe0>)
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	440a      	add	r2, r1
 80008f6:	4413      	add	r3, r2
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	e02d      	b.n	800095e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	2b00      	cmp	r3, #0
 8000908:	da07      	bge.n	800091a <OLED_ShowChar+0x7a>
 800090a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800090e:	79b9      	ldrb	r1, [r7, #6]
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff6a 	bl	80007ec <OLED_DrawPoint>
 8000918:	e00c      	b.n	8000934 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800091a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800091e:	2b00      	cmp	r3, #0
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	79b9      	ldrb	r1, [r7, #6]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff5c 	bl	80007ec <OLED_DrawPoint>
			temp<<=1;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
			y++;
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	3301      	adds	r3, #1
 800093e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	1ad2      	subs	r2, r2, r3
 8000946:	793b      	ldrb	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	d105      	bne.n	8000958 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800094c:	7b3b      	ldrb	r3, [r7, #12]
 800094e:	71bb      	strb	r3, [r7, #6]
				x++;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3301      	adds	r3, #1
 8000954:	71fb      	strb	r3, [r7, #7]
				break;
 8000956:	e005      	b.n	8000964 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8000958:	7b7b      	ldrb	r3, [r7, #13]
 800095a:	3301      	adds	r3, #1
 800095c:	737b      	strb	r3, [r7, #13]
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	2b07      	cmp	r3, #7
 8000962:	d9ce      	bls.n	8000902 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	3301      	adds	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]
 800096a:	7bba      	ldrb	r2, [r7, #14]
 800096c:	793b      	ldrb	r3, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	d3ad      	bcc.n	80008ce <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	08004714 	.word	0x08004714
 8000980:	08004b88 	.word	0x08004b88

08000984 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
 800098a:	4603      	mov	r3, r0
 800098c:	603a      	str	r2, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	460b      	mov	r3, r1
 8000992:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8000994:	e01f      	b.n	80009d6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b7a      	cmp	r3, #122	; 0x7a
 800099a:	d904      	bls.n	80009a6 <OLED_ShowString+0x22>
 800099c:	2300      	movs	r3, #0
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	3310      	adds	r3, #16
 80009a4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	2b3a      	cmp	r3, #58	; 0x3a
 80009aa:	d905      	bls.n	80009b8 <OLED_ShowString+0x34>
 80009ac:	2300      	movs	r3, #0
 80009ae:	71fb      	strb	r3, [r7, #7]
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	71bb      	strb	r3, [r7, #6]
 80009b4:	f7ff fef4 	bl	80007a0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	79b9      	ldrb	r1, [r7, #6]
 80009be:	79f8      	ldrb	r0, [r7, #7]
 80009c0:	2301      	movs	r3, #1
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	230c      	movs	r3, #12
 80009c6:	f7ff ff6b 	bl	80008a0 <OLED_ShowChar>
        x+=8;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	3308      	adds	r3, #8
 80009ce:	71fb      	strb	r3, [r7, #7]
        p++;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1db      	bne.n	8000996 <OLED_ShowString+0x12>
    }  
}	 
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <OLED_Init>:

void OLED_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80009ec:	f000 fc46 	bl	800127c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80009f0:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <OLED_Init+0x110>)
 80009f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80009f4:	4a40      	ldr	r2, [pc, #256]	; (8000af8 <OLED_Init+0x110>)
 80009f6:	f023 0301 	bic.w	r3, r3, #1
 80009fa:	6713      	str	r3, [r2, #112]	; 0x70
 80009fc:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <OLED_Init+0x110>)
 80009fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a00:	4a3d      	ldr	r2, [pc, #244]	; (8000af8 <OLED_Init+0x110>)
 8000a02:	f023 0304 	bic.w	r3, r3, #4
 8000a06:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8000a08:	f000 fc4c 	bl	80012a4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	483a      	ldr	r0, [pc, #232]	; (8000afc <OLED_Init+0x114>)
 8000a12:	f000 fc19 	bl	8001248 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a16:	2064      	movs	r0, #100	; 0x64
 8000a18:	f000 f970 	bl	8000cfc <HAL_Delay>
	OLED_RST_Set();
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4836      	ldr	r0, [pc, #216]	; (8000afc <OLED_Init+0x114>)
 8000a22:	f000 fc11 	bl	8001248 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8000a26:	2100      	movs	r1, #0
 8000a28:	20ae      	movs	r0, #174	; 0xae
 8000a2a:	f7ff fe37 	bl	800069c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8000a2e:	2100      	movs	r1, #0
 8000a30:	20d5      	movs	r0, #213	; 0xd5
 8000a32:	f7ff fe33 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8000a36:	2100      	movs	r1, #0
 8000a38:	2050      	movs	r0, #80	; 0x50
 8000a3a:	f7ff fe2f 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8000a3e:	2100      	movs	r1, #0
 8000a40:	20a8      	movs	r0, #168	; 0xa8
 8000a42:	f7ff fe2b 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8000a46:	2100      	movs	r1, #0
 8000a48:	203f      	movs	r0, #63	; 0x3f
 8000a4a:	f7ff fe27 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8000a4e:	2100      	movs	r1, #0
 8000a50:	20d3      	movs	r0, #211	; 0xd3
 8000a52:	f7ff fe23 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fe1f 	bl	800069c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2040      	movs	r0, #64	; 0x40
 8000a62:	f7ff fe1b 	bl	800069c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8000a66:	2100      	movs	r1, #0
 8000a68:	208d      	movs	r0, #141	; 0x8d
 8000a6a:	f7ff fe17 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2014      	movs	r0, #20
 8000a72:	f7ff fe13 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8000a76:	2100      	movs	r1, #0
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f7ff fe0f 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fe0b 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8000a86:	2100      	movs	r1, #0
 8000a88:	20a1      	movs	r0, #161	; 0xa1
 8000a8a:	f7ff fe07 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8000a8e:	2100      	movs	r1, #0
 8000a90:	20c0      	movs	r0, #192	; 0xc0
 8000a92:	f7ff fe03 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8000a96:	2100      	movs	r1, #0
 8000a98:	20da      	movs	r0, #218	; 0xda
 8000a9a:	f7ff fdff 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2012      	movs	r0, #18
 8000aa2:	f7ff fdfb 	bl	800069c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2081      	movs	r0, #129	; 0x81
 8000aaa:	f7ff fdf7 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8000aae:	2100      	movs	r1, #0
 8000ab0:	20ef      	movs	r0, #239	; 0xef
 8000ab2:	f7ff fdf3 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	20d9      	movs	r0, #217	; 0xd9
 8000aba:	f7ff fdef 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8000abe:	2100      	movs	r1, #0
 8000ac0:	20f1      	movs	r0, #241	; 0xf1
 8000ac2:	f7ff fdeb 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	20db      	movs	r0, #219	; 0xdb
 8000aca:	f7ff fde7 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2030      	movs	r0, #48	; 0x30
 8000ad2:	f7ff fde3 	bl	800069c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	20a4      	movs	r0, #164	; 0xa4
 8000ada:	f7ff fddf 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8000ade:	2100      	movs	r1, #0
 8000ae0:	20a6      	movs	r0, #166	; 0xa6
 8000ae2:	f7ff fddb 	bl	800069c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	20af      	movs	r0, #175	; 0xaf
 8000aea:	f7ff fdd7 	bl	800069c <OLED_WR_Byte>
	OLED_Clear(); 
 8000aee:	f7ff fe57 	bl	80007a0 <OLED_Clear>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_MspInit+0x54>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_MspInit+0x54>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_MspInit+0x54>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x54>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 f9ba 	bl	8000ebe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 f898 	bl	8000cbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b8c:	f002 fcd0 	bl	8003530 <xTaskGetSchedulerState>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d001      	beq.n	8000b9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b96:	f003 fab7 	bl	8004108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ffd7 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 fd03 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fc67 	bl	80004c8 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c08:	08005198 	.word	0x08005198
  ldr r2, =_sbss
 8000c0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c10:	20004d88 	.word	0x20004d88

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f931 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	200f      	movs	r0, #15
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff ff58 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f93b 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f911 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20004d44 	.word	0x20004d44

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20004d44 	.word	0x20004d44

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b60      	ldr	r3, [pc, #384]	; (800121c <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5f      	ldr	r2, [pc, #380]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5b      	ldr	r2, [pc, #364]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a51      	ldr	r2, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a50      	ldr	r2, [pc, #320]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_GPIO_Init+0x324>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4d      	ldr	r2, [pc, #308]	; (8001238 <HAL_GPIO_Init+0x328>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_GPIO_Init+0x32c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4b      	ldr	r2, [pc, #300]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4935      	ldr	r1, [pc, #212]	; (8001220 <HAL_GPIO_Init+0x310>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117a:	4a32      	ldr	r2, [pc, #200]	; (8001244 <HAL_GPIO_Init+0x334>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_GPIO_Init+0x334>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_GPIO_Init+0x334>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_PWR_EnableBkUpAccess+0x20>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800128e:	687b      	ldr	r3, [r7, #4]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	420e0020 	.word	0x420e0020
 80012a0:	40007000 	.word	0x40007000

080012a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80012b6:	687b      	ldr	r3, [r7, #4]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	420e0020 	.word	0x420e0020
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e264      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	4ba3      	ldr	r3, [pc, #652]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d00c      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4ba0      	ldr	r3, [pc, #640]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b9d      	ldr	r3, [pc, #628]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b99      	ldr	r3, [pc, #612]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e23f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a90      	ldr	r2, [pc, #576]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a8a      	ldr	r2, [pc, #552]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a87      	ldr	r2, [pc, #540]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b84      	ldr	r3, [pc, #528]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a83      	ldr	r2, [pc, #524]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a80      	ldr	r2, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcae 	bl	8000ce4 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcaa 	bl	8000ce4 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e204      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc9a 	bl	8000ce4 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc96 	bl	8000ce4 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f0      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b6c      	ldr	r3, [pc, #432]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b62      	ldr	r3, [pc, #392]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c4      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b56      	ldr	r3, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4952      	ldr	r1, [pc, #328]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fc4f 	bl	8000ce4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc4b 	bl	8000ce4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4940      	ldr	r1, [pc, #256]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_RCC_OscConfig+0x2b0>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc2e 	bl	8000ce4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc2a 	bl	8000ce4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e184      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d030      	beq.n	8001518 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b30      	ldr	r3, [pc, #192]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc0e 	bl	8000ce4 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc0a 	bl	8000ce4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e164      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
 80014ea:	e015      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x2b4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fbf7 	bl	8000ce4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fbf3 	bl	8000ce4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e14d      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a0 	beq.w	8001666 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10f      	bne.n	8001556 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d121      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbb9 	bl	8000ce4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	e011      	b.n	800159a <HAL_RCC_OscConfig+0x2ce>
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	42470000 	.word	0x42470000
 8001580:	42470e80 	.word	0x42470e80
 8001584:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001588:	f7ff fbac 	bl	8000ce4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e106      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b85      	ldr	r3, [pc, #532]	; (80017b0 <HAL_RCC_OscConfig+0x4e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d106      	bne.n	80015bc <HAL_RCC_OscConfig+0x2f0>
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a80      	ldr	r2, [pc, #512]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	e01c      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d10c      	bne.n	80015de <HAL_RCC_OscConfig+0x312>
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a7a      	ldr	r2, [pc, #488]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a77      	ldr	r2, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	e00b      	b.n	80015f6 <HAL_RCC_OscConfig+0x32a>
 80015de:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e2:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	f023 0301 	bic.w	r3, r3, #1
 80015e8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a71      	ldr	r2, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d015      	beq.n	800162a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb71 	bl	8000ce4 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff fb6d 	bl	8000ce4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	; 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0c5      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0ee      	beq.n	8001606 <HAL_RCC_OscConfig+0x33a>
 8001628:	e014      	b.n	8001654 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb5b 	bl	8000ce4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fb57 	bl	8000ce4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0af      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165a:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a55      	ldr	r2, [pc, #340]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 809b 	beq.w	80017a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d05c      	beq.n	8001736 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d141      	bne.n	8001708 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb2b 	bl	8000ce4 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fb27 	bl	8000ce4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e081      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69da      	ldr	r2, [r3, #28]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	019b      	lsls	r3, r3, #6
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	3b01      	subs	r3, #1
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4937      	ldr	r1, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb00 	bl	8000ce4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fafc 	bl	8000ce4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e056      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x41c>
 8001706:	e04e      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fae9 	bl	8000ce4 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff fae5 	bl	8000ce4 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e03f      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x44a>
 8001734:	e037      	b.n	80017a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e032      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_RCC_OscConfig+0x4e8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d028      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d11a      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800177a:	4293      	cmp	r3, r2
 800177c:	d111      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470060 	.word	0x42470060

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa1a 	bl	8000ce4 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa16 	bl	8000ce4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f97a 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08005178 	.word	0x08005178
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198e:	2100      	movs	r1, #0
 8001990:	6079      	str	r1, [r7, #4]
 8001992:	2100      	movs	r1, #0
 8001994:	60f9      	str	r1, [r7, #12]
 8001996:	2100      	movs	r1, #0
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199a:	2100      	movs	r1, #0
 800199c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4952      	ldr	r1, [pc, #328]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019a0:	6889      	ldr	r1, [r1, #8]
 80019a2:	f001 010c 	and.w	r1, r1, #12
 80019a6:	2908      	cmp	r1, #8
 80019a8:	d00d      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80019aa:	2908      	cmp	r1, #8
 80019ac:	f200 8094 	bhi.w	8001ad8 <HAL_RCC_GetSysClockFreq+0x150>
 80019b0:	2900      	cmp	r1, #0
 80019b2:	d002      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x32>
 80019b4:	2904      	cmp	r1, #4
 80019b6:	d003      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x38>
 80019b8:	e08e      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_GetSysClockFreq+0x164>)
 80019bc:	60bb      	str	r3, [r7, #8]
       break;
 80019be:	e08e      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019c2:	60bb      	str	r3, [r7, #8]
      break;
 80019c4:	e08b      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c6:	4948      	ldr	r1, [pc, #288]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019c8:	6849      	ldr	r1, [r1, #4]
 80019ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80019ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d0:	4945      	ldr	r1, [pc, #276]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019d2:	6849      	ldr	r1, [r1, #4]
 80019d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80019d8:	2900      	cmp	r1, #0
 80019da:	d024      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4942      	ldr	r1, [pc, #264]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019de:	6849      	ldr	r1, [r1, #4]
 80019e0:	0989      	lsrs	r1, r1, #6
 80019e2:	4608      	mov	r0, r1
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80019ec:	f04f 0500 	mov.w	r5, #0
 80019f0:	ea00 0204 	and.w	r2, r0, r4
 80019f4:	ea01 0305 	and.w	r3, r1, r5
 80019f8:	493d      	ldr	r1, [pc, #244]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019fa:	fb01 f003 	mul.w	r0, r1, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	fb01 f102 	mul.w	r1, r1, r2
 8001a04:	1844      	adds	r4, r0, r1
 8001a06:	493a      	ldr	r1, [pc, #232]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001a08:	fba2 0101 	umull	r0, r1, r2, r1
 8001a0c:	1863      	adds	r3, r4, r1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f7fe fbda 	bl	80001d0 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	e04a      	b.n	8001abc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	ea02 0400 	and.w	r4, r2, r0
 8001a3e:	ea03 0501 	and.w	r5, r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	014b      	lsls	r3, r1, #5
 8001a50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a54:	0142      	lsls	r2, r0, #5
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	1b00      	subs	r0, r0, r4
 8001a5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	018b      	lsls	r3, r1, #6
 8001a6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a6e:	0182      	lsls	r2, r0, #6
 8001a70:	1a12      	subs	r2, r2, r0
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	f04f 0000 	mov.w	r0, #0
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	00d9      	lsls	r1, r3, #3
 8001a80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a84:	00d0      	lsls	r0, r2, #3
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	1912      	adds	r2, r2, r4
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0299      	lsls	r1, r3, #10
 8001a9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a9e:	0290      	lsls	r0, r2, #10
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	f7fe fb8e 	bl	80001d0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetSysClockFreq+0x164>)
 8001ada:	60bb      	str	r3, [r7, #8]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	017d7840 	.word	0x017d7840

08001af4 <__NVIC_SetPriority>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f06f 0004 	mvn.w	r0, #4
 8001b52:	f7ff ffcf 	bl	8001af4 <__NVIC_SetPriority>
#endif
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b62:	f3ef 8305 	mrs	r3, IPSR
 8001b66:	603b      	str	r3, [r7, #0]
  return(result);
 8001b68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b6e:	f06f 0305 	mvn.w	r3, #5
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	e00c      	b.n	8001b90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <osKernelInitialize+0x44>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <osKernelInitialize+0x44>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	e002      	b.n	8001b90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	2000002c 	.word	0x2000002c

08001ba4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001baa:	f3ef 8305 	mrs	r3, IPSR
 8001bae:	603b      	str	r3, [r7, #0]
  return(result);
 8001bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8001bb6:	f06f 0305 	mvn.w	r3, #5
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	e010      	b.n	8001be0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <osKernelStart+0x48>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d109      	bne.n	8001bda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001bc6:	f7ff ffbf 	bl	8001b48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <osKernelStart+0x48>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001bd0:	f001 f866 	bl	8002ca0 <vTaskStartScheduler>
      stat = osOK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	e002      	b.n	8001be0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000002c 	.word	0x2000002c

08001bf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c00:	f3ef 8305 	mrs	r3, IPSR
 8001c04:	617b      	str	r3, [r7, #20]
  return(result);
 8001c06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d17e      	bne.n	8001d0a <osThreadNew+0x11a>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d07b      	beq.n	8001d0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c16:	2318      	movs	r3, #24
 8001c18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d045      	beq.n	8001cb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <osThreadNew+0x48>
        name = attr->name;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <osThreadNew+0x6e>
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b38      	cmp	r3, #56	; 0x38
 8001c50:	d805      	bhi.n	8001c5e <osThreadNew+0x6e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <osThreadNew+0x72>
        return (NULL);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e054      	b.n	8001d0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00e      	beq.n	8001c98 <osThreadNew+0xa8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b5b      	cmp	r3, #91	; 0x5b
 8001c80:	d90a      	bls.n	8001c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <osThreadNew+0xa8>
        mem = 1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	e010      	b.n	8001cba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <osThreadNew+0xca>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d108      	bne.n	8001cba <osThreadNew+0xca>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <osThreadNew+0xca>
          mem = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e001      	b.n	8001cba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d110      	bne.n	8001ce2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cc8:	9202      	str	r2, [sp, #8]
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fe0c 	bl	80028f4 <xTaskCreateStatic>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e013      	b.n	8001d0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d110      	bne.n	8001d0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f107 0310 	add.w	r3, r7, #16
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fe57 	bl	80029ae <xTaskCreate>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d001      	beq.n	8001d0a <osThreadNew+0x11a>
            hTask = NULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d0a:	693b      	ldr	r3, [r7, #16]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d1c:	f3ef 8305 	mrs	r3, IPSR
 8001d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <osDelay+0x1c>
    stat = osErrorISR;
 8001d28:	f06f 0305 	mvn.w	r3, #5
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e007      	b.n	8001d40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 ff7c 	bl	8002c38 <vTaskDelay>
    }
  }

  return (stat);
 8001d40:	68fb      	ldr	r3, [r7, #12]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <vApplicationGetIdleTaskMemory+0x30>)
 8001d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000030 	.word	0x20000030
 8001d7c:	2000008c 	.word	0x2000008c

08001d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a07      	ldr	r2, [pc, #28]	; (8001dac <vApplicationGetTimerTaskMemory+0x2c>)
 8001d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <vApplicationGetTimerTaskMemory+0x30>)
 8001d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9e:	601a      	str	r2, [r3, #0]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	2000028c 	.word	0x2000028c
 8001db0:	200002e8 	.word	0x200002e8

08001db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0208 	add.w	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 0208 	add.w	r2, r3, #8
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0208 	add.w	r2, r3, #8
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1c5a      	adds	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	601a      	str	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d103      	bne.n	8001e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e00c      	b.n	8001e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3308      	adds	r3, #8
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e002      	b.n	8001e84 <vListInsert+0x2e>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d2f6      	bcs.n	8001e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6892      	ldr	r2, [r2, #8]
 8001ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6852      	ldr	r2, [r2, #4]
 8001ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d103      	bne.n	8001efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f42:	bf00      	nop
 8001f44:	e7fe      	b.n	8001f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f46:	f002 f84d 	bl	8003fe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	3b01      	subs	r3, #1
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	441a      	add	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	22ff      	movs	r2, #255	; 0xff
 8001f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d114      	bne.n	8001fc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01a      	beq.n	8001fda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3310      	adds	r3, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f903 	bl	80031b4 <xTaskRemoveFromEventList>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <xQueueGenericReset+0xcc>)
 8001fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f3bf 8f4f 	dsb	sy
 8001fc0:	f3bf 8f6f 	isb	sy
 8001fc4:	e009      	b.n	8001fda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3310      	adds	r3, #16
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fef2 	bl	8001db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3324      	adds	r3, #36	; 0x24
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff feed 	bl	8001db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fda:	f002 f833 	bl	8004044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	e000ed04 	.word	0xe000ed04

08001fec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002004:	f383 8811 	msr	BASEPRI, r3
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	f3bf 8f4f 	dsb	sy
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002012:	bf00      	nop
 8002014:	e7fe      	b.n	8002014 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800202e:	bf00      	nop
 8002030:	e7fe      	b.n	8002030 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <xQueueGenericCreateStatic+0x52>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <xQueueGenericCreateStatic+0x56>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <xQueueGenericCreateStatic+0x58>
 8002042:	2300      	movs	r3, #0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	623b      	str	r3, [r7, #32]
}
 800205a:	bf00      	nop
 800205c:	e7fe      	b.n	800205c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <xQueueGenericCreateStatic+0x7e>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <xQueueGenericCreateStatic+0x82>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <xQueueGenericCreateStatic+0x84>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	61fb      	str	r3, [r7, #28]
}
 8002086:	bf00      	nop
 8002088:	e7fe      	b.n	8002088 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800208a:	2350      	movs	r3, #80	; 0x50
 800208c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b50      	cmp	r3, #80	; 0x50
 8002092:	d00a      	beq.n	80020aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002098:	f383 8811 	msr	BASEPRI, r3
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	f3bf 8f4f 	dsb	sy
 80020a4:	61bb      	str	r3, [r7, #24]
}
 80020a6:	bf00      	nop
 80020a8:	e7fe      	b.n	80020a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80020aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f805 	bl	80020dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3730      	adds	r7, #48	; 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d103      	bne.n	80020f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e002      	b.n	80020fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800210a:	2101      	movs	r1, #1
 800210c:	69b8      	ldr	r0, [r7, #24]
 800210e:	f7ff ff05 	bl	8001f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <xQueueGenericSend+0x32>
	__asm volatile
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002152:	bf00      	nop
 8002154:	e7fe      	b.n	8002154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d103      	bne.n	8002164 <xQueueGenericSend+0x40>
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <xQueueGenericSend+0x44>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <xQueueGenericSend+0x46>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10a      	bne.n	8002184 <xQueueGenericSend+0x60>
	__asm volatile
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	f383 8811 	msr	BASEPRI, r3
 8002176:	f3bf 8f6f 	isb	sy
 800217a:	f3bf 8f4f 	dsb	sy
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002180:	bf00      	nop
 8002182:	e7fe      	b.n	8002182 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <xQueueGenericSend+0x6e>
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <xQueueGenericSend+0x72>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <xQueueGenericSend+0x74>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a0:	f383 8811 	msr	BASEPRI, r3
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	623b      	str	r3, [r7, #32]
}
 80021ae:	bf00      	nop
 80021b0:	e7fe      	b.n	80021b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021b2:	f001 f9bd 	bl	8003530 <xTaskGetSchedulerState>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <xQueueGenericSend+0x9e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <xQueueGenericSend+0xa2>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <xQueueGenericSend+0xa4>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	61fb      	str	r3, [r7, #28]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021e2:	f001 feff 	bl	8003fe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <xQueueGenericSend+0xd4>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d129      	bne.n	800224c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fe:	f000 fa0b 	bl	8002618 <prvCopyDataToQueue>
 8002202:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	3324      	adds	r3, #36	; 0x24
 8002210:	4618      	mov	r0, r3
 8002212:	f000 ffcf 	bl	80031b4 <xTaskRemoveFromEventList>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800221c:	4b3f      	ldr	r3, [pc, #252]	; (800231c <xQueueGenericSend+0x1f8>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	e00a      	b.n	8002244 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002234:	4b39      	ldr	r3, [pc, #228]	; (800231c <xQueueGenericSend+0x1f8>)
 8002236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	f3bf 8f4f 	dsb	sy
 8002240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002244:	f001 fefe 	bl	8004044 <vPortExitCritical>
				return pdPASS;
 8002248:	2301      	movs	r3, #1
 800224a:	e063      	b.n	8002314 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002252:	f001 fef7 	bl	8004044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002256:	2300      	movs	r3, #0
 8002258:	e05c      	b.n	8002314 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4618      	mov	r0, r3
 8002266:	f001 f809 	bl	800327c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800226a:	2301      	movs	r3, #1
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800226e:	f001 fee9 	bl	8004044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002272:	f000 fd7b 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002276:	f001 feb5 	bl	8003fe4 <vPortEnterCritical>
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002280:	b25b      	sxtb	r3, r3
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d103      	bne.n	8002290 <xQueueGenericSend+0x16c>
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002296:	b25b      	sxtb	r3, r3
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d103      	bne.n	80022a6 <xQueueGenericSend+0x182>
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a6:	f001 fecd 	bl	8004044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022aa:	1d3a      	adds	r2, r7, #4
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fff8 	bl	80032a8 <xTaskCheckForTimeOut>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d124      	bne.n	8002308 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c0:	f000 faa2 	bl	8002808 <prvIsQueueFull>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	3310      	adds	r3, #16
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 ff1e 	bl	8003114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022da:	f000 fa2d 	bl	8002738 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022de:	f000 fd53 	bl	8002d88 <xTaskResumeAll>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f47f af7c 	bne.w	80021e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <xQueueGenericSend+0x1f8>)
 80022ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	f3bf 8f4f 	dsb	sy
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	e772      	b.n	80021e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022fe:	f000 fa1b 	bl	8002738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002302:	f000 fd41 	bl	8002d88 <xTaskResumeAll>
 8002306:	e76c      	b.n	80021e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800230a:	f000 fa15 	bl	8002738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800230e:	f000 fd3b 	bl	8002d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002314:	4618      	mov	r0, r3
 8002316:	3738      	adds	r7, #56	; 0x38
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	e000ed04 	.word	0xe000ed04

08002320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d103      	bne.n	800235c <xQueueGenericSendFromISR+0x3c>
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <xQueueGenericSendFromISR+0x40>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <xQueueGenericSendFromISR+0x42>
 8002360:	2300      	movs	r3, #0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236a:	f383 8811 	msr	BASEPRI, r3
 800236e:	f3bf 8f6f 	isb	sy
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002378:	bf00      	nop
 800237a:	e7fe      	b.n	800237a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d103      	bne.n	800238a <xQueueGenericSendFromISR+0x6a>
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <xQueueGenericSendFromISR+0x6e>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueGenericSendFromISR+0x70>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	623b      	str	r3, [r7, #32]
}
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023aa:	f001 fefd 	bl	80041a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80023ae:	f3ef 8211 	mrs	r2, BASEPRI
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	61fa      	str	r2, [r7, #28]
 80023c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <xQueueGenericSendFromISR+0xbc>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d12f      	bne.n	800243c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023f2:	f000 f911 	bl	8002618 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fe:	d112      	bne.n	8002426 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	2b00      	cmp	r3, #0
 8002406:	d016      	beq.n	8002436 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240a:	3324      	adds	r3, #36	; 0x24
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fed1 	bl	80031b4 <xTaskRemoveFromEventList>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800242a:	3301      	adds	r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	b25a      	sxtb	r2, r3
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002436:	2301      	movs	r3, #1
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800243a:	e001      	b.n	8002440 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002442:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800244a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800244c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800244e:	4618      	mov	r0, r3
 8002450:	3740      	adds	r7, #64	; 0x40
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10a      	bne.n	8002488 <xQueueReceive+0x30>
	__asm volatile
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	623b      	str	r3, [r7, #32]
}
 8002484:	bf00      	nop
 8002486:	e7fe      	b.n	8002486 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <xQueueReceive+0x3e>
 800248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <xQueueReceive+0x42>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <xQueueReceive+0x44>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueReceive+0x5e>
	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	61fb      	str	r3, [r7, #28]
}
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024b6:	f001 f83b 	bl	8003530 <xTaskGetSchedulerState>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <xQueueReceive+0x6e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <xQueueReceive+0x72>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueReceive+0x74>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueReceive+0x8e>
	__asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	61bb      	str	r3, [r7, #24]
}
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024e6:	f001 fd7d 	bl	8003fe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01f      	beq.n	8002536 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024fa:	f000 f8f7 	bl	80026ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00f      	beq.n	800252e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	3310      	adds	r3, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f000 fe4e 	bl	80031b4 <xTaskRemoveFromEventList>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <xQueueReceive+0x1bc>)
 8002520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800252e:	f001 fd89 	bl	8004044 <vPortExitCritical>
				return pdPASS;
 8002532:	2301      	movs	r3, #1
 8002534:	e069      	b.n	800260a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d103      	bne.n	8002544 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800253c:	f001 fd82 	bl	8004044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002540:	2300      	movs	r3, #0
 8002542:	e062      	b.n	800260a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fe94 	bl	800327c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002554:	2301      	movs	r3, #1
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002558:	f001 fd74 	bl	8004044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800255c:	f000 fc06 	bl	8002d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002560:	f001 fd40 	bl	8003fe4 <vPortEnterCritical>
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800256a:	b25b      	sxtb	r3, r3
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d103      	bne.n	800257a <xQueueReceive+0x122>
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d103      	bne.n	8002590 <xQueueReceive+0x138>
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002590:	f001 fd58 	bl	8004044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002594:	1d3a      	adds	r2, r7, #4
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fe83 	bl	80032a8 <xTaskCheckForTimeOut>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d123      	bne.n	80025f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025aa:	f000 f917 	bl	80027dc <prvIsQueueEmpty>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d017      	beq.n	80025e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	3324      	adds	r3, #36	; 0x24
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fda9 	bl	8003114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c4:	f000 f8b8 	bl	8002738 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025c8:	f000 fbde 	bl	8002d88 <xTaskResumeAll>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d189      	bne.n	80024e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <xQueueReceive+0x1bc>)
 80025d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	e780      	b.n	80024e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80025e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e6:	f000 f8a7 	bl	8002738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ea:	f000 fbcd 	bl	8002d88 <xTaskResumeAll>
 80025ee:	e77a      	b.n	80024e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025f2:	f000 f8a1 	bl	8002738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025f6:	f000 fbc7 	bl	8002d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025fc:	f000 f8ee 	bl	80027dc <prvIsQueueEmpty>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f43f af6f 	beq.w	80024e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800260a:	4618      	mov	r0, r3
 800260c:	3730      	adds	r7, #48	; 0x30
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	e000ed04 	.word	0xe000ed04

08002618 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d14d      	bne.n	80026da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ff92 	bl	800356c <xTaskPriorityDisinherit>
 8002648:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e043      	b.n	80026da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d119      	bne.n	800268c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6858      	ldr	r0, [r3, #4]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	461a      	mov	r2, r3
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	f001 ffee 	bl	8004644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	441a      	add	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	d32b      	bcc.n	80026da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e026      	b.n	80026da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68d8      	ldr	r0, [r3, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	461a      	mov	r2, r3
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	f001 ffd4 	bl	8004644 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	425b      	negs	r3, r3
 80026a6:	441a      	add	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	425b      	negs	r3, r3
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d105      	bne.n	80026da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026e2:	697b      	ldr	r3, [r7, #20]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d018      	beq.n	8002730 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	441a      	add	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	429a      	cmp	r2, r3
 8002716:	d303      	bcc.n	8002720 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68d9      	ldr	r1, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	461a      	mov	r2, r3
 800272a:	6838      	ldr	r0, [r7, #0]
 800272c:	f001 ff8a 	bl	8004644 <memcpy>
	}
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002740:	f001 fc50 	bl	8003fe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800274c:	e011      	b.n	8002772 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d012      	beq.n	800277c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3324      	adds	r3, #36	; 0x24
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fd2a 	bl	80031b4 <xTaskRemoveFromEventList>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002766:	f000 fe01 	bl	800336c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	3b01      	subs	r3, #1
 800276e:	b2db      	uxtb	r3, r3
 8002770:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	dce9      	bgt.n	800274e <prvUnlockQueue+0x16>
 800277a:	e000      	b.n	800277e <prvUnlockQueue+0x46>
					break;
 800277c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002786:	f001 fc5d 	bl	8004044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800278a:	f001 fc2b 	bl	8003fe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002794:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002796:	e011      	b.n	80027bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d012      	beq.n	80027c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3310      	adds	r3, #16
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd05 	bl	80031b4 <xTaskRemoveFromEventList>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027b0:	f000 fddc 	bl	800336c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027b4:	7bbb      	ldrb	r3, [r7, #14]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	dce9      	bgt.n	8002798 <prvUnlockQueue+0x60>
 80027c4:	e000      	b.n	80027c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027d0:	f001 fc38 	bl	8004044 <vPortExitCritical>
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027e4:	f001 fbfe 	bl	8003fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e001      	b.n	80027fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027fa:	f001 fc23 	bl	8004044 <vPortExitCritical>

	return xReturn;
 80027fe:	68fb      	ldr	r3, [r7, #12]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002810:	f001 fbe8 	bl	8003fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	429a      	cmp	r2, r3
 800281e:	d102      	bne.n	8002826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002820:	2301      	movs	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e001      	b.n	800282a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800282a:	f001 fc0b 	bl	8004044 <vPortExitCritical>

	return xReturn;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e014      	b.n	8002872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <vQueueAddToRegistry+0x50>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <vQueueAddToRegistry+0x50>)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <vQueueAddToRegistry+0x50>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800286a:	e006      	b.n	800287a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3301      	adds	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b07      	cmp	r3, #7
 8002876:	d9e7      	bls.n	8002848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20004d48 	.word	0x20004d48

0800288c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800289c:	f001 fba2 	bl	8003fe4 <vPortEnterCritical>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d103      	bne.n	80028b6 <vQueueWaitForMessageRestricted+0x2a>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <vQueueWaitForMessageRestricted+0x40>
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028cc:	f001 fbba 	bl	8004044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3324      	adds	r3, #36	; 0x24
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fc3b 	bl	800315c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff26 	bl	8002738 <prvUnlockQueue>
	}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	623b      	str	r3, [r7, #32]
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xTaskCreateStatic+0x46>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	61fb      	str	r3, [r7, #28]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800293a:	235c      	movs	r3, #92	; 0x5c
 800293c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b5c      	cmp	r3, #92	; 0x5c
 8002942:	d00a      	beq.n	800295a <xTaskCreateStatic+0x66>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	61bb      	str	r3, [r7, #24]
}
 8002956:	bf00      	nop
 8002958:	e7fe      	b.n	8002958 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800295a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01e      	beq.n	80029a0 <xTaskCreateStatic+0xac>
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002970:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800297a:	2300      	movs	r3, #0
 800297c:	9303      	str	r3, [sp, #12]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9302      	str	r3, [sp, #8]
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f850 	bl	8002a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800299a:	f000 f8dd 	bl	8002b58 <prvAddNewTaskToReadyList>
 800299e:	e001      	b.n	80029a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029a4:	697b      	ldr	r3, [r7, #20]
	}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3728      	adds	r7, #40	; 0x28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af04      	add	r7, sp, #16
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fc30 	bl	8004228 <pvPortMalloc>
 80029c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029d0:	205c      	movs	r0, #92	; 0x5c
 80029d2:	f001 fc29 	bl	8004228 <pvPortMalloc>
 80029d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
 80029e4:	e005      	b.n	80029f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f001 fcea 	bl	80043c0 <vPortFree>
 80029ec:	e001      	b.n	80029f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d017      	beq.n	8002a28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9303      	str	r3, [sp, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f80e 	bl	8002a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a1c:	69f8      	ldr	r0, [r7, #28]
 8002a1e:	f000 f89b 	bl	8002b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e002      	b.n	8002a2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	21a5      	movs	r1, #165	; 0xa5
 8002a52:	f001 fe05 	bl	8004660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a60:	3b01      	subs	r3, #1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f023 0307 	bic.w	r3, r3, #7
 8002a6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	617b      	str	r3, [r7, #20]
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01f      	beq.n	8002ad6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e012      	b.n	8002ac2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	7819      	ldrb	r1, [r3, #0]
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3334      	adds	r3, #52	; 0x34
 8002aac:	460a      	mov	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d9e9      	bls.n	8002a9c <prvInitialiseNewTask+0x64>
 8002ac8:	e000      	b.n	8002acc <prvInitialiseNewTask+0x94>
			{
				break;
 8002aca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad4:	e003      	b.n	8002ade <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	2b37      	cmp	r3, #55	; 0x37
 8002ae2:	d901      	bls.n	8002ae8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ae4:	2337      	movs	r3, #55	; 0x37
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af6:	2200      	movs	r2, #0
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	3304      	adds	r3, #4
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f978 	bl	8001df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	3318      	adds	r3, #24
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff f973 	bl	8001df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b26:	2200      	movs	r2, #0
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	68f9      	ldr	r1, [r7, #12]
 8002b36:	69b8      	ldr	r0, [r7, #24]
 8002b38:	f001 f928 	bl	8003d8c <pxPortInitialiseStack>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b60:	f001 fa40 	bl	8003fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <prvAddNewTaskToReadyList+0xc4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a2c      	ldr	r2, [pc, #176]	; (8002c1c <prvAddNewTaskToReadyList+0xc4>)
 8002b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <prvAddNewTaskToReadyList+0xc8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <prvAddNewTaskToReadyList+0xc8>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <prvAddNewTaskToReadyList+0xc4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d110      	bne.n	8002ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b84:	f000 fc16 	bl	80033b4 <prvInitialiseTaskLists>
 8002b88:	e00d      	b.n	8002ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b8a:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <prvAddNewTaskToReadyList+0xcc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <prvAddNewTaskToReadyList+0xc8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d802      	bhi.n	8002ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <prvAddNewTaskToReadyList+0xc8>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <prvAddNewTaskToReadyList+0xd0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <prvAddNewTaskToReadyList+0xd0>)
 8002bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <prvAddNewTaskToReadyList+0xd0>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <prvAddNewTaskToReadyList+0xd4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d903      	bls.n	8002bcc <prvAddNewTaskToReadyList+0x74>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <prvAddNewTaskToReadyList+0xd4>)
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <prvAddNewTaskToReadyList+0xd8>)
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7ff f913 	bl	8001e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002be8:	f001 fa2c 	bl	8004044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <prvAddNewTaskToReadyList+0xcc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00e      	beq.n	8002c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvAddNewTaskToReadyList+0xc8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d207      	bcs.n	8002c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <prvAddNewTaskToReadyList+0xdc>)
 8002c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000bbc 	.word	0x20000bbc
 8002c20:	200006e8 	.word	0x200006e8
 8002c24:	20000bc8 	.word	0x20000bc8
 8002c28:	20000bd8 	.word	0x20000bd8
 8002c2c:	20000bc4 	.word	0x20000bc4
 8002c30:	200006ec 	.word	0x200006ec
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d017      	beq.n	8002c7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <vTaskDelay+0x60>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <vTaskDelay+0x30>
	__asm volatile
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60bb      	str	r3, [r7, #8]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c68:	f000 f880 	bl	8002d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fcea 	bl	8003648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c74:	f000 f888 	bl	8002d88 <xTaskResumeAll>
 8002c78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <vTaskDelay+0x64>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000be4 	.word	0x20000be4
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cae:	463a      	mov	r2, r7
 8002cb0:	1d39      	adds	r1, r7, #4
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff f848 	bl	8001d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cbc:	6839      	ldr	r1, [r7, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	9202      	str	r2, [sp, #8]
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	460a      	mov	r2, r1
 8002cce:	4921      	ldr	r1, [pc, #132]	; (8002d54 <vTaskStartScheduler+0xb4>)
 8002cd0:	4821      	ldr	r0, [pc, #132]	; (8002d58 <vTaskStartScheduler+0xb8>)
 8002cd2:	f7ff fe0f 	bl	80028f4 <xTaskCreateStatic>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <vTaskStartScheduler+0xbc>)
 8002cda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <vTaskStartScheduler+0xbc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e001      	b.n	8002cee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d102      	bne.n	8002cfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002cf4:	f000 fcfc 	bl	80036f0 <xTimerCreateTimerTask>
 8002cf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d116      	bne.n	8002d2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	613b      	str	r3, [r7, #16]
}
 8002d12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <vTaskStartScheduler+0xc0>)
 8002d16:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <vTaskStartScheduler+0xc4>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <vTaskStartScheduler+0xc8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d28:	f001 f8ba 	bl	8003ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d2c:	e00e      	b.n	8002d4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d10a      	bne.n	8002d4c <vTaskStartScheduler+0xac>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60fb      	str	r3, [r7, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <vTaskStartScheduler+0xaa>
}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	080046b4 	.word	0x080046b4
 8002d58:	08003385 	.word	0x08003385
 8002d5c:	20000be0 	.word	0x20000be0
 8002d60:	20000bdc 	.word	0x20000bdc
 8002d64:	20000bc8 	.word	0x20000bc8
 8002d68:	20000bc0 	.word	0x20000bc0

08002d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <vTaskSuspendAll+0x18>)
 8002d78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	20000be4 	.word	0x20000be4

08002d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d96:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <xTaskResumeAll+0x118>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	603b      	str	r3, [r7, #0]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002db4:	f001 f916 	bl	8003fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002db8:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <xTaskResumeAll+0x118>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <xTaskResumeAll+0x118>)
 8002dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <xTaskResumeAll+0x118>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d162      	bne.n	8002e90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <xTaskResumeAll+0x11c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d05e      	beq.n	8002e90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd2:	e02f      	b.n	8002e34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <xTaskResumeAll+0x120>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3318      	adds	r3, #24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f871 	bl	8001ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff f86c 	bl	8001ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <xTaskResumeAll+0x124>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d903      	bls.n	8002e04 <xTaskResumeAll+0x7c>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <xTaskResumeAll+0x124>)
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <xTaskResumeAll+0x128>)
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7fe fff7 	bl	8001e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <xTaskResumeAll+0x12c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <xTaskResumeAll+0x130>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <xTaskResumeAll+0x120>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1cb      	bne.n	8002dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e42:	f000 fb55 	bl	80034f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <xTaskResumeAll+0x134>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e52:	f000 f847 	bl	8002ee4 <xTaskIncrementTick>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <xTaskResumeAll+0x130>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f1      	bne.n	8002e52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <xTaskResumeAll+0x134>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <xTaskResumeAll+0x130>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <xTaskResumeAll+0x138>)
 8002e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e90:	f001 f8d8 	bl	8004044 <vPortExitCritical>

	return xAlreadyYielded;
 8002e94:	68bb      	ldr	r3, [r7, #8]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000be4 	.word	0x20000be4
 8002ea4:	20000bbc 	.word	0x20000bbc
 8002ea8:	20000b7c 	.word	0x20000b7c
 8002eac:	20000bc4 	.word	0x20000bc4
 8002eb0:	200006ec 	.word	0x200006ec
 8002eb4:	200006e8 	.word	0x200006e8
 8002eb8:	20000bd0 	.word	0x20000bd0
 8002ebc:	20000bcc 	.word	0x20000bcc
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <xTaskGetTickCount+0x1c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000bc0 	.word	0x20000bc0

08002ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <xTaskIncrementTick+0x148>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 808f 	bne.w	8003016 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f00:	4a4b      	ldr	r2, [pc, #300]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d120      	bne.n	8002f4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f0c:	4b49      	ldr	r3, [pc, #292]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	603b      	str	r3, [r7, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xTaskIncrementTick+0x46>
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3f      	ldr	r2, [pc, #252]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <xTaskIncrementTick+0x158>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a3d      	ldr	r2, [pc, #244]	; (800303c <xTaskIncrementTick+0x158>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	f000 fad1 	bl	80034f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f4e:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d349      	bcc.n	8002fec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	601a      	str	r2, [r3, #0]
					break;
 8002f6a:	e03f      	b.n	8002fec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d203      	bcs.n	8002f8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f84:	4a2e      	ldr	r2, [pc, #184]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f8a:	e02f      	b.n	8002fec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe ff99 	bl	8001ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe ff90 	bl	8001ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <xTaskIncrementTick+0x160>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d903      	bls.n	8002fbc <xTaskIncrementTick+0xd8>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a22      	ldr	r2, [pc, #136]	; (8003044 <xTaskIncrementTick+0x160>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <xTaskIncrementTick+0x164>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7fe ff1b 	bl	8001e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <xTaskIncrementTick+0x168>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3b8      	bcc.n	8002f58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fea:	e7b5      	b.n	8002f58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <xTaskIncrementTick+0x168>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff2:	4915      	ldr	r1, [pc, #84]	; (8003048 <xTaskIncrementTick+0x164>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d901      	bls.n	8003008 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <xTaskIncrementTick+0x16c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e004      	b.n	8003020 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <xTaskIncrementTick+0x170>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <xTaskIncrementTick+0x170>)
 800301e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003020:	697b      	ldr	r3, [r7, #20]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000be4 	.word	0x20000be4
 8003030:	20000bc0 	.word	0x20000bc0
 8003034:	20000b74 	.word	0x20000b74
 8003038:	20000b78 	.word	0x20000b78
 800303c:	20000bd4 	.word	0x20000bd4
 8003040:	20000bdc 	.word	0x20000bdc
 8003044:	20000bc4 	.word	0x20000bc4
 8003048:	200006ec 	.word	0x200006ec
 800304c:	200006e8 	.word	0x200006e8
 8003050:	20000bd0 	.word	0x20000bd0
 8003054:	20000bcc 	.word	0x20000bcc

08003058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305e:	4b28      	ldr	r3, [pc, #160]	; (8003100 <vTaskSwitchContext+0xa8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <vTaskSwitchContext+0xac>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800306c:	e041      	b.n	80030f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800306e:	4b25      	ldr	r3, [pc, #148]	; (8003104 <vTaskSwitchContext+0xac>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <vTaskSwitchContext+0xb0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e010      	b.n	800309e <vTaskSwitchContext+0x46>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <vTaskSwitchContext+0x40>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	607b      	str	r3, [r7, #4]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vTaskSwitchContext+0x3e>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3b01      	subs	r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <vTaskSwitchContext+0xb4>)
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0e4      	beq.n	800307c <vTaskSwitchContext+0x24>
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4a13      	ldr	r2, [pc, #76]	; (800310c <vTaskSwitchContext+0xb4>)
 80030be:	4413      	add	r3, r2
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3308      	adds	r3, #8
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d104      	bne.n	80030e2 <vTaskSwitchContext+0x8a>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a09      	ldr	r2, [pc, #36]	; (8003110 <vTaskSwitchContext+0xb8>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <vTaskSwitchContext+0xb0>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6013      	str	r3, [r2, #0]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000be4 	.word	0x20000be4
 8003104:	20000bd0 	.word	0x20000bd0
 8003108:	20000bc4 	.word	0x20000bc4
 800310c:	200006ec 	.word	0x200006ec
 8003110:	200006e8 	.word	0x200006e8

08003114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	60fb      	str	r3, [r7, #12]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <vTaskPlaceOnEventList+0x44>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3318      	adds	r3, #24
 8003140:	4619      	mov	r1, r3
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe fe87 	bl	8001e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003148:	2101      	movs	r1, #1
 800314a:	6838      	ldr	r0, [r7, #0]
 800314c:	f000 fa7c 	bl	8003648 <prvAddCurrentTaskToDelayedList>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	200006e8 	.word	0x200006e8

0800315c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10a      	bne.n	8003184 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	617b      	str	r3, [r7, #20]
}
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3318      	adds	r3, #24
 800318a:	4619      	mov	r1, r3
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7fe fe3e 	bl	8001e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
 800319c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	68b8      	ldr	r0, [r7, #8]
 80031a2:	f000 fa51 	bl	8003648 <prvAddCurrentTaskToDelayedList>
	}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	200006e8 	.word	0x200006e8

080031b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	60fb      	str	r3, [r7, #12]
}
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3318      	adds	r3, #24
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe fe6f 	bl	8001ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ea:	4b1e      	ldr	r3, [pc, #120]	; (8003264 <xTaskRemoveFromEventList+0xb0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11d      	bne.n	800322e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fe66 	bl	8001ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b19      	ldr	r3, [pc, #100]	; (8003268 <xTaskRemoveFromEventList+0xb4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d903      	bls.n	8003210 <xTaskRemoveFromEventList+0x5c>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <xTaskRemoveFromEventList+0xb4>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <xTaskRemoveFromEventList+0xb8>)
 800321e:	441a      	add	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7fe fdf1 	bl	8001e0e <vListInsertEnd>
 800322c:	e005      	b.n	800323a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	3318      	adds	r3, #24
 8003232:	4619      	mov	r1, r3
 8003234:	480e      	ldr	r0, [pc, #56]	; (8003270 <xTaskRemoveFromEventList+0xbc>)
 8003236:	f7fe fdea 	bl	8001e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <xTaskRemoveFromEventList+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
 8003246:	d905      	bls.n	8003254 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <xTaskRemoveFromEventList+0xc4>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e001      	b.n	8003258 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003258:	697b      	ldr	r3, [r7, #20]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000be4 	.word	0x20000be4
 8003268:	20000bc4 	.word	0x20000bc4
 800326c:	200006ec 	.word	0x200006ec
 8003270:	20000b7c 	.word	0x20000b7c
 8003274:	200006e8 	.word	0x200006e8
 8003278:	20000bd0 	.word	0x20000bd0

0800327c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <vTaskInternalSetTimeOutState+0x24>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <vTaskInternalSetTimeOutState+0x28>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	605a      	str	r2, [r3, #4]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	20000bd4 	.word	0x20000bd4
 80032a4:	20000bc0 	.word	0x20000bc0

080032a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	613b      	str	r3, [r7, #16]
}
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	60fb      	str	r3, [r7, #12]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80032ea:	f000 fe7b 	bl	8003fe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <xTaskCheckForTimeOut+0xbc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d102      	bne.n	800330e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e023      	b.n	8003356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <xTaskCheckForTimeOut+0xc0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d007      	beq.n	800332a <xTaskCheckForTimeOut+0x82>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	e015      	b.n	8003356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	d20b      	bcs.n	800334c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad2      	subs	r2, r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff9b 	bl	800327c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e004      	b.n	8003356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003352:	2301      	movs	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003356:	f000 fe75 	bl	8004044 <vPortExitCritical>

	return xReturn;
 800335a:	69fb      	ldr	r3, [r7, #28]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	20000bc0 	.word	0x20000bc0
 8003368:	20000bd4 	.word	0x20000bd4

0800336c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <vTaskMissedYield+0x14>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000bd0 	.word	0x20000bd0

08003384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800338c:	f000 f852 	bl	8003434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <prvIdleTask+0x28>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d9f9      	bls.n	800338c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <prvIdleTask+0x2c>)
 800339a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033a8:	e7f0      	b.n	800338c <prvIdleTask+0x8>
 80033aa:	bf00      	nop
 80033ac:	200006ec 	.word	0x200006ec
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e00c      	b.n	80033da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <prvInitialiseTaskLists+0x60>)
 80033cc:	4413      	add	r3, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fcf0 	bl	8001db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b37      	cmp	r3, #55	; 0x37
 80033de:	d9ef      	bls.n	80033c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <prvInitialiseTaskLists+0x64>)
 80033e2:	f7fe fce7 	bl	8001db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033e6:	480d      	ldr	r0, [pc, #52]	; (800341c <prvInitialiseTaskLists+0x68>)
 80033e8:	f7fe fce4 	bl	8001db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <prvInitialiseTaskLists+0x6c>)
 80033ee:	f7fe fce1 	bl	8001db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <prvInitialiseTaskLists+0x70>)
 80033f4:	f7fe fcde 	bl	8001db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80033f8:	480b      	ldr	r0, [pc, #44]	; (8003428 <prvInitialiseTaskLists+0x74>)
 80033fa:	f7fe fcdb 	bl	8001db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <prvInitialiseTaskLists+0x78>)
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <prvInitialiseTaskLists+0x64>)
 8003402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <prvInitialiseTaskLists+0x7c>)
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <prvInitialiseTaskLists+0x68>)
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200006ec 	.word	0x200006ec
 8003418:	20000b4c 	.word	0x20000b4c
 800341c:	20000b60 	.word	0x20000b60
 8003420:	20000b7c 	.word	0x20000b7c
 8003424:	20000b90 	.word	0x20000b90
 8003428:	20000ba8 	.word	0x20000ba8
 800342c:	20000b74 	.word	0x20000b74
 8003430:	20000b78 	.word	0x20000b78

08003434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800343a:	e019      	b.n	8003470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800343c:	f000 fdd2 	bl	8003fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <prvCheckTasksWaitingTermination+0x50>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fd3b 	bl	8001ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <prvCheckTasksWaitingTermination+0x54>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3b01      	subs	r3, #1
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <prvCheckTasksWaitingTermination+0x54>)
 800345a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 8003464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003466:	f000 fded 	bl	8004044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f810 	bl	8003490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e1      	bne.n	800343c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000b90 	.word	0x20000b90
 8003488:	20000bbc 	.word	0x20000bbc
 800348c:	20000ba4 	.word	0x20000ba4

08003490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d108      	bne.n	80034b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 ff8a 	bl	80043c0 <vPortFree>
				vPortFree( pxTCB );
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 ff87 	bl	80043c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034b2:	e018      	b.n	80034e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d103      	bne.n	80034c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 ff7e 	bl	80043c0 <vPortFree>
	}
 80034c4:	e00f      	b.n	80034e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d00a      	beq.n	80034e6 <prvDeleteTCB+0x56>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <prvDeleteTCB+0x54>
	}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f6:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <prvResetNextTaskUnblockTime+0x38>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <prvResetNextTaskUnblockTime+0x3c>)
 8003502:	f04f 32ff 	mov.w	r2, #4294967295
 8003506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003508:	e008      	b.n	800351c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <prvResetNextTaskUnblockTime+0x38>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <prvResetNextTaskUnblockTime+0x3c>)
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000b74 	.word	0x20000b74
 800352c:	20000bdc 	.word	0x20000bdc

08003530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <xTaskGetSchedulerState+0x34>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800353e:	2301      	movs	r3, #1
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	e008      	b.n	8003556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <xTaskGetSchedulerState+0x38>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800354c:	2302      	movs	r3, #2
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	e001      	b.n	8003556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003556:	687b      	ldr	r3, [r7, #4]
	}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	20000bc8 	.word	0x20000bc8
 8003568:	20000be4 	.word	0x20000be4

0800356c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d056      	beq.n	8003630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <xTaskPriorityDisinherit+0xd0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	429a      	cmp	r2, r3
 800358a:	d00a      	beq.n	80035a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
}
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60bb      	str	r3, [r7, #8]
}
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d02c      	beq.n	8003630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d128      	bne.n	8003630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fc70 	bl	8001ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <xTaskPriorityDisinherit+0xd4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d903      	bls.n	8003610 <xTaskPriorityDisinherit+0xa4>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <xTaskPriorityDisinherit+0xd4>)
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <xTaskPriorityDisinherit+0xd8>)
 800361e:	441a      	add	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3304      	adds	r3, #4
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7fe fbf1 	bl	8001e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800362c:	2301      	movs	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003630:	697b      	ldr	r3, [r7, #20]
	}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200006e8 	.word	0x200006e8
 8003640:	20000bc4 	.word	0x20000bc4
 8003644:	200006ec 	.word	0x200006ec

08003648 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003658:	4b20      	ldr	r3, [pc, #128]	; (80036dc <prvAddCurrentTaskToDelayedList+0x94>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3304      	adds	r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fc32 	bl	8001ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366a:	d10a      	bne.n	8003682 <prvAddCurrentTaskToDelayedList+0x3a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <prvAddCurrentTaskToDelayedList+0x94>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4819      	ldr	r0, [pc, #100]	; (80036e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800367c:	f7fe fbc7 	bl	8001e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003680:	e026      	b.n	80036d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <prvAddCurrentTaskToDelayedList+0x94>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	429a      	cmp	r2, r3
 8003698:	d209      	bcs.n	80036ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <prvAddCurrentTaskToDelayedList+0x94>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f7fe fbd5 	bl	8001e56 <vListInsert>
}
 80036ac:	e010      	b.n	80036d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <prvAddCurrentTaskToDelayedList+0x94>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7fe fbcb 	bl	8001e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d202      	bcs.n	80036d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000bc0 	.word	0x20000bc0
 80036dc:	200006e8 	.word	0x200006e8
 80036e0:	20000ba8 	.word	0x20000ba8
 80036e4:	20000b78 	.word	0x20000b78
 80036e8:	20000b74 	.word	0x20000b74
 80036ec:	20000bdc 	.word	0x20000bdc

080036f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80036fa:	f000 fb07 	bl	8003d0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <xTimerCreateTimerTask+0x80>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d021      	beq.n	800374a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800370e:	1d3a      	adds	r2, r7, #4
 8003710:	f107 0108 	add.w	r1, r7, #8
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe fb31 	bl	8001d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	9202      	str	r2, [sp, #8]
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	2302      	movs	r3, #2
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	460a      	mov	r2, r1
 8003730:	4910      	ldr	r1, [pc, #64]	; (8003774 <xTimerCreateTimerTask+0x84>)
 8003732:	4811      	ldr	r0, [pc, #68]	; (8003778 <xTimerCreateTimerTask+0x88>)
 8003734:	f7ff f8de 	bl	80028f4 <xTaskCreateStatic>
 8003738:	4603      	mov	r3, r0
 800373a:	4a10      	ldr	r2, [pc, #64]	; (800377c <xTimerCreateTimerTask+0x8c>)
 800373c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <xTimerCreateTimerTask+0x8c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	613b      	str	r3, [r7, #16]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000c18 	.word	0x20000c18
 8003774:	080046bc 	.word	0x080046bc
 8003778:	080038b5 	.word	0x080038b5
 800377c:	20000c1c 	.word	0x20000c1c

08003780 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	623b      	str	r3, [r7, #32]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <xTimerGenericCommand+0x98>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d02a      	beq.n	800380c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	dc18      	bgt.n	80037fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037c8:	f7ff feb2 	bl	8003530 <xTaskGetSchedulerState>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d109      	bne.n	80037e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <xTimerGenericCommand+0x98>)
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	f107 0110 	add.w	r1, r7, #16
 80037da:	2300      	movs	r3, #0
 80037dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037de:	f7fe fca1 	bl	8002124 <xQueueGenericSend>
 80037e2:	6278      	str	r0, [r7, #36]	; 0x24
 80037e4:	e012      	b.n	800380c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <xTimerGenericCommand+0x98>)
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	f107 0110 	add.w	r1, r7, #16
 80037ee:	2300      	movs	r3, #0
 80037f0:	2200      	movs	r2, #0
 80037f2:	f7fe fc97 	bl	8002124 <xQueueGenericSend>
 80037f6:	6278      	str	r0, [r7, #36]	; 0x24
 80037f8:	e008      	b.n	800380c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <xTimerGenericCommand+0x98>)
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	f107 0110 	add.w	r1, r7, #16
 8003802:	2300      	movs	r3, #0
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	f7fe fd8b 	bl	8002320 <xQueueGenericSendFromISR>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000c18 	.word	0x20000c18

0800381c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <prvProcessExpiredTimer+0x94>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3304      	adds	r3, #4
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fb47 	bl	8001ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d022      	beq.n	800388e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	18d1      	adds	r1, r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f000 f8d1 	bl	80039fc <prvInsertTimerInActiveList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01f      	beq.n	80038a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	2100      	movs	r1, #0
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff88 	bl	8003780 <xTimerGenericCommand>
 8003870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d113      	bne.n	80038a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60fb      	str	r3, [r7, #12]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	6978      	ldr	r0, [r7, #20]
 80038a6:	4798      	blx	r3
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000c10 	.word	0x20000c10

080038b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f857 	bl	8003974 <prvGetNextExpireTime>
 80038c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4619      	mov	r1, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f803 	bl	80038d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80038d2:	f000 f8d5 	bl	8003a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038d6:	e7f1      	b.n	80038bc <prvTimerTask+0x8>

080038d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80038e2:	f7ff fa43 	bl	8002d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038e6:	f107 0308 	add.w	r3, r7, #8
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f866 	bl	80039bc <prvSampleTimeNow>
 80038f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d130      	bne.n	800395a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <prvProcessTimerOrBlockTask+0x3c>
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	429a      	cmp	r2, r3
 8003904:	d806      	bhi.n	8003914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003906:	f7ff fa3f 	bl	8002d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff85 	bl	800381c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003912:	e024      	b.n	800395e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <prvProcessTimerOrBlockTask+0x90>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <prvProcessTimerOrBlockTask+0x50>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <prvProcessTimerOrBlockTask+0x52>
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <prvProcessTimerOrBlockTask+0x94>)
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	f7fe ffa7 	bl	800288c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800393e:	f7ff fa23 	bl	8002d88 <xTaskResumeAll>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003948:	4b09      	ldr	r3, [pc, #36]	; (8003970 <prvProcessTimerOrBlockTask+0x98>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy
}
 8003958:	e001      	b.n	800395e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800395a:	f7ff fa15 	bl	8002d88 <xTaskResumeAll>
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000c14 	.word	0x20000c14
 800396c:	20000c18 	.word	0x20000c18
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <prvGetNextExpireTime+0x44>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <prvGetNextExpireTime+0x16>
 8003986:	2201      	movs	r2, #1
 8003988:	e000      	b.n	800398c <prvGetNextExpireTime+0x18>
 800398a:	2200      	movs	r2, #0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003998:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <prvGetNextExpireTime+0x44>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e001      	b.n	80039a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039a8:	68fb      	ldr	r3, [r7, #12]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000c10 	.word	0x20000c10

080039bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039c4:	f7ff fa7e 	bl	8002ec4 <xTaskGetTickCount>
 80039c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <prvSampleTimeNow+0x3c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d205      	bcs.n	80039e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80039d4:	f000 f936 	bl	8003c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e002      	b.n	80039e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80039e6:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <prvSampleTimeNow+0x3c>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80039ec:	68fb      	ldr	r3, [r7, #12]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000c20 	.word	0x20000c20

080039fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d812      	bhi.n	8003a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d302      	bcc.n	8003a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e01b      	b.n	8003a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <prvInsertTimerInActiveList+0x7c>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f7fe fa08 	bl	8001e56 <vListInsert>
 8003a46:	e012      	b.n	8003a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d206      	bcs.n	8003a5e <prvInsertTimerInActiveList+0x62>
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	e007      	b.n	8003a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <prvInsertTimerInActiveList+0x80>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7fe f9f4 	bl	8001e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a6e:	697b      	ldr	r3, [r7, #20]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000c14 	.word	0x20000c14
 8003a7c:	20000c10 	.word	0x20000c10

08003a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a86:	e0ca      	b.n	8003c1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da18      	bge.n	8003ac0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a8e:	1d3b      	adds	r3, r7, #4
 8003a90:	3304      	adds	r3, #4
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	61fb      	str	r3, [r7, #28]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab6:	6850      	ldr	r0, [r2, #4]
 8003ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f2c0 80aa 	blt.w	8003c1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe f9f5 	bl	8001ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ade:	463b      	mov	r3, r7
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff6b 	bl	80039bc <prvSampleTimeNow>
 8003ae6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	f200 8097 	bhi.w	8003c1e <prvProcessReceivedCommands+0x19e>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <prvProcessReceivedCommands+0x78>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b21 	.word	0x08003b21
 8003b00:	08003b21 	.word	0x08003b21
 8003b04:	08003b95 	.word	0x08003b95
 8003b08:	08003ba9 	.word	0x08003ba9
 8003b0c:	08003bf3 	.word	0x08003bf3
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b21 	.word	0x08003b21
 8003b18:	08003b95 	.word	0x08003b95
 8003b1c:	08003ba9 	.word	0x08003ba9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	18d1      	adds	r1, r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b40:	f7ff ff5c 	bl	80039fc <prvInsertTimerInActiveList>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d069      	beq.n	8003c1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05e      	beq.n	8003c1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	441a      	add	r2, r3
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2100      	movs	r1, #0
 8003b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b72:	f7ff fe05 	bl	8003780 <xTimerGenericCommand>
 8003b76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d14f      	bne.n	8003c1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	61bb      	str	r3, [r7, #24]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003ba6:	e03a      	b.n	8003c1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	617b      	str	r3, [r7, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	e7fe      	b.n	8003bdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	18d1      	adds	r1, r2, r3
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bec:	f7ff ff06 	bl	80039fc <prvInsertTimerInActiveList>
					break;
 8003bf0:	e015      	b.n	8003c1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c02:	f000 fbdd 	bl	80043c0 <vPortFree>
 8003c06:	e00a      	b.n	8003c1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c1a:	e000      	b.n	8003c1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003c1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <prvProcessReceivedCommands+0x1c0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	1d39      	adds	r1, r7, #4
 8003c24:	2200      	movs	r2, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fc16 	bl	8002458 <xQueueReceive>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f af2a 	bne.w	8003a88 <prvProcessReceivedCommands+0x8>
	}
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3730      	adds	r7, #48	; 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000c18 	.word	0x20000c18

08003c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c4a:	e048      	b.n	8003cde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c4c:	4b2d      	ldr	r3, [pc, #180]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe f92f 	bl	8001ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d02e      	beq.n	8003cde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d90e      	bls.n	8003cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c9e:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f7fe f8d4 	bl	8001e56 <vListInsert>
 8003cae:	e016      	b.n	8003cde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fd60 	bl	8003780 <xTimerGenericCommand>
 8003cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	603b      	str	r3, [r7, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1b1      	bne.n	8003c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <prvSwitchTimerLists+0xc0>)
 8003cf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <prvSwitchTimerLists+0xc4>)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000c10 	.word	0x20000c10
 8003d08:	20000c14 	.word	0x20000c14

08003d0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d12:	f000 f967 	bl	8003fe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <prvCheckForValidListAndQueue+0x60>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d120      	bne.n	8003d60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d1e:	4814      	ldr	r0, [pc, #80]	; (8003d70 <prvCheckForValidListAndQueue+0x64>)
 8003d20:	f7fe f848 	bl	8001db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d24:	4813      	ldr	r0, [pc, #76]	; (8003d74 <prvCheckForValidListAndQueue+0x68>)
 8003d26:	f7fe f845 	bl	8001db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d2a:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <prvCheckForValidListAndQueue+0x6c>)
 8003d2c:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <prvCheckForValidListAndQueue+0x64>)
 8003d2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <prvCheckForValidListAndQueue+0x70>)
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <prvCheckForValidListAndQueue+0x68>)
 8003d34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d36:	2300      	movs	r3, #0
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <prvCheckForValidListAndQueue+0x74>)
 8003d3c:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <prvCheckForValidListAndQueue+0x78>)
 8003d3e:	2110      	movs	r1, #16
 8003d40:	200a      	movs	r0, #10
 8003d42:	f7fe f953 	bl	8001fec <xQueueGenericCreateStatic>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <prvCheckForValidListAndQueue+0x60>)
 8003d4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <prvCheckForValidListAndQueue+0x60>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <prvCheckForValidListAndQueue+0x60>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	490b      	ldr	r1, [pc, #44]	; (8003d88 <prvCheckForValidListAndQueue+0x7c>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fd6c 	bl	8002838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d60:	f000 f970 	bl	8004044 <vPortExitCritical>
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000c18 	.word	0x20000c18
 8003d70:	20000be8 	.word	0x20000be8
 8003d74:	20000bfc 	.word	0x20000bfc
 8003d78:	20000c10 	.word	0x20000c10
 8003d7c:	20000c14 	.word	0x20000c14
 8003d80:	20000cc4 	.word	0x20000cc4
 8003d84:	20000c24 	.word	0x20000c24
 8003d88:	080046c4 	.word	0x080046c4

08003d8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3b04      	subs	r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b04      	subs	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b04      	subs	r3, #4
 8003dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	; (8003df0 <pxPortInitialiseStack+0x64>)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b14      	subs	r3, #20
 8003dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b04      	subs	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f06f 0202 	mvn.w	r2, #2
 8003dda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b20      	subs	r3, #32
 8003de0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	08003df5 	.word	0x08003df5

08003df4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <prvTaskExitError+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d00a      	beq.n	8003e1e <prvTaskExitError+0x2a>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <prvTaskExitError+0x28>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	60bb      	str	r3, [r7, #8]
}
 8003e30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e32:	bf00      	nop
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0fc      	beq.n	8003e34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	00000000 	.word	0x00000000

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	4770      	bx	lr
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst2>:
 8003e70:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <prvPortStartFirstTask+0x24>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8814 	msr	CONTROL, r0
 8003e8a:	b662      	cpsie	i
 8003e8c:	b661      	cpsie	f
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	df00      	svc	0
 8003e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e9a:	bf00      	nop
 8003e9c:	e000ed08 	.word	0xe000ed08

08003ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <xPortStartScheduler+0x120>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a46      	ldr	r2, [pc, #280]	; (8003fc4 <xPortStartScheduler+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10a      	bne.n	8003ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	613b      	str	r3, [r7, #16]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <xPortStartScheduler+0x120>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3f      	ldr	r2, [pc, #252]	; (8003fc8 <xPortStartScheduler+0x128>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d10a      	bne.n	8003ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	60fb      	str	r3, [r7, #12]
}
 8003ee2:	bf00      	nop
 8003ee4:	e7fe      	b.n	8003ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <xPortStartScheduler+0x12c>)
 8003ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	22ff      	movs	r2, #255	; 0xff
 8003ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <xPortStartScheduler+0x130>)
 8003f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f14:	e009      	b.n	8003f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d0ef      	beq.n	8003f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1c3 0307 	rsb	r3, r3, #7
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00a      	beq.n	8003f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	60bb      	str	r3, [r7, #8]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	; (8003fd4 <xPortStartScheduler+0x134>)
 8003f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <xPortStartScheduler+0x138>)
 8003f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f8e:	f000 f8dd 	bl	800414c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <xPortStartScheduler+0x13c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f98:	f000 f8fc 	bl	8004194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <xPortStartScheduler+0x140>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <xPortStartScheduler+0x140>)
 8003fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fa8:	f7ff ff66 	bl	8003e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fac:	f7ff f854 	bl	8003058 <vTaskSwitchContext>
	prvTaskExitError();
 8003fb0:	f7ff ff20 	bl	8003df4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed00 	.word	0xe000ed00
 8003fc4:	410fc271 	.word	0x410fc271
 8003fc8:	410fc270 	.word	0x410fc270
 8003fcc:	e000e400 	.word	0xe000e400
 8003fd0:	20000d14 	.word	0x20000d14
 8003fd4:	20000d18 	.word	0x20000d18
 8003fd8:	e000ed20 	.word	0xe000ed20
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	e000ef34 	.word	0xe000ef34

08003fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	607b      	str	r3, [r7, #4]
}
 8003ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <vPortEnterCritical+0x58>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <vPortEnterCritical+0x58>)
 8004006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <vPortEnterCritical+0x58>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10f      	bne.n	8004030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortEnterCritical+0x5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <vPortEnterCritical+0x4c>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	603b      	str	r3, [r7, #0]
}
 800402c:	bf00      	nop
 800402e:	e7fe      	b.n	800402e <vPortEnterCritical+0x4a>
	}
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	2000000c 	.word	0x2000000c
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <vPortExitCritical+0x50>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <vPortExitCritical+0x24>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	607b      	str	r3, [r7, #4]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <vPortExitCritical+0x50>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3b01      	subs	r3, #1
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <vPortExitCritical+0x50>)
 8004070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <vPortExitCritical+0x50>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <vPortExitCritical+0x42>
 800407a:	2300      	movs	r3, #0
 800407c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f383 8811 	msr	BASEPRI, r3
}
 8004084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c
	...

080040a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040a0:	f3ef 8009 	mrs	r0, PSP
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <pxCurrentTCBConst>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f01e 0f10 	tst.w	lr, #16
 80040b0:	bf08      	it	eq
 80040b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ba:	6010      	str	r0, [r2, #0]
 80040bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040c4:	f380 8811 	msr	BASEPRI, r0
 80040c8:	f3bf 8f4f 	dsb	sy
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f7fe ffc2 	bl	8003058 <vTaskSwitchContext>
 80040d4:	f04f 0000 	mov.w	r0, #0
 80040d8:	f380 8811 	msr	BASEPRI, r0
 80040dc:	bc09      	pop	{r0, r3}
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	6808      	ldr	r0, [r1, #0]
 80040e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e6:	f01e 0f10 	tst.w	lr, #16
 80040ea:	bf08      	it	eq
 80040ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040f0:	f380 8809 	msr	PSP, r0
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	f3af 8000 	nop.w

08004100 <pxCurrentTCBConst>:
 8004100:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop

08004108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	607b      	str	r3, [r7, #4]
}
 8004120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004122:	f7fe fedf 	bl	8002ee4 <xTaskIncrementTick>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <xPortSysTickHandler+0x40>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f383 8811 	msr	BASEPRI, r3
}
 800413e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <vPortSetupTimerInterrupt+0x34>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <vPortSetupTimerInterrupt+0x38>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <vPortSetupTimerInterrupt+0x3c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0a      	ldr	r2, [pc, #40]	; (800418c <vPortSetupTimerInterrupt+0x40>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	099b      	lsrs	r3, r3, #6
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <vPortSetupTimerInterrupt+0x44>)
 800416a:	3b01      	subs	r3, #1
 800416c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800416e:	4b04      	ldr	r3, [pc, #16]	; (8004180 <vPortSetupTimerInterrupt+0x34>)
 8004170:	2207      	movs	r2, #7
 8004172:	601a      	str	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000e010 	.word	0xe000e010
 8004184:	e000e018 	.word	0xe000e018
 8004188:	20000000 	.word	0x20000000
 800418c:	10624dd3 	.word	0x10624dd3
 8004190:	e000e014 	.word	0xe000e014

08004194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041a4 <vPortEnableVFP+0x10>
 8004198:	6801      	ldr	r1, [r0, #0]
 800419a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800419e:	6001      	str	r1, [r0, #0]
 80041a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041a2:	bf00      	nop
 80041a4:	e000ed88 	.word	0xe000ed88

080041a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041ae:	f3ef 8305 	mrs	r3, IPSR
 80041b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b0f      	cmp	r3, #15
 80041b8:	d914      	bls.n	80041e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <vPortValidateInterruptPriority+0x70>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <vPortValidateInterruptPriority+0x74>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	7afa      	ldrb	r2, [r7, #11]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d20a      	bcs.n	80041e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <vPortValidateInterruptPriority+0x78>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041ec:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <vPortValidateInterruptPriority+0x7c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d90a      	bls.n	800420a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	603b      	str	r3, [r7, #0]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <vPortValidateInterruptPriority+0x60>
	}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e3f0 	.word	0xe000e3f0
 800421c:	20000d14 	.word	0x20000d14
 8004220:	e000ed0c 	.word	0xe000ed0c
 8004224:	20000d18 	.word	0x20000d18

08004228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004234:	f7fe fd9a 	bl	8002d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004238:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <pvPortMalloc+0x180>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004240:	f000 f920 	bl	8004484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <pvPortMalloc+0x184>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	f040 8093 	bne.w	8004378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01d      	beq.n	8004294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004258:	2208      	movs	r2, #8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	d014      	beq.n	8004294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f023 0307 	bic.w	r3, r3, #7
 8004270:	3308      	adds	r3, #8
 8004272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <pvPortMalloc+0x6c>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	617b      	str	r3, [r7, #20]
}
 8004290:	bf00      	nop
 8004292:	e7fe      	b.n	8004292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d06e      	beq.n	8004378 <pvPortMalloc+0x150>
 800429a:	4b45      	ldr	r3, [pc, #276]	; (80043b0 <pvPortMalloc+0x188>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d869      	bhi.n	8004378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <pvPortMalloc+0x18c>)
 80042a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042a8:	4b42      	ldr	r3, [pc, #264]	; (80043b4 <pvPortMalloc+0x18c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ae:	e004      	b.n	80042ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d903      	bls.n	80042cc <pvPortMalloc+0xa4>
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f1      	bne.n	80042b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042cc:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <pvPortMalloc+0x180>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d050      	beq.n	8004378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2208      	movs	r2, #8
 80042dc:	4413      	add	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	2308      	movs	r3, #8
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d91f      	bls.n	8004338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <pvPortMalloc+0xf8>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	613b      	str	r3, [r7, #16]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f000 f908 	bl	8004548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004338:	4b1d      	ldr	r3, [pc, #116]	; (80043b0 <pvPortMalloc+0x188>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <pvPortMalloc+0x188>)
 8004344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004346:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <pvPortMalloc+0x188>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <pvPortMalloc+0x190>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d203      	bcs.n	800435a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <pvPortMalloc+0x188>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <pvPortMalloc+0x190>)
 8004358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <pvPortMalloc+0x184>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	431a      	orrs	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <pvPortMalloc+0x194>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a11      	ldr	r2, [pc, #68]	; (80043bc <pvPortMalloc+0x194>)
 8004376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004378:	f7fe fd06 	bl	8002d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <pvPortMalloc+0x174>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60fb      	str	r3, [r7, #12]
}
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <pvPortMalloc+0x172>
	return pvReturn;
 800439c:	69fb      	ldr	r3, [r7, #28]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	; 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20004924 	.word	0x20004924
 80043ac:	20004938 	.word	0x20004938
 80043b0:	20004928 	.word	0x20004928
 80043b4:	2000491c 	.word	0x2000491c
 80043b8:	2000492c 	.word	0x2000492c
 80043bc:	20004930 	.word	0x20004930

080043c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d04d      	beq.n	800446e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043d2:	2308      	movs	r3, #8
 80043d4:	425b      	negs	r3, r3
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <vPortFree+0xb8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4013      	ands	r3, r2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <vPortFree+0x44>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60fb      	str	r3, [r7, #12]
}
 8004400:	bf00      	nop
 8004402:	e7fe      	b.n	8004402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <vPortFree+0x62>
	__asm volatile
 800440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	60bb      	str	r3, [r7, #8]
}
 800441e:	bf00      	nop
 8004420:	e7fe      	b.n	8004420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <vPortFree+0xb8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01e      	beq.n	800446e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11a      	bne.n	800446e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <vPortFree+0xb8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	43db      	mvns	r3, r3
 8004442:	401a      	ands	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004448:	f7fe fc90 	bl	8002d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <vPortFree+0xbc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4413      	add	r3, r2
 8004456:	4a09      	ldr	r2, [pc, #36]	; (800447c <vPortFree+0xbc>)
 8004458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800445a:	6938      	ldr	r0, [r7, #16]
 800445c:	f000 f874 	bl	8004548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <vPortFree+0xc0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	4a06      	ldr	r2, [pc, #24]	; (8004480 <vPortFree+0xc0>)
 8004468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800446a:	f7fe fc8d 	bl	8002d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20004938 	.word	0x20004938
 800447c:	20004928 	.word	0x20004928
 8004480:	20004934 	.word	0x20004934

08004484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800448a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800448e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <prvHeapInit+0xac>)
 8004492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3307      	adds	r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0307 	bic.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <prvHeapInit+0xac>)
 80044b4:	4413      	add	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044bc:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <prvHeapInit+0xb0>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <prvHeapInit+0xb0>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4413      	add	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044d0:	2208      	movs	r2, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0307 	bic.w	r3, r3, #7
 80044de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a15      	ldr	r2, [pc, #84]	; (8004538 <prvHeapInit+0xb4>)
 80044e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044e6:	4b14      	ldr	r3, [pc, #80]	; (8004538 <prvHeapInit+0xb4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <prvHeapInit+0xb4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <prvHeapInit+0xb4>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <prvHeapInit+0xb8>)
 8004512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <prvHeapInit+0xbc>)
 800451a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <prvHeapInit+0xc0>)
 800451e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004522:	601a      	str	r2, [r3, #0]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000d1c 	.word	0x20000d1c
 8004534:	2000491c 	.word	0x2000491c
 8004538:	20004924 	.word	0x20004924
 800453c:	2000492c 	.word	0x2000492c
 8004540:	20004928 	.word	0x20004928
 8004544:	20004938 	.word	0x20004938

08004548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004550:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <prvInsertBlockIntoFreeList+0xac>)
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	e002      	b.n	800455c <prvInsertBlockIntoFreeList+0x14>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d8f7      	bhi.n	8004556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4413      	add	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d108      	bne.n	800458a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	441a      	add	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d118      	bne.n	80045d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <prvInsertBlockIntoFreeList+0xb0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d00d      	beq.n	80045c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e008      	b.n	80045d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <prvInsertBlockIntoFreeList+0xb0>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e003      	b.n	80045d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d002      	beq.n	80045e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000491c 	.word	0x2000491c
 80045f8:	20004924 	.word	0x20004924

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4d0d      	ldr	r5, [pc, #52]	; (8004634 <__libc_init_array+0x38>)
 8004600:	4c0d      	ldr	r4, [pc, #52]	; (8004638 <__libc_init_array+0x3c>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	2600      	movs	r6, #0
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	4d0b      	ldr	r5, [pc, #44]	; (800463c <__libc_init_array+0x40>)
 800460e:	4c0c      	ldr	r4, [pc, #48]	; (8004640 <__libc_init_array+0x44>)
 8004610:	f000 f82e 	bl	8004670 <_init>
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2600      	movs	r6, #0
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	f855 3b04 	ldr.w	r3, [r5], #4
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	f855 3b04 	ldr.w	r3, [r5], #4
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	08005190 	.word	0x08005190
 8004638:	08005190 	.word	0x08005190
 800463c:	08005190 	.word	0x08005190
 8004640:	08005194 	.word	0x08005194

08004644 <memcpy>:
 8004644:	440a      	add	r2, r1
 8004646:	4291      	cmp	r1, r2
 8004648:	f100 33ff 	add.w	r3, r0, #4294967295
 800464c:	d100      	bne.n	8004650 <memcpy+0xc>
 800464e:	4770      	bx	lr
 8004650:	b510      	push	{r4, lr}
 8004652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800465a:	4291      	cmp	r1, r2
 800465c:	d1f9      	bne.n	8004652 <memcpy+0xe>
 800465e:	bd10      	pop	{r4, pc}

08004660 <memset>:
 8004660:	4402      	add	r2, r0
 8004662:	4603      	mov	r3, r0
 8004664:	4293      	cmp	r3, r2
 8004666:	d100      	bne.n	800466a <memset+0xa>
 8004668:	4770      	bx	lr
 800466a:	f803 1b01 	strb.w	r1, [r3], #1
 800466e:	e7f9      	b.n	8004664 <memset+0x4>

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
