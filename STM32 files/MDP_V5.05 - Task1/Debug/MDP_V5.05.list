
MDP_V5.05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800c434  0800c434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0bc  0800d0bc  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0c4  0800d0c4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c4  0800d0c4  0001d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0c8  0800d0c8  0001d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800d0cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00005188  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005230  20005230  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d7ad  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bd2  00000000  00000000  0003d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  00041458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  00042d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024135  00000000  00000000  00044578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d14c  00000000  00000000  000686ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f20  00000000  00000000  000857f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f719  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007158  00000000  00000000  0015f76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c41c 	.word	0x0800c41c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800c41c 	.word	0x0800c41c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <IMU_Initialise>:
//uint32_t gyroPrev[3];
/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000f6c:	4bad      	ldr	r3, [pc, #692]	; (8001224 <IMU_Initialise+0x2c4>)
 8000f6e:	f107 0418 	add.w	r4, r7, #24
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	7023      	strb	r3, [r4, #0]
 8000f7c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]
	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

*/
	  ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	217f      	movs	r1, #127	; 0x7f
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f9ba 	bl	8001310 <IMU_WriteOneByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fa2:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK ){
 8000fa4:	4ba0      	ldr	r3, [pc, #640]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d007      	beq.n	8000fbc <IMU_Initialise+0x5c>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4a9e      	ldr	r2, [pc, #632]	; (800122c <IMU_Initialise+0x2cc>)
 8000fb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb4:	c303      	stmia	r3!, {r0, r1}
 8000fb6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e19a      	b.n	80012f2 <IMU_Initialise+0x392>
	  	   }

	  //check ID
/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f107 0317 	add.w	r3, r7, #23
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f9c3 	bl	8001350 <IMU_ReadOneByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <IMU_Initialise+0x8a>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <IMU_Initialise+0x2d0>)
 8000fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe2:	c303      	stmia	r3!, {r0, r1}
 8000fe4:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e183      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
	  else{
		  //sprintf(hex, "%x", buf[0]); // change to hexidecimal
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	461a      	mov	r2, r3
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4990      	ldr	r1, [pc, #576]	; (8001234 <IMU_Initialise+0x2d4>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00a fda9 	bl	800bb4c <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000ffa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fdc1 	bl	800bb8c <strcpy>
	      uartbuf[12] = uartbuf[0]-32; // change to upper case
 800100a:	7e3b      	ldrb	r3, [r7, #24]
 800100c:	3b20      	subs	r3, #32
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1]-32;
 8001014:	7e7b      	ldrb	r3, [r7, #25]
 8001016:	3b20      	subs	r3, #32
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 800101e:	230d      	movs	r3, #13
 8001020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8001024:	230a      	movs	r3, #10
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8001030:	230d      	movs	r3, #13
 8001032:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8001034:	230a      	movs	r3, #10
 8001036:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 8001038:	2349      	movs	r3, #73	; 0x49
 800103a:	76bb      	strb	r3, [r7, #26]
	      }


      // for debuggiing - send to uart and return to main to display on OLED and UART
	  HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685c      	ldr	r4, [r3, #4]
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8c3 	bl	80001d0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	f107 0118 	add.w	r1, r7, #24
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	4620      	mov	r0, r4
 8001058:	f006 fd51 	bl	8007afe <HAL_UART_Transmit>
	  //return &buf[0];

	  // Initialize
	  // Bank 0 - Reset the device and then auto selects the best available clock source
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800105c:	2200      	movs	r2, #0
 800105e:	217f      	movs	r1, #127	; 0x7f
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f955 	bl	8001310 <IMU_WriteOneByte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <IMU_Initialise+0x2c8>)
 800106c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800106e:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <IMU_Initialise+0x2c8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <IMU_Initialise+0x126>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4a6f      	ldr	r2, [pc, #444]	; (8001238 <IMU_Initialise+0x2d8>)
 800107c:	ca07      	ldmia	r2, {r0, r1, r2}
 800107e:	c303      	stmia	r3!, {r0, r1}
 8001080:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001082:	2300      	movs	r3, #0
 8001084:	e135      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 8001086:	22f1      	movs	r2, #241	; 0xf1
 8001088:	2106      	movs	r1, #6
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f940 	bl	8001310 <IMU_WriteOneByte>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b64      	ldr	r3, [pc, #400]	; (8001228 <IMU_Initialise+0x2c8>)
 8001096:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <IMU_Initialise+0x2c8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00a      	beq.n	80010b6 <IMU_Initialise+0x156>
	       strcpy((char*)uartbuf, "Error 4a\r\n");
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4a65      	ldr	r2, [pc, #404]	; (800123c <IMU_Initialise+0x2dc>)
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	c303      	stmia	r3!, {r0, r1}
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010b2:	2300      	movs	r3, #0
 80010b4:	e11d      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f003 f968 	bl	800438c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 80010bc:	2201      	movs	r2, #1
 80010be:	2106      	movs	r1, #6
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f925 	bl	8001310 <IMU_WriteOneByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <IMU_Initialise+0x2c8>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010ce:	4b56      	ldr	r3, [pc, #344]	; (8001228 <IMU_Initialise+0x2c8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <IMU_Initialise+0x18c>
	       strcpy((char*)uartbuf, "Error 4b\r\n");
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4a59      	ldr	r2, [pc, #356]	; (8001240 <IMU_Initialise+0x2e0>)
 80010dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010de:	c303      	stmia	r3!, {r0, r1}
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c12      	lsrs	r2, r2, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010e8:	2300      	movs	r3, #0
 80010ea:	e102      	b.n	80012f2 <IMU_Initialise+0x392>
	       }


	  // Turn off and on Accelator and Gyro - page 28
      HAL_Delay(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f003 f94d 	bl	800438c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 80010f2:	223f      	movs	r2, #63	; 0x3f
 80010f4:	2107      	movs	r1, #7
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f90a 	bl	8001310 <IMU_WriteOneByte>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <IMU_Initialise+0x2c8>)
 8001102:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001104:	4b48      	ldr	r3, [pc, #288]	; (8001228 <IMU_Initialise+0x2c8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <IMU_Initialise+0x1c2>
	       strcpy((char*)uartbuf, "Error 5a\r\n");
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <IMU_Initialise+0x2e4>)
 8001112:	ca07      	ldmia	r2, {r0, r1, r2}
 8001114:	c303      	stmia	r3!, {r0, r1}
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 800111e:	2300      	movs	r3, #0
 8001120:	e0e7      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f003 f932 	bl	800438c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 8001128:	2200      	movs	r2, #0
 800112a:	2107      	movs	r1, #7
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f8ef 	bl	8001310 <IMU_WriteOneByte>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <IMU_Initialise+0x2c8>)
 8001138:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <IMU_Initialise+0x2c8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <IMU_Initialise+0x1f8>
	       strcpy((char*)uartbuf, "Error 5b\r\n");
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4a40      	ldr	r2, [pc, #256]	; (8001248 <IMU_Initialise+0x2e8>)
 8001148:	ca07      	ldmia	r2, {r0, r1, r2}
 800114a:	c303      	stmia	r3!, {r0, r1}
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	0c12      	lsrs	r2, r2, #16
 8001152:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001154:	2300      	movs	r3, #0
 8001156:	e0cc      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f8d7 	bl	8001310 <IMU_WriteOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <IMU_Initialise+0x2c8>)
 8001168:	701a      	strb	r2, [r3, #0]


      // Bank 2 - Gyro and Acce and start running
      /* user bank 2 register */
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 800116a:	2220      	movs	r2, #32
 800116c:	217f      	movs	r1, #127	; 0x7f
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f8ce 	bl	8001310 <IMU_WriteOneByte>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <IMU_Initialise+0x2c8>)
 800117a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <IMU_Initialise+0x2c8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <IMU_Initialise+0x234>
	       strcpy((char*)uartbuf, "Error 6\r\n");
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4a30      	ldr	r2, [pc, #192]	; (800124c <IMU_Initialise+0x2ec>)
 800118a:	ca07      	ldmia	r2, {r0, r1, r2}
 800118c:	c303      	stmia	r3!, {r0, r1}
 800118e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001190:	2300      	movs	r3, #0
 8001192:	e0ae      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x04);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 8001194:	2204      	movs	r2, #4
 8001196:	2100      	movs	r1, #0
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f8b9 	bl	8001310 <IMU_WriteOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <IMU_Initialise+0x2c8>)
 80011a4:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <IMU_Initialise+0x2c8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <IMU_Initialise+0x25e>
	       strcpy((char*)uartbuf, "Error 7\r\n");
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <IMU_Initialise+0x2f0>)
 80011b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b6:	c303      	stmia	r3!, {r0, r1}
 80011b8:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011ba:	2300      	movs	r3, #0
 80011bc:	e099      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 80011be:	2233      	movs	r2, #51	; 0x33
 80011c0:	2101      	movs	r1, #1
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f8a4 	bl	8001310 <IMU_WriteOneByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <IMU_Initialise+0x2c8>)
 80011ce:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <IMU_Initialise+0x2c8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <IMU_Initialise+0x288>
	       strcpy((char*)uartbuf, "Error 8\r\n");
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <IMU_Initialise+0x2f4>)
 80011de:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e0:	c303      	stmia	r3!, {r0, r1}
 80011e2:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011e4:	2300      	movs	r3, #0
 80011e6:	e084      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 80011e8:	2207      	movs	r2, #7
 80011ea:	2111      	movs	r1, #17
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f88f 	bl	8001310 <IMU_WriteOneByte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <IMU_Initialise+0x2c8>)
 80011f8:	701a      	strb	r2, [r3, #0]
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2110      	movs	r1, #16
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f886 	bl	8001310 <IMU_WriteOneByte>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <IMU_Initialise+0x2c8>)
 800120a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <IMU_Initialise+0x2c8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <IMU_Initialise+0x2fc>
	       strcpy((char*)uartbuf, "Error 9\r\n");
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <IMU_Initialise+0x2f8>)
 800121a:	ca07      	ldmia	r2, {r0, r1, r2}
 800121c:	c303      	stmia	r3!, {r0, r1}
 800121e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001220:	2300      	movs	r3, #0
 8001222:	e066      	b.n	80012f2 <IMU_Initialise+0x392>
 8001224:	0800c4d4 	.word	0x0800c4d4
 8001228:	200000c4 	.word	0x200000c4
 800122c:	0800c434 	.word	0x0800c434
 8001230:	0800c440 	.word	0x0800c440
 8001234:	0800c44c 	.word	0x0800c44c
 8001238:	0800c450 	.word	0x0800c450
 800123c:	0800c45c 	.word	0x0800c45c
 8001240:	0800c468 	.word	0x0800c468
 8001244:	0800c474 	.word	0x0800c474
 8001248:	0800c480 	.word	0x0800c480
 800124c:	0800c48c 	.word	0x0800c48c
 8001250:	0800c498 	.word	0x0800c498
 8001254:	0800c4a4 	.word	0x0800c4a4
 8001258:	0800c4b0 	.word	0x0800c4b0
	       }

	  // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 800125c:	2231      	movs	r2, #49	; 0x31
 800125e:	2114      	movs	r1, #20
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f855 	bl	8001310 <IMU_WriteOneByte>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <IMU_Initialise+0x39c>)
 800126c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <IMU_Initialise+0x39c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <IMU_Initialise+0x32c>
	       strcpy((char*)uartbuf, "Error 10\r\n");
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <IMU_Initialise+0x3a0>)
 800127c:	ca07      	ldmia	r2, {r0, r1, r2}
 800127e:	c303      	stmia	r3!, {r0, r1}
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	3302      	adds	r3, #2
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001288:	2300      	movs	r3, #0
 800128a:	e032      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

	  IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 800128c:	2200      	movs	r2, #0
 800128e:	2153      	movs	r1, #83	; 0x53
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f83d 	bl	8001310 <IMU_WriteOneByte>



      // back to bank 0
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001296:	2200      	movs	r2, #0
 8001298:	217f      	movs	r1, #127	; 0x7f
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f838 	bl	8001310 <IMU_WriteOneByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <IMU_Initialise+0x39c>)
 80012a6:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <IMU_Initialise+0x39c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <IMU_Initialise+0x366>
	       strcpy((char*)uartbuf, "Error 11\r\n");
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <IMU_Initialise+0x3a4>)
 80012b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b8:	c303      	stmia	r3!, {r0, r1}
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	3302      	adds	r3, #2
 80012be:	0c12      	lsrs	r2, r2, #16
 80012c0:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80012c2:	2300      	movs	r3, #0
 80012c4:	e015      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f003 f860 	bl	800438c <HAL_Delay>

      /* offset */
//      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
      gyroPosOld[0] = 0;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <IMU_Initialise+0x3a8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
      gyroPosOld[1] = 0;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <IMU_Initialise+0x3a8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
      gyroPosOld[2] = 0;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <IMU_Initialise+0x3a8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

      gyroNegOld[0] = 0;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <IMU_Initialise+0x3ac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
	  gyroNegOld[1] = 0;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <IMU_Initialise+0x3ac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
	  gyroNegOld[2] = 0;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <IMU_Initialise+0x3ac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
      // everthing OK
      //strcpy((char*)buf, "Initialize OK\r\n");
      //return &buf;
      return 0; // 0 means 0 error
 80012f0:	2300      	movs	r3, #0

}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000c4 	.word	0x200000c4
 8001300:	0800c4bc 	.word	0x0800c4bc
 8001304:	0800c4c8 	.word	0x0800c4c8
 8001308:	200000cc 	.word	0x200000cc
 800130c:	200000d8 	.word	0x200000d8

08001310 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
 800131c:	4613      	mov	r3, r2
 800131e:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	23d0      	movs	r3, #208	; 0xd0
 800132a:	b299      	uxth	r1, r3
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	b29a      	uxth	r2, r3
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f107 030f 	add.w	r3, r7, #15
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	f004 f887 	bl	8005454 <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	460b      	mov	r3, r1
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	23d0      	movs	r3, #208	; 0xd0
 8001364:	b299      	uxth	r1, r3
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	f004 f965 	bl	8005648 <HAL_I2C_Mem_Read>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <IMU_ReadOneByte+0x44>)
 8001384:	701a      	strb	r2, [r3, #0]
	return ret;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <IMU_ReadOneByte+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000c4 	.word	0x200000c4

08001398 <IMU_GyroReadHeading>:
//int32_t cmpfunc (const void * a, const void * b) {
//   return ( *(int32_t*)a - *(int32_t*)b );
//}

int32_t IMU_GyroReadHeading(ICM20948 *dev)
{   // return the change in value instead of current value
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    uint8_t i, u8Buf[2] = {0}; // reset to zero
 80013a0:	2300      	movs	r3, #0
 80013a2:	81bb      	strh	r3, [r7, #12]
    int32_t gyroRaw = {0};  // reset to zero
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    uint32_t gyroPos, gyroNeg;
    uint32_t valPos, valNeg;
    uint32_t elapsedMs, tick;
    int32_t gyroSum = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	461a      	mov	r2, r3
 80013b2:	2138      	movs	r1, #56	; 0x38
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffcb 	bl	8001350 <IMU_ReadOneByte>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <IMU_GyroReadHeading+0x218>)
 80013c0:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	3301      	adds	r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	2137      	movs	r1, #55	; 0x37
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ffbf 	bl	8001350 <IMU_ReadOneByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <IMU_GyroReadHeading+0x218>)
 80013d8:	701a      	strb	r2, [r3, #0]
    if (prevTick == 0){
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <IMU_GyroReadHeading+0x5a>
    	prevTick = xTaskGetTickCount();
 80013e2:	f008 ffd9 	bl	800a398 <xTaskGetTickCount>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013ec:	601a      	str	r2, [r3, #0]
    	return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e11b      	b.n	800162a <IMU_GyroReadHeading+0x292>
    }
    tick = xTaskGetTickCount();
 80013f2:	f008 ffd1 	bl	800a398 <xTaskGetTickCount>
 80013f6:	4603      	mov	r3, r0
 80013f8:	617b      	str	r3, [r7, #20]
    elapsedMs = tick-prevTick;
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	613b      	str	r3, [r7, #16]
    prevTick = tick;
 8001404:	4a6b      	ldr	r2, [pc, #428]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	6013      	str	r3, [r2, #0]

    gyroRaw = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	021a      	lsls	r2, r3, #8
 800140e:	7b3b      	ldrb	r3, [r7, #12]
 8001410:	4619      	mov	r1, r3
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <IMU_GyroReadHeading+0x220>)
 8001414:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	61fb      	str	r3, [r7, #28]
    if(gyroRaw < 0x8000){
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001424:	da04      	bge.n	8001430 <IMU_GyroReadHeading+0x98>
//    	gyroRaw = gyroRaw*0.01525878906*elapsedMs/10*2.546257;
    	gyroNeg = gyroRaw;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	e006      	b.n	800143e <IMU_GyroReadHeading+0xa6>

    }
    else{
//    	gyroRaw = (65535 - gyroRaw)*0.01525878906*elapsedMs/10*2.546257;
		gyroNeg = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 65535 - gyroRaw;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800143a:	33ff      	adds	r3, #255	; 0xff
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Median Filtering
    gyroNegOld[2] = gyroNegOld[1];
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a5e      	ldr	r2, [pc, #376]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001444:	6093      	str	r3, [r2, #8]
	gyroPosOld[2] = gyroPosOld[1];
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800144c:	6093      	str	r3, [r2, #8]

	gyroNegOld[1] = gyroNegOld[0];
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001454:	6053      	str	r3, [r2, #4]
	gyroPosOld[1] = gyroPosOld[0];
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800145c:	6053      	str	r3, [r2, #4]

	gyroNegOld[0] = gyroNeg;
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001462:	6013      	str	r3, [r2, #0]
	gyroPosOld[0] = gyroPos;
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001468:	6013      	str	r3, [r2, #0]

	if(gyroNegOld[1] <= gyroNegOld[0] && gyroNegOld[1] >= gyroNegOld[2])valNeg = gyroNegOld[1];
 800146a:	4b54      	ldr	r3, [pc, #336]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	dc09      	bgt.n	800148a <IMU_GyroReadHeading+0xf2>
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	429a      	cmp	r2, r3
 8001480:	db03      	blt.n	800148a <IMU_GyroReadHeading+0xf2>
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	e042      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[1] <= gyroNegOld[2] && gyroNegOld[1] >= gyroNegOld[0])valNeg = gyroNegOld[1];
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	dc09      	bgt.n	80014aa <IMU_GyroReadHeading+0x112>
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	db03      	blt.n	80014aa <IMU_GyroReadHeading+0x112>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	e032      	b.n	8001510 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dc09      	bgt.n	80014ca <IMU_GyroReadHeading+0x132>
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	db03      	blt.n	80014ca <IMU_GyroReadHeading+0x132>
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	e022      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dc09      	bgt.n	80014ea <IMU_GyroReadHeading+0x152>
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	db03      	blt.n	80014ea <IMU_GyroReadHeading+0x152>
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	e012      	b.n	8001510 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[2] <= gyroNegOld[0] && gyroNegOld[2] >= gyroNegOld[1])valNeg = gyroNegOld[2];
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dc09      	bgt.n	800150a <IMU_GyroReadHeading+0x172>
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	db03      	blt.n	800150a <IMU_GyroReadHeading+0x172>
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	e002      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else valNeg = gyroNegOld[2];
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	623b      	str	r3, [r7, #32]

	if(gyroPosOld[1] <= gyroPosOld[0] && gyroPosOld[1] >= gyroPosOld[2])valPos = gyroPosOld[1];
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	dc09      	bgt.n	8001530 <IMU_GyroReadHeading+0x198>
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	db03      	blt.n	8001530 <IMU_GyroReadHeading+0x198>
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e04c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[1] <= gyroPosOld[2] && gyroPosOld[1] >= gyroPosOld[0])valPos = gyroPosOld[1];
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	dc09      	bgt.n	8001550 <IMU_GyroReadHeading+0x1b8>
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	db03      	blt.n	8001550 <IMU_GyroReadHeading+0x1b8>
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e03c      	b.n	80015ca <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	dc09      	bgt.n	8001570 <IMU_GyroReadHeading+0x1d8>
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	db03      	blt.n	8001570 <IMU_GyroReadHeading+0x1d8>
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e02c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	dc09      	bgt.n	8001590 <IMU_GyroReadHeading+0x1f8>
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	db03      	blt.n	8001590 <IMU_GyroReadHeading+0x1f8>
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e01c      	b.n	80015ca <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[2] <= gyroPosOld[0] && gyroPosOld[2] >= gyroPosOld[1])valPos = gyroPosOld[2];
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	dc13      	bgt.n	80015c4 <IMU_GyroReadHeading+0x22c>
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db0d      	blt.n	80015c4 <IMU_GyroReadHeading+0x22c>
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
 80015b0:	200000c4 	.word	0x200000c4
 80015b4:	200000c8 	.word	0x200000c8
 80015b8:	200000e4 	.word	0x200000e4
 80015bc:	200000d8 	.word	0x200000d8
 80015c0:	200000cc 	.word	0x200000cc
	else valPos = gyroPosOld[2];
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <IMU_GyroReadHeading+0x29c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
//    			valPos = gyroNegOld - gyroNeg;
//    			valNeg = 0;
//    		}
//    	}
//    }
	dev->gyro[2] = ((double)((int32_t)valPos - (int32_t)valNeg - (int32_t)gyro_offset_f)*0.01525878906f*elapsedMs/1000);
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <IMU_GyroReadHeading+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffa4 	bl	8000524 <__aeabi_i2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <IMU_GyroReadHeading+0x2a4>)
 80015e2:	f7ff f809 	bl	80005f8 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4614      	mov	r4, r2
 80015ec:	461d      	mov	r5, r3
 80015ee:	6938      	ldr	r0, [r7, #16]
 80015f0:	f7fe ff88 	bl	8000504 <__aeabi_ui2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fffc 	bl	80005f8 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <IMU_GyroReadHeading+0x2a8>)
 800160e:	f7ff f91d 	bl	800084c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff facf 	bl	8000bbc <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	61da      	str	r2, [r3, #28]
//		heading_f = heading_f - 360;
//	}
//	while(heading_f < 0){
//		heading_f = heading_f + 360;
//	}
	return (int32_t)valPos - (int32_t)valNeg;
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	1ad3      	subs	r3, r2, r3
//    if(heading >= 122850) heading = heading - 122850;
//
////    heading %= 360;
//	return heading*0.29304029304;

}
 800162a:	4618      	mov	r0, r3
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bdb0      	pop	{r4, r5, r7, pc}
 8001632:	bf00      	nop
 8001634:	200000cc 	.word	0x200000cc
 8001638:	200000ec 	.word	0x200000ec
 800163c:	3f8f4000 	.word	0x3f8f4000
 8001640:	408f4000 	.word	0x408f4000

08001644 <Gyro_calibrateHeading>:

void Gyro_calibrateHeading(ICM20948 *dev, double ticks)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	ed87 0b00 	vstr	d0, [r7]
    int32_t offset_local = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
    int16_t i;
    for (i=0; i< 512; i++){
 8001654:	2300      	movs	r3, #0
 8001656:	827b      	strh	r3, [r7, #18]
 8001658:	e00c      	b.n	8001674 <Gyro_calibrateHeading+0x30>
		IMU_GyroReadHeading(dev);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fe9c 	bl	8001398 <IMU_GyroReadHeading>
		osDelayUntil(ticks); // wait for 10msec
 8001660:	ed97 0b00 	vldr	d0, [r7]
 8001664:	f007 fd31 	bl	80090ca <osDelayUntil>
    for (i=0; i< 512; i++){
 8001668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800166c:	b29b      	uxth	r3, r3
 800166e:	3301      	adds	r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	827b      	strh	r3, [r7, #18]
 8001674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167c:	dbed      	blt.n	800165a <Gyro_calibrateHeading+0x16>
	}

    for (i=0; i< 2048; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	827b      	strh	r3, [r7, #18]
 8001682:	e010      	b.n	80016a6 <Gyro_calibrateHeading+0x62>
    	offset_local = offset_local + IMU_GyroReadHeading(dev);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe87 	bl	8001398 <IMU_GyroReadHeading>
 800168a:	4602      	mov	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
//		offset_local = offset_local + (double)dev->gyro[2]/64.0;
    	osDelayUntil(ticks); // wait for 10msec
 8001692:	ed97 0b00 	vldr	d0, [r7]
 8001696:	f007 fd18 	bl	80090ca <osDelayUntil>
    for (i=0; i< 2048; i++){
 800169a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	827b      	strh	r3, [r7, #18]
 80016a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ae:	dbe9      	blt.n	8001684 <Gyro_calibrateHeading+0x40>
    }

    gyro_offset_f = offset_local>>11;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	12db      	asrs	r3, r3, #11
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <Gyro_calibrateHeading+0x7c>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000ec 	.word	0x200000ec

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c8:	f002 fdee 	bl	80042a8 <HAL_Init>

  /* USER CODE BEGIN Init */

  Buffer[0] = 'd';
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0xb8>)
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	701a      	strb	r2, [r3, #0]
  Buffer[1] = 'W';
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <main+0xb8>)
 80016d4:	2257      	movs	r2, #87	; 0x57
 80016d6:	705a      	strb	r2, [r3, #1]
  Buffer[2] = '0';
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <main+0xb8>)
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	709a      	strb	r2, [r3, #2]
  Buffer[3] = '9';
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <main+0xb8>)
 80016e0:	2239      	movs	r2, #57	; 0x39
 80016e2:	70da      	strb	r2, [r3, #3]
  Buffer[4] = '0';
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <main+0xb8>)
 80016e6:	2230      	movs	r2, #48	; 0x30
 80016e8:	711a      	strb	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ea:	f000 f865 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ee:	f000 fb27 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f2:	f000 fb05 	bl	8001d00 <MX_DMA_Init>
  MX_TIM8_Init();
 80016f6:	f000 fa2f 	bl	8001b58 <MX_TIM8_Init>
  MX_TIM2_Init();
 80016fa:	f000 f985 	bl	8001a08 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016fe:	f000 f8e7 	bl	80018d0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001702:	f000 fad3 	bl	8001cac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001706:	f000 f9d3 	bl	8001ab0 <MX_TIM3_Init>
  MX_I2C1_Init();
 800170a:	f000 f8b3 	bl	8001874 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800170e:	f001 ff65 	bl	80035dc <OLED_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <main+0xbc>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <main+0xbc>)
 8001718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <main+0xc0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <main+0xc0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <main+0xc0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001730:	f007 fbd4 	bl	8008edc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <main+0xc4>)
 8001736:	2100      	movs	r1, #0
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <main+0xc8>)
 800173a:	f007 fc19 	bl	8008f70 <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <main+0xcc>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <main+0xd0>)
 8001746:	2100      	movs	r1, #0
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <main+0xd4>)
 800174a:	f007 fc11 	bl	8008f70 <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <main+0xd8>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of Motor_L */
  Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <main+0xdc>)
 8001756:	2100      	movs	r1, #0
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <main+0xe0>)
 800175a:	f007 fc09 	bl	8008f70 <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <main+0xe4>)
 8001762:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(GyroFunc, NULL, &GyroTask_attributes);
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <main+0xe8>)
 8001766:	2100      	movs	r1, #0
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <main+0xec>)
 800176a:	f007 fc01 	bl	8008f70 <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <main+0xf0>)
 8001772:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001774:	f007 fbd6 	bl	8008f24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001778:	e7fe      	b.n	8001778 <main+0xb4>
 800177a:	bf00      	nop
 800177c:	20000318 	.word	0x20000318
 8001780:	e000edf0 	.word	0xe000edf0
 8001784:	e0001000 	.word	0xe0001000
 8001788:	0800c574 	.word	0x0800c574
 800178c:	08001e65 	.word	0x08001e65
 8001790:	20000308 	.word	0x20000308
 8001794:	0800c598 	.word	0x0800c598
 8001798:	08001ea9 	.word	0x08001ea9
 800179c:	2000030c 	.word	0x2000030c
 80017a0:	0800c5bc 	.word	0x0800c5bc
 80017a4:	08001ef9 	.word	0x08001ef9
 80017a8:	20000310 	.word	0x20000310
 80017ac:	0800c5e0 	.word	0x0800c5e0
 80017b0:	08003029 	.word	0x08003029
 80017b4:	20000314 	.word	0x20000314

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00a f9b8 	bl	800bb3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <SystemClock_Config+0xb4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <SystemClock_Config+0xb4>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <SystemClock_Config+0xb4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <SystemClock_Config+0xb8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <SystemClock_Config+0xb8>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <SystemClock_Config+0xb8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fcb7 	bl	800619c <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001834:	f001 fd26 	bl	8003284 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f004 ff1a 	bl	800668c <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800185e:	f001 fd11 	bl	8003284 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C1_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_I2C1_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_I2C1_Init+0x58>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018b2:	f003 fc8b 	bl	80051cc <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f001 fce2 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000f0 	.word	0x200000f0
 80018c8:	40005400 	.word	0x40005400
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b096      	sub	sp, #88	; 0x58
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2220      	movs	r2, #32
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00a f917 	bl	800bb3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x134>)
 8001912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001916:	22a0      	movs	r2, #160	; 0xa0
 8001918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <MX_TIM1_Init+0x130>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <MX_TIM1_Init+0x130>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800193a:	4831      	ldr	r0, [pc, #196]	; (8001a00 <MX_TIM1_Init+0x130>)
 800193c:	f005 f886 	bl	8006a4c <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001946:	f001 fc9d 	bl	8003284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001954:	4619      	mov	r1, r3
 8001956:	482a      	ldr	r0, [pc, #168]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001958:	f005 fbde 	bl	8007118 <HAL_TIM_ConfigClockSource>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001962:	f001 fc8f 	bl	8003284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001968:	f005 f8bf 	bl	8006aea <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001972:	f001 fc87 	bl	8003284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	4619      	mov	r1, r3
 8001984:	481e      	ldr	r0, [pc, #120]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001986:	f005 ff9f 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001990:	f001 fc78 	bl	8003284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	220c      	movs	r2, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4812      	ldr	r0, [pc, #72]	; (8001a00 <MX_TIM1_Init+0x130>)
 80019b6:	f005 faed 	bl	8006f94 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80019c0:	f001 fc60 	bl	8003284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <MX_TIM1_Init+0x130>)
 80019e8:	f005 ffea 	bl	80079c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80019f2:	f001 fc47 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000144 	.word	0x20000144
 8001a04:	40010000 	.word	0x40010000

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f00a f890 	bl	800bb3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a78:	f005 f958 	bl	8006d2c <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a82:	f001 fbff 	bl	8003284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a94:	f005 ff18 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a9e:	f001 fbf1 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000018c 	.word	0x2000018c

08001ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a f83c 	bl	800bb3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <MX_TIM3_Init+0xa4>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af2:	2303      	movs	r3, #3
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b02:	230a      	movs	r3, #10
 8001b04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b12:	230a      	movs	r3, #10
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001b1e:	f005 f905 	bl	8006d2c <HAL_TIM_Encoder_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b28:	f001 fbac 	bl	8003284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001b3a:	f005 fec5 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b44:	f001 fb9e 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200001d4 	.word	0x200001d4
 8001b54:	40000400 	.word	0x40000400

08001b58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b096      	sub	sp, #88	; 0x58
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f009 ffd3 	bl	800bb3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <MX_TIM8_Init+0x150>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001baa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001bae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bc4:	f004 ff42 	bl	8006a4c <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001bce:	f001 fb59 	bl	8003284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4831      	ldr	r0, [pc, #196]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001be0:	f005 fa9a 	bl	8007118 <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bea:	f001 fb4b 	bl	8003284 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bee:	482d      	ldr	r0, [pc, #180]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bf0:	f004 ff7b 	bl	8006aea <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bfa:	f001 fb43 	bl	8003284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4825      	ldr	r0, [pc, #148]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c0e:	f005 fe5b 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001c18:	f001 fb34 	bl	8003284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c42:	f005 f9a7 	bl	8006f94 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c4c:	f001 fb1a 	bl	8003284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	2204      	movs	r2, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c5a:	f005 f99b 	bl	8006f94 <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c64:	f001 fb0e 	bl	8003284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c8c:	f005 fe98 	bl	80079c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c96:	f001 faf5 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3758      	adds	r7, #88	; 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000021c 	.word	0x2000021c
 8001ca8:	40010400 	.word	0x40010400

08001cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART3_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001ce4:	f005 febe 	bl	8007a64 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f001 fac9 	bl	8003284 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000264 	.word	0x20000264
 8001cfc:	40004800 	.word	0x40004800

08001d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	200c      	movs	r0, #12
 8001d28:	f002 fc2f 	bl	800458a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d2c:	200c      	movs	r0, #12
 8001d2e:	f002 fc48 	bl	80045c2 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001de8:	481b      	ldr	r0, [pc, #108]	; (8001e58 <MX_GPIO_Init+0x118>)
 8001dea:	f003 f9bb 	bl	8005164 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	213c      	movs	r1, #60	; 0x3c
 8001df2:	481a      	ldr	r0, [pc, #104]	; (8001e5c <MX_GPIO_Init+0x11c>)
 8001df4:	f003 f9b6 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001df8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001dfc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4811      	ldr	r0, [pc, #68]	; (8001e58 <MX_GPIO_Init+0x118>)
 8001e12:	f002 fff3 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001e16:	233c      	movs	r3, #60	; 0x3c
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x11c>)
 8001e2e:	f002 ffe5 	bl	8004dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_GPIO_Init+0x120>)
 8001e48:	f002 ffd8 	bl	8004dfc <HAL_GPIO_Init>

}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//  HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
  for(;;)
  {

	sprintf(hello, "buff:%s", Buffer);
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <StartDefaultTask+0x38>)
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <StartDefaultTask+0x3c>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f009 fe69 	bl	800bb4c <siprintf>
	OLED_ShowString(10,20,hello);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2114      	movs	r1, #20
 8001e82:	200a      	movs	r0, #10
 8001e84:	f001 fb78 	bl	8003578 <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <StartDefaultTask+0x40>)
 8001e8e:	f003 f982 	bl	8005196 <HAL_GPIO_TogglePin>
    osDelay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f007 f8fe 	bl	8009094 <osDelay>
	sprintf(hello, "buff:%s", Buffer);
 8001e98:	e7e8      	b.n	8001e6c <StartDefaultTask+0x8>
 8001e9a:	bf00      	nop
 8001e9c:	20000318 	.word	0x20000318
 8001ea0:	0800c514 	.word	0x0800c514
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "testV5!\0";
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <Display+0x48>)
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb8:	c303      	stmia	r3!, {r0, r1}
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	f107 0315 	add.w	r3, r7, #21
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	f8c3 2007 	str.w	r2, [r3, #7]
  /* Infinite loop */
  for(;;)
  {
	sprintf(hello, "MDP =_V5.05");
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <Display+0x4c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f009 fe3b 	bl	800bb4c <siprintf>
	OLED_ShowString(10,10,hello);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	461a      	mov	r2, r3
 8001edc:	210a      	movs	r1, #10
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f001 fb4a 	bl	8003578 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001ee4:	f001 fa1e 	bl	8003324 <OLED_Refresh_Gram>
    osDelay(1);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f007 f8d3 	bl	8009094 <osDelay>
	sprintf(hello, "MDP =_V5.05");
 8001eee:	e7ec      	b.n	8001eca <Display+0x22>
 8001ef0:	0800c528 	.word	0x0800c528
 8001ef4:	0800c51c 	.word	0x0800c51c

08001ef8 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 8001ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	ed2d 8b02 	vpush	{d8}
 8001f00:	b09f      	sub	sp, #124	; 0x7c
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	489d      	ldr	r0, [pc, #628]	; (8002180 <LeftMotor+0x288>)
 8001f0a:	f004 fe47 	bl	8006b9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001f0e:	2104      	movs	r1, #4
 8001f10:	489b      	ldr	r0, [pc, #620]	; (8002180 <LeftMotor+0x288>)
 8001f12:	f004 fe43 	bl	8006b9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001f16:	210c      	movs	r1, #12
 8001f18:	489a      	ldr	r0, [pc, #616]	; (8002184 <LeftMotor+0x28c>)
 8001f1a:	f004 fe3f 	bl	8006b9c <HAL_TIM_PWM_Start>


  int16_t value;


  while(!is_calibrated){
 8001f1e:	e002      	b.n	8001f26 <LeftMotor+0x2e>
	  osDelay(100);
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f007 f8b7 	bl	8009094 <osDelay>
  while(!is_calibrated){
 8001f26:	4b98      	ldr	r3, [pc, #608]	; (8002188 <LeftMotor+0x290>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f8      	beq.n	8001f20 <LeftMotor+0x28>
  }
  htim1.Instance ->CCR4 = 148.4;
 8001f2e:	4b95      	ldr	r3, [pc, #596]	; (8002184 <LeftMotor+0x28c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2294      	movs	r2, #148	; 0x94
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40




  double target_angle = 90;
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b94      	ldr	r3, [pc, #592]	; (800218c <LeftMotor+0x294>)
 8001f3c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  uint8_t target_is_before = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  double left_pwm = 0, right_pwm = 0;
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double PID_dist;

  double target_dist = 0;
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double slip_x = 0, slip_y = 0;
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  char sbuf[10];
  t_heading = current_angle;
 8001f82:	4b83      	ldr	r3, [pc, #524]	; (8002190 <LeftMotor+0x298>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe fdce 	bl	8000b2c <__aeabi_d2iz>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4a80      	ldr	r2, [pc, #512]	; (8002194 <LeftMotor+0x29c>)
 8001f94:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA (&huart3, Buffer, 5);
 8001f96:	2205      	movs	r2, #5
 8001f98:	497f      	ldr	r1, [pc, #508]	; (8002198 <LeftMotor+0x2a0>)
 8001f9a:	4880      	ldr	r0, [pc, #512]	; (800219c <LeftMotor+0x2a4>)
 8001f9c:	f005 fe41 	bl	8007c22 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;){
	  // Loop until next command is received
	  do{
		  osDelay(100);
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f007 f877 	bl	8009094 <osDelay>
	  }while(Buffer[0] == 'd');
 8001fa6:	4b7c      	ldr	r3, [pc, #496]	; (8002198 <LeftMotor+0x2a0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d0f8      	beq.n	8001fa0 <LeftMotor+0xa8>
	  // Convert instruction value to int
	  value = (Buffer[2] - '0')*100 + (Buffer[3] - '0')*10 + Buffer[4] - '0';
 8001fae:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <LeftMotor+0x2a0>)
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	3b30      	subs	r3, #48	; 0x30
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	0091      	lsls	r1, r2, #2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <LeftMotor+0x2a0>)
 8001fcc:	78db      	ldrb	r3, [r3, #3]
 8001fce:	3b30      	subs	r3, #48	; 0x30
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	0089      	lsls	r1, r1, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <LeftMotor+0x2a0>)
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b30      	subs	r3, #48	; 0x30
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//	  dist = value;

	  // For counter-clockwise turning
	  if((Buffer[0]=='F' && Buffer[1]=='L')||(Buffer[0]=='B' && Buffer[1]=='R')){
 8001ff2:	4b69      	ldr	r3, [pc, #420]	; (8002198 <LeftMotor+0x2a0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b46      	cmp	r3, #70	; 0x46
 8001ff8:	d103      	bne.n	8002002 <LeftMotor+0x10a>
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <LeftMotor+0x2a0>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	2b4c      	cmp	r3, #76	; 0x4c
 8002000:	d007      	beq.n	8002012 <LeftMotor+0x11a>
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <LeftMotor+0x2a0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b42      	cmp	r3, #66	; 0x42
 8002008:	d117      	bne.n	800203a <LeftMotor+0x142>
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <LeftMotor+0x2a0>)
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	2b52      	cmp	r3, #82	; 0x52
 8002010:	d113      	bne.n	800203a <LeftMotor+0x142>
		  t_heading = t_heading - value;	// Set target heading
 8002012:	4b60      	ldr	r3, [pc, #384]	; (8002194 <LeftMotor+0x29c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	4a5d      	ldr	r2, [pc, #372]	; (8002194 <LeftMotor+0x29c>)
 800201e:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <LeftMotor+0x29c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fa7d 	bl	8000524 <__aeabi_i2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  target_is_before = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002038:	e030      	b.n	800209c <LeftMotor+0x1a4>
	  }
	  // For clockwise turning
	  else if ((Buffer[0]=='F' && Buffer[1]=='R')||(Buffer[0]=='B' && Buffer[1]=='L')){
 800203a:	4b57      	ldr	r3, [pc, #348]	; (8002198 <LeftMotor+0x2a0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b46      	cmp	r3, #70	; 0x46
 8002040:	d103      	bne.n	800204a <LeftMotor+0x152>
 8002042:	4b55      	ldr	r3, [pc, #340]	; (8002198 <LeftMotor+0x2a0>)
 8002044:	785b      	ldrb	r3, [r3, #1]
 8002046:	2b52      	cmp	r3, #82	; 0x52
 8002048:	d007      	beq.n	800205a <LeftMotor+0x162>
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <LeftMotor+0x2a0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b42      	cmp	r3, #66	; 0x42
 8002050:	d117      	bne.n	8002082 <LeftMotor+0x18a>
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <LeftMotor+0x2a0>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	2b4c      	cmp	r3, #76	; 0x4c
 8002058:	d113      	bne.n	8002082 <LeftMotor+0x18a>
		  t_heading = t_heading + value;
 800205a:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 800205e:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <LeftMotor+0x29c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a4b      	ldr	r2, [pc, #300]	; (8002194 <LeftMotor+0x29c>)
 8002066:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 8002068:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <LeftMotor+0x29c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa59 	bl	8000524 <__aeabi_i2d>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  target_is_before = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002080:	e00c      	b.n	800209c <LeftMotor+0x1a4>
	  }
	  else if(Buffer[1] == 'W'){
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <LeftMotor+0x2a0>)
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b57      	cmp	r3, #87	; 0x57
 8002088:	d108      	bne.n	800209c <LeftMotor+0x1a4>
		  target_angle = (double)t_heading;
 800208a:	4b42      	ldr	r3, [pc, #264]	; (8002194 <LeftMotor+0x29c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa48 	bl	8000524 <__aeabi_i2d>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  }

	  // Set servo values
	  if(Buffer[1] == 'L'){
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <LeftMotor+0x2a0>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b4c      	cmp	r3, #76	; 0x4c
 80020a2:	d104      	bne.n	80020ae <LeftMotor+0x1b6>
		  htim1.Instance ->CCR4 = 91;
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <LeftMotor+0x28c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	225b      	movs	r2, #91	; 0x5b
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
 80020ac:	e00c      	b.n	80020c8 <LeftMotor+0x1d0>
	  }
	  else if(Buffer[1] == 'R'){
 80020ae:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <LeftMotor+0x2a0>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b52      	cmp	r3, #82	; 0x52
 80020b4:	d104      	bne.n	80020c0 <LeftMotor+0x1c8>
		  htim1.Instance ->CCR4 = 240;
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <LeftMotor+0x28c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	22f0      	movs	r2, #240	; 0xf0
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
 80020be:	e003      	b.n	80020c8 <LeftMotor+0x1d0>
	  }
	  else{
		  htim1.Instance ->CCR4 = 148.4;
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <LeftMotor+0x28c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2294      	movs	r2, #148	; 0x94
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  // Wait for servo to turn
	  osDelay(550);
 80020c8:	f240 2026 	movw	r0, #550	; 0x226
 80020cc:	f006 ffe2 	bl	8009094 <osDelay>
	  // If currently running turning instruction
	  if(Buffer[1] != 'W'){
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <LeftMotor+0x2a0>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b57      	cmp	r3, #87	; 0x57
 80020d6:	f000 8400 	beq.w	80028da <LeftMotor+0x9e2>
		  PID_out = 0;
 80020da:	4931      	ldr	r1, [pc, #196]	; (80021a0 <LeftMotor+0x2a8>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]
		  // Set PID Controller (constants are Kp,Ki,Kd)
		  PID(&Turning_PID, &current_angle, &PID_out, &target_angle, 0.021, 0.1, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80020e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ec:	2200      	movs	r2, #0
 80020ee:	9201      	str	r2, [sp, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	9200      	str	r2, [sp, #0]
 80020f4:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8002168 <LeftMotor+0x270>
 80020f8:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002170 <LeftMotor+0x278>
 80020fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002178 <LeftMotor+0x280>
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <LeftMotor+0x2a8>)
 8002102:	4923      	ldr	r1, [pc, #140]	; (8002190 <LeftMotor+0x298>)
 8002104:	4827      	ldr	r0, [pc, #156]	; (80021a4 <LeftMotor+0x2ac>)
 8002106:	f001 fb2f 	bl	8003768 <PID>

		  PID_SetMode(&Turning_PID, _PID_MODE_AUTOMATIC);
 800210a:	2101      	movs	r1, #1
 800210c:	4825      	ldr	r0, [pc, #148]	; (80021a4 <LeftMotor+0x2ac>)
 800210e:	f001 fc61 	bl	80039d4 <PID_SetMode>
		  PID_SetSampleTime(&Turning_PID, 10);
 8002112:	210a      	movs	r1, #10
 8002114:	4823      	ldr	r0, [pc, #140]	; (80021a4 <LeftMotor+0x2ac>)
 8002116:	f001 fdd1 	bl	8003cbc <PID_SetSampleTime>
		  PID_SetOutputLimits(&Turning_PID, -1.0f+min_pwm_turn, 1.0f-min_pwm_turn);
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <LeftMotor+0x2b0>)
 800211c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <LeftMotor+0x2b4>)
 8002126:	f7fe f8af 	bl	8000288 <__aeabi_dsub>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	ec43 2b18 	vmov	d8, r2, r3
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <LeftMotor+0x2b0>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f04f 0000 	mov.w	r0, #0
 800213c:	491b      	ldr	r1, [pc, #108]	; (80021ac <LeftMotor+0x2b4>)
 800213e:	f7fe f8a3 	bl	8000288 <__aeabi_dsub>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	ec43 2b17 	vmov	d7, r2, r3
 800214a:	eeb0 1a47 	vmov.f32	s2, s14
 800214e:	eef0 1a67 	vmov.f32	s3, s15
 8002152:	eeb0 0a48 	vmov.f32	s0, s16
 8002156:	eef0 0a68 	vmov.f32	s1, s17
 800215a:	4812      	ldr	r0, [pc, #72]	; (80021a4 <LeftMotor+0x2ac>)
 800215c:	f001 fc58 	bl	8003a10 <PID_SetOutputLimits>
	  //	  sprintf(sbuf, "%d", (int)(-1.0f*(double)target_is_before)*(target_angle - current_angle));
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, sizeof(sbuf), HAL_MAX_DELAY);
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

		  // Loop until robot's heading passes target heading
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 8002160:	e37b      	b.n	800285a <LeftMotor+0x962>
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
	...
 8002170:	9999999a 	.word	0x9999999a
 8002174:	3fb99999 	.word	0x3fb99999
 8002178:	24dd2f1b 	.word	0x24dd2f1b
 800217c:	3f958106 	.word	0x3f958106
 8002180:	2000021c 	.word	0x2000021c
 8002184:	20000144 	.word	0x20000144
 8002188:	20000338 	.word	0x20000338
 800218c:	40568000 	.word	0x40568000
 8002190:	20000328 	.word	0x20000328
 8002194:	20000320 	.word	0x20000320
 8002198:	20000318 	.word	0x20000318
 800219c:	20000264 	.word	0x20000264
 80021a0:	200004c0 	.word	0x200004c0
 80021a4:	20000370 	.word	0x20000370
 80021a8:	20000020 	.word	0x20000020
 80021ac:	3ff00000 	.word	0x3ff00000
			  // Blinking LED for checking program crashes
			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80021b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b4:	48a6      	ldr	r0, [pc, #664]	; (8002450 <LeftMotor+0x558>)
 80021b6:	f002 ffee 	bl	8005196 <HAL_GPIO_TogglePin>

			  // Compute next pwm val
			  PID_Compute(&Turning_PID);
 80021ba:	48a6      	ldr	r0, [pc, #664]	; (8002454 <LeftMotor+0x55c>)
 80021bc:	f001 fb20 	bl	8003800 <PID_Compute>

			  taskENTER_CRITICAL();
 80021c0:	f009 f978 	bl	800b4b4 <vPortEnterCritical>
			  // If steering left
			  if(Buffer[1] == 'L')
 80021c4:	4ba4      	ldr	r3, [pc, #656]	; (8002458 <LeftMotor+0x560>)
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b4c      	cmp	r3, #76	; 0x4c
 80021ca:	f040 819f 	bne.w	800250c <LeftMotor+0x614>
			  {
				  // Forward
				  if(PID_out < 0){
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <LeftMotor+0x564>)
 80021d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	f7fe fc7e 	bl	8000adc <__aeabi_dcmplt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80bd 	beq.w	8002362 <LeftMotor+0x46a>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2104      	movs	r1, #4
 80021ec:	489c      	ldr	r0, [pc, #624]	; (8002460 <LeftMotor+0x568>)
 80021ee:	f002 ffb9 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2108      	movs	r1, #8
 80021f6:	489a      	ldr	r0, [pc, #616]	; (8002460 <LeftMotor+0x568>)
 80021f8:	f002 ffb4 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2120      	movs	r1, #32
 8002200:	4897      	ldr	r0, [pc, #604]	; (8002460 <LeftMotor+0x568>)
 8002202:	f002 ffaf 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2110      	movs	r1, #16
 800220a:	4895      	ldr	r0, [pc, #596]	; (8002460 <LeftMotor+0x568>)
 800220c:	f002 ffaa 	bl	8005164 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f975 	bl	8000504 <__aeabi_ui2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	4990      	ldr	r1, [pc, #576]	; (8002464 <LeftMotor+0x56c>)
 8002224:	f7fe f830 	bl	8000288 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	f7fe f82a 	bl	800028c <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4690      	mov	r8, r2
 800223e:	4699      	mov	r9, r3
 8002240:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002244:	4b88      	ldr	r3, [pc, #544]	; (8002468 <LeftMotor+0x570>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f81d 	bl	8000288 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4640      	mov	r0, r8
 8002254:	4649      	mov	r1, r9
 8002256:	f7fe f9cf 	bl	80005f8 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <LeftMotor+0x574>)
 8002268:	f7fe fc38 	bl	8000adc <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d031      	beq.n	80022d6 <LeftMotor+0x3de>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*min_pwm_turn);
 8002272:	4b7f      	ldr	r3, [pc, #508]	; (8002470 <LeftMotor+0x578>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f944 	bl	8000504 <__aeabi_ui2d>
 800227c:	4b7d      	ldr	r3, [pc, #500]	; (8002474 <LeftMotor+0x57c>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <LeftMotor+0x580>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4977      	ldr	r1, [pc, #476]	; (800247c <LeftMotor+0x584>)
 800229e:	680e      	ldr	r6, [r1, #0]
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc6a 	bl	8000b7c <__aeabi_d2uiz>
 80022a8:	4603      	mov	r3, r0
 80022aa:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*min_pwm_turn);
 80022ac:	4b70      	ldr	r3, [pc, #448]	; (8002470 <LeftMotor+0x578>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f927 	bl	8000504 <__aeabi_ui2d>
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <LeftMotor+0x580>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	496d      	ldr	r1, [pc, #436]	; (800247c <LeftMotor+0x584>)
 80022c6:	680e      	ldr	r6, [r1, #0]
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fc56 	bl	8000b7c <__aeabi_d2uiz>
 80022d0:	4603      	mov	r3, r0
 80022d2:	63b3      	str	r3, [r6, #56]	; 0x38
 80022d4:	e2bc      	b.n	8002850 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*(-PID_out+min_pwm_turn));
 80022d6:	4b66      	ldr	r3, [pc, #408]	; (8002470 <LeftMotor+0x578>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f912 	bl	8000504 <__aeabi_ui2d>
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <LeftMotor+0x57c>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe f987 	bl	80005f8 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4690      	mov	r8, r2
 80022f0:	4699      	mov	r9, r3
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <LeftMotor+0x580>)
 80022f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <LeftMotor+0x564>)
 80022fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fe:	f7fd ffc3 	bl	8000288 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4640      	mov	r0, r8
 8002308:	4649      	mov	r1, r9
 800230a:	f7fe f975 	bl	80005f8 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	495a      	ldr	r1, [pc, #360]	; (800247c <LeftMotor+0x584>)
 8002314:	680e      	ldr	r6, [r1, #0]
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fc2f 	bl	8000b7c <__aeabi_d2uiz>
 800231e:	4603      	mov	r3, r0
 8002320:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*(-PID_out+min_pwm_turn));
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <LeftMotor+0x578>)
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8ec 	bl	8000504 <__aeabi_ui2d>
 800232c:	4680      	mov	r8, r0
 800232e:	4689      	mov	r9, r1
 8002330:	4b51      	ldr	r3, [pc, #324]	; (8002478 <LeftMotor+0x580>)
 8002332:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <LeftMotor+0x564>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f7fd ffa4 	bl	8000288 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4640      	mov	r0, r8
 8002346:	4649      	mov	r1, r9
 8002348:	f7fe f956 	bl	80005f8 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	494a      	ldr	r1, [pc, #296]	; (800247c <LeftMotor+0x584>)
 8002352:	680e      	ldr	r6, [r1, #0]
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc10 	bl	8000b7c <__aeabi_d2uiz>
 800235c:	4603      	mov	r3, r0
 800235e:	63b3      	str	r3, [r6, #56]	; 0x38
 8002360:	e276      	b.n	8002850 <LeftMotor+0x958>
					  }
				  }
				  // Backwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2108      	movs	r1, #8
 8002366:	483e      	ldr	r0, [pc, #248]	; (8002460 <LeftMotor+0x568>)
 8002368:	f002 fefc 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	2104      	movs	r1, #4
 8002370:	483b      	ldr	r0, [pc, #236]	; (8002460 <LeftMotor+0x568>)
 8002372:	f002 fef7 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002376:	2200      	movs	r2, #0
 8002378:	2110      	movs	r1, #16
 800237a:	4839      	ldr	r0, [pc, #228]	; (8002460 <LeftMotor+0x568>)
 800237c:	f002 fef2 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	2120      	movs	r1, #32
 8002384:	4836      	ldr	r0, [pc, #216]	; (8002460 <LeftMotor+0x568>)
 8002386:	f002 feed 	bl	8005164 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 800238a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8b8 	bl	8000504 <__aeabi_ui2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	4931      	ldr	r1, [pc, #196]	; (8002464 <LeftMotor+0x56c>)
 800239e:	f7fd ff73 	bl	8000288 <__aeabi_dsub>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	f7fd ff6d 	bl	800028c <__adddf3>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <LeftMotor+0x570>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fd ff60 	bl	8000288 <__aeabi_dsub>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fe f912 	bl	80005f8 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <LeftMotor+0x574>)
 80023e2:	f7fe fb7b 	bl	8000adc <__aeabi_dcmplt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d049      	beq.n	8002480 <LeftMotor+0x588>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*min_pwm_turn);
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <LeftMotor+0x578>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f887 	bl	8000504 <__aeabi_ui2d>
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <LeftMotor+0x57c>)
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f7fe f8fc 	bl	80005f8 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <LeftMotor+0x580>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f8f3 	bl	80005f8 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4919      	ldr	r1, [pc, #100]	; (800247c <LeftMotor+0x584>)
 8002418:	680e      	ldr	r6, [r1, #0]
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe fbad 	bl	8000b7c <__aeabi_d2uiz>
 8002422:	4603      	mov	r3, r0
 8002424:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*min_pwm_turn);
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <LeftMotor+0x578>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f86a 	bl	8000504 <__aeabi_ui2d>
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <LeftMotor+0x580>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe f8df 	bl	80005f8 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	490f      	ldr	r1, [pc, #60]	; (800247c <LeftMotor+0x584>)
 8002440:	680e      	ldr	r6, [r1, #0]
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fb99 	bl	8000b7c <__aeabi_d2uiz>
 800244a:	4603      	mov	r3, r0
 800244c:	63b3      	str	r3, [r6, #56]	; 0x38
 800244e:	e1ff      	b.n	8002850 <LeftMotor+0x958>
 8002450:	40021000 	.word	0x40021000
 8002454:	20000370 	.word	0x20000370
 8002458:	20000318 	.word	0x20000318
 800245c:	200004c0 	.word	0x200004c0
 8002460:	40020000 	.word	0x40020000
 8002464:	3fe00000 	.word	0x3fe00000
 8002468:	20000328 	.word	0x20000328
 800246c:	40240000 	.word	0x40240000
 8002470:	20000012 	.word	0x20000012
 8002474:	20000008 	.word	0x20000008
 8002478:	20000020 	.word	0x20000020
 800247c:	2000021c 	.word	0x2000021c
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*(PID_out+min_pwm_turn));
 8002480:	4b8a      	ldr	r3, [pc, #552]	; (80026ac <LeftMotor+0x7b4>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f83d 	bl	8000504 <__aeabi_ui2d>
 800248a:	4b89      	ldr	r3, [pc, #548]	; (80026b0 <LeftMotor+0x7b8>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f8b2 	bl	80005f8 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4690      	mov	r8, r2
 800249a:	4699      	mov	r9, r3
 800249c:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <LeftMotor+0x7bc>)
 800249e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a2:	4b85      	ldr	r3, [pc, #532]	; (80026b8 <LeftMotor+0x7c0>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	f7fd fef0 	bl	800028c <__adddf3>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4640      	mov	r0, r8
 80024b2:	4649      	mov	r1, r9
 80024b4:	f7fe f8a0 	bl	80005f8 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	497f      	ldr	r1, [pc, #508]	; (80026bc <LeftMotor+0x7c4>)
 80024be:	680e      	ldr	r6, [r1, #0]
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb5a 	bl	8000b7c <__aeabi_d2uiz>
 80024c8:	4603      	mov	r3, r0
 80024ca:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*(PID_out+min_pwm_turn));
 80024cc:	4b77      	ldr	r3, [pc, #476]	; (80026ac <LeftMotor+0x7b4>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f817 	bl	8000504 <__aeabi_ui2d>
 80024d6:	4680      	mov	r8, r0
 80024d8:	4689      	mov	r9, r1
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <LeftMotor+0x7bc>)
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <LeftMotor+0x7c0>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fd fed1 	bl	800028c <__adddf3>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4640      	mov	r0, r8
 80024f0:	4649      	mov	r1, r9
 80024f2:	f7fe f881 	bl	80005f8 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4970      	ldr	r1, [pc, #448]	; (80026bc <LeftMotor+0x7c4>)
 80024fc:	680e      	ldr	r6, [r1, #0]
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe fb3b 	bl	8000b7c <__aeabi_d2uiz>
 8002506:	4603      	mov	r3, r0
 8002508:	63b3      	str	r3, [r6, #56]	; 0x38
 800250a:	e1a1      	b.n	8002850 <LeftMotor+0x958>
					  }
				  }
			  }
			  // If steering right
			  else if(Buffer[1] == 'R')
 800250c:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <LeftMotor+0x7c8>)
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b52      	cmp	r3, #82	; 0x52
 8002512:	f040 819d 	bne.w	8002850 <LeftMotor+0x958>
			  {
				  // Backwards
				  if(PID_out < 0){
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <LeftMotor+0x7bc>)
 8002518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	f7fe fada 	bl	8000adc <__aeabi_dcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80d4 	beq.w	80026d8 <LeftMotor+0x7e0>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2108      	movs	r1, #8
 8002534:	4863      	ldr	r0, [pc, #396]	; (80026c4 <LeftMotor+0x7cc>)
 8002536:	f002 fe15 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800253a:	2201      	movs	r2, #1
 800253c:	2104      	movs	r1, #4
 800253e:	4861      	ldr	r0, [pc, #388]	; (80026c4 <LeftMotor+0x7cc>)
 8002540:	f002 fe10 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002544:	2200      	movs	r2, #0
 8002546:	2110      	movs	r1, #16
 8002548:	485e      	ldr	r0, [pc, #376]	; (80026c4 <LeftMotor+0x7cc>)
 800254a:	f002 fe0b 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800254e:	2201      	movs	r2, #1
 8002550:	2120      	movs	r1, #32
 8002552:	485c      	ldr	r0, [pc, #368]	; (80026c4 <LeftMotor+0x7cc>)
 8002554:	f002 fe06 	bl	8005164 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002558:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ffd1 	bl	8000504 <__aeabi_ui2d>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	f04f 0000 	mov.w	r0, #0
 800256a:	4957      	ldr	r1, [pc, #348]	; (80026c8 <LeftMotor+0x7d0>)
 800256c:	f7fd fe8c 	bl	8000288 <__aeabi_dsub>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	f7fd fe86 	bl	800028c <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4690      	mov	r8, r2
 8002586:	4699      	mov	r9, r3
 8002588:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800258c:	4b4f      	ldr	r3, [pc, #316]	; (80026cc <LeftMotor+0x7d4>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fd fe79 	bl	8000288 <__aeabi_dsub>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4640      	mov	r0, r8
 800259c:	4649      	mov	r1, r9
 800259e:	f7fe f82b 	bl	80005f8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <LeftMotor+0x7d8>)
 80025b0:	f7fe fa94 	bl	8000adc <__aeabi_dcmplt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d031      	beq.n	800261e <LeftMotor+0x726>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*min_pwm_turn);
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <LeftMotor+0x7b4>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffa0 	bl	8000504 <__aeabi_ui2d>
 80025c4:	4b3c      	ldr	r3, [pc, #240]	; (80026b8 <LeftMotor+0x7c0>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fe f815 	bl	80005f8 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	493a      	ldr	r1, [pc, #232]	; (80026bc <LeftMotor+0x7c4>)
 80025d4:	680e      	ldr	r6, [r1, #0]
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe facf 	bl	8000b7c <__aeabi_d2uiz>
 80025de:	4603      	mov	r3, r0
 80025e0:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*min_pwm_turn);
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <LeftMotor+0x7b4>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff8c 	bl	8000504 <__aeabi_ui2d>
 80025ec:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <LeftMotor+0x7dc>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f801 	bl	80005f8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <LeftMotor+0x7c0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd fff8 	bl	80005f8 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	492b      	ldr	r1, [pc, #172]	; (80026bc <LeftMotor+0x7c4>)
 800260e:	680e      	ldr	r6, [r1, #0]
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f7fe fab2 	bl	8000b7c <__aeabi_d2uiz>
 8002618:	4603      	mov	r3, r0
 800261a:	63b3      	str	r3, [r6, #56]	; 0x38
 800261c:	e118      	b.n	8002850 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*(-PID_out+min_pwm_turn));
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <LeftMotor+0x7b4>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff6e 	bl	8000504 <__aeabi_ui2d>
 8002628:	4680      	mov	r8, r0
 800262a:	4689      	mov	r9, r1
 800262c:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <LeftMotor+0x7c0>)
 800262e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <LeftMotor+0x7bc>)
 8002634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002638:	f7fd fe26 	bl	8000288 <__aeabi_dsub>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4640      	mov	r0, r8
 8002642:	4649      	mov	r1, r9
 8002644:	f7fd ffd8 	bl	80005f8 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	491b      	ldr	r1, [pc, #108]	; (80026bc <LeftMotor+0x7c4>)
 800264e:	680e      	ldr	r6, [r1, #0]
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa92 	bl	8000b7c <__aeabi_d2uiz>
 8002658:	4603      	mov	r3, r0
 800265a:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*(-PID_out+min_pwm_turn));
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <LeftMotor+0x7b4>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff4f 	bl	8000504 <__aeabi_ui2d>
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <LeftMotor+0x7dc>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ffc4 	bl	80005f8 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4690      	mov	r8, r2
 8002676:	4699      	mov	r9, r3
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <LeftMotor+0x7c0>)
 800267a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <LeftMotor+0x7bc>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd fe00 	bl	8000288 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4640      	mov	r0, r8
 800268e:	4649      	mov	r1, r9
 8002690:	f7fd ffb2 	bl	80005f8 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4908      	ldr	r1, [pc, #32]	; (80026bc <LeftMotor+0x7c4>)
 800269a:	680e      	ldr	r6, [r1, #0]
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe fa6c 	bl	8000b7c <__aeabi_d2uiz>
 80026a4:	4603      	mov	r3, r0
 80026a6:	63b3      	str	r3, [r6, #56]	; 0x38
 80026a8:	e0d2      	b.n	8002850 <LeftMotor+0x958>
 80026aa:	bf00      	nop
 80026ac:	20000012 	.word	0x20000012
 80026b0:	20000008 	.word	0x20000008
 80026b4:	200004c0 	.word	0x200004c0
 80026b8:	20000020 	.word	0x20000020
 80026bc:	2000021c 	.word	0x2000021c
 80026c0:	20000318 	.word	0x20000318
 80026c4:	40020000 	.word	0x40020000
 80026c8:	3fe00000 	.word	0x3fe00000
 80026cc:	20000328 	.word	0x20000328
 80026d0:	40240000 	.word	0x40240000
 80026d4:	20000000 	.word	0x20000000
					  }
				  }
				  // Forwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	2104      	movs	r1, #4
 80026dc:	489c      	ldr	r0, [pc, #624]	; (8002950 <LeftMotor+0xa58>)
 80026de:	f002 fd41 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80026e2:	2201      	movs	r2, #1
 80026e4:	2108      	movs	r1, #8
 80026e6:	489a      	ldr	r0, [pc, #616]	; (8002950 <LeftMotor+0xa58>)
 80026e8:	f002 fd3c 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2120      	movs	r1, #32
 80026f0:	4897      	ldr	r0, [pc, #604]	; (8002950 <LeftMotor+0xa58>)
 80026f2:	f002 fd37 	bl	8005164 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2110      	movs	r1, #16
 80026fa:	4895      	ldr	r0, [pc, #596]	; (8002950 <LeftMotor+0xa58>)
 80026fc:	f002 fd32 	bl	8005164 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002700:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fefd 	bl	8000504 <__aeabi_ui2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	4990      	ldr	r1, [pc, #576]	; (8002954 <LeftMotor+0xa5c>)
 8002714:	f7fd fdb8 	bl	8000288 <__aeabi_dsub>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	f7fd fdb2 	bl	800028c <__adddf3>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4690      	mov	r8, r2
 800272e:	4699      	mov	r9, r3
 8002730:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002734:	4b88      	ldr	r3, [pc, #544]	; (8002958 <LeftMotor+0xa60>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fda5 	bl	8000288 <__aeabi_dsub>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4640      	mov	r0, r8
 8002744:	4649      	mov	r1, r9
 8002746:	f7fd ff57 	bl	80005f8 <__aeabi_dmul>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	4b81      	ldr	r3, [pc, #516]	; (800295c <LeftMotor+0xa64>)
 8002758:	f7fe f9c0 	bl	8000adc <__aeabi_dcmplt>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d031      	beq.n	80027c6 <LeftMotor+0x8ce>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*min_pwm_turn);
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <LeftMotor+0xa68>)
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fecc 	bl	8000504 <__aeabi_ui2d>
 800276c:	4b7d      	ldr	r3, [pc, #500]	; (8002964 <LeftMotor+0xa6c>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd ff41 	bl	80005f8 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	497b      	ldr	r1, [pc, #492]	; (8002968 <LeftMotor+0xa70>)
 800277c:	680e      	ldr	r6, [r1, #0]
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe f9fb 	bl	8000b7c <__aeabi_d2uiz>
 8002786:	4603      	mov	r3, r0
 8002788:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*min_pwm_turn);
 800278a:	4b75      	ldr	r3, [pc, #468]	; (8002960 <LeftMotor+0xa68>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fd feb8 	bl	8000504 <__aeabi_ui2d>
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <LeftMotor+0xa74>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fd ff2d 	bl	80005f8 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4b6f      	ldr	r3, [pc, #444]	; (8002964 <LeftMotor+0xa6c>)
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f7fd ff24 	bl	80005f8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	496c      	ldr	r1, [pc, #432]	; (8002968 <LeftMotor+0xa70>)
 80027b6:	680e      	ldr	r6, [r1, #0]
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f9de 	bl	8000b7c <__aeabi_d2uiz>
 80027c0:	4603      	mov	r3, r0
 80027c2:	63b3      	str	r3, [r6, #56]	; 0x38
 80027c4:	e044      	b.n	8002850 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*(PID_out+min_pwm_turn));
 80027c6:	4b66      	ldr	r3, [pc, #408]	; (8002960 <LeftMotor+0xa68>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fe9a 	bl	8000504 <__aeabi_ui2d>
 80027d0:	4680      	mov	r8, r0
 80027d2:	4689      	mov	r9, r1
 80027d4:	4b66      	ldr	r3, [pc, #408]	; (8002970 <LeftMotor+0xa78>)
 80027d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027da:	4b62      	ldr	r3, [pc, #392]	; (8002964 <LeftMotor+0xa6c>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f7fd fd54 	bl	800028c <__adddf3>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4640      	mov	r0, r8
 80027ea:	4649      	mov	r1, r9
 80027ec:	f7fd ff04 	bl	80005f8 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	495c      	ldr	r1, [pc, #368]	; (8002968 <LeftMotor+0xa70>)
 80027f6:	680e      	ldr	r6, [r1, #0]
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7fe f9be 	bl	8000b7c <__aeabi_d2uiz>
 8002800:	4603      	mov	r3, r0
 8002802:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*(PID_out+min_pwm_turn));
 8002804:	4b56      	ldr	r3, [pc, #344]	; (8002960 <LeftMotor+0xa68>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe7b 	bl	8000504 <__aeabi_ui2d>
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <LeftMotor+0xa74>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fef0 	bl	80005f8 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4690      	mov	r8, r2
 800281e:	4699      	mov	r9, r3
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <LeftMotor+0xa78>)
 8002822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002826:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <LeftMotor+0xa6c>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fd2e 	bl	800028c <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4640      	mov	r0, r8
 8002836:	4649      	mov	r1, r9
 8002838:	f7fd fede 	bl	80005f8 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4949      	ldr	r1, [pc, #292]	; (8002968 <LeftMotor+0xa70>)
 8002842:	680e      	ldr	r6, [r1, #0]
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f998 	bl	8000b7c <__aeabi_d2uiz>
 800284c:	4603      	mov	r3, r0
 800284e:	63b3      	str	r3, [r6, #56]	; 0x38
					  }
				  }
			  }
			  taskEXIT_CRITICAL();
 8002850:	f008 fe60 	bl	800b514 <vPortExitCritical>

			  // Loops every 10ms
			  osDelayUntil(pdMS_TO_TICKS(10));
 8002854:	200a      	movs	r0, #10
 8002856:	f006 fc38 	bl	80090ca <osDelayUntil>
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 800285a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800285e:	4618      	mov	r0, r3
 8002860:	f7fd fe50 	bl	8000504 <__aeabi_ui2d>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	4939      	ldr	r1, [pc, #228]	; (8002954 <LeftMotor+0xa5c>)
 800286e:	f7fd fd0b 	bl	8000288 <__aeabi_dsub>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	f7fd fd05 	bl	800028c <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <LeftMotor+0xa60>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fcf8 	bl	8000288 <__aeabi_dsub>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4640      	mov	r0, r8
 800289e:	4649      	mov	r1, r9
 80028a0:	f7fd feaa 	bl	80005f8 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	f7fe f930 	bl	8000b18 <__aeabi_dcmpgt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f47f ac78 	bne.w	80021b0 <LeftMotor+0x2b8>
		  }
		  // Set both motor's speed to 0
		  taskENTER_CRITICAL();
 80028c0:	f008 fdf8 	bl	800b4b4 <vPortEnterCritical>
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <LeftMotor+0xa70>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <LeftMotor+0xa70>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2200      	movs	r2, #0
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
		  taskEXIT_CRITICAL();
 80028d4:	f008 fe1e 	bl	800b514 <vPortExitCritical>
 80028d8:	e384      	b.n	8002fe4 <LeftMotor+0x10ec>
	  }
	  // If currently running straight line instruction
	  else{
		  // Reset traveled distance to 0
		  travel_dist = 0;
 80028da:	4926      	ldr	r1, [pc, #152]	; (8002974 <LeftMotor+0xa7c>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_position = 0;
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <LeftMotor+0xa80>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
		  if(Buffer[0] == 'F'){
 80028ee:	4b23      	ldr	r3, [pc, #140]	; (800297c <LeftMotor+0xa84>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b46      	cmp	r3, #70	; 0x46
 80028f4:	d144      	bne.n	8002980 <LeftMotor+0xa88>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2104      	movs	r1, #4
 80028fa:	4815      	ldr	r0, [pc, #84]	; (8002950 <LeftMotor+0xa58>)
 80028fc:	f002 fc32 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	2108      	movs	r1, #8
 8002904:	4812      	ldr	r0, [pc, #72]	; (8002950 <LeftMotor+0xa58>)
 8002906:	f002 fc2d 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	2120      	movs	r1, #32
 800290e:	4810      	ldr	r0, [pc, #64]	; (8002950 <LeftMotor+0xa58>)
 8002910:	f002 fc28 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002914:	2201      	movs	r2, #1
 8002916:	2110      	movs	r1, #16
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LeftMotor+0xa58>)
 800291a:	f002 fc23 	bl	8005164 <HAL_GPIO_WritePin>
			  target_is_before = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = (double)value * 100.0/102.5;
			  target_dist = (double)value * 1.01;
 8002924:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fdfb 	bl	8000524 <__aeabi_i2d>
 800292e:	a306      	add	r3, pc, #24	; (adr r3, 8002948 <LeftMotor+0xa50>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe60 	bl	80005f8 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002940:	e04e      	b.n	80029e0 <LeftMotor+0xae8>
 8002942:	bf00      	nop
 8002944:	f3af 8000 	nop.w
 8002948:	c28f5c29 	.word	0xc28f5c29
 800294c:	3ff028f5 	.word	0x3ff028f5
 8002950:	40020000 	.word	0x40020000
 8002954:	3fe00000 	.word	0x3fe00000
 8002958:	20000328 	.word	0x20000328
 800295c:	40240000 	.word	0x40240000
 8002960:	20000012 	.word	0x20000012
 8002964:	20000020 	.word	0x20000020
 8002968:	2000021c 	.word	0x2000021c
 800296c:	20000000 	.word	0x20000000
 8002970:	200004c0 	.word	0x200004c0
 8002974:	20000340 	.word	0x20000340
 8002978:	20000348 	.word	0x20000348
 800297c:	20000318 	.word	0x20000318
//			  }
//			  else{
//				  target_dist = (double)value * 100.0/105.0;
//			  }
		  }
		  else if(Buffer[0] == 'B'){
 8002980:	4b93      	ldr	r3, [pc, #588]	; (8002bd0 <LeftMotor+0xcd8>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b42      	cmp	r3, #66	; 0x42
 8002986:	d12b      	bne.n	80029e0 <LeftMotor+0xae8>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	2108      	movs	r1, #8
 800298c:	4891      	ldr	r0, [pc, #580]	; (8002bd4 <LeftMotor+0xcdc>)
 800298e:	f002 fbe9 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2104      	movs	r1, #4
 8002996:	488f      	ldr	r0, [pc, #572]	; (8002bd4 <LeftMotor+0xcdc>)
 8002998:	f002 fbe4 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	2110      	movs	r1, #16
 80029a0:	488c      	ldr	r0, [pc, #560]	; (8002bd4 <LeftMotor+0xcdc>)
 80029a2:	f002 fbdf 	bl	8005164 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2120      	movs	r1, #32
 80029aa:	488a      	ldr	r0, [pc, #552]	; (8002bd4 <LeftMotor+0xcdc>)
 80029ac:	f002 fbda 	bl	8005164 <HAL_GPIO_WritePin>
			  target_is_before = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = -(double)value * 100.0/102.5;
			  target_dist = -(double)value * 1.01;
 80029b6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fdb2 	bl	8000524 <__aeabi_i2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4614      	mov	r4, r2
 80029c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029ca:	a375      	add	r3, pc, #468	; (adr r3, 8002ba0 <LeftMotor+0xca8>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fe10 	bl	80005f8 <__aeabi_dmul>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
//			  }
//			  else{
//				  target_dist = -(double)value * 100.0/105.0;
//			  }
		  }
		  PID_out = 0;
 80029e0:	497d      	ldr	r1, [pc, #500]	; (8002bd8 <LeftMotor+0xce0>)
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9c1 2300 	strd	r2, r3, [r1]
		  PID_dist = 0;
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  // Set straight distance PID controller (constants are Kp,Ki,Kd)
		  PID(&Straight_PID, &travel_dist, &PID_dist, &target_dist, 0.02, 0.07, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80029fa:	f107 0318 	add.w	r3, r7, #24
 80029fe:	f107 0220 	add.w	r2, r7, #32
 8002a02:	2100      	movs	r1, #0
 8002a04:	9101      	str	r1, [sp, #4]
 8002a06:	2101      	movs	r1, #1
 8002a08:	9100      	str	r1, [sp, #0]
 8002a0a:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8002ba8 <LeftMotor+0xcb0>
 8002a0e:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002bb0 <LeftMotor+0xcb8>
 8002a12:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8002bb8 <LeftMotor+0xcc0>
 8002a16:	4971      	ldr	r1, [pc, #452]	; (8002bdc <LeftMotor+0xce4>)
 8002a18:	4871      	ldr	r0, [pc, #452]	; (8002be0 <LeftMotor+0xce8>)
 8002a1a:	f000 fea5 	bl	8003768 <PID>

		  PID_SetMode(&Straight_PID, _PID_MODE_AUTOMATIC);
 8002a1e:	2101      	movs	r1, #1
 8002a20:	486f      	ldr	r0, [pc, #444]	; (8002be0 <LeftMotor+0xce8>)
 8002a22:	f000 ffd7 	bl	80039d4 <PID_SetMode>
		  PID_SetSampleTime(&Straight_PID, 10);
 8002a26:	210a      	movs	r1, #10
 8002a28:	486d      	ldr	r0, [pc, #436]	; (8002be0 <LeftMotor+0xce8>)
 8002a2a:	f001 f947 	bl	8003cbc <PID_SetSampleTime>
		  PID_SetOutputLimits(&Straight_PID, -1.0f+min_pwm_ratio, 1.0f-min_pwm_ratio);
 8002a2e:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <LeftMotor+0xcec>)
 8002a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <LeftMotor+0xcf0>)
 8002a3a:	f7fd fc25 	bl	8000288 <__aeabi_dsub>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	ec43 2b18 	vmov	d8, r2, r3
 8002a46:	4b67      	ldr	r3, [pc, #412]	; (8002be4 <LeftMotor+0xcec>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f04f 0000 	mov.w	r0, #0
 8002a50:	4965      	ldr	r1, [pc, #404]	; (8002be8 <LeftMotor+0xcf0>)
 8002a52:	f7fd fc19 	bl	8000288 <__aeabi_dsub>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	ec43 2b17 	vmov	d7, r2, r3
 8002a5e:	eeb0 1a47 	vmov.f32	s2, s14
 8002a62:	eef0 1a67 	vmov.f32	s3, s15
 8002a66:	eeb0 0a48 	vmov.f32	s0, s16
 8002a6a:	eef0 0a68 	vmov.f32	s1, s17
 8002a6e:	485c      	ldr	r0, [pc, #368]	; (8002be0 <LeftMotor+0xce8>)
 8002a70:	f000 ffce 	bl	8003a10 <PID_SetOutputLimits>

		  // Set straight line error correction PID controller (constants are Kp,Ki,Kd)
		  PID(&StraightErr_PID, &current_angle, &PID_out, &target_angle, 0.05, 0.02, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a78:	2200      	movs	r2, #0
 8002a7a:	9201      	str	r2, [sp, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	9200      	str	r2, [sp, #0]
 8002a80:	ed9f 2b49 	vldr	d2, [pc, #292]	; 8002ba8 <LeftMotor+0xcb0>
 8002a84:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8002bb8 <LeftMotor+0xcc0>
 8002a88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002bc0 <LeftMotor+0xcc8>
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <LeftMotor+0xce0>)
 8002a8e:	4957      	ldr	r1, [pc, #348]	; (8002bec <LeftMotor+0xcf4>)
 8002a90:	4857      	ldr	r0, [pc, #348]	; (8002bf0 <LeftMotor+0xcf8>)
 8002a92:	f000 fe69 	bl	8003768 <PID>

		  PID_SetMode(&StraightErr_PID, _PID_MODE_AUTOMATIC);
 8002a96:	2101      	movs	r1, #1
 8002a98:	4855      	ldr	r0, [pc, #340]	; (8002bf0 <LeftMotor+0xcf8>)
 8002a9a:	f000 ff9b 	bl	80039d4 <PID_SetMode>
		  PID_SetSampleTime(&StraightErr_PID, 10);
 8002a9e:	210a      	movs	r1, #10
 8002aa0:	4853      	ldr	r0, [pc, #332]	; (8002bf0 <LeftMotor+0xcf8>)
 8002aa2:	f001 f90b 	bl	8003cbc <PID_SetSampleTime>
		  PID_SetOutputLimits(&StraightErr_PID, -max_pwm_dif, max_pwm_dif);
 8002aa6:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <LeftMotor+0xcfc>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	4692      	mov	sl, r2
 8002aae:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <LeftMotor+0xcfc>)
 8002ab4:	ed93 7b00 	vldr	d7, [r3]
 8002ab8:	eeb0 1a47 	vmov.f32	s2, s14
 8002abc:	eef0 1a67 	vmov.f32	s3, s15
 8002ac0:	ec4b ab10 	vmov	d0, sl, fp
 8002ac4:	484a      	ldr	r0, [pc, #296]	; (8002bf0 <LeftMotor+0xcf8>)
 8002ac6:	f000 ffa3 	bl	8003a10 <PID_SetOutputLimits>

		  // Start motor speed to 0
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)0);
 8002aca:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <LeftMotor+0xd00>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)0);
 8002ad2:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <LeftMotor+0xd00>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38

		  // Loop until traveled distance exceeds target distance (target_is_before is to account for backward movements)
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 8002ada:	e252      	b.n	8002f82 <LeftMotor+0x108a>
//			  sprintf(sbuf, "%7d", (int)target_pulse);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

			  // Comput PID values
			  PID_Compute(&Straight_PID);
 8002adc:	4840      	ldr	r0, [pc, #256]	; (8002be0 <LeftMotor+0xce8>)
 8002ade:	f000 fe8f 	bl	8003800 <PID_Compute>
			  PID_Compute(&StraightErr_PID);
 8002ae2:	4843      	ldr	r0, [pc, #268]	; (8002bf0 <LeftMotor+0xcf8>)
 8002ae4:	f000 fe8c 	bl	8003800 <PID_Compute>
			  if(Buffer[0] == 'F')
 8002ae8:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <LeftMotor+0xcd8>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b46      	cmp	r3, #70	; 0x46
 8002aee:	f040 808b 	bne.w	8002c08 <LeftMotor+0xd10>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (target_angle - current_angle)*3;
 8002af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <LeftMotor+0xcf4>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f7fd fbc4 	bl	8000288 <__aeabi_dsub>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <LeftMotor+0xd04>)
 8002b0e:	f7fd fd73 	bl	80005f8 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	a32b      	add	r3, pc, #172	; (adr r3, 8002bc8 <LeftMotor+0xcd0>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fbb4 	bl	800028c <__adddf3>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4935      	ldr	r1, [pc, #212]	; (8002c00 <LeftMotor+0xd08>)
 8002b2a:	680e      	ldr	r6, [r1, #0]
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fe f824 	bl	8000b7c <__aeabi_d2uiz>
 8002b34:	4603      	mov	r3, r0
 8002b36:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1+PID_out);
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <LeftMotor+0xd0c>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fce1 	bl	8000504 <__aeabi_ui2d>
 8002b42:	4680      	mov	r8, r0
 8002b44:	4689      	mov	r9, r1
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <LeftMotor+0xce0>)
 8002b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <LeftMotor+0xcf0>)
 8002b52:	f7fd fb9b 	bl	800028c <__adddf3>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	f7fd fd4b 	bl	80005f8 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1-PID_out);
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <LeftMotor+0xd0c>)
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcc8 	bl	8000504 <__aeabi_ui2d>
 8002b74:	4680      	mov	r8, r0
 8002b76:	4689      	mov	r9, r1
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <LeftMotor+0xce0>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	4919      	ldr	r1, [pc, #100]	; (8002be8 <LeftMotor+0xcf0>)
 8002b84:	f7fd fb80 	bl	8000288 <__aeabi_dsub>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fd32 	bl	80005f8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002b9c:	e08d      	b.n	8002cba <LeftMotor+0xdc2>
 8002b9e:	bf00      	nop
 8002ba0:	c28f5c29 	.word	0xc28f5c29
 8002ba4:	3ff028f5 	.word	0x3ff028f5
	...
 8002bb0:	1eb851ec 	.word	0x1eb851ec
 8002bb4:	3fb1eb85 	.word	0x3fb1eb85
 8002bb8:	47ae147b 	.word	0x47ae147b
 8002bbc:	3f947ae1 	.word	0x3f947ae1
 8002bc0:	9999999a 	.word	0x9999999a
 8002bc4:	3fa99999 	.word	0x3fa99999
 8002bc8:	cccccccd 	.word	0xcccccccd
 8002bcc:	40628ccc 	.word	0x40628ccc
 8002bd0:	20000318 	.word	0x20000318
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	200004c0 	.word	0x200004c0
 8002bdc:	20000340 	.word	0x20000340
 8002be0:	200003e0 	.word	0x200003e0
 8002be4:	20000018 	.word	0x20000018
 8002be8:	3ff00000 	.word	0x3ff00000
 8002bec:	20000328 	.word	0x20000328
 8002bf0:	20000450 	.word	0x20000450
 8002bf4:	20000028 	.word	0x20000028
 8002bf8:	2000021c 	.word	0x2000021c
 8002bfc:	40080000 	.word	0x40080000
 8002c00:	20000144 	.word	0x20000144
 8002c04:	20000010 	.word	0x20000010
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1+PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1-PID_out));
			  }
			  else if(Buffer[0] == 'B')
 8002c08:	4bb5      	ldr	r3, [pc, #724]	; (8002ee0 <LeftMotor+0xfe8>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b42      	cmp	r3, #66	; 0x42
 8002c0e:	d154      	bne.n	8002cba <LeftMotor+0xdc2>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (current_angle - target_angle)*3;
 8002c10:	4bb4      	ldr	r3, [pc, #720]	; (8002ee4 <LeftMotor+0xfec>)
 8002c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c1a:	f7fd fb35 	bl	8000288 <__aeabi_dsub>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	4baf      	ldr	r3, [pc, #700]	; (8002ee8 <LeftMotor+0xff0>)
 8002c2c:	f7fd fce4 	bl	80005f8 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	a3a7      	add	r3, pc, #668	; (adr r3, 8002ed8 <LeftMotor+0xfe0>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fb25 	bl	800028c <__adddf3>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	49a9      	ldr	r1, [pc, #676]	; (8002eec <LeftMotor+0xff4>)
 8002c48:	680e      	ldr	r6, [r1, #0]
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f7fd ff95 	bl	8000b7c <__aeabi_d2uiz>
 8002c52:	4603      	mov	r3, r0
 8002c54:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1-PID_out);
 8002c56:	4ba6      	ldr	r3, [pc, #664]	; (8002ef0 <LeftMotor+0xff8>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc52 	bl	8000504 <__aeabi_ui2d>
 8002c60:	4680      	mov	r8, r0
 8002c62:	4689      	mov	r9, r1
 8002c64:	4ba3      	ldr	r3, [pc, #652]	; (8002ef4 <LeftMotor+0xffc>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	49a2      	ldr	r1, [pc, #648]	; (8002ef8 <LeftMotor+0x1000>)
 8002c70:	f7fd fb0a 	bl	8000288 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4640      	mov	r0, r8
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	f7fd fcbc 	bl	80005f8 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1+PID_out);
 8002c88:	4b99      	ldr	r3, [pc, #612]	; (8002ef0 <LeftMotor+0xff8>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fd fc39 	bl	8000504 <__aeabi_ui2d>
 8002c92:	4680      	mov	r8, r0
 8002c94:	4689      	mov	r9, r1
 8002c96:	4b97      	ldr	r3, [pc, #604]	; (8002ef4 <LeftMotor+0xffc>)
 8002c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	4b95      	ldr	r3, [pc, #596]	; (8002ef8 <LeftMotor+0x1000>)
 8002ca2:	f7fd faf3 	bl	800028c <__adddf3>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4640      	mov	r0, r8
 8002cac:	4649      	mov	r1, r9
 8002cae:	f7fd fca3 	bl	80005f8 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1-PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1+PID_out));
			  }

			  taskENTER_CRITICAL();
 8002cba:	f008 fbfb 	bl	800b4b4 <vPortEnterCritical>
			  if(PID_dist < 0){
 8002cbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f7fd ff07 	bl	8000adc <__aeabi_dcmplt>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8099 	beq.w	8002e08 <LeftMotor+0xf10>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2108      	movs	r1, #8
 8002cda:	4888      	ldr	r0, [pc, #544]	; (8002efc <LeftMotor+0x1004>)
 8002cdc:	f002 fa42 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2104      	movs	r1, #4
 8002ce4:	4885      	ldr	r0, [pc, #532]	; (8002efc <LeftMotor+0x1004>)
 8002ce6:	f002 fa3d 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2110      	movs	r1, #16
 8002cee:	4883      	ldr	r0, [pc, #524]	; (8002efc <LeftMotor+0x1004>)
 8002cf0:	f002 fa38 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	4880      	ldr	r0, [pc, #512]	; (8002efc <LeftMotor+0x1004>)
 8002cfa:	f002 fa33 	bl	8005164 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<8){
 8002cfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fbfe 	bl	8000504 <__aeabi_ui2d>
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <LeftMotor+0x1008>)
 8002d0e:	f7fd fabb 	bl	8000288 <__aeabi_dsub>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	f7fd fab5 	bl	800028c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <LeftMotor+0x100c>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd faa8 	bl	8000288 <__aeabi_dsub>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4640      	mov	r0, r8
 8002d3e:	4649      	mov	r1, r9
 8002d40:	f7fd fc5a 	bl	80005f8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <LeftMotor+0x1010>)
 8002d52:	f7fd fec3 	bl	8000adc <__aeabi_dcmplt>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <LeftMotor+0xeaa>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <LeftMotor+0x1014>)
 8002d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d66:	f7fd fc47 	bl	80005f8 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4968      	ldr	r1, [pc, #416]	; (8002f10 <LeftMotor+0x1018>)
 8002d70:	680e      	ldr	r6, [r1, #0]
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff01 	bl	8000b7c <__aeabi_d2uiz>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <LeftMotor+0x1014>)
 8002d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d88:	f7fd fc36 	bl	80005f8 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	495f      	ldr	r1, [pc, #380]	; (8002f10 <LeftMotor+0x1018>)
 8002d92:	680e      	ldr	r6, [r1, #0]
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd fef0 	bl	8000b7c <__aeabi_d2uiz>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	63b3      	str	r3, [r6, #56]	; 0x38
 8002da0:	e0ea      	b.n	8002f78 <LeftMotor+0x1080>
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio-PID_dist));
 8002da2:	4b5a      	ldr	r3, [pc, #360]	; (8002f0c <LeftMotor+0x1014>)
 8002da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002da8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dac:	f7fd fa6c 	bl	8000288 <__aeabi_dsub>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002dbc:	f7fd fc1c 	bl	80005f8 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4952      	ldr	r1, [pc, #328]	; (8002f10 <LeftMotor+0x1018>)
 8002dc6:	680e      	ldr	r6, [r1, #0]
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f7fd fed6 	bl	8000b7c <__aeabi_d2uiz>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio-PID_dist));
 8002dd4:	4b4d      	ldr	r3, [pc, #308]	; (8002f0c <LeftMotor+0x1014>)
 8002dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dde:	f7fd fa53 	bl	8000288 <__aeabi_dsub>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dee:	f7fd fc03 	bl	80005f8 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4946      	ldr	r1, [pc, #280]	; (8002f10 <LeftMotor+0x1018>)
 8002df8:	680e      	ldr	r6, [r1, #0]
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7fd febd 	bl	8000b7c <__aeabi_d2uiz>
 8002e02:	4603      	mov	r3, r0
 8002e04:	63b3      	str	r3, [r6, #56]	; 0x38
 8002e06:	e0b7      	b.n	8002f78 <LeftMotor+0x1080>
				  }

			  }
			  else{
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	483b      	ldr	r0, [pc, #236]	; (8002efc <LeftMotor+0x1004>)
 8002e0e:	f002 f9a9 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002e12:	2201      	movs	r2, #1
 8002e14:	2108      	movs	r1, #8
 8002e16:	4839      	ldr	r0, [pc, #228]	; (8002efc <LeftMotor+0x1004>)
 8002e18:	f002 f9a4 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2120      	movs	r1, #32
 8002e20:	4836      	ldr	r0, [pc, #216]	; (8002efc <LeftMotor+0x1004>)
 8002e22:	f002 f99f 	bl	8005164 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002e26:	2201      	movs	r2, #1
 8002e28:	2110      	movs	r1, #16
 8002e2a:	4834      	ldr	r0, [pc, #208]	; (8002efc <LeftMotor+0x1004>)
 8002e2c:	f002 f99a 	bl	8005164 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<8){
 8002e30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb65 	bl	8000504 <__aeabi_ui2d>
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <LeftMotor+0x1008>)
 8002e40:	f7fd fa22 	bl	8000288 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	f7fd fa1c 	bl	800028c <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4690      	mov	r8, r2
 8002e5a:	4699      	mov	r9, r3
 8002e5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e60:	4b28      	ldr	r3, [pc, #160]	; (8002f04 <LeftMotor+0x100c>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fa0f 	bl	8000288 <__aeabi_dsub>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4640      	mov	r0, r8
 8002e70:	4649      	mov	r1, r9
 8002e72:	f7fd fbc1 	bl	80005f8 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <LeftMotor+0x1010>)
 8002e84:	f7fd fe2a 	bl	8000adc <__aeabi_dcmplt>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d042      	beq.n	8002f14 <LeftMotor+0x101c>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <LeftMotor+0x1014>)
 8002e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e94:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e98:	f7fd fbae 	bl	80005f8 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	491b      	ldr	r1, [pc, #108]	; (8002f10 <LeftMotor+0x1018>)
 8002ea2:	680e      	ldr	r6, [r1, #0]
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7fd fe68 	bl	8000b7c <__aeabi_d2uiz>
 8002eac:	4603      	mov	r3, r0
 8002eae:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <LeftMotor+0x1014>)
 8002eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eba:	f7fd fb9d 	bl	80005f8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4913      	ldr	r1, [pc, #76]	; (8002f10 <LeftMotor+0x1018>)
 8002ec4:	680e      	ldr	r6, [r1, #0]
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f7fd fe57 	bl	8000b7c <__aeabi_d2uiz>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	63b3      	str	r3, [r6, #56]	; 0x38
 8002ed2:	e051      	b.n	8002f78 <LeftMotor+0x1080>
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	cccccccd 	.word	0xcccccccd
 8002edc:	40628ccc 	.word	0x40628ccc
 8002ee0:	20000318 	.word	0x20000318
 8002ee4:	20000328 	.word	0x20000328
 8002ee8:	40080000 	.word	0x40080000
 8002eec:	20000144 	.word	0x20000144
 8002ef0:	20000010 	.word	0x20000010
 8002ef4:	200004c0 	.word	0x200004c0
 8002ef8:	3ff00000 	.word	0x3ff00000
 8002efc:	40020000 	.word	0x40020000
 8002f00:	3fe00000 	.word	0x3fe00000
 8002f04:	20000340 	.word	0x20000340
 8002f08:	40200000 	.word	0x40200000
 8002f0c:	20000018 	.word	0x20000018
 8002f10:	2000021c 	.word	0x2000021c
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio+PID_dist));
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <LeftMotor+0x1114>)
 8002f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f1e:	f7fd f9b5 	bl	800028c <__adddf3>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002f2e:	f7fd fb63 	bl	80005f8 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4936      	ldr	r1, [pc, #216]	; (8003010 <LeftMotor+0x1118>)
 8002f38:	680e      	ldr	r6, [r1, #0]
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7fd fe1d 	bl	8000b7c <__aeabi_d2uiz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio+PID_dist));
 8002f46:	4b31      	ldr	r3, [pc, #196]	; (800300c <LeftMotor+0x1114>)
 8002f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f50:	f7fd f99c 	bl	800028c <__adddf3>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f60:	f7fd fb4a 	bl	80005f8 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4929      	ldr	r1, [pc, #164]	; (8003010 <LeftMotor+0x1118>)
 8002f6a:	680e      	ldr	r6, [r1, #0]
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe04 	bl	8000b7c <__aeabi_d2uiz>
 8002f74:	4603      	mov	r3, r0
 8002f76:	63b3      	str	r3, [r6, #56]	; 0x38
				  }
			  }
			  taskEXIT_CRITICAL();
 8002f78:	f008 facc 	bl	800b514 <vPortExitCritical>
			  osDelayUntil(pdMS_TO_TICKS(10));
 8002f7c:	200a      	movs	r0, #10
 8002f7e:	f006 f8a4 	bl	80090ca <osDelayUntil>
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 8002f82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fabc 	bl	8000504 <__aeabi_ui2d>
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <LeftMotor+0x111c>)
 8002f92:	f7fd f979 	bl	8000288 <__aeabi_dsub>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	f7fd f973 	bl	800028c <__adddf3>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4690      	mov	r8, r2
 8002fac:	4699      	mov	r9, r3
 8002fae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <LeftMotor+0x1120>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f7fd f966 	bl	8000288 <__aeabi_dsub>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	f7fd fb18 	bl	80005f8 <__aeabi_dmul>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fd9e 	bl	8000b18 <__aeabi_dcmpgt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f47f ad7c 	bne.w	8002adc <LeftMotor+0xbe4>
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_S*0.5);
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*0.5);
////			  HAL_Delay(1);
////		  }
//	  }
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);		// Sets both wheel to 0 speed
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <LeftMotor+0x1118>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <LeftMotor+0x1118>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	639a      	str	r2, [r3, #56]	; 0x38
	  Buffer[0] = 'd';		// Sets start of instruction buffer to invalid command so the stm doesn't repeat itself
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <LeftMotor+0x1124>)
 8002ff6:	2264      	movs	r2, #100	; 0x64
 8002ff8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,"R", sizeof("R"), HAL_MAX_DELAY);	// Sends ready signal to RPi
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	2202      	movs	r2, #2
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <LeftMotor+0x1128>)
 8003002:	4808      	ldr	r0, [pc, #32]	; (8003024 <LeftMotor+0x112c>)
 8003004:	f004 fd7b 	bl	8007afe <HAL_UART_Transmit>
  for(;;){
 8003008:	f7fe bfca 	b.w	8001fa0 <LeftMotor+0xa8>
 800300c:	20000018 	.word	0x20000018
 8003010:	2000021c 	.word	0x2000021c
 8003014:	3fe00000 	.word	0x3fe00000
 8003018:	20000340 	.word	0x20000340
 800301c:	20000318 	.word	0x20000318
 8003020:	0800c53c 	.word	0x0800c53c
 8003024:	20000264 	.word	0x20000264

08003028 <GyroFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroFunc */
void GyroFunc(void *argument)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08e      	sub	sp, #56	; 0x38
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroFunc */
  uint8_t* status = IMU_Initialise(&imu, &hi2c1, &huart3);	// Initialize gyro
 8003030:	4a87      	ldr	r2, [pc, #540]	; (8003250 <GyroFunc+0x228>)
 8003032:	4988      	ldr	r1, [pc, #544]	; (8003254 <GyroFunc+0x22c>)
 8003034:	4888      	ldr	r0, [pc, #544]	; (8003258 <GyroFunc+0x230>)
 8003036:	f7fd ff93 	bl	8000f60 <IMU_Initialise>
 800303a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint8_t dispBuff[20];

  // Calibrate gyroscope
  taskENTER_CRITICAL();
 800303c:	f008 fa3a 	bl	800b4b4 <vPortEnterCritical>
  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4985      	ldr	r1, [pc, #532]	; (800325c <GyroFunc+0x234>)
 8003046:	4618      	mov	r0, r3
 8003048:	f008 fd80 	bl	800bb4c <siprintf>
  OLED_ShowString(10,30,dispBuff);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	461a      	mov	r2, r3
 8003052:	211e      	movs	r1, #30
 8003054:	200a      	movs	r0, #10
 8003056:	f000 fa8f 	bl	8003578 <OLED_ShowString>
//  OLED_Refresh_Gram();
  osDelay(2000);
 800305a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800305e:	f006 f819 	bl	8009094 <osDelay>
  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 8003062:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8003240 <GyroFunc+0x218>
 8003066:	487c      	ldr	r0, [pc, #496]	; (8003258 <GyroFunc+0x230>)
 8003068:	f7fe faec 	bl	8001644 <Gyro_calibrateHeading>
  osDelay(2000);
 800306c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003070:	f006 f810 	bl	8009094 <osDelay>
  taskEXIT_CRITICAL();
 8003074:	f008 fa4e 	bl	800b514 <vPortExitCritical>
  is_calibrated = 1;	// Set finish calibration flag to start running other task
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <GyroFunc+0x238>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
  char sbuf[10];

  int32_t encoder_prev = -1, encoder_cur = -1, dif = 0;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800308e:	213c      	movs	r1, #60	; 0x3c
 8003090:	4874      	ldr	r0, [pc, #464]	; (8003264 <GyroFunc+0x23c>)
 8003092:	f003 fef1 	bl	8006e78 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  for(;;)
  {
	  // Read gyro value
	  taskENTER_CRITICAL();
 8003096:	f008 fa0d 	bl	800b4b4 <vPortEnterCritical>
	  IMU_GyroReadHeading(&imu);
 800309a:	486f      	ldr	r0, [pc, #444]	; (8003258 <GyroFunc+0x230>)
 800309c:	f7fe f97c 	bl	8001398 <IMU_GyroReadHeading>
	  taskEXIT_CRITICAL();
 80030a0:	f008 fa38 	bl	800b514 <vPortExitCritical>

	  // Update heading values
	  current_gyro = current_gyro + imu.gyro[2];		// Manual gyro offset
 80030a4:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <GyroFunc+0x230>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa4d 	bl	8000548 <__aeabi_f2d>
 80030ae:	4b6e      	ldr	r3, [pc, #440]	; (8003268 <GyroFunc+0x240>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	f7fd f8ea 	bl	800028c <__adddf3>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	496a      	ldr	r1, [pc, #424]	; (8003268 <GyroFunc+0x240>)
 80030be:	e9c1 2300 	strd	r2, r3, [r1]
	  current_angle = current_gyro*1.0f;		// Increase if robot turns too much
 80030c2:	4b69      	ldr	r3, [pc, #420]	; (8003268 <GyroFunc+0x240>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	4968      	ldr	r1, [pc, #416]	; (800326c <GyroFunc+0x244>)
 80030ca:	e9c1 2300 	strd	r2, r3, [r1]

	  // Check if it's the first time running
	  if(encoder_prev == -1 || encoder_cur == -1){
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d003      	beq.n	80030de <GyroFunc+0xb6>
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d106      	bne.n	80030ec <GyroFunc+0xc4>
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 80030de:	4b61      	ldr	r3, [pc, #388]	; (8003264 <GyroFunc+0x23c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
		  encoder_prev = encoder_cur;
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
 80030ea:	e033      	b.n	8003154 <GyroFunc+0x12c>
	  }
	  else{
		  encoder_prev = encoder_cur;
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 80030f0:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <GyroFunc+0x23c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	633b      	str	r3, [r7, #48]	; 0x30
		  // Deal with the encoder value wrapping around at 65535
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80030f8:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <GyroFunc+0x23c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d110      	bne.n	8003128 <GyroFunc+0x100>
			  if(encoder_cur <= encoder_prev){
 8003106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	429a      	cmp	r2, r3
 800310c:	dc04      	bgt.n	8003118 <GyroFunc+0xf0>
				  dif = encoder_prev - encoder_cur;
 800310e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003116:	e017      	b.n	8003148 <GyroFunc+0x120>
			  }
			  else{
				  dif = encoder_prev + (65535 - encoder_cur);
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800311e:	33ff      	adds	r3, #255	; 0xff
 8003120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003122:	4413      	add	r3, r2
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003126:	e00f      	b.n	8003148 <GyroFunc+0x120>
			  }
		  }
		  else{
			  if(encoder_cur >= encoder_prev){
 8003128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	429a      	cmp	r2, r3
 800312e:	db04      	blt.n	800313a <GyroFunc+0x112>
				  dif = encoder_prev - encoder_cur;
 8003130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003138:	e006      	b.n	8003148 <GyroFunc+0x120>
			  }
			  else{
				  dif = encoder_prev - (65535 + encoder_cur);
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003140:	33ff      	adds	r3, #255	; 0xff
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
		  }
		  encoder_position = encoder_position + dif;
 8003148:	4b49      	ldr	r3, [pc, #292]	; (8003270 <GyroFunc+0x248>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314e:	4413      	add	r3, r2
 8003150:	4a47      	ldr	r2, [pc, #284]	; (8003270 <GyroFunc+0x248>)
 8003152:	6013      	str	r3, [r2, #0]
	  }
//	  travel_dist = (double)encoder_position * 0.01310615989;		// Edit constant to calibrate straight line distance
	  travel_dist = (double)encoder_position * 0.01308996939;
 8003154:	4b46      	ldr	r3, [pc, #280]	; (8003270 <GyroFunc+0x248>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9e3 	bl	8000524 <__aeabi_i2d>
 800315e:	a33a      	add	r3, pc, #232	; (adr r3, 8003248 <GyroFunc+0x220>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f7fd fa48 	bl	80005f8 <__aeabi_dmul>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4941      	ldr	r1, [pc, #260]	; (8003274 <GyroFunc+0x24c>)
 800316e:	e9c1 2300 	strd	r2, r3, [r1]
	  sprintf(dispBuff, "%5d        ", (int)current_angle*1000);	// Prints current heading angle (x1000)
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <GyroFunc+0x244>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fcd6 	bl	8000b2c <__aeabi_d2iz>
 8003180:	4603      	mov	r3, r0
 8003182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003186:	fb03 f202 	mul.w	r2, r3, r2
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	493a      	ldr	r1, [pc, #232]	; (8003278 <GyroFunc+0x250>)
 8003190:	4618      	mov	r0, r3
 8003192:	f008 fcdb 	bl	800bb4c <siprintf>
	  OLED_ShowString(10,30,dispBuff);
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	461a      	mov	r2, r3
 800319c:	211e      	movs	r1, #30
 800319e:	200a      	movs	r0, #10
 80031a0:	f000 f9ea 	bl	8003578 <OLED_ShowString>

	  if(!HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)){
 80031a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031a8:	4834      	ldr	r0, [pc, #208]	; (800327c <GyroFunc+0x254>)
 80031aa:	f001 ffc3 	bl	8005134 <HAL_GPIO_ReadPin>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d140      	bne.n	8003236 <GyroFunc+0x20e>
		  encoder_position = 0;
 80031b4:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <GyroFunc+0x248>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
		  travel_dist = 0;
 80031ba:	492e      	ldr	r1, [pc, #184]	; (8003274 <GyroFunc+0x24c>)
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_prev = -1;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30
		  dif = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		  current_gyro = 0;
 80031d8:	4923      	ldr	r1, [pc, #140]	; (8003268 <GyroFunc+0x240>)
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c1 2300 	strd	r2, r3, [r1]
		  current_angle = 0;
 80031e6:	4921      	ldr	r1, [pc, #132]	; (800326c <GyroFunc+0x244>)
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9c1 2300 	strd	r2, r3, [r1]
		  t_heading = 0;
 80031f4:	4b22      	ldr	r3, [pc, #136]	; (8003280 <GyroFunc+0x258>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
		  taskENTER_CRITICAL();
 80031fa:	f008 f95b 	bl	800b4b4 <vPortEnterCritical>
		  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4916      	ldr	r1, [pc, #88]	; (800325c <GyroFunc+0x234>)
 8003204:	4618      	mov	r0, r3
 8003206:	f008 fca1 	bl	800bb4c <siprintf>
		  OLED_ShowString(10,30,dispBuff);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	461a      	mov	r2, r3
 8003210:	211e      	movs	r1, #30
 8003212:	200a      	movs	r0, #10
 8003214:	f000 f9b0 	bl	8003578 <OLED_ShowString>
		  osDelay(2000);
 8003218:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800321c:	f005 ff3a 	bl	8009094 <osDelay>
		  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 8003220:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8003240 <GyroFunc+0x218>
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <GyroFunc+0x230>)
 8003226:	f7fe fa0d 	bl	8001644 <Gyro_calibrateHeading>
		  osDelay(2000);
 800322a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800322e:	f005 ff31 	bl	8009094 <osDelay>
		  taskEXIT_CRITICAL();
 8003232:	f008 f96f 	bl	800b514 <vPortExitCritical>
////	  sprintf(sbuf, "%9ul", (DWT->CYCCNT));
////	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 9, HAL_MAX_DELAY);
//	  sprintf(sbuf, "\r\n");
//	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 2, HAL_MAX_DELAY);

      osDelayUntil(pdMS_TO_TICKS(10));
 8003236:	200a      	movs	r0, #10
 8003238:	f005 ff47 	bl	80090ca <osDelayUntil>
	  taskENTER_CRITICAL();
 800323c:	e72b      	b.n	8003096 <GyroFunc+0x6e>
 800323e:	bf00      	nop
 8003240:	00000000 	.word	0x00000000
 8003244:	40350000 	.word	0x40350000
 8003248:	f37c4b99 	.word	0xf37c4b99
 800324c:	3f8acee9 	.word	0x3f8acee9
 8003250:	20000264 	.word	0x20000264
 8003254:	200000f0 	.word	0x200000f0
 8003258:	2000034c 	.word	0x2000034c
 800325c:	0800c540 	.word	0x0800c540
 8003260:	20000338 	.word	0x20000338
 8003264:	2000018c 	.word	0x2000018c
 8003268:	20000330 	.word	0x20000330
 800326c:	20000328 	.word	0x20000328
 8003270:	20000348 	.word	0x20000348
 8003274:	20000340 	.word	0x20000340
 8003278:	0800c550 	.word	0x0800c550
 800327c:	40020c00 	.word	0x40020c00
 8003280:	20000320 	.word	0x20000320

08003284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003288:	b672      	cpsid	i
}
 800328a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800328c:	e7fe      	b.n	800328c <Error_Handler+0x8>
	...

08003290 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	460a      	mov	r2, r1
 800329a:	71fb      	strb	r3, [r7, #7]
 800329c:	4613      	mov	r3, r2
 800329e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 80032a0:	79bb      	ldrb	r3, [r7, #6]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d106      	bne.n	80032b4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 80032a6:	2201      	movs	r2, #1
 80032a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ac:	481c      	ldr	r0, [pc, #112]	; (8003320 <OLED_WR_Byte+0x90>)
 80032ae:	f001 ff59 	bl	8005164 <HAL_GPIO_WritePin>
 80032b2:	e005      	b.n	80032c0 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ba:	4819      	ldr	r0, [pc, #100]	; (8003320 <OLED_WR_Byte+0x90>)
 80032bc:	f001 ff52 	bl	8005164 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e01e      	b.n	8003304 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 80032c6:	2200      	movs	r2, #0
 80032c8:	2120      	movs	r1, #32
 80032ca:	4815      	ldr	r0, [pc, #84]	; (8003320 <OLED_WR_Byte+0x90>)
 80032cc:	f001 ff4a 	bl	8005164 <HAL_GPIO_WritePin>
		if(dat & 0x80)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da05      	bge.n	80032e4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80032d8:	2201      	movs	r2, #1
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	4810      	ldr	r0, [pc, #64]	; (8003320 <OLED_WR_Byte+0x90>)
 80032de:	f001 ff41 	bl	8005164 <HAL_GPIO_WritePin>
 80032e2:	e004      	b.n	80032ee <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 80032e4:	2200      	movs	r2, #0
 80032e6:	2140      	movs	r1, #64	; 0x40
 80032e8:	480d      	ldr	r0, [pc, #52]	; (8003320 <OLED_WR_Byte+0x90>)
 80032ea:	f001 ff3b 	bl	8005164 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80032ee:	2201      	movs	r2, #1
 80032f0:	2120      	movs	r1, #32
 80032f2:	480b      	ldr	r0, [pc, #44]	; (8003320 <OLED_WR_Byte+0x90>)
 80032f4:	f001 ff36 	bl	8005164 <HAL_GPIO_WritePin>
		dat <<= 1;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b07      	cmp	r3, #7
 8003308:	d9dd      	bls.n	80032c6 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 800330a:	2201      	movs	r2, #1
 800330c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003310:	4803      	ldr	r0, [pc, #12]	; (8003320 <OLED_WR_Byte+0x90>)
 8003312:	f001 ff27 	bl	8005164 <HAL_GPIO_WritePin>
} 
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000

08003324 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 800332a:	2300      	movs	r3, #0
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	e026      	b.n	800337e <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	3b50      	subs	r3, #80	; 0x50
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ffa9 	bl	8003290 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800333e:	2100      	movs	r1, #0
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff ffa5 	bl	8003290 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8003346:	2100      	movs	r1, #0
 8003348:	2010      	movs	r0, #16
 800334a:	f7ff ffa1 	bl	8003290 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800334e:	2300      	movs	r3, #0
 8003350:	71bb      	strb	r3, [r7, #6]
 8003352:	e00d      	b.n	8003370 <OLED_Refresh_Gram+0x4c>
 8003354:	79ba      	ldrb	r2, [r7, #6]
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	490d      	ldr	r1, [pc, #52]	; (8003390 <OLED_Refresh_Gram+0x6c>)
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	440a      	add	r2, r1
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff93 	bl	8003290 <OLED_WR_Byte>
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	3301      	adds	r3, #1
 800336e:	71bb      	strb	r3, [r7, #6]
 8003370:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	daed      	bge.n	8003354 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	3301      	adds	r3, #1
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2b07      	cmp	r3, #7
 8003382:	d9d5      	bls.n	8003330 <OLED_Refresh_Gram+0xc>
	}
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200004c8 	.word	0x200004c8

08003394 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800339a:	2300      	movs	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	e014      	b.n	80033ca <OLED_Clear+0x36>
 80033a0:	2300      	movs	r3, #0
 80033a2:	71bb      	strb	r3, [r7, #6]
 80033a4:	e00a      	b.n	80033bc <OLED_Clear+0x28>
 80033a6:	79ba      	ldrb	r2, [r7, #6]
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	490c      	ldr	r1, [pc, #48]	; (80033dc <OLED_Clear+0x48>)
 80033ac:	00d2      	lsls	r2, r2, #3
 80033ae:	440a      	add	r2, r1
 80033b0:	4413      	add	r3, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	79bb      	ldrb	r3, [r7, #6]
 80033b8:	3301      	adds	r3, #1
 80033ba:	71bb      	strb	r3, [r7, #6]
 80033bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	daf0      	bge.n	80033a6 <OLED_Clear+0x12>
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	3301      	adds	r3, #1
 80033c8:	71fb      	strb	r3, [r7, #7]
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d9e7      	bls.n	80033a0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80033d0:	f7ff ffa8 	bl	8003324 <OLED_Refresh_Gram>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200004c8 	.word	0x200004c8

080033e0 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
 80033ea:	460b      	mov	r3, r1
 80033ec:	71bb      	strb	r3, [r7, #6]
 80033ee:	4613      	mov	r3, r2
 80033f0:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db41      	blt.n	8003482 <OLED_DrawPoint+0xa2>
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	2b3f      	cmp	r3, #63	; 0x3f
 8003402:	d83e      	bhi.n	8003482 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003404:	79bb      	ldrb	r3, [r7, #6]
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003418:	7b7b      	ldrb	r3, [r7, #13]
 800341a:	f1c3 0307 	rsb	r3, r3, #7
 800341e:	2201      	movs	r2, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003426:	797b      	ldrb	r3, [r7, #5]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d012      	beq.n	8003452 <OLED_DrawPoint+0x72>
 800342c:	79fa      	ldrb	r2, [r7, #7]
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	4917      	ldr	r1, [pc, #92]	; (8003490 <OLED_DrawPoint+0xb0>)
 8003432:	00d2      	lsls	r2, r2, #3
 8003434:	440a      	add	r2, r1
 8003436:	4413      	add	r3, r2
 8003438:	7818      	ldrb	r0, [r3, #0]
 800343a:	79fa      	ldrb	r2, [r7, #7]
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	7bf9      	ldrb	r1, [r7, #15]
 8003440:	4301      	orrs	r1, r0
 8003442:	b2c8      	uxtb	r0, r1
 8003444:	4912      	ldr	r1, [pc, #72]	; (8003490 <OLED_DrawPoint+0xb0>)
 8003446:	00d2      	lsls	r2, r2, #3
 8003448:	440a      	add	r2, r1
 800344a:	4413      	add	r3, r2
 800344c:	4602      	mov	r2, r0
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e018      	b.n	8003484 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003452:	79fa      	ldrb	r2, [r7, #7]
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	490e      	ldr	r1, [pc, #56]	; (8003490 <OLED_DrawPoint+0xb0>)
 8003458:	00d2      	lsls	r2, r2, #3
 800345a:	440a      	add	r2, r1
 800345c:	4413      	add	r3, r2
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b25a      	sxtb	r2, r3
 8003462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003466:	43db      	mvns	r3, r3
 8003468:	b25b      	sxtb	r3, r3
 800346a:	4013      	ands	r3, r2
 800346c:	b259      	sxtb	r1, r3
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	b2c8      	uxtb	r0, r1
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <OLED_DrawPoint+0xb0>)
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	440a      	add	r2, r1
 800347a:	4413      	add	r3, r2
 800347c:	4602      	mov	r2, r0
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e000      	b.n	8003484 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003482:	bf00      	nop
}
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	200004c8 	.word	0x200004c8

08003494 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4623      	mov	r3, r4
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	4603      	mov	r3, r0
 80034a8:	71bb      	strb	r3, [r7, #6]
 80034aa:	460b      	mov	r3, r1
 80034ac:	717b      	strb	r3, [r7, #5]
 80034ae:	4613      	mov	r3, r2
 80034b0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80034b2:	79bb      	ldrb	r3, [r7, #6]
 80034b4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80034b6:	797b      	ldrb	r3, [r7, #5]
 80034b8:	3b20      	subs	r3, #32
 80034ba:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80034bc:	2300      	movs	r3, #0
 80034be:	73bb      	strb	r3, [r7, #14]
 80034c0:	e04d      	b.n	800355e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80034c2:	793b      	ldrb	r3, [r7, #4]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	d10b      	bne.n	80034e0 <OLED_ShowChar+0x4c>
 80034c8:	797a      	ldrb	r2, [r7, #5]
 80034ca:	7bb9      	ldrb	r1, [r7, #14]
 80034cc:	4828      	ldr	r0, [pc, #160]	; (8003570 <OLED_ShowChar+0xdc>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4403      	add	r3, r0
 80034d8:	440b      	add	r3, r1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e007      	b.n	80034f0 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80034e0:	797a      	ldrb	r2, [r7, #5]
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	4923      	ldr	r1, [pc, #140]	; (8003574 <OLED_ShowChar+0xe0>)
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	440a      	add	r2, r1
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	737b      	strb	r3, [r7, #13]
 80034f4:	e02d      	b.n	8003552 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80034f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da07      	bge.n	800350e <OLED_ShowChar+0x7a>
 80034fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003502:	79b9      	ldrb	r1, [r7, #6]
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff6a 	bl	80033e0 <OLED_DrawPoint>
 800350c:	e00c      	b.n	8003528 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800350e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	79b9      	ldrb	r1, [r7, #6]
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff5c 	bl	80033e0 <OLED_DrawPoint>
			temp<<=1;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
			y++;
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	3301      	adds	r3, #1
 8003532:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003534:	79ba      	ldrb	r2, [r7, #6]
 8003536:	7b3b      	ldrb	r3, [r7, #12]
 8003538:	1ad2      	subs	r2, r2, r3
 800353a:	793b      	ldrb	r3, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	d105      	bne.n	800354c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003540:	7b3b      	ldrb	r3, [r7, #12]
 8003542:	71bb      	strb	r3, [r7, #6]
				x++;
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	3301      	adds	r3, #1
 8003548:	71fb      	strb	r3, [r7, #7]
				break;
 800354a:	e005      	b.n	8003558 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800354c:	7b7b      	ldrb	r3, [r7, #13]
 800354e:	3301      	adds	r3, #1
 8003550:	737b      	strb	r3, [r7, #13]
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d9ce      	bls.n	80034f6 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8003558:	7bbb      	ldrb	r3, [r7, #14]
 800355a:	3301      	adds	r3, #1
 800355c:	73bb      	strb	r3, [r7, #14]
 800355e:	7bba      	ldrb	r2, [r7, #14]
 8003560:	793b      	ldrb	r3, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d3ad      	bcc.n	80034c2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}
 8003570:	0800c604 	.word	0x0800c604
 8003574:	0800ca78 	.word	0x0800ca78

08003578 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af02      	add	r7, sp, #8
 800357e:	4603      	mov	r3, r0
 8003580:	603a      	str	r2, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	460b      	mov	r3, r1
 8003586:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003588:	e01f      	b.n	80035ca <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2b7a      	cmp	r3, #122	; 0x7a
 800358e:	d904      	bls.n	800359a <OLED_ShowString+0x22>
 8003590:	2300      	movs	r3, #0
 8003592:	71fb      	strb	r3, [r7, #7]
 8003594:	79bb      	ldrb	r3, [r7, #6]
 8003596:	3310      	adds	r3, #16
 8003598:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800359a:	79bb      	ldrb	r3, [r7, #6]
 800359c:	2b3a      	cmp	r3, #58	; 0x3a
 800359e:	d905      	bls.n	80035ac <OLED_ShowString+0x34>
 80035a0:	2300      	movs	r3, #0
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	71bb      	strb	r3, [r7, #6]
 80035a8:	f7ff fef4 	bl	8003394 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	79b9      	ldrb	r1, [r7, #6]
 80035b2:	79f8      	ldrb	r0, [r7, #7]
 80035b4:	2301      	movs	r3, #1
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	230c      	movs	r3, #12
 80035ba:	f7ff ff6b 	bl	8003494 <OLED_ShowChar>
        x+=8;
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	3308      	adds	r3, #8
 80035c2:	71fb      	strb	r3, [r7, #7]
        p++;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1db      	bne.n	800358a <OLED_ShowString+0x12>
    }  
}	 
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <OLED_Init>:

void OLED_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80035e0:	f002 fdb4 	bl	800614c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80035e4:	4b41      	ldr	r3, [pc, #260]	; (80036ec <OLED_Init+0x110>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a40      	ldr	r2, [pc, #256]	; (80036ec <OLED_Init+0x110>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <OLED_Init+0x110>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <OLED_Init+0x110>)
 80035f6:	f023 0304 	bic.w	r3, r3, #4
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80035fc:	f002 fdba 	bl	8006174 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	483a      	ldr	r0, [pc, #232]	; (80036f0 <OLED_Init+0x114>)
 8003606:	f001 fdad 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800360a:	2064      	movs	r0, #100	; 0x64
 800360c:	f000 febe 	bl	800438c <HAL_Delay>
	OLED_RST_Set();
 8003610:	2201      	movs	r2, #1
 8003612:	2180      	movs	r1, #128	; 0x80
 8003614:	4836      	ldr	r0, [pc, #216]	; (80036f0 <OLED_Init+0x114>)
 8003616:	f001 fda5 	bl	8005164 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800361a:	2100      	movs	r1, #0
 800361c:	20ae      	movs	r0, #174	; 0xae
 800361e:	f7ff fe37 	bl	8003290 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003622:	2100      	movs	r1, #0
 8003624:	20d5      	movs	r0, #213	; 0xd5
 8003626:	f7ff fe33 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800362a:	2100      	movs	r1, #0
 800362c:	2050      	movs	r0, #80	; 0x50
 800362e:	f7ff fe2f 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003632:	2100      	movs	r1, #0
 8003634:	20a8      	movs	r0, #168	; 0xa8
 8003636:	f7ff fe2b 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800363a:	2100      	movs	r1, #0
 800363c:	203f      	movs	r0, #63	; 0x3f
 800363e:	f7ff fe27 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003642:	2100      	movs	r1, #0
 8003644:	20d3      	movs	r0, #211	; 0xd3
 8003646:	f7ff fe23 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800364a:	2100      	movs	r1, #0
 800364c:	2000      	movs	r0, #0
 800364e:	f7ff fe1f 	bl	8003290 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003652:	2100      	movs	r1, #0
 8003654:	2040      	movs	r0, #64	; 0x40
 8003656:	f7ff fe1b 	bl	8003290 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800365a:	2100      	movs	r1, #0
 800365c:	208d      	movs	r0, #141	; 0x8d
 800365e:	f7ff fe17 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003662:	2100      	movs	r1, #0
 8003664:	2014      	movs	r0, #20
 8003666:	f7ff fe13 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800366a:	2100      	movs	r1, #0
 800366c:	2020      	movs	r0, #32
 800366e:	f7ff fe0f 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003672:	2100      	movs	r1, #0
 8003674:	2002      	movs	r0, #2
 8003676:	f7ff fe0b 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800367a:	2100      	movs	r1, #0
 800367c:	20a1      	movs	r0, #161	; 0xa1
 800367e:	f7ff fe07 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003682:	2100      	movs	r1, #0
 8003684:	20c0      	movs	r0, #192	; 0xc0
 8003686:	f7ff fe03 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800368a:	2100      	movs	r1, #0
 800368c:	20da      	movs	r0, #218	; 0xda
 800368e:	f7ff fdff 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003692:	2100      	movs	r1, #0
 8003694:	2012      	movs	r0, #18
 8003696:	f7ff fdfb 	bl	8003290 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800369a:	2100      	movs	r1, #0
 800369c:	2081      	movs	r0, #129	; 0x81
 800369e:	f7ff fdf7 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80036a2:	2100      	movs	r1, #0
 80036a4:	20ef      	movs	r0, #239	; 0xef
 80036a6:	f7ff fdf3 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80036aa:	2100      	movs	r1, #0
 80036ac:	20d9      	movs	r0, #217	; 0xd9
 80036ae:	f7ff fdef 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80036b2:	2100      	movs	r1, #0
 80036b4:	20f1      	movs	r0, #241	; 0xf1
 80036b6:	f7ff fdeb 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80036ba:	2100      	movs	r1, #0
 80036bc:	20db      	movs	r0, #219	; 0xdb
 80036be:	f7ff fde7 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80036c2:	2100      	movs	r1, #0
 80036c4:	2030      	movs	r0, #48	; 0x30
 80036c6:	f7ff fde3 	bl	8003290 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80036ca:	2100      	movs	r1, #0
 80036cc:	20a4      	movs	r0, #164	; 0xa4
 80036ce:	f7ff fddf 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80036d2:	2100      	movs	r1, #0
 80036d4:	20a6      	movs	r0, #166	; 0xa6
 80036d6:	f7ff fddb 	bl	8003290 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80036da:	2100      	movs	r1, #0
 80036dc:	20af      	movs	r0, #175	; 0xaf
 80036de:	f7ff fdd7 	bl	8003290 <OLED_WR_Byte>
	OLED_Clear(); 
 80036e2:	f7ff fe57 	bl	8003394 <OLED_Clear>
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40021000 	.word	0x40021000

080036f4 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003724:	f7fd f9f8 	bl	8000b18 <__aeabi_dcmpgt>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 800373a:	e011      	b.n	8003760 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003748:	f7fd f9c8 	bl	8000adc <__aeabi_dcmplt>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d100      	bne.n	8003754 <PID_Init+0x60>
}
 8003752:	e005      	b.n	8003760 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6278      	str	r0, [r7, #36]	; 0x24
 8003770:	6239      	str	r1, [r7, #32]
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	ed87 0b04 	vstr	d0, [r7, #16]
 800377a:	ed87 1b02 	vstr	d1, [r7, #8]
 800377e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800379a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80037f0 <PID+0x88>
 800379e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80037f8 <PID+0x90>
 80037a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037a4:	f000 f934 	bl	8003a10 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	2264      	movs	r2, #100	; 0x64
 80037ac:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80037ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037b2:	4619      	mov	r1, r3
 80037b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037b6:	f000 fa41 	bl	8003c3c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80037ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80037be:	4619      	mov	r1, r3
 80037c0:	ed97 2b00 	vldr	d2, [r7]
 80037c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80037c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80037cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ce:	f000 f98d 	bl	8003aec <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80037d2:	f000 fdcf 	bl	8004374 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	605a      	str	r2, [r3, #4]
	
}
 80037e2:	bf00      	nop
 80037e4:	3728      	adds	r7, #40	; 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w
 80037f0:	00000000 	.word	0x00000000
 80037f4:	406fe000 	.word	0x406fe000
	...

08003800 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b08c      	sub	sp, #48	; 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <PID_Compute+0x14>
	{
		return _FALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	e0db      	b.n	80039cc <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003814:	f000 fdae 	bl	8004374 <HAL_GetTick>
 8003818:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	429a      	cmp	r2, r3
 800382c:	f0c0 80cd 	bcc.w	80039ca <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	f7fc fd1e 	bl	8000288 <__aeabi_dsub>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800385a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800385e:	f7fc fd13 	bl	8000288 <__aeabi_dsub>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003876:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800387a:	f7fc febd 	bl	80005f8 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fc fd01 	bl	800028c <__adddf3>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	f7fc fea4 	bl	80005f8 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	f7fc fce6 	bl	8000288 <__aeabi_dsub>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80038d2:	f7fd f921 	bl	8000b18 <__aeabi_dcmpgt>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d006      	beq.n	80038ea <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80038e8:	e010      	b.n	800390c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80038f6:	f7fd f8f1 	bl	8000adc <__aeabi_dcmplt>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800391a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800391e:	f7fc fe6b 	bl	80005f8 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800392a:	e005      	b.n	8003938 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003948:	f7fc fe56 	bl	80005f8 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4620      	mov	r0, r4
 8003952:	4629      	mov	r1, r5
 8003954:	f7fc fc98 	bl	8000288 <__aeabi_dsub>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003960:	f7fc fc94 	bl	800028c <__adddf3>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003976:	f7fd f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003986:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800398a:	e00e      	b.n	80039aa <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003996:	f7fd f8a1 	bl	8000adc <__aeabi_dcmplt>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80039a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80039ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039b2:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80039ca:	2300      	movs	r3, #0
	}
	
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3730      	adds	r7, #48	; 0x30
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bdb0      	pop	{r4, r5, r7, pc}

080039d4 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <PID_SetMode+0x2e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7ff fe79 	bl	80036f4 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	705a      	strb	r2, [r3, #1]
	
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6178      	str	r0, [r7, #20]
 8003a18:	ed87 0b02 	vstr	d0, [r7, #8]
 8003a1c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a28:	f7fd f86c 	bl	8000b04 <__aeabi_dcmpge>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d158      	bne.n	8003ae4 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a38:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a42:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d04b      	beq.n	8003ae6 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a5c:	f7fd f85c 	bl	8000b18 <__aeabi_dcmpgt>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a70:	e9c1 2300 	strd	r2, r3, [r1]
 8003a74:	e012      	b.n	8003a9c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a84:	f7fd f82a 	bl	8000adc <__aeabi_dcmplt>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a98:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003aa8:	f7fd f836 	bl	8000b18 <__aeabi_dcmpgt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003abe:	e012      	b.n	8003ae6 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003acc:	f7fd f806 	bl	8000adc <__aeabi_dcmplt>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003adc:	6979      	ldr	r1, [r7, #20]
 8003ade:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003ae2:	e000      	b.n	8003ae6 <PID_SetOutputLimits+0xd6>
		return;
 8003ae4:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	61f8      	str	r0, [r7, #28]
 8003af4:	ed87 0b04 	vstr	d0, [r7, #16]
 8003af8:	ed87 1b02 	vstr	d1, [r7, #8]
 8003afc:	ed87 2b00 	vstr	d2, [r7]
 8003b00:	460b      	mov	r3, r1
 8003b02:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b10:	f7fc ffe4 	bl	8000adc <__aeabi_dcmplt>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8089 	bne.w	8003c2e <PID_SetTunings2+0x142>
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b28:	f7fc ffd8 	bl	8000adc <__aeabi_dcmplt>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d17d      	bne.n	8003c2e <PID_SetTunings2+0x142>
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b3e:	f7fc ffcd 	bl	8000adc <__aeabi_dcmplt>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d172      	bne.n	8003c2e <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	7efa      	ldrb	r2, [r7, #27]
 8003b4c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003b4e:	7efb      	ldrb	r3, [r7, #27]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003b60:	69f9      	ldr	r1, [r7, #28]
 8003b62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b66:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003b6a:	69f9      	ldr	r1, [r7, #28]
 8003b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b70:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003b74:	69f9      	ldr	r1, [r7, #28]
 8003b76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fcbe 	bl	8000504 <__aeabi_ui2d>
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <PID_SetTunings2+0x14c>)
 8003b8e:	f7fc fe5d 	bl	800084c <__aeabi_ddiv>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8003b9a:	69f9      	ldr	r1, [r7, #28]
 8003b9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003ba4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bac:	f7fc fd24 	bl	80005f8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	69f9      	ldr	r1, [r7, #28]
 8003bb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bc2:	f7fc fe43 	bl	800084c <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	69f9      	ldr	r1, [r7, #28]
 8003bcc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	78db      	ldrb	r3, [r3, #3]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d12b      	bne.n	8003c30 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	f7fc fb4f 	bl	8000288 <__aeabi_dsub>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	69f9      	ldr	r1, [r7, #28]
 8003bf0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	f7fc fb41 	bl	8000288 <__aeabi_dsub>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	f7fc fb33 	bl	8000288 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	69f9      	ldr	r1, [r7, #28]
 8003c28:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003c2c:	e000      	b.n	8003c30 <PID_SetTunings2+0x144>
		return;
 8003c2e:	bf00      	nop
		
	}
	
}
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	408f4000 	.word	0x408f4000

08003c3c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02e      	beq.n	8003cae <PID_SetControllerDirection+0x72>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d029      	beq.n	8003cae <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	f7fc fb0e 	bl	8000288 <__aeabi_dsub>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	f7fc fb00 	bl	8000288 <__aeabi_dsub>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003c98:	f04f 0000 	mov.w	r0, #0
 8003c9c:	f04f 0100 	mov.w	r1, #0
 8003ca0:	f7fc faf2 	bl	8000288 <__aeabi_dsub>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	70da      	strb	r2, [r3, #3]
	
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	dd2e      	ble.n	8003d2a <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003ccc:	6838      	ldr	r0, [r7, #0]
 8003cce:	f7fc fc29 	bl	8000524 <__aeabi_i2d>
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	460d      	mov	r5, r1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fc12 	bl	8000504 <__aeabi_ui2d>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f7fc fdb0 	bl	800084c <__aeabi_ddiv>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfe:	f7fc fc7b 	bl	80005f8 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d16:	f7fc fd99 	bl	800084c <__aeabi_ddiv>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_MspInit+0x54>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <HAL_MspInit+0x54>)
 8003d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d48:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_MspInit+0x54>)
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_MspInit+0x54>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_MspInit+0x54>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_MspInit+0x54>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d72:	2200      	movs	r2, #0
 8003d74:	210f      	movs	r1, #15
 8003d76:	f06f 0001 	mvn.w	r0, #1
 8003d7a:	f000 fc06 	bl	800458a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800

08003d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_I2C_MspInit+0x84>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12c      	bne.n	8003e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd0:	2312      	movs	r3, #18
 8003dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ddc:	2304      	movs	r3, #4
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4619      	mov	r1, r3
 8003de6:	480c      	ldr	r0, [pc, #48]	; (8003e18 <HAL_I2C_MspInit+0x8c>)
 8003de8:	f001 f808 	bl	8004dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <HAL_I2C_MspInit+0x88>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e08:	bf00      	nop
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40020400 	.word	0x40020400

08003e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <HAL_TIM_Base_MspInit+0xe8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d12d      	bne.n	8003e9a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e64:	f043 0310 	orr.w	r3, r3, #16
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b27      	ldr	r3, [pc, #156]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8003e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8003e8c:	f107 031c 	add.w	r3, r7, #28
 8003e90:	4619      	mov	r1, r3
 8003e92:	481e      	ldr	r0, [pc, #120]	; (8003f0c <HAL_TIM_Base_MspInit+0xf0>)
 8003e94:	f000 ffb2 	bl	8004dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e98:	e030      	b.n	8003efc <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1c      	ldr	r2, [pc, #112]	; (8003f10 <HAL_TIM_Base_MspInit+0xf4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d12b      	bne.n	8003efc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	4a16      	ldr	r2, [pc, #88]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003eca:	f043 0304 	orr.w	r3, r3, #4
 8003ece:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <HAL_TIM_Base_MspInit+0xec>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003edc:	23c0      	movs	r3, #192	; 0xc0
 8003ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003eec:	2303      	movs	r3, #3
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4807      	ldr	r0, [pc, #28]	; (8003f14 <HAL_TIM_Base_MspInit+0xf8>)
 8003ef8:	f000 ff80 	bl	8004dfc <HAL_GPIO_Init>
}
 8003efc:	bf00      	nop
 8003efe:	3730      	adds	r7, #48	; 0x30
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40010400 	.word	0x40010400
 8003f14:	40020800 	.word	0x40020800

08003f18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 031c 	add.w	r3, r7, #28
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f38:	d14b      	bne.n	8003fd2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a3e      	ldr	r2, [pc, #248]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b3c      	ldr	r3, [pc, #240]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a37      	ldr	r2, [pc, #220]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b35      	ldr	r3, [pc, #212]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a30      	ldr	r2, [pc, #192]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4825      	ldr	r0, [pc, #148]	; (8004040 <HAL_TIM_Encoder_MspInit+0x128>)
 8003fac:	f000 ff26 	bl	8004dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	f107 031c 	add.w	r3, r7, #28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481e      	ldr	r0, [pc, #120]	; (8004044 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003fcc:	f000 ff16 	bl	8004dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fd0:	e030      	b.n	8004034 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <HAL_TIM_Encoder_MspInit+0x130>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d12b      	bne.n	8004034 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	6413      	str	r3, [r2, #64]	; 0x40
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	4a0e      	ldr	r2, [pc, #56]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6313      	str	r3, [r2, #48]	; 0x30
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_TIM_Encoder_MspInit+0x124>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004014:	23c0      	movs	r3, #192	; 0xc0
 8004016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004024:	2302      	movs	r3, #2
 8004026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	4804      	ldr	r0, [pc, #16]	; (8004040 <HAL_TIM_Encoder_MspInit+0x128>)
 8004030:	f000 fee4 	bl	8004dfc <HAL_GPIO_Init>
}
 8004034:	bf00      	nop
 8004036:	3730      	adds	r7, #48	; 0x30
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40023800 	.word	0x40023800
 8004040:	40020000 	.word	0x40020000
 8004044:	40020400 	.word	0x40020400
 8004048:	40000400 	.word	0x40000400

0800404c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a35      	ldr	r2, [pc, #212]	; (8004140 <HAL_UART_MspInit+0xf4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d163      	bne.n	8004136 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	4b34      	ldr	r3, [pc, #208]	; (8004144 <HAL_UART_MspInit+0xf8>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a33      	ldr	r2, [pc, #204]	; (8004144 <HAL_UART_MspInit+0xf8>)
 8004078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_UART_MspInit+0xf8>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_UART_MspInit+0xf8>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a2c      	ldr	r2, [pc, #176]	; (8004144 <HAL_UART_MspInit+0xf8>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_UART_MspInit+0xf8>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80040a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b4:	2303      	movs	r3, #3
 80040b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040b8:	2307      	movs	r3, #7
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4619      	mov	r1, r3
 80040c2:	4821      	ldr	r0, [pc, #132]	; (8004148 <HAL_UART_MspInit+0xfc>)
 80040c4:	f000 fe9a 	bl	8004dfc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_UART_MspInit+0x100>)
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_UART_MspInit+0x104>)
 80040cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_UART_MspInit+0x100>)
 80040d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_UART_MspInit+0x100>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_UART_MspInit+0x100>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <HAL_UART_MspInit+0x100>)
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <HAL_UART_MspInit+0x100>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_UART_MspInit+0x100>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_UART_MspInit+0x100>)
 80040f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <HAL_UART_MspInit+0x100>)
 8004100:	2200      	movs	r2, #0
 8004102:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_UART_MspInit+0x100>)
 8004106:	2200      	movs	r2, #0
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800410a:	4810      	ldr	r0, [pc, #64]	; (800414c <HAL_UART_MspInit+0x100>)
 800410c:	f000 fa74 	bl	80045f8 <HAL_DMA_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004116:	f7ff f8b5 	bl	8003284 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_UART_MspInit+0x100>)
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <HAL_UART_MspInit+0x100>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2105      	movs	r1, #5
 800412a:	2027      	movs	r0, #39	; 0x27
 800412c:	f000 fa2d 	bl	800458a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004130:	2027      	movs	r0, #39	; 0x27
 8004132:	f000 fa46 	bl	80045c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004136:	bf00      	nop
 8004138:	3728      	adds	r7, #40	; 0x28
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40004800 	.word	0x40004800
 8004144:	40023800 	.word	0x40023800
 8004148:	40020800 	.word	0x40020800
 800414c:	200002a8 	.word	0x200002a8
 8004150:	40026028 	.word	0x40026028

08004154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <NMI_Handler+0x4>

0800415a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <MemManage_Handler+0x4>

08004166 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler+0x4>

0800416c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <UsageFault_Handler+0x4>

08004172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004184:	f000 f8e2 	bl	800434c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004188:	f006 fc3c 	bl	800aa04 <xTaskGetSchedulerState>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004192:	f007 fa21 	bl	800b5d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <DMA1_Stream1_IRQHandler+0x10>)
 80041a2:	f000 fbc1 	bl	8004928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200002a8 	.word	0x200002a8

080041b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <USART3_IRQHandler+0x10>)
 80041b6:	f003 fd65 	bl	8007c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000264 	.word	0x20000264

080041c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <_sbrk+0x5c>)
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <_sbrk+0x60>)
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <_sbrk+0x64>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <_sbrk+0x64>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <_sbrk+0x68>)
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <_sbrk+0x64>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d207      	bcs.n	8004204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f4:	f007 fc6a 	bl	800bacc <__errno>
 80041f8:	4603      	mov	r3, r0
 80041fa:	220c      	movs	r2, #12
 80041fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e009      	b.n	8004218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <_sbrk+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <_sbrk+0x64>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <_sbrk+0x64>)
 8004214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20020000 	.word	0x20020000
 8004224:	00000400 	.word	0x00000400
 8004228:	200008c8 	.word	0x200008c8
 800422c:	20005230 	.word	0x20005230

08004230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <SystemInit+0x20>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <SystemInit+0x20>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800428c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004258:	480d      	ldr	r0, [pc, #52]	; (8004290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800425a:	490e      	ldr	r1, [pc, #56]	; (8004294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800425c:	4a0e      	ldr	r2, [pc, #56]	; (8004298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800425e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004260:	e002      	b.n	8004268 <LoopCopyDataInit>

08004262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004266:	3304      	adds	r3, #4

08004268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800426a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800426c:	d3f9      	bcc.n	8004262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800426e:	4a0b      	ldr	r2, [pc, #44]	; (800429c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004270:	4c0b      	ldr	r4, [pc, #44]	; (80042a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004274:	e001      	b.n	800427a <LoopFillZerobss>

08004276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004278:	3204      	adds	r2, #4

0800427a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800427a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800427c:	d3fb      	bcc.n	8004276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800427e:	f7ff ffd7 	bl	8004230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004282:	f007 fc29 	bl	800bad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004286:	f7fd fa1d 	bl	80016c4 <main>
  bx  lr    
 800428a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800428c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004294:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004298:	0800d0cc 	.word	0x0800d0cc
  ldr r2, =_sbss
 800429c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80042a0:	20005230 	.word	0x20005230

080042a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042a4:	e7fe      	b.n	80042a4 <ADC_IRQHandler>
	...

080042a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <HAL_Init+0x40>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0d      	ldr	r2, [pc, #52]	; (80042e8 <HAL_Init+0x40>)
 80042b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_Init+0x40>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <HAL_Init+0x40>)
 80042be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <HAL_Init+0x40>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <HAL_Init+0x40>)
 80042ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d0:	2003      	movs	r0, #3
 80042d2:	f000 f94f 	bl	8004574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042d6:	200f      	movs	r0, #15
 80042d8:	f000 f808 	bl	80042ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042dc:	f7ff fd2a 	bl	8003d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40023c00 	.word	0x40023c00

080042ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <HAL_InitTick+0x54>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b12      	ldr	r3, [pc, #72]	; (8004344 <HAL_InitTick+0x58>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004302:	fbb3 f3f1 	udiv	r3, r3, r1
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f967 	bl	80045de <HAL_SYSTICK_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e00e      	b.n	8004338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b0f      	cmp	r3, #15
 800431e:	d80a      	bhi.n	8004336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004320:	2200      	movs	r2, #0
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	f000 f92f 	bl	800458a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800432c:	4a06      	ldr	r2, [pc, #24]	; (8004348 <HAL_InitTick+0x5c>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000030 	.word	0x20000030
 8004344:	20000038 	.word	0x20000038
 8004348:	20000034 	.word	0x20000034

0800434c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_IncTick+0x20>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_IncTick+0x24>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4413      	add	r3, r2
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <HAL_IncTick+0x24>)
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000038 	.word	0x20000038
 8004370:	200008cc 	.word	0x200008cc

08004374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return uwTick;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_GetTick+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	200008cc 	.word	0x200008cc

0800438c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7ff ffee 	bl	8004374 <HAL_GetTick>
 8004398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d005      	beq.n	80043b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <HAL_Delay+0x44>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043b2:	bf00      	nop
 80043b4:	f7ff ffde 	bl	8004374 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d8f7      	bhi.n	80043b4 <HAL_Delay+0x28>
  {
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000038 	.word	0x20000038

080043d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f0:	4013      	ands	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <__NVIC_SetPriorityGrouping+0x44>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <__NVIC_GetPriorityGrouping+0x18>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f003 0307 	and.w	r3, r3, #7
}
 800442a:	4618      	mov	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db0b      	blt.n	8004462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	4907      	ldr	r1, [pc, #28]	; (8004470 <__NVIC_EnableIRQ+0x38>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2001      	movs	r0, #1
 800445a:	fa00 f202 	lsl.w	r2, r0, r2
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	e000e100 	.word	0xe000e100

08004474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	; (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	; (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f1c3 0307 	rsb	r3, r3, #7
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	bf28      	it	cs
 80044e6:	2304      	movcs	r3, #4
 80044e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d902      	bls.n	80044f8 <NVIC_EncodePriority+0x30>
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3b03      	subs	r3, #3
 80044f6:	e000      	b.n	80044fa <NVIC_EncodePriority+0x32>
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	401a      	ands	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004510:	f04f 31ff 	mov.w	r1, #4294967295
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	43d9      	mvns	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004520:	4313      	orrs	r3, r2
         );
}
 8004522:	4618      	mov	r0, r3
 8004524:	3724      	adds	r7, #36	; 0x24
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3b01      	subs	r3, #1
 800453c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004540:	d301      	bcc.n	8004546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004542:	2301      	movs	r3, #1
 8004544:	e00f      	b.n	8004566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004546:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <SysTick_Config+0x40>)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800454e:	210f      	movs	r1, #15
 8004550:	f04f 30ff 	mov.w	r0, #4294967295
 8004554:	f7ff ff8e 	bl	8004474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <SysTick_Config+0x40>)
 800455a:	2200      	movs	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800455e:	4b04      	ldr	r3, [pc, #16]	; (8004570 <SysTick_Config+0x40>)
 8004560:	2207      	movs	r2, #7
 8004562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	e000e010 	.word	0xe000e010

08004574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff29 	bl	80043d4 <__NVIC_SetPriorityGrouping>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800458a:	b580      	push	{r7, lr}
 800458c:	b086      	sub	sp, #24
 800458e:	af00      	add	r7, sp, #0
 8004590:	4603      	mov	r3, r0
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800459c:	f7ff ff3e 	bl	800441c <__NVIC_GetPriorityGrouping>
 80045a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	6978      	ldr	r0, [r7, #20]
 80045a8:	f7ff ff8e 	bl	80044c8 <NVIC_EncodePriority>
 80045ac:	4602      	mov	r2, r0
 80045ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff5d 	bl	8004474 <__NVIC_SetPriority>
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	4603      	mov	r3, r0
 80045ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff ff31 	bl	8004438 <__NVIC_EnableIRQ>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ffa2 	bl	8004530 <SysTick_Config>
 80045ec:	4603      	mov	r3, r0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7ff feb6 	bl	8004374 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e099      	b.n	8004748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004634:	e00f      	b.n	8004656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004636:	f7ff fe9d 	bl	8004374 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b05      	cmp	r3, #5
 8004642:	d908      	bls.n	8004656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2203      	movs	r2, #3
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e078      	b.n	8004748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e8      	bne.n	8004636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <HAL_DMA_Init+0x158>)
 8004670:	4013      	ands	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800469a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d107      	bne.n	80046c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4313      	orrs	r3, r2
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0307 	bic.w	r3, r3, #7
 80046d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d117      	bne.n	800471a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb01 	bl	8004d04 <DMA_CheckFifoParam>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004716:	2301      	movs	r3, #1
 8004718:	e016      	b.n	8004748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fab8 	bl	8004c98 <DMA_CalcBaseAndBitshift>
 8004728:	4603      	mov	r3, r0
 800472a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	223f      	movs	r2, #63	; 0x3f
 8004732:	409a      	lsls	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	f010803f 	.word	0xf010803f

08004754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_DMA_Start_IT+0x26>
 8004776:	2302      	movs	r3, #2
 8004778:	e040      	b.n	80047fc <HAL_DMA_Start_IT+0xa8>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d12f      	bne.n	80047ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa4a 	bl	8004c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	223f      	movs	r2, #63	; 0x3f
 80047ae:	409a      	lsls	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0216 	orr.w	r2, r2, #22
 80047c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0208 	orr.w	r2, r2, #8
 80047da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e005      	b.n	80047fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
 80047f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004812:	f7ff fdaf 	bl	8004374 <HAL_GetTick>
 8004816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d008      	beq.n	8004836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e052      	b.n	80048dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0216 	bic.w	r2, r2, #22
 8004844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_DMA_Abort+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0208 	bic.w	r2, r2, #8
 8004874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004886:	e013      	b.n	80048b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004888:	f7ff fd74 	bl	8004374 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b05      	cmp	r3, #5
 8004894:	d90c      	bls.n	80048b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2203      	movs	r2, #3
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e015      	b.n	80048dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e4      	bne.n	8004888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	223f      	movs	r2, #63	; 0x3f
 80048c4:	409a      	lsls	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d004      	beq.n	8004902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2280      	movs	r2, #128	; 0x80
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e00c      	b.n	800491c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2205      	movs	r2, #5
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004934:	4b8e      	ldr	r3, [pc, #568]	; (8004b70 <HAL_DMA_IRQHandler+0x248>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a8e      	ldr	r2, [pc, #568]	; (8004b74 <HAL_DMA_IRQHandler+0x24c>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	2208      	movs	r2, #8
 8004954:	409a      	lsls	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01a      	beq.n	8004994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0204 	bic.w	r2, r2, #4
 800497a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	2208      	movs	r2, #8
 8004982:	409a      	lsls	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2201      	movs	r2, #1
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d012      	beq.n	80049ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	2201      	movs	r2, #1
 80049b8:	409a      	lsls	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2204      	movs	r2, #4
 80049d0:	409a      	lsls	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d012      	beq.n	8004a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00b      	beq.n	8004a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ec:	2204      	movs	r2, #4
 80049ee:	409a      	lsls	r2, r3
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2210      	movs	r2, #16
 8004a06:	409a      	lsls	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d043      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d03c      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	2210      	movs	r2, #16
 8004a24:	409a      	lsls	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d018      	beq.n	8004a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d108      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d024      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
 8004a56:	e01f      	b.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01b      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	e016      	b.n	8004a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0208 	bic.w	r2, r2, #8
 8004a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 808f 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8087 	beq.w	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	2220      	movs	r2, #32
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d136      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0216 	bic.w	r2, r2, #22
 8004ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <HAL_DMA_IRQHandler+0x1da>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0208 	bic.w	r2, r2, #8
 8004b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	223f      	movs	r2, #63	; 0x3f
 8004b18:	409a      	lsls	r2, r3
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d07e      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	4798      	blx	r3
        }
        return;
 8004b3e:	e079      	b.n	8004c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01d      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d031      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e02c      	b.n	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
 8004b6e:	bf00      	nop
 8004b70:	20000030 	.word	0x20000030
 8004b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d023      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
 8004b88:	e01e      	b.n	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0210 	bic.w	r2, r2, #16
 8004ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d032      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2205      	movs	r2, #5
 8004be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d307      	bcc.n	8004c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f2      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x2cc>
 8004c0e:	e000      	b.n	8004c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
 8004c32:	e000      	b.n	8004c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c34:	bf00      	nop
    }
  }
}
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d108      	bne.n	8004c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c7a:	e007      	b.n	8004c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3b10      	subs	r3, #16
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <DMA_CalcBaseAndBitshift+0x64>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cb2:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <DMA_CalcBaseAndBitshift+0x68>)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d909      	bls.n	8004cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	1d1a      	adds	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8004cd8:	e007      	b.n	8004cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	aaaaaaab 	.word	0xaaaaaaab
 8004d00:	0800d080 	.word	0x0800d080

08004d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11f      	bne.n	8004d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d856      	bhi.n	8004dd2 <DMA_CheckFifoParam+0xce>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <DMA_CheckFifoParam+0x28>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d3d 	.word	0x08004d3d
 8004d38:	08004dd3 	.word	0x08004dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d046      	beq.n	8004dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d4c:	e043      	b.n	8004dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d56:	d140      	bne.n	8004dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5c:	e03d      	b.n	8004dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d66:	d121      	bne.n	8004dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d837      	bhi.n	8004dde <DMA_CheckFifoParam+0xda>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <DMA_CheckFifoParam+0x70>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d8b 	.word	0x08004d8b
 8004d7c:	08004d85 	.word	0x08004d85
 8004d80:	08004d9d 	.word	0x08004d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e030      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d025      	beq.n	8004de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9a:	e022      	b.n	8004de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da4:	d11f      	bne.n	8004de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004daa:	e01c      	b.n	8004de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d903      	bls.n	8004dba <DMA_CheckFifoParam+0xb6>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d003      	beq.n	8004dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004db8:	e018      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbe:	e015      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00e      	beq.n	8004dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	e00b      	b.n	8004dea <DMA_CheckFifoParam+0xe6>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e00a      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e008      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e006      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;
 8004dde:	bf00      	nop
 8004de0:	e004      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;
 8004de2:	bf00      	nop
 8004de4:	e002      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;   
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <DMA_CheckFifoParam+0xe8>
      break;
 8004dea:	bf00      	nop
    }
  } 
  
  return status; 
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop

08004dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	; 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e16b      	b.n	80050f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e18:	2201      	movs	r2, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	f040 815a 	bne.w	80050ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d005      	beq.n	8004e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d130      	bne.n	8004eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	2203      	movs	r2, #3
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e84:	2201      	movs	r2, #1
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 0201 	and.w	r2, r3, #1
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d017      	beq.n	8004eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d123      	bne.n	8004f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	08da      	lsrs	r2, r3, #3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3208      	adds	r2, #8
 8004f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	220f      	movs	r2, #15
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	08da      	lsrs	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3208      	adds	r2, #8
 8004f3a:	69b9      	ldr	r1, [r7, #24]
 8004f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0203 	and.w	r2, r3, #3
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b4 	beq.w	80050ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	4b60      	ldr	r3, [pc, #384]	; (8005108 <HAL_GPIO_Init+0x30c>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	4a5f      	ldr	r2, [pc, #380]	; (8005108 <HAL_GPIO_Init+0x30c>)
 8004f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f90:	6453      	str	r3, [r2, #68]	; 0x44
 8004f92:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <HAL_GPIO_Init+0x30c>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f9e:	4a5b      	ldr	r2, [pc, #364]	; (800510c <HAL_GPIO_Init+0x310>)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	3302      	adds	r3, #2
 8004fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	220f      	movs	r2, #15
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_GPIO_Init+0x314>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d02b      	beq.n	8005022 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_GPIO_Init+0x318>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d025      	beq.n	800501e <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_GPIO_Init+0x31c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4f      	ldr	r2, [pc, #316]	; (800511c <HAL_GPIO_Init+0x320>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d019      	beq.n	8005016 <HAL_GPIO_Init+0x21a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a4e      	ldr	r2, [pc, #312]	; (8005120 <HAL_GPIO_Init+0x324>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_GPIO_Init+0x216>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a4d      	ldr	r2, [pc, #308]	; (8005124 <HAL_GPIO_Init+0x328>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00d      	beq.n	800500e <HAL_GPIO_Init+0x212>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a4c      	ldr	r2, [pc, #304]	; (8005128 <HAL_GPIO_Init+0x32c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <HAL_GPIO_Init+0x20e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a4b      	ldr	r2, [pc, #300]	; (800512c <HAL_GPIO_Init+0x330>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_GPIO_Init+0x20a>
 8005002:	2307      	movs	r3, #7
 8005004:	e00e      	b.n	8005024 <HAL_GPIO_Init+0x228>
 8005006:	2308      	movs	r3, #8
 8005008:	e00c      	b.n	8005024 <HAL_GPIO_Init+0x228>
 800500a:	2306      	movs	r3, #6
 800500c:	e00a      	b.n	8005024 <HAL_GPIO_Init+0x228>
 800500e:	2305      	movs	r3, #5
 8005010:	e008      	b.n	8005024 <HAL_GPIO_Init+0x228>
 8005012:	2304      	movs	r3, #4
 8005014:	e006      	b.n	8005024 <HAL_GPIO_Init+0x228>
 8005016:	2303      	movs	r3, #3
 8005018:	e004      	b.n	8005024 <HAL_GPIO_Init+0x228>
 800501a:	2302      	movs	r3, #2
 800501c:	e002      	b.n	8005024 <HAL_GPIO_Init+0x228>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <HAL_GPIO_Init+0x228>
 8005022:	2300      	movs	r3, #0
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	f002 0203 	and.w	r2, r2, #3
 800502a:	0092      	lsls	r2, r2, #2
 800502c:	4093      	lsls	r3, r2
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005034:	4935      	ldr	r1, [pc, #212]	; (800510c <HAL_GPIO_Init+0x310>)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	089b      	lsrs	r3, r3, #2
 800503a:	3302      	adds	r3, #2
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005042:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_GPIO_Init+0x334>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	43db      	mvns	r3, r3
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	4013      	ands	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005066:	4a32      	ldr	r2, [pc, #200]	; (8005130 <HAL_GPIO_Init+0x334>)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800506c:	4b30      	ldr	r3, [pc, #192]	; (8005130 <HAL_GPIO_Init+0x334>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	43db      	mvns	r3, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4013      	ands	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005090:	4a27      	ldr	r2, [pc, #156]	; (8005130 <HAL_GPIO_Init+0x334>)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005096:	4b26      	ldr	r3, [pc, #152]	; (8005130 <HAL_GPIO_Init+0x334>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <HAL_GPIO_Init+0x334>)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <HAL_GPIO_Init+0x334>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050e4:	4a12      	ldr	r2, [pc, #72]	; (8005130 <HAL_GPIO_Init+0x334>)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	f67f ae90 	bls.w	8004e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	40013800 	.word	0x40013800
 8005110:	40020000 	.word	0x40020000
 8005114:	40020400 	.word	0x40020400
 8005118:	40020800 	.word	0x40020800
 800511c:	40020c00 	.word	0x40020c00
 8005120:	40021000 	.word	0x40021000
 8005124:	40021400 	.word	0x40021400
 8005128:	40021800 	.word	0x40021800
 800512c:	40021c00 	.word	0x40021c00
 8005130:	40013c00 	.word	0x40013c00

08005134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e001      	b.n	8005156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005180:	e003      	b.n	800518a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	619a      	str	r2, [r3, #24]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051a8:	887a      	ldrh	r2, [r7, #2]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4013      	ands	r3, r2
 80051ae:	041a      	lsls	r2, r3, #16
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	43d9      	mvns	r1, r3
 80051b4:	887b      	ldrh	r3, [r7, #2]
 80051b6:	400b      	ands	r3, r1
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	619a      	str	r2, [r3, #24]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e12b      	b.n	8005436 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fe fdca 	bl	8003d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	; 0x24
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005230:	f001 fbe4 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 8005234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	4a81      	ldr	r2, [pc, #516]	; (8005440 <HAL_I2C_Init+0x274>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d807      	bhi.n	8005250 <HAL_I2C_Init+0x84>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a80      	ldr	r2, [pc, #512]	; (8005444 <HAL_I2C_Init+0x278>)
 8005244:	4293      	cmp	r3, r2
 8005246:	bf94      	ite	ls
 8005248:	2301      	movls	r3, #1
 800524a:	2300      	movhi	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	e006      	b.n	800525e <HAL_I2C_Init+0x92>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a7d      	ldr	r2, [pc, #500]	; (8005448 <HAL_I2C_Init+0x27c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	bf94      	ite	ls
 8005258:	2301      	movls	r3, #1
 800525a:	2300      	movhi	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0e7      	b.n	8005436 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a78      	ldr	r2, [pc, #480]	; (800544c <HAL_I2C_Init+0x280>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0c9b      	lsrs	r3, r3, #18
 8005270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	430a      	orrs	r2, r1
 8005284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a6a      	ldr	r2, [pc, #424]	; (8005440 <HAL_I2C_Init+0x274>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d802      	bhi.n	80052a0 <HAL_I2C_Init+0xd4>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	3301      	adds	r3, #1
 800529e:	e009      	b.n	80052b4 <HAL_I2C_Init+0xe8>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	4a69      	ldr	r2, [pc, #420]	; (8005450 <HAL_I2C_Init+0x284>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	099b      	lsrs	r3, r3, #6
 80052b2:	3301      	adds	r3, #1
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	495c      	ldr	r1, [pc, #368]	; (8005440 <HAL_I2C_Init+0x274>)
 80052d0:	428b      	cmp	r3, r1
 80052d2:	d819      	bhi.n	8005308 <HAL_I2C_Init+0x13c>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1e59      	subs	r1, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e2:	1c59      	adds	r1, r3, #1
 80052e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052e8:	400b      	ands	r3, r1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <HAL_I2C_Init+0x138>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1e59      	subs	r1, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80052fc:	3301      	adds	r3, #1
 80052fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005302:	e051      	b.n	80053a8 <HAL_I2C_Init+0x1dc>
 8005304:	2304      	movs	r3, #4
 8005306:	e04f      	b.n	80053a8 <HAL_I2C_Init+0x1dc>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d111      	bne.n	8005334 <HAL_I2C_Init+0x168>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1e58      	subs	r0, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6859      	ldr	r1, [r3, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	440b      	add	r3, r1
 800531e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005322:	3301      	adds	r3, #1
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf0c      	ite	eq
 800532c:	2301      	moveq	r3, #1
 800532e:	2300      	movne	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	e012      	b.n	800535a <HAL_I2C_Init+0x18e>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1e58      	subs	r0, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	0099      	lsls	r1, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	fbb0 f3f3 	udiv	r3, r0, r3
 800534a:	3301      	adds	r3, #1
 800534c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_I2C_Init+0x196>
 800535e:	2301      	movs	r3, #1
 8005360:	e022      	b.n	80053a8 <HAL_I2C_Init+0x1dc>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10e      	bne.n	8005388 <HAL_I2C_Init+0x1bc>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1e58      	subs	r0, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6859      	ldr	r1, [r3, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	440b      	add	r3, r1
 8005378:	fbb0 f3f3 	udiv	r3, r0, r3
 800537c:	3301      	adds	r3, #1
 800537e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005386:	e00f      	b.n	80053a8 <HAL_I2C_Init+0x1dc>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1e58      	subs	r0, r3, #1
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	0099      	lsls	r1, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	fbb0 f3f3 	udiv	r3, r0, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	6809      	ldr	r1, [r1, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69da      	ldr	r2, [r3, #28]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6911      	ldr	r1, [r2, #16]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68d2      	ldr	r2, [r2, #12]
 80053e2:	4311      	orrs	r1, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	000186a0 	.word	0x000186a0
 8005444:	001e847f 	.word	0x001e847f
 8005448:	003d08ff 	.word	0x003d08ff
 800544c:	431bde83 	.word	0x431bde83
 8005450:	10624dd3 	.word	0x10624dd3

08005454 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800546e:	f7fe ff81 	bl	8004374 <HAL_GetTick>
 8005472:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b20      	cmp	r3, #32
 800547e:	f040 80d9 	bne.w	8005634 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2319      	movs	r3, #25
 8005488:	2201      	movs	r2, #1
 800548a:	496d      	ldr	r1, [pc, #436]	; (8005640 <HAL_I2C_Mem_Write+0x1ec>)
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fc7f 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
 800549a:	e0cc      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_I2C_Mem_Write+0x56>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e0c5      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d007      	beq.n	80054d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2221      	movs	r2, #33	; 0x21
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a4d      	ldr	r2, [pc, #308]	; (8005644 <HAL_I2C_Mem_Write+0x1f0>)
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005512:	88f8      	ldrh	r0, [r7, #6]
 8005514:	893a      	ldrh	r2, [r7, #8]
 8005516:	8979      	ldrh	r1, [r7, #10]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	9301      	str	r3, [sp, #4]
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	4603      	mov	r3, r0
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fab6 	bl	8005a94 <I2C_RequestMemoryWrite>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d052      	beq.n	80055d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e081      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fd00 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005558:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e06b      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b04      	cmp	r3, #4
 800559a:	d11b      	bne.n	80055d4 <HAL_I2C_Mem_Write+0x180>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	781a      	ldrb	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1aa      	bne.n	8005532 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fcec 	bl	8005fbe <I2C_WaitOnBTFFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d107      	bne.n	8005604 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005602:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e016      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005616:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	e000      	b.n	8005636 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005634:	2302      	movs	r3, #2
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	00100002 	.word	0x00100002
 8005644:	ffff0000 	.word	0xffff0000

08005648 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	; 0x30
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	4608      	mov	r0, r1
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	4603      	mov	r3, r0
 8005658:	817b      	strh	r3, [r7, #10]
 800565a:	460b      	mov	r3, r1
 800565c:	813b      	strh	r3, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005662:	f7fe fe87 	bl	8004374 <HAL_GetTick>
 8005666:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b20      	cmp	r3, #32
 8005672:	f040 8208 	bne.w	8005a86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	2319      	movs	r3, #25
 800567c:	2201      	movs	r2, #1
 800567e:	497b      	ldr	r1, [pc, #492]	; (800586c <HAL_I2C_Mem_Read+0x224>)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fb85 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800568c:	2302      	movs	r3, #2
 800568e:	e1fb      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_I2C_Mem_Read+0x56>
 800569a:	2302      	movs	r3, #2
 800569c:	e1f4      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d007      	beq.n	80056c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2222      	movs	r2, #34	; 0x22
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2240      	movs	r2, #64	; 0x40
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4a5b      	ldr	r2, [pc, #364]	; (8005870 <HAL_I2C_Mem_Read+0x228>)
 8005704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005706:	88f8      	ldrh	r0, [r7, #6]
 8005708:	893a      	ldrh	r2, [r7, #8]
 800570a:	8979      	ldrh	r1, [r7, #10]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4603      	mov	r3, r0
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa52 	bl	8005bc0 <I2C_RequestMemoryRead>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e1b0      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d113      	bne.n	8005756 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	623b      	str	r3, [r7, #32]
 8005742:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	e184      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	2b01      	cmp	r3, #1
 800575c:	d11b      	bne.n	8005796 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	e164      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	2b02      	cmp	r3, #2
 800579c:	d11b      	bne.n	80057d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	e144      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057ec:	e138      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	f200 80f1 	bhi.w	80059da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d123      	bne.n	8005848 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fc1b 	bl	8006040 <I2C_WaitOnRXNEFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e139      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005846:	e10b      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	2b02      	cmp	r3, #2
 800584e:	d14e      	bne.n	80058ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	2200      	movs	r2, #0
 8005858:	4906      	ldr	r1, [pc, #24]	; (8005874 <HAL_I2C_Mem_Read+0x22c>)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fa98 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e10e      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
 800586a:	bf00      	nop
 800586c:	00100002 	.word	0x00100002
 8005870:	ffff0000 	.word	0xffff0000
 8005874:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	b2d2      	uxtb	r2, r2
 80058c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ec:	e0b8      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2200      	movs	r2, #0
 80058f6:	4966      	ldr	r1, [pc, #408]	; (8005a90 <HAL_I2C_Mem_Read+0x448>)
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fa49 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0bf      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	2200      	movs	r2, #0
 8005952:	494f      	ldr	r1, [pc, #316]	; (8005a90 <HAL_I2C_Mem_Read+0x448>)
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fa1b 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e091      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059d8:	e042      	b.n	8005a60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fb2e 	bl	8006040 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e04c      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d118      	bne.n	8005a60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f47f aec2 	bne.w	80057ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	00010004 	.word	0x00010004

08005a94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	813b      	strh	r3, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f960 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae4:	d103      	bne.n	8005aee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e05f      	b.n	8005bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005af2:	897b      	ldrh	r3, [r7, #10]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	492d      	ldr	r1, [pc, #180]	; (8005bbc <I2C_RequestMemoryWrite+0x128>)
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 f998 	bl	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e04c      	b.n	8005bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fa02 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d107      	bne.n	8005b56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e02b      	b.n	8005bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b60:	893b      	ldrh	r3, [r7, #8]
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	611a      	str	r2, [r3, #16]
 8005b6a:	e021      	b.n	8005bb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b6c:	893b      	ldrh	r3, [r7, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	6a39      	ldr	r1, [r7, #32]
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f9dc 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d107      	bne.n	8005ba2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e005      	b.n	8005bb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba6:	893b      	ldrh	r3, [r7, #8]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	00010002 	.word	0x00010002

08005bc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	817b      	strh	r3, [r7, #10]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	813b      	strh	r3, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005be8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f8c2 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c20:	d103      	bne.n	8005c2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0aa      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c2e:	897b      	ldrh	r3, [r7, #10]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	4952      	ldr	r1, [pc, #328]	; (8005d8c <I2C_RequestMemoryRead+0x1cc>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f8fa 	bl	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e097      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f964 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d107      	bne.n	8005c92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e076      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d105      	bne.n	8005ca8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9c:	893b      	ldrh	r3, [r7, #8]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	e021      	b.n	8005cec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca8:	893b      	ldrh	r3, [r7, #8]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb8:	6a39      	ldr	r1, [r7, #32]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f93e 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00d      	beq.n	8005ce2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d107      	bne.n	8005cde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e050      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce2:	893b      	ldrh	r3, [r7, #8]
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	6a39      	ldr	r1, [r7, #32]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f923 	bl	8005f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d107      	bne.n	8005d14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e035      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f82b 	bl	8005d90 <I2C_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4e:	d103      	bne.n	8005d58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e013      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d5c:	897b      	ldrh	r3, [r7, #10]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	6a3a      	ldr	r2, [r7, #32]
 8005d70:	4906      	ldr	r1, [pc, #24]	; (8005d8c <I2C_RequestMemoryRead+0x1cc>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f863 	bl	8005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	00010002 	.word	0x00010002

08005d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da0:	e025      	b.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d021      	beq.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fe fae3 	bl	8004374 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d116      	bne.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e023      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10d      	bne.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	43da      	mvns	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf0c      	ite	eq
 8005e0a:	2301      	moveq	r3, #1
 8005e0c:	2300      	movne	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	e00c      	b.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bf0c      	ite	eq
 8005e26:	2301      	moveq	r3, #1
 8005e28:	2300      	movne	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d0b6      	beq.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
 8005e4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e4c:	e051      	b.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d123      	bne.n	8005ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0204 	orr.w	r2, r3, #4
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e046      	b.n	8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d021      	beq.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eae:	f7fe fa61 	bl	8004374 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d302      	bcc.n	8005ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d116      	bne.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e020      	b.n	8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d10c      	bne.n	8005f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	43da      	mvns	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4013      	ands	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2301      	movne	r3, #1
 8005f10:	2300      	moveq	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	e00b      	b.n	8005f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	43da      	mvns	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d18d      	bne.n	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f48:	e02d      	b.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f8ce 	bl	80060ec <I2C_IsAcknowledgeFailed>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e02d      	b.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d021      	beq.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f62:	f7fe fa07 	bl	8004374 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d302      	bcc.n	8005f78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d116      	bne.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e007      	b.n	8005fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b80      	cmp	r3, #128	; 0x80
 8005fb2:	d1ca      	bne.n	8005f4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fca:	e02d      	b.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f88d 	bl	80060ec <I2C_IsAcknowledgeFailed>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e02d      	b.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d021      	beq.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe4:	f7fe f9c6 	bl	8004374 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d302      	bcc.n	8005ffa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d116      	bne.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e007      	b.n	8006038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d1ca      	bne.n	8005fcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800604c:	e042      	b.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d119      	bne.n	8006090 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0210 	mvn.w	r2, #16
 8006064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e029      	b.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006090:	f7fe f970 	bl	8004374 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	d302      	bcc.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d116      	bne.n	80060d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e007      	b.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d1b5      	bne.n	800604e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006102:	d11b      	bne.n	800613c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800610c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0204 	orr.w	r2, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_PWR_EnableBkUpAccess+0x20>)
 8006154:	2201      	movs	r2, #1
 8006156:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <HAL_PWR_EnableBkUpAccess+0x24>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800615e:	687b      	ldr	r3, [r7, #4]
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	420e0020 	.word	0x420e0020
 8006170:	40007000 	.word	0x40007000

08006174 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_PWR_DisableBkUpAccess+0x20>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006186:	687b      	ldr	r3, [r7, #4]
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	420e0020 	.word	0x420e0020
 8006198:	40007000 	.word	0x40007000

0800619c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e267      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d075      	beq.n	80062a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ba:	4b88      	ldr	r3, [pc, #544]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 030c 	and.w	r3, r3, #12
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d00c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c6:	4b85      	ldr	r3, [pc, #532]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d112      	bne.n	80061f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d2:	4b82      	ldr	r3, [pc, #520]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061de:	d10b      	bne.n	80061f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e0:	4b7e      	ldr	r3, [pc, #504]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05b      	beq.n	80062a4 <HAL_RCC_OscConfig+0x108>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d157      	bne.n	80062a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e242      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006200:	d106      	bne.n	8006210 <HAL_RCC_OscConfig+0x74>
 8006202:	4b76      	ldr	r3, [pc, #472]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a75      	ldr	r2, [pc, #468]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e01d      	b.n	800624c <HAL_RCC_OscConfig+0xb0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006218:	d10c      	bne.n	8006234 <HAL_RCC_OscConfig+0x98>
 800621a:	4b70      	ldr	r3, [pc, #448]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a6f      	ldr	r2, [pc, #444]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b6d      	ldr	r3, [pc, #436]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a6c      	ldr	r2, [pc, #432]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 800622c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	e00b      	b.n	800624c <HAL_RCC_OscConfig+0xb0>
 8006234:	4b69      	ldr	r3, [pc, #420]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a68      	ldr	r2, [pc, #416]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 800623a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	4b66      	ldr	r3, [pc, #408]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a65      	ldr	r2, [pc, #404]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d013      	beq.n	800627c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fe f88e 	bl	8004374 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800625c:	f7fe f88a 	bl	8004374 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b64      	cmp	r3, #100	; 0x64
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e207      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	4b5b      	ldr	r3, [pc, #364]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0xc0>
 800627a:	e014      	b.n	80062a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fe f87a 	bl	8004374 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006284:	f7fe f876 	bl	8004374 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	; 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e1f3      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006296:	4b51      	ldr	r3, [pc, #324]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0xe8>
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d063      	beq.n	800637a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062b2:	4b4a      	ldr	r3, [pc, #296]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062be:	4b47      	ldr	r3, [pc, #284]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d11c      	bne.n	8006304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ca:	4b44      	ldr	r3, [pc, #272]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d116      	bne.n	8006304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062d6:	4b41      	ldr	r3, [pc, #260]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <HAL_RCC_OscConfig+0x152>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d001      	beq.n	80062ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e1c7      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ee:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4937      	ldr	r1, [pc, #220]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006302:	e03a      	b.n	800637a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d020      	beq.n	800634e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800630c:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <HAL_RCC_OscConfig+0x244>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fe f82f 	bl	8004374 <HAL_GetTick>
 8006316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631a:	f7fe f82b 	bl	8004374 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e1a8      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632c:	4b2b      	ldr	r3, [pc, #172]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006338:	4b28      	ldr	r3, [pc, #160]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4925      	ldr	r1, [pc, #148]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006348:	4313      	orrs	r3, r2
 800634a:	600b      	str	r3, [r1, #0]
 800634c:	e015      	b.n	800637a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <HAL_RCC_OscConfig+0x244>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fe f80e 	bl	8004374 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800635c:	f7fe f80a 	bl	8004374 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e187      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636e:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d036      	beq.n	80063f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d016      	beq.n	80063bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <HAL_RCC_OscConfig+0x248>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006394:	f7fd ffee 	bl	8004374 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800639c:	f7fd ffea 	bl	8004374 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e167      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <HAL_RCC_OscConfig+0x240>)
 80063b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0x200>
 80063ba:	e01b      	b.n	80063f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063bc:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <HAL_RCC_OscConfig+0x248>)
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c2:	f7fd ffd7 	bl	8004374 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c8:	e00e      	b.n	80063e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ca:	f7fd ffd3 	bl	8004374 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d907      	bls.n	80063e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e150      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
 80063dc:	40023800 	.word	0x40023800
 80063e0:	42470000 	.word	0x42470000
 80063e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e8:	4b88      	ldr	r3, [pc, #544]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80063ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1ea      	bne.n	80063ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8097 	beq.w	8006530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006402:	2300      	movs	r3, #0
 8006404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006406:	4b81      	ldr	r3, [pc, #516]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10f      	bne.n	8006432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006412:	2300      	movs	r3, #0
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	4b7d      	ldr	r3, [pc, #500]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	4a7c      	ldr	r2, [pc, #496]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800641c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006420:	6413      	str	r3, [r2, #64]	; 0x40
 8006422:	4b7a      	ldr	r3, [pc, #488]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006432:	4b77      	ldr	r3, [pc, #476]	; (8006610 <HAL_RCC_OscConfig+0x474>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d118      	bne.n	8006470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800643e:	4b74      	ldr	r3, [pc, #464]	; (8006610 <HAL_RCC_OscConfig+0x474>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a73      	ldr	r2, [pc, #460]	; (8006610 <HAL_RCC_OscConfig+0x474>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644a:	f7fd ff93 	bl	8004374 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006452:	f7fd ff8f 	bl	8004374 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e10c      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006464:	4b6a      	ldr	r3, [pc, #424]	; (8006610 <HAL_RCC_OscConfig+0x474>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d106      	bne.n	8006486 <HAL_RCC_OscConfig+0x2ea>
 8006478:	4b64      	ldr	r3, [pc, #400]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800647a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647c:	4a63      	ldr	r2, [pc, #396]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	6713      	str	r3, [r2, #112]	; 0x70
 8006484:	e01c      	b.n	80064c0 <HAL_RCC_OscConfig+0x324>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b05      	cmp	r3, #5
 800648c:	d10c      	bne.n	80064a8 <HAL_RCC_OscConfig+0x30c>
 800648e:	4b5f      	ldr	r3, [pc, #380]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4a5e      	ldr	r2, [pc, #376]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006494:	f043 0304 	orr.w	r3, r3, #4
 8006498:	6713      	str	r3, [r2, #112]	; 0x70
 800649a:	4b5c      	ldr	r3, [pc, #368]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800649c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649e:	4a5b      	ldr	r2, [pc, #364]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064a0:	f043 0301 	orr.w	r3, r3, #1
 80064a4:	6713      	str	r3, [r2, #112]	; 0x70
 80064a6:	e00b      	b.n	80064c0 <HAL_RCC_OscConfig+0x324>
 80064a8:	4b58      	ldr	r3, [pc, #352]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a57      	ldr	r2, [pc, #348]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	4b55      	ldr	r3, [pc, #340]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b8:	4a54      	ldr	r2, [pc, #336]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064ba:	f023 0304 	bic.w	r3, r3, #4
 80064be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064c8:	f7fd ff54 	bl	8004374 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fd ff50 	bl	8004374 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	; 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e0cb      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e6:	4b49      	ldr	r3, [pc, #292]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0ee      	beq.n	80064d0 <HAL_RCC_OscConfig+0x334>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f4:	f7fd ff3e 	bl	8004374 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fa:	e00a      	b.n	8006512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064fc:	f7fd ff3a 	bl	8004374 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	f241 3288 	movw	r2, #5000	; 0x1388
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e0b5      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006512:	4b3e      	ldr	r3, [pc, #248]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1ee      	bne.n	80064fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d105      	bne.n	8006530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006524:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	4a38      	ldr	r2, [pc, #224]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800652a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800652e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80a1 	beq.w	800667c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800653a:	4b34      	ldr	r3, [pc, #208]	; (800660c <HAL_RCC_OscConfig+0x470>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b08      	cmp	r3, #8
 8006544:	d05c      	beq.n	8006600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d141      	bne.n	80065d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <HAL_RCC_OscConfig+0x478>)
 8006550:	2200      	movs	r2, #0
 8006552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006554:	f7fd ff0e 	bl	8004374 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655c:	f7fd ff0a 	bl	8004374 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e087      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656e:	4b27      	ldr	r3, [pc, #156]	; (800660c <HAL_RCC_OscConfig+0x470>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f0      	bne.n	800655c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69da      	ldr	r2, [r3, #28]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	019b      	lsls	r3, r3, #6
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	3b01      	subs	r3, #1
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	491b      	ldr	r1, [pc, #108]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <HAL_RCC_OscConfig+0x478>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065aa:	f7fd fee3 	bl	8004374 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b2:	f7fd fedf 	bl	8004374 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e05c      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x416>
 80065d0:	e054      	b.n	800667c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <HAL_RCC_OscConfig+0x478>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d8:	f7fd fecc 	bl	8004374 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fd fec8 	bl	8004374 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e045      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_RCC_OscConfig+0x470>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x444>
 80065fe:	e03d      	b.n	800667c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e038      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
 800660c:	40023800 	.word	0x40023800
 8006610:	40007000 	.word	0x40007000
 8006614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006618:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <HAL_RCC_OscConfig+0x4ec>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d028      	beq.n	8006678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006630:	429a      	cmp	r2, r3
 8006632:	d121      	bne.n	8006678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800663e:	429a      	cmp	r2, r3
 8006640:	d11a      	bne.n	8006678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006648:	4013      	ands	r3, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800664e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006650:	4293      	cmp	r3, r2
 8006652:	d111      	bne.n	8006678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	3b01      	subs	r3, #1
 8006662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006664:	429a      	cmp	r2, r3
 8006666:	d107      	bne.n	8006678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006674:	429a      	cmp	r2, r3
 8006676:	d001      	beq.n	800667c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023800 	.word	0x40023800

0800668c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0cc      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a0:	4b68      	ldr	r3, [pc, #416]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d90c      	bls.n	80066c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ae:	4b65      	ldr	r3, [pc, #404]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b6:	4b63      	ldr	r3, [pc, #396]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0b8      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d020      	beq.n	8006716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e0:	4b59      	ldr	r3, [pc, #356]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a58      	ldr	r2, [pc, #352]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066f8:	4b53      	ldr	r3, [pc, #332]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4a52      	ldr	r2, [pc, #328]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006704:	4b50      	ldr	r3, [pc, #320]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	494d      	ldr	r1, [pc, #308]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d044      	beq.n	80067ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d107      	bne.n	800673a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	4b47      	ldr	r3, [pc, #284]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d119      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e07f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d003      	beq.n	800674a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006746:	2b03      	cmp	r3, #3
 8006748:	d107      	bne.n	800675a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674a:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e06f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675a:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e067      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676a:	4b37      	ldr	r3, [pc, #220]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 0203 	bic.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4934      	ldr	r1, [pc, #208]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	4313      	orrs	r3, r2
 800677a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800677c:	f7fd fdfa 	bl	8004374 <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	e00a      	b.n	800679a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006784:	f7fd fdf6 	bl	8004374 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e04f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679a:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 020c 	and.w	r2, r3, #12
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d1eb      	bne.n	8006784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d20c      	bcs.n	80067d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e032      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4916      	ldr	r1, [pc, #88]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	490e      	ldr	r1, [pc, #56]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006812:	f000 f821 	bl	8006858 <HAL_RCC_GetSysClockFreq>
 8006816:	4602      	mov	r2, r0
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	490a      	ldr	r1, [pc, #40]	; (800684c <HAL_RCC_ClockConfig+0x1c0>)
 8006824:	5ccb      	ldrb	r3, [r1, r3]
 8006826:	fa22 f303 	lsr.w	r3, r2, r3
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_RCC_ClockConfig+0x1c4>)
 800682c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd fd5a 	bl	80042ec <HAL_InitTick>

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023c00 	.word	0x40023c00
 8006848:	40023800 	.word	0x40023800
 800684c:	0800d068 	.word	0x0800d068
 8006850:	20000030 	.word	0x20000030
 8006854:	20000034 	.word	0x20000034

08006858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800685c:	b090      	sub	sp, #64	; 0x40
 800685e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
 8006864:	2300      	movs	r3, #0
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006868:	2300      	movs	r3, #0
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006870:	4b59      	ldr	r3, [pc, #356]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 030c 	and.w	r3, r3, #12
 8006878:	2b08      	cmp	r3, #8
 800687a:	d00d      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x40>
 800687c:	2b08      	cmp	r3, #8
 800687e:	f200 80a1 	bhi.w	80069c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <HAL_RCC_GetSysClockFreq+0x34>
 8006886:	2b04      	cmp	r3, #4
 8006888:	d003      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x3a>
 800688a:	e09b      	b.n	80069c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800688c:	4b53      	ldr	r3, [pc, #332]	; (80069dc <HAL_RCC_GetSysClockFreq+0x184>)
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006890:	e09b      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006892:	4b53      	ldr	r3, [pc, #332]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006894:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006896:	e098      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006898:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068a2:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d028      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ae:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	099b      	lsrs	r3, r3, #6
 80068b4:	2200      	movs	r2, #0
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068c0:	2100      	movs	r1, #0
 80068c2:	4b47      	ldr	r3, [pc, #284]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068c4:	fb03 f201 	mul.w	r2, r3, r1
 80068c8:	2300      	movs	r3, #0
 80068ca:	fb00 f303 	mul.w	r3, r0, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	4a43      	ldr	r2, [pc, #268]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d2:	fba0 1202 	umull	r1, r2, r0, r2
 80068d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068d8:	460a      	mov	r2, r1
 80068da:	62ba      	str	r2, [r7, #40]	; 0x28
 80068dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068de:	4413      	add	r3, r2
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	2200      	movs	r2, #0
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	61fa      	str	r2, [r7, #28]
 80068ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068f2:	f7fa f9b3 	bl	8000c5c <__aeabi_uldivmod>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4613      	mov	r3, r2
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fe:	e053      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006900:	4b35      	ldr	r3, [pc, #212]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	2200      	movs	r2, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	617a      	str	r2, [r7, #20]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006912:	f04f 0b00 	mov.w	fp, #0
 8006916:	4652      	mov	r2, sl
 8006918:	465b      	mov	r3, fp
 800691a:	f04f 0000 	mov.w	r0, #0
 800691e:	f04f 0100 	mov.w	r1, #0
 8006922:	0159      	lsls	r1, r3, #5
 8006924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006928:	0150      	lsls	r0, r2, #5
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	ebb2 080a 	subs.w	r8, r2, sl
 8006932:	eb63 090b 	sbc.w	r9, r3, fp
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006942:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006946:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800694a:	ebb2 0408 	subs.w	r4, r2, r8
 800694e:	eb63 0509 	sbc.w	r5, r3, r9
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	00eb      	lsls	r3, r5, #3
 800695c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006960:	00e2      	lsls	r2, r4, #3
 8006962:	4614      	mov	r4, r2
 8006964:	461d      	mov	r5, r3
 8006966:	eb14 030a 	adds.w	r3, r4, sl
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	eb45 030b 	adc.w	r3, r5, fp
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800697e:	4629      	mov	r1, r5
 8006980:	028b      	lsls	r3, r1, #10
 8006982:	4621      	mov	r1, r4
 8006984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006988:	4621      	mov	r1, r4
 800698a:	028a      	lsls	r2, r1, #10
 800698c:	4610      	mov	r0, r2
 800698e:	4619      	mov	r1, r3
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	2200      	movs	r2, #0
 8006994:	60bb      	str	r3, [r7, #8]
 8006996:	60fa      	str	r2, [r7, #12]
 8006998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800699c:	f7fa f95e 	bl	8000c5c <__aeabi_uldivmod>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4613      	mov	r3, r2
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	3301      	adds	r3, #1
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069c2:	e002      	b.n	80069ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <HAL_RCC_GetSysClockFreq+0x184>)
 80069c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3740      	adds	r7, #64	; 0x40
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800
 80069dc:	00f42400 	.word	0x00f42400
 80069e0:	017d7840 	.word	0x017d7840

080069e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069e8:	4b03      	ldr	r3, [pc, #12]	; (80069f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069ea:	681b      	ldr	r3, [r3, #0]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	20000030 	.word	0x20000030

080069fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a00:	f7ff fff0 	bl	80069e4 <HAL_RCC_GetHCLKFreq>
 8006a04:	4602      	mov	r2, r0
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	0a9b      	lsrs	r3, r3, #10
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	4903      	ldr	r1, [pc, #12]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a12:	5ccb      	ldrb	r3, [r1, r3]
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	0800d078 	.word	0x0800d078

08006a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a28:	f7ff ffdc 	bl	80069e4 <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0b5b      	lsrs	r3, r3, #13
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0800d078 	.word	0x0800d078

08006a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e041      	b.n	8006ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fd f9d2 	bl	8003e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f000 fc0c 	bl	80072a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e041      	b.n	8006b80 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f839 	bl	8006b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f000 fbbd 	bl	80072a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <HAL_TIM_PWM_Start+0x24>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	bf14      	ite	ne
 8006bb8:	2301      	movne	r3, #1
 8006bba:	2300      	moveq	r3, #0
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	e022      	b.n	8006c06 <HAL_TIM_PWM_Start+0x6a>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d109      	bne.n	8006bda <HAL_TIM_PWM_Start+0x3e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	bf14      	ite	ne
 8006bd2:	2301      	movne	r3, #1
 8006bd4:	2300      	moveq	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	e015      	b.n	8006c06 <HAL_TIM_PWM_Start+0x6a>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d109      	bne.n	8006bf4 <HAL_TIM_PWM_Start+0x58>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e008      	b.n	8006c06 <HAL_TIM_PWM_Start+0x6a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	bf14      	ite	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	2300      	moveq	r3, #0
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e07c      	b.n	8006d08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x82>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c1c:	e013      	b.n	8006c46 <HAL_TIM_PWM_Start+0xaa>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Start+0x92>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	e00b      	b.n	8006c46 <HAL_TIM_PWM_Start+0xaa>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Start+0xa2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3c:	e003      	b.n	8006c46 <HAL_TIM_PWM_Start+0xaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fe14 	bl	800787c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2d      	ldr	r2, [pc, #180]	; (8006d10 <HAL_TIM_PWM_Start+0x174>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_PWM_Start+0xcc>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <HAL_TIM_PWM_Start+0x178>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_TIM_PWM_Start+0xd0>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_TIM_PWM_Start+0xd2>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <HAL_TIM_PWM_Start+0x174>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d022      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c94:	d01d      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <HAL_TIM_PWM_Start+0x17c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d018      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <HAL_TIM_PWM_Start+0x180>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <HAL_TIM_PWM_Start+0x184>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <HAL_TIM_PWM_Start+0x178>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d009      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_TIM_PWM_Start+0x188>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d004      	beq.n	8006cd2 <HAL_TIM_PWM_Start+0x136>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <HAL_TIM_PWM_Start+0x18c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d111      	bne.n	8006cf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b06      	cmp	r3, #6
 8006ce2:	d010      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	e007      	b.n	8006d06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40010000 	.word	0x40010000
 8006d14:	40010400 	.word	0x40010400
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40014000 	.word	0x40014000
 8006d28:	40001800 	.word	0x40001800

08006d2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e097      	b.n	8006e70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d106      	bne.n	8006d5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fd f8df 	bl	8003f18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 fa91 	bl	80072a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	021b      	lsls	r3, r3, #8
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006dcc:	f023 030c 	bic.w	r3, r3, #12
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	4313      	orrs	r3, r2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	011a      	lsls	r2, r3, #4
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	031b      	lsls	r3, r3, #12
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ea0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d110      	bne.n	8006eca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d102      	bne.n	8006eb4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eae:	7b7b      	ldrb	r3, [r7, #13]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d001      	beq.n	8006eb8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e069      	b.n	8006f8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec8:	e031      	b.n	8006f2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d110      	bne.n	8006ef2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d102      	bne.n	8006edc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ed6:	7b3b      	ldrb	r3, [r7, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d001      	beq.n	8006ee0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e055      	b.n	8006f8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef0:	e01d      	b.n	8006f2e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d108      	bne.n	8006f0a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d105      	bne.n	8006f0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006efe:	7b7b      	ldrb	r3, [r7, #13]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f04:	7b3b      	ldrb	r3, [r7, #12]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d001      	beq.n	8006f0e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e03e      	b.n	8006f8c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_TIM_Encoder_Start+0xc4>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d008      	beq.n	8006f4c <HAL_TIM_Encoder_Start+0xd4>
 8006f3a:	e00f      	b.n	8006f5c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	2100      	movs	r1, #0
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fc99 	bl	800787c <TIM_CCxChannelCmd>
      break;
 8006f4a:	e016      	b.n	8006f7a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2104      	movs	r1, #4
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fc91 	bl	800787c <TIM_CCxChannelCmd>
      break;
 8006f5a:	e00e      	b.n	8006f7a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2201      	movs	r2, #1
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fc89 	bl	800787c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	2104      	movs	r1, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fc82 	bl	800787c <TIM_CCxChannelCmd>
      break;
 8006f78:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e0ae      	b.n	8007110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b0c      	cmp	r3, #12
 8006fbe:	f200 809f 	bhi.w	8007100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fc2:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006ffd 	.word	0x08006ffd
 8006fcc:	08007101 	.word	0x08007101
 8006fd0:	08007101 	.word	0x08007101
 8006fd4:	08007101 	.word	0x08007101
 8006fd8:	0800703d 	.word	0x0800703d
 8006fdc:	08007101 	.word	0x08007101
 8006fe0:	08007101 	.word	0x08007101
 8006fe4:	08007101 	.word	0x08007101
 8006fe8:	0800707f 	.word	0x0800707f
 8006fec:	08007101 	.word	0x08007101
 8006ff0:	08007101 	.word	0x08007101
 8006ff4:	08007101 	.word	0x08007101
 8006ff8:	080070bf 	.word	0x080070bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f9f0 	bl	80073e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0208 	orr.w	r2, r2, #8
 8007016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0204 	bic.w	r2, r2, #4
 8007026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6999      	ldr	r1, [r3, #24]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	619a      	str	r2, [r3, #24]
      break;
 800703a:	e064      	b.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68b9      	ldr	r1, [r7, #8]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fa40 	bl	80074c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6999      	ldr	r1, [r3, #24]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	021a      	lsls	r2, r3, #8
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	619a      	str	r2, [r3, #24]
      break;
 800707c:	e043      	b.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fa95 	bl	80075b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f042 0208 	orr.w	r2, r2, #8
 8007098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69da      	ldr	r2, [r3, #28]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0204 	bic.w	r2, r2, #4
 80070a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69d9      	ldr	r1, [r3, #28]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	61da      	str	r2, [r3, #28]
      break;
 80070bc:	e023      	b.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68b9      	ldr	r1, [r7, #8]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fae9 	bl	800769c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69d9      	ldr	r1, [r3, #28]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	021a      	lsls	r2, r3, #8
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	61da      	str	r2, [r3, #28]
      break;
 80070fe:	e002      	b.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
      break;
 8007104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_TIM_ConfigClockSource+0x1c>
 8007130:	2302      	movs	r3, #2
 8007132:	e0b4      	b.n	800729e <HAL_TIM_ConfigClockSource+0x186>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800715a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716c:	d03e      	beq.n	80071ec <HAL_TIM_ConfigClockSource+0xd4>
 800716e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007172:	f200 8087 	bhi.w	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	f000 8086 	beq.w	800728a <HAL_TIM_ConfigClockSource+0x172>
 800717e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007182:	d87f      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 8007184:	2b70      	cmp	r3, #112	; 0x70
 8007186:	d01a      	beq.n	80071be <HAL_TIM_ConfigClockSource+0xa6>
 8007188:	2b70      	cmp	r3, #112	; 0x70
 800718a:	d87b      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 800718c:	2b60      	cmp	r3, #96	; 0x60
 800718e:	d050      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x11a>
 8007190:	2b60      	cmp	r3, #96	; 0x60
 8007192:	d877      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 8007194:	2b50      	cmp	r3, #80	; 0x50
 8007196:	d03c      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0xfa>
 8007198:	2b50      	cmp	r3, #80	; 0x50
 800719a:	d873      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	d058      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x13a>
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d86f      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 80071a4:	2b30      	cmp	r3, #48	; 0x30
 80071a6:	d064      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x15a>
 80071a8:	2b30      	cmp	r3, #48	; 0x30
 80071aa:	d86b      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	d060      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x15a>
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	d867      	bhi.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d05c      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x15a>
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d05a      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0x15a>
 80071bc:	e062      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6899      	ldr	r1, [r3, #8]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f000 fb35 	bl	800783c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	609a      	str	r2, [r3, #8]
      break;
 80071ea:	e04f      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6899      	ldr	r1, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f000 fb1e 	bl	800783c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800720e:	609a      	str	r2, [r3, #8]
      break;
 8007210:	e03c      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	461a      	mov	r2, r3
 8007220:	f000 fa92 	bl	8007748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2150      	movs	r1, #80	; 0x50
 800722a:	4618      	mov	r0, r3
 800722c:	f000 faeb 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 8007230:	e02c      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	461a      	mov	r2, r3
 8007240:	f000 fab1 	bl	80077a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2160      	movs	r1, #96	; 0x60
 800724a:	4618      	mov	r0, r3
 800724c:	f000 fadb 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 8007250:	e01c      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6859      	ldr	r1, [r3, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	461a      	mov	r2, r3
 8007260:	f000 fa72 	bl	8007748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2140      	movs	r1, #64	; 0x40
 800726a:	4618      	mov	r0, r3
 800726c:	f000 facb 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 8007270:	e00c      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4619      	mov	r1, r3
 800727c:	4610      	mov	r0, r2
 800727e:	f000 fac2 	bl	8007806 <TIM_ITRx_SetConfig>
      break;
 8007282:	e003      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
      break;
 8007288:	e000      	b.n	800728c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800728a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a40      	ldr	r2, [pc, #256]	; (80073bc <TIM_Base_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d013      	beq.n	80072e8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c6:	d00f      	beq.n	80072e8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a3d      	ldr	r2, [pc, #244]	; (80073c0 <TIM_Base_SetConfig+0x118>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00b      	beq.n	80072e8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a3c      	ldr	r2, [pc, #240]	; (80073c4 <TIM_Base_SetConfig+0x11c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d007      	beq.n	80072e8 <TIM_Base_SetConfig+0x40>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a3b      	ldr	r2, [pc, #236]	; (80073c8 <TIM_Base_SetConfig+0x120>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_Base_SetConfig+0x40>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a3a      	ldr	r2, [pc, #232]	; (80073cc <TIM_Base_SetConfig+0x124>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d108      	bne.n	80072fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a2f      	ldr	r2, [pc, #188]	; (80073bc <TIM_Base_SetConfig+0x114>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d02b      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007308:	d027      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <TIM_Base_SetConfig+0x118>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d023      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a2b      	ldr	r2, [pc, #172]	; (80073c4 <TIM_Base_SetConfig+0x11c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d01f      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a2a      	ldr	r2, [pc, #168]	; (80073c8 <TIM_Base_SetConfig+0x120>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d01b      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a29      	ldr	r2, [pc, #164]	; (80073cc <TIM_Base_SetConfig+0x124>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d017      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <TIM_Base_SetConfig+0x128>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a27      	ldr	r2, [pc, #156]	; (80073d4 <TIM_Base_SetConfig+0x12c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00f      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a26      	ldr	r2, [pc, #152]	; (80073d8 <TIM_Base_SetConfig+0x130>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00b      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a25      	ldr	r2, [pc, #148]	; (80073dc <TIM_Base_SetConfig+0x134>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d007      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a24      	ldr	r2, [pc, #144]	; (80073e0 <TIM_Base_SetConfig+0x138>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a23      	ldr	r2, [pc, #140]	; (80073e4 <TIM_Base_SetConfig+0x13c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d108      	bne.n	800736c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <TIM_Base_SetConfig+0x114>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0xf8>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a0c      	ldr	r2, [pc, #48]	; (80073cc <TIM_Base_SetConfig+0x124>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d103      	bne.n	80073a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691a      	ldr	r2, [r3, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	615a      	str	r2, [r3, #20]
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40014400 	.word	0x40014400
 80073d8:	40014800 	.word	0x40014800
 80073dc:	40001800 	.word	0x40001800
 80073e0:	40001c00 	.word	0x40001c00
 80073e4:	40002000 	.word	0x40002000

080073e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f023 0201 	bic.w	r2, r3, #1
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 0302 	bic.w	r3, r3, #2
 8007430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	4313      	orrs	r3, r2
 800743a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a20      	ldr	r2, [pc, #128]	; (80074c0 <TIM_OC1_SetConfig+0xd8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_OC1_SetConfig+0x64>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a1f      	ldr	r2, [pc, #124]	; (80074c4 <TIM_OC1_SetConfig+0xdc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d10c      	bne.n	8007466 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f023 0308 	bic.w	r3, r3, #8
 8007452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f023 0304 	bic.w	r3, r3, #4
 8007464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <TIM_OC1_SetConfig+0xd8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_OC1_SetConfig+0x8e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a14      	ldr	r2, [pc, #80]	; (80074c4 <TIM_OC1_SetConfig+0xdc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d111      	bne.n	800749a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	621a      	str	r2, [r3, #32]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40010400 	.word	0x40010400

080074c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f023 0210 	bic.w	r2, r3, #16
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f023 0320 	bic.w	r3, r3, #32
 8007512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a22      	ldr	r2, [pc, #136]	; (80075ac <TIM_OC2_SetConfig+0xe4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d003      	beq.n	8007530 <TIM_OC2_SetConfig+0x68>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a21      	ldr	r2, [pc, #132]	; (80075b0 <TIM_OC2_SetConfig+0xe8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10d      	bne.n	800754c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800754a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <TIM_OC2_SetConfig+0xe4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_OC2_SetConfig+0x94>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <TIM_OC2_SetConfig+0xe8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d113      	bne.n	8007584 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800756a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	621a      	str	r2, [r3, #32]
}
 800759e:	bf00      	nop
 80075a0:	371c      	adds	r7, #28
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40010400 	.word	0x40010400

080075b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0303 	bic.w	r3, r3, #3
 80075ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	021b      	lsls	r3, r3, #8
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a21      	ldr	r2, [pc, #132]	; (8007694 <TIM_OC3_SetConfig+0xe0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC3_SetConfig+0x66>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a20      	ldr	r2, [pc, #128]	; (8007698 <TIM_OC3_SetConfig+0xe4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10d      	bne.n	8007636 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <TIM_OC3_SetConfig+0xe0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d003      	beq.n	8007646 <TIM_OC3_SetConfig+0x92>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a15      	ldr	r2, [pc, #84]	; (8007698 <TIM_OC3_SetConfig+0xe4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d113      	bne.n	800766e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800764c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	621a      	str	r2, [r3, #32]
}
 8007688:	bf00      	nop
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	40010000 	.word	0x40010000
 8007698:	40010400 	.word	0x40010400

0800769c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	031b      	lsls	r3, r3, #12
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a12      	ldr	r2, [pc, #72]	; (8007740 <TIM_OC4_SetConfig+0xa4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC4_SetConfig+0x68>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a11      	ldr	r2, [pc, #68]	; (8007744 <TIM_OC4_SetConfig+0xa8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d109      	bne.n	8007718 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800770a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	019b      	lsls	r3, r3, #6
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40010000 	.word	0x40010000
 8007744:	40010400 	.word	0x40010400

08007748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f023 0201 	bic.w	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f023 030a 	bic.w	r3, r3, #10
 8007784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	621a      	str	r2, [r3, #32]
}
 800779a:	bf00      	nop
 800779c:	371c      	adds	r7, #28
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b087      	sub	sp, #28
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0210 	bic.w	r2, r3, #16
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	031b      	lsls	r3, r3, #12
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	f043 0307 	orr.w	r3, r3, #7
 8007828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	609a      	str	r2, [r3, #8]
}
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	021a      	lsls	r2, r3, #8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	431a      	orrs	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4313      	orrs	r3, r2
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	609a      	str	r2, [r3, #8]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f003 031f 	and.w	r3, r3, #31
 800788e:	2201      	movs	r2, #1
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	43db      	mvns	r3, r3
 800789e:	401a      	ands	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6a1a      	ldr	r2, [r3, #32]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 031f 	and.w	r3, r3, #31
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	fa01 f303 	lsl.w	r3, r1, r3
 80078b4:	431a      	orrs	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
	...

080078c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078dc:	2302      	movs	r3, #2
 80078de:	e05a      	b.n	8007996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a21      	ldr	r2, [pc, #132]	; (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d022      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d01d      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d018      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1b      	ldr	r2, [pc, #108]	; (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00e      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d009      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d004      	beq.n	800796a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a15      	ldr	r2, [pc, #84]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10c      	bne.n	8007984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	4313      	orrs	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40001800 	.word	0x40001800

080079c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079d8:	2302      	movs	r3, #2
 80079da:	e03d      	b.n	8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e03f      	b.n	8007af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d106      	bne.n	8007a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7fc fade 	bl	800404c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2224      	movs	r2, #36	; 0x24
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 ff6f 	bl	800898c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695a      	ldr	r2, [r3, #20]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68da      	ldr	r2, [r3, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b08a      	sub	sp, #40	; 0x28
 8007b02:	af02      	add	r7, sp, #8
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	603b      	str	r3, [r7, #0]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b20      	cmp	r3, #32
 8007b1c:	d17c      	bne.n	8007c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_UART_Transmit+0x2c>
 8007b24:	88fb      	ldrh	r3, [r7, #6]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e075      	b.n	8007c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Transmit+0x3e>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e06e      	b.n	8007c1a <HAL_UART_Transmit+0x11c>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2221      	movs	r2, #33	; 0x21
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b52:	f7fc fc0f 	bl	8004374 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	88fa      	ldrh	r2, [r7, #6]
 8007b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6c:	d108      	bne.n	8007b80 <HAL_UART_Transmit+0x82>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e003      	b.n	8007b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b90:	e02a      	b.n	8007be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2180      	movs	r1, #128	; 0x80
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fc2b 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e036      	b.n	8007c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	e007      	b.n	8007bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	781a      	ldrb	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1cf      	bne.n	8007b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2140      	movs	r1, #64	; 0x40
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fbfb 	bl	80083f8 <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e006      	b.n	8007c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2220      	movs	r2, #32
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e000      	b.n	8007c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c18:	2302      	movs	r3, #2
  }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b20      	cmp	r3, #32
 8007c3a:	d11d      	bne.n	8007c78 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_UART_Receive_DMA+0x26>
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e016      	b.n	8007c7a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Receive_DMA+0x38>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e00f      	b.n	8007c7a <HAL_UART_Receive_DMA+0x58>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fc30 	bl	80084d4 <UART_Start_Receive_DMA>
 8007c74:	4603      	mov	r3, r0
 8007c76:	e000      	b.n	8007c7a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
  }
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b0ba      	sub	sp, #232	; 0xe8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10f      	bne.n	8007cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d009      	beq.n	8007cea <HAL_UART_IRQHandler+0x66>
 8007cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cda:	f003 0320 	and.w	r3, r3, #32
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fd97 	bl	8008816 <UART_Receive_IT>
      return;
 8007ce8:	e256      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80de 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x22c>
 8007cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80d1 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00b      	beq.n	8007d32 <HAL_UART_IRQHandler+0xae>
 8007d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f043 0201 	orr.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0304 	and.w	r3, r3, #4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <HAL_UART_IRQHandler+0xd2>
 8007d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f043 0202 	orr.w	r2, r3, #2
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <HAL_UART_IRQHandler+0xf6>
 8007d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f043 0204 	orr.w	r2, r3, #4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <HAL_UART_IRQHandler+0x126>
 8007d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	f043 0208 	orr.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 81ed 	beq.w	800818e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x14e>
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fd22 	bl	8008816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	bf0c      	ite	eq
 8007de0:	2301      	moveq	r3, #1
 8007de2:	2300      	movne	r3, #0
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_UART_IRQHandler+0x17a>
 8007df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d04f      	beq.n	8007e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fc2a 	bl	8008658 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0e:	2b40      	cmp	r3, #64	; 0x40
 8007e10:	d141      	bne.n	8007e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3314      	adds	r3, #20
 8007e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1d9      	bne.n	8007e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d013      	beq.n	8007e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6a:	4a7d      	ldr	r2, [pc, #500]	; (8008060 <HAL_UART_IRQHandler+0x3dc>)
 8007e6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc fd36 	bl	80048e4 <HAL_DMA_Abort_IT>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	e00e      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9a4 	bl	80081dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e94:	e00a      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f9a0 	bl	80081dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	e006      	b.n	8007eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f99c 	bl	80081dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007eaa:	e170      	b.n	800818e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eac:	bf00      	nop
    return;
 8007eae:	e16e      	b.n	800818e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	f040 814a 	bne.w	800814e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 8143 	beq.w	800814e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 813c 	beq.w	800814e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60bb      	str	r3, [r7, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b40      	cmp	r3, #64	; 0x40
 8007ef8:	f040 80b4 	bne.w	8008064 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8140 	beq.w	8008192 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f080 8139 	bcs.w	8008192 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2c:	69db      	ldr	r3, [r3, #28]
 8007f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f32:	f000 8088 	beq.w	8008046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	330c      	adds	r3, #12
 8007f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007f62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1d9      	bne.n	8007f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3314      	adds	r3, #20
 8007f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f94:	f023 0301 	bic.w	r3, r3, #1
 8007f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3314      	adds	r3, #20
 8007fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e1      	bne.n	8007f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3314      	adds	r3, #20
 8007fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e3      	bne.n	8007fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	330c      	adds	r3, #12
 8008024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008028:	65ba      	str	r2, [r7, #88]	; 0x58
 800802a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800802e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e3      	bne.n	8008004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	4618      	mov	r0, r3
 8008042:	f7fc fbdf 	bl	8004804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800804e:	b29b      	uxth	r3, r3
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	b29b      	uxth	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f8ca 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800805c:	e099      	b.n	8008192 <HAL_UART_IRQHandler+0x50e>
 800805e:	bf00      	nop
 8008060:	0800871f 	.word	0x0800871f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800806c:	b29b      	uxth	r3, r3
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008078:	b29b      	uxth	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 808b 	beq.w	8008196 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8086 	beq.w	8008196 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	330c      	adds	r3, #12
 8008090:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80080ae:	647a      	str	r2, [r7, #68]	; 0x44
 80080b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e3      	bne.n	800808a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	623b      	str	r3, [r7, #32]
   return(result);
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3314      	adds	r3, #20
 80080e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80080e6:	633a      	str	r2, [r7, #48]	; 0x30
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e3      	bne.n	80080c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	60fb      	str	r3, [r7, #12]
   return(result);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0310 	bic.w	r3, r3, #16
 800811e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	330c      	adds	r3, #12
 8008128:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800812c:	61fa      	str	r2, [r7, #28]
 800812e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	69b9      	ldr	r1, [r7, #24]
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	e841 2300 	strex	r3, r2, [r1]
 8008138:	617b      	str	r3, [r7, #20]
   return(result);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e3      	bne.n	8008108 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f852 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800814c:	e023      	b.n	8008196 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_UART_IRQHandler+0x4ea>
 800815a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800815e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 faed 	bl	8008746 <UART_Transmit_IT>
    return;
 800816c:	e014      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00e      	beq.n	8008198 <HAL_UART_IRQHandler+0x514>
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d008      	beq.n	8008198 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fb2d 	bl	80087e6 <UART_EndTransmit_IT>
    return;
 800818c:	e004      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
    return;
 800818e:	bf00      	nop
 8008190:	e002      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
      return;
 8008192:	bf00      	nop
 8008194:	e000      	b.n	8008198 <HAL_UART_IRQHandler+0x514>
      return;
 8008196:	bf00      	nop
  }
}
 8008198:	37e8      	adds	r7, #232	; 0xe8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop

080081a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b09c      	sub	sp, #112	; 0x70
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008214:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d172      	bne.n	800830a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008226:	2200      	movs	r2, #0
 8008228:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800822a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	330c      	adds	r3, #12
 8008230:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800823a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008240:	66bb      	str	r3, [r7, #104]	; 0x68
 8008242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800824a:	65ba      	str	r2, [r7, #88]	; 0x58
 800824c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e5      	bne.n	800822a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3314      	adds	r3, #20
 8008264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	667b      	str	r3, [r7, #100]	; 0x64
 8008276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3314      	adds	r3, #20
 800827c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800827e:	647a      	str	r2, [r7, #68]	; 0x44
 8008280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800828c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e5      	bne.n	800825e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3314      	adds	r3, #20
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	623b      	str	r3, [r7, #32]
   return(result);
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	663b      	str	r3, [r7, #96]	; 0x60
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3314      	adds	r3, #20
 80082b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082b2:	633a      	str	r2, [r7, #48]	; 0x30
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e5      	bne.n	8008292 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c8:	2220      	movs	r2, #32
 80082ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d119      	bne.n	800830a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	330c      	adds	r3, #12
 80082dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 0310 	bic.w	r3, r3, #16
 80082ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082f6:	61fa      	str	r2, [r7, #28]
 80082f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	69b9      	ldr	r1, [r7, #24]
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	617b      	str	r3, [r7, #20]
   return(result);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e5      	bne.n	80082d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830e:	2b01      	cmp	r3, #1
 8008310:	d106      	bne.n	8008320 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008316:	4619      	mov	r1, r3
 8008318:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800831a:	f7ff ff69 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800831e:	e002      	b.n	8008326 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008320:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008322:	f7ff ff47 	bl	80081b4 <HAL_UART_RxCpltCallback>
}
 8008326:	bf00      	nop
 8008328:	3770      	adds	r7, #112	; 0x70
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	2b01      	cmp	r3, #1
 8008342:	d108      	bne.n	8008356 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	4619      	mov	r1, r3
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff ff4e 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008354:	e002      	b.n	800835c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff ff36 	bl	80081c8 <HAL_UART_RxHalfCpltCallback>
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800836c:	2300      	movs	r3, #0
 800836e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
 800838a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b21      	cmp	r3, #33	; 0x21
 8008396:	d108      	bne.n	80083aa <UART_DMAError+0x46>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2200      	movs	r2, #0
 80083a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f000 f92f 	bl	8008608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b22      	cmp	r3, #34	; 0x22
 80083ca:	d108      	bne.n	80083de <UART_DMAError+0x7a>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083d8:	68b8      	ldr	r0, [r7, #8]
 80083da:	f000 f93d 	bl	8008658 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	f043 0210 	orr.w	r2, r3, #16
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ea:	68b8      	ldr	r0, [r7, #8]
 80083ec:	f7ff fef6 	bl	80081dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b090      	sub	sp, #64	; 0x40
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	4613      	mov	r3, r2
 8008406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008408:	e050      	b.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800840a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d04c      	beq.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008414:	2b00      	cmp	r3, #0
 8008416:	d007      	beq.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
 8008418:	f7fb ffac 	bl	8004374 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008424:	429a      	cmp	r2, r3
 8008426:	d241      	bcs.n	80084ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008448:	637a      	str	r2, [r7, #52]	; 0x34
 800844a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800844e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	613b      	str	r3, [r7, #16]
   return(result);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f023 0301 	bic.w	r3, r3, #1
 8008472:	63bb      	str	r3, [r7, #56]	; 0x38
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800847c:	623a      	str	r2, [r7, #32]
 800847e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	69f9      	ldr	r1, [r7, #28]
 8008482:	6a3a      	ldr	r2, [r7, #32]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	61bb      	str	r3, [r7, #24]
   return(result);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e5      	bne.n	800845c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e00f      	b.n	80084cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4013      	ands	r3, r2
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	461a      	mov	r2, r3
 80084c4:	79fb      	ldrb	r3, [r7, #7]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d09f      	beq.n	800840a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3740      	adds	r7, #64	; 0x40
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b098      	sub	sp, #96	; 0x60
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2222      	movs	r2, #34	; 0x22
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	4a3e      	ldr	r2, [pc, #248]	; (80085fc <UART_Start_Receive_DMA+0x128>)
 8008502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	4a3d      	ldr	r2, [pc, #244]	; (8008600 <UART_Start_Receive_DMA+0x12c>)
 800850a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	4a3c      	ldr	r2, [pc, #240]	; (8008604 <UART_Start_Receive_DMA+0x130>)
 8008512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	2200      	movs	r2, #0
 800851a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800851c:	f107 0308 	add.w	r3, r7, #8
 8008520:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	88fb      	ldrh	r3, [r7, #6]
 8008534:	f7fc f90e 	bl	8004754 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	330c      	adds	r3, #12
 800855c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856c:	65bb      	str	r3, [r7, #88]	; 0x58
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	330c      	adds	r3, #12
 8008574:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008576:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008578:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800857c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e5      	bne.n	8008556 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3314      	adds	r3, #20
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	657b      	str	r3, [r7, #84]	; 0x54
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3314      	adds	r3, #20
 80085a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e5      	bne.n	800858a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	617b      	str	r3, [r7, #20]
   return(result);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085d4:	653b      	str	r3, [r7, #80]	; 0x50
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	3314      	adds	r3, #20
 80085dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085de:	627a      	str	r2, [r7, #36]	; 0x24
 80085e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6a39      	ldr	r1, [r7, #32]
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e5      	bne.n	80085be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3760      	adds	r7, #96	; 0x60
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	08008209 	.word	0x08008209
 8008600:	0800832f 	.word	0x0800832f
 8008604:	08008365 	.word	0x08008365

08008608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	330c      	adds	r3, #12
 8008616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	61ba      	str	r2, [r7, #24]
 8008632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6979      	ldr	r1, [r7, #20]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	613b      	str	r3, [r7, #16]
   return(result);
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800864c:	bf00      	nop
 800864e:	3724      	adds	r7, #36	; 0x24
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b095      	sub	sp, #84	; 0x54
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	330c      	adds	r3, #12
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	e853 3f00 	ldrex	r3, [r3]
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008676:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008680:	643a      	str	r2, [r7, #64]	; 0x40
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e5      	bne.n	8008660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3314      	adds	r3, #20
 800869a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	e853 3f00 	ldrex	r3, [r3]
 80086a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f023 0301 	bic.w	r3, r3, #1
 80086aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3314      	adds	r3, #20
 80086b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e5      	bne.n	8008694 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d119      	bne.n	8008704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	330c      	adds	r3, #12
 80086d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f023 0310 	bic.w	r3, r3, #16
 80086e6:	647b      	str	r3, [r7, #68]	; 0x44
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	330c      	adds	r3, #12
 80086ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f0:	61ba      	str	r2, [r7, #24]
 80086f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6979      	ldr	r1, [r7, #20]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	613b      	str	r3, [r7, #16]
   return(result);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008712:	bf00      	nop
 8008714:	3754      	adds	r7, #84	; 0x54
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fd4f 	bl	80081dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800873e:	bf00      	nop
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008746:	b480      	push	{r7}
 8008748:	b085      	sub	sp, #20
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b21      	cmp	r3, #33	; 0x21
 8008758:	d13e      	bne.n	80087d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008762:	d114      	bne.n	800878e <UART_Transmit_IT+0x48>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d110      	bne.n	800878e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	1c9a      	adds	r2, r3, #2
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	621a      	str	r2, [r3, #32]
 800878c:	e008      	b.n	80087a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6211      	str	r1, [r2, #32]
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	4619      	mov	r1, r3
 80087ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10f      	bne.n	80087d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e000      	b.n	80087da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087d8:	2302      	movs	r3, #2
  }
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7ff fcca 	bl	80081a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b08c      	sub	sp, #48	; 0x30
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b22      	cmp	r3, #34	; 0x22
 8008828:	f040 80ab 	bne.w	8008982 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008834:	d117      	bne.n	8008866 <UART_Receive_IT+0x50>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d113      	bne.n	8008866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008854:	b29a      	uxth	r2, r3
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885e:	1c9a      	adds	r2, r3, #2
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	629a      	str	r2, [r3, #40]	; 0x28
 8008864:	e026      	b.n	80088b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008878:	d007      	beq.n	800888a <UART_Receive_IT+0x74>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <UART_Receive_IT+0x82>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	b2da      	uxtb	r2, r3
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	e008      	b.n	80088aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	4619      	mov	r1, r3
 80088c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d15a      	bne.n	800897e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0220 	bic.w	r2, r2, #32
 80088d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695a      	ldr	r2, [r3, #20]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0201 	bic.w	r2, r2, #1
 80088f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	2b01      	cmp	r3, #1
 8008906:	d135      	bne.n	8008974 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	330c      	adds	r3, #12
 8008914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	613b      	str	r3, [r7, #16]
   return(result);
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f023 0310 	bic.w	r3, r3, #16
 8008924:	627b      	str	r3, [r7, #36]	; 0x24
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	330c      	adds	r3, #12
 800892c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892e:	623a      	str	r2, [r7, #32]
 8008930:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	69f9      	ldr	r1, [r7, #28]
 8008934:	6a3a      	ldr	r2, [r7, #32]
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	61bb      	str	r3, [r7, #24]
   return(result);
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e5      	bne.n	800890e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b10      	cmp	r3, #16
 800894e:	d10a      	bne.n	8008966 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fc3f 	bl	80081f0 <HAL_UARTEx_RxEventCallback>
 8008972:	e002      	b.n	800897a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff fc1d 	bl	80081b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e002      	b.n	8008984 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	e000      	b.n	8008984 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008982:	2302      	movs	r3, #2
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3730      	adds	r7, #48	; 0x30
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800898c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008990:	b0c0      	sub	sp, #256	; 0x100
 8008992:	af00      	add	r7, sp, #0
 8008994:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	68d9      	ldr	r1, [r3, #12]
 80089aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	ea40 0301 	orr.w	r3, r0, r1
 80089b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089e4:	f021 010c 	bic.w	r1, r1, #12
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089f2:	430b      	orrs	r3, r1
 80089f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a06:	6999      	ldr	r1, [r3, #24]
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	ea40 0301 	orr.w	r3, r0, r1
 8008a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	4b8f      	ldr	r3, [pc, #572]	; (8008c58 <UART_SetConfig+0x2cc>)
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d005      	beq.n	8008a2c <UART_SetConfig+0xa0>
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b8d      	ldr	r3, [pc, #564]	; (8008c5c <UART_SetConfig+0x2d0>)
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d104      	bne.n	8008a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a2c:	f7fd fffa 	bl	8006a24 <HAL_RCC_GetPCLK2Freq>
 8008a30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a34:	e003      	b.n	8008a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a36:	f7fd ffe1 	bl	80069fc <HAL_RCC_GetPCLK1Freq>
 8008a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a48:	f040 810c 	bne.w	8008c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a5e:	4622      	mov	r2, r4
 8008a60:	462b      	mov	r3, r5
 8008a62:	1891      	adds	r1, r2, r2
 8008a64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a66:	415b      	adcs	r3, r3
 8008a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a6e:	4621      	mov	r1, r4
 8008a70:	eb12 0801 	adds.w	r8, r2, r1
 8008a74:	4629      	mov	r1, r5
 8008a76:	eb43 0901 	adc.w	r9, r3, r1
 8008a7a:	f04f 0200 	mov.w	r2, #0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a8e:	4690      	mov	r8, r2
 8008a90:	4699      	mov	r9, r3
 8008a92:	4623      	mov	r3, r4
 8008a94:	eb18 0303 	adds.w	r3, r8, r3
 8008a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	eb49 0303 	adc.w	r3, r9, r3
 8008aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008aba:	460b      	mov	r3, r1
 8008abc:	18db      	adds	r3, r3, r3
 8008abe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	eb42 0303 	adc.w	r3, r2, r3
 8008ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ad0:	f7f8 f8c4 	bl	8000c5c <__aeabi_uldivmod>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4b61      	ldr	r3, [pc, #388]	; (8008c60 <UART_SetConfig+0x2d4>)
 8008ada:	fba3 2302 	umull	r2, r3, r3, r2
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	011c      	lsls	r4, r3, #4
 8008ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008af4:	4642      	mov	r2, r8
 8008af6:	464b      	mov	r3, r9
 8008af8:	1891      	adds	r1, r2, r2
 8008afa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008afc:	415b      	adcs	r3, r3
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b04:	4641      	mov	r1, r8
 8008b06:	eb12 0a01 	adds.w	sl, r2, r1
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	f04f 0300 	mov.w	r3, #0
 8008b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b24:	4692      	mov	sl, r2
 8008b26:	469b      	mov	fp, r3
 8008b28:	4643      	mov	r3, r8
 8008b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b32:	464b      	mov	r3, r9
 8008b34:	eb4b 0303 	adc.w	r3, fp, r3
 8008b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b50:	460b      	mov	r3, r1
 8008b52:	18db      	adds	r3, r3, r3
 8008b54:	643b      	str	r3, [r7, #64]	; 0x40
 8008b56:	4613      	mov	r3, r2
 8008b58:	eb42 0303 	adc.w	r3, r2, r3
 8008b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b66:	f7f8 f879 	bl	8000c5c <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <UART_SetConfig+0x2d4>)
 8008b72:	fba3 2301 	umull	r2, r3, r3, r1
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	2264      	movs	r2, #100	; 0x64
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	1acb      	subs	r3, r1, r3
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b86:	4b36      	ldr	r3, [pc, #216]	; (8008c60 <UART_SetConfig+0x2d4>)
 8008b88:	fba3 2302 	umull	r2, r3, r3, r2
 8008b8c:	095b      	lsrs	r3, r3, #5
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b94:	441c      	add	r4, r3
 8008b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	1891      	adds	r1, r2, r2
 8008bae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bb0:	415b      	adcs	r3, r3
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bb8:	4641      	mov	r1, r8
 8008bba:	1851      	adds	r1, r2, r1
 8008bbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	414b      	adcs	r3, r1
 8008bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	00cb      	lsls	r3, r1, #3
 8008bd4:	4651      	mov	r1, sl
 8008bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bda:	4651      	mov	r1, sl
 8008bdc:	00ca      	lsls	r2, r1, #3
 8008bde:	4610      	mov	r0, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	4642      	mov	r2, r8
 8008be6:	189b      	adds	r3, r3, r2
 8008be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bec:	464b      	mov	r3, r9
 8008bee:	460a      	mov	r2, r1
 8008bf0:	eb42 0303 	adc.w	r3, r2, r3
 8008bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	18db      	adds	r3, r3, r3
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c12:	4613      	mov	r3, r2
 8008c14:	eb42 0303 	adc.w	r3, r2, r3
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c22:	f7f8 f81b 	bl	8000c5c <__aeabi_uldivmod>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <UART_SetConfig+0x2d4>)
 8008c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c30:	095b      	lsrs	r3, r3, #5
 8008c32:	2164      	movs	r1, #100	; 0x64
 8008c34:	fb01 f303 	mul.w	r3, r1, r3
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	3332      	adds	r3, #50	; 0x32
 8008c3e:	4a08      	ldr	r2, [pc, #32]	; (8008c60 <UART_SetConfig+0x2d4>)
 8008c40:	fba2 2303 	umull	r2, r3, r2, r3
 8008c44:	095b      	lsrs	r3, r3, #5
 8008c46:	f003 0207 	and.w	r2, r3, #7
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4422      	add	r2, r4
 8008c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c54:	e105      	b.n	8008e62 <UART_SetConfig+0x4d6>
 8008c56:	bf00      	nop
 8008c58:	40011000 	.word	0x40011000
 8008c5c:	40011400 	.word	0x40011400
 8008c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c76:	4642      	mov	r2, r8
 8008c78:	464b      	mov	r3, r9
 8008c7a:	1891      	adds	r1, r2, r2
 8008c7c:	6239      	str	r1, [r7, #32]
 8008c7e:	415b      	adcs	r3, r3
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
 8008c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c86:	4641      	mov	r1, r8
 8008c88:	1854      	adds	r4, r2, r1
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	eb43 0501 	adc.w	r5, r3, r1
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	00eb      	lsls	r3, r5, #3
 8008c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c9e:	00e2      	lsls	r2, r4, #3
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	18e3      	adds	r3, r4, r3
 8008ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008cac:	464b      	mov	r3, r9
 8008cae:	eb45 0303 	adc.w	r3, r5, r3
 8008cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008cc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	008b      	lsls	r3, r1, #2
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cdc:	4621      	mov	r1, r4
 8008cde:	008a      	lsls	r2, r1, #2
 8008ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ce4:	f7f7 ffba 	bl	8000c5c <__aeabi_uldivmod>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4b60      	ldr	r3, [pc, #384]	; (8008e70 <UART_SetConfig+0x4e4>)
 8008cee:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	011c      	lsls	r4, r3, #4
 8008cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	1891      	adds	r1, r2, r2
 8008d0e:	61b9      	str	r1, [r7, #24]
 8008d10:	415b      	adcs	r3, r3
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d18:	4641      	mov	r1, r8
 8008d1a:	1851      	adds	r1, r2, r1
 8008d1c:	6139      	str	r1, [r7, #16]
 8008d1e:	4649      	mov	r1, r9
 8008d20:	414b      	adcs	r3, r1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	f04f 0300 	mov.w	r3, #0
 8008d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d30:	4659      	mov	r1, fp
 8008d32:	00cb      	lsls	r3, r1, #3
 8008d34:	4651      	mov	r1, sl
 8008d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d3a:	4651      	mov	r1, sl
 8008d3c:	00ca      	lsls	r2, r1, #3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4619      	mov	r1, r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	4642      	mov	r2, r8
 8008d46:	189b      	adds	r3, r3, r2
 8008d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	460a      	mov	r2, r1
 8008d50:	eb42 0303 	adc.w	r3, r2, r3
 8008d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d70:	4649      	mov	r1, r9
 8008d72:	008b      	lsls	r3, r1, #2
 8008d74:	4641      	mov	r1, r8
 8008d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d7a:	4641      	mov	r1, r8
 8008d7c:	008a      	lsls	r2, r1, #2
 8008d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d82:	f7f7 ff6b 	bl	8000c5c <__aeabi_uldivmod>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4b39      	ldr	r3, [pc, #228]	; (8008e70 <UART_SetConfig+0x4e4>)
 8008d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d90:	095b      	lsrs	r3, r3, #5
 8008d92:	2164      	movs	r1, #100	; 0x64
 8008d94:	fb01 f303 	mul.w	r3, r1, r3
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	3332      	adds	r3, #50	; 0x32
 8008d9e:	4a34      	ldr	r2, [pc, #208]	; (8008e70 <UART_SetConfig+0x4e4>)
 8008da0:	fba2 2303 	umull	r2, r3, r2, r3
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008daa:	441c      	add	r4, r3
 8008dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008db0:	2200      	movs	r2, #0
 8008db2:	673b      	str	r3, [r7, #112]	; 0x70
 8008db4:	677a      	str	r2, [r7, #116]	; 0x74
 8008db6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008dba:	4642      	mov	r2, r8
 8008dbc:	464b      	mov	r3, r9
 8008dbe:	1891      	adds	r1, r2, r2
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	415b      	adcs	r3, r3
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dca:	4641      	mov	r1, r8
 8008dcc:	1851      	adds	r1, r2, r1
 8008dce:	6039      	str	r1, [r7, #0]
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	414b      	adcs	r3, r1
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008de2:	4659      	mov	r1, fp
 8008de4:	00cb      	lsls	r3, r1, #3
 8008de6:	4651      	mov	r1, sl
 8008de8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dec:	4651      	mov	r1, sl
 8008dee:	00ca      	lsls	r2, r1, #3
 8008df0:	4610      	mov	r0, r2
 8008df2:	4619      	mov	r1, r3
 8008df4:	4603      	mov	r3, r0
 8008df6:	4642      	mov	r2, r8
 8008df8:	189b      	adds	r3, r3, r2
 8008dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	460a      	mov	r2, r1
 8008e00:	eb42 0303 	adc.w	r3, r2, r3
 8008e04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e10:	667a      	str	r2, [r7, #100]	; 0x64
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	f04f 0300 	mov.w	r3, #0
 8008e1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e1e:	4649      	mov	r1, r9
 8008e20:	008b      	lsls	r3, r1, #2
 8008e22:	4641      	mov	r1, r8
 8008e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e28:	4641      	mov	r1, r8
 8008e2a:	008a      	lsls	r2, r1, #2
 8008e2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e30:	f7f7 ff14 	bl	8000c5c <__aeabi_uldivmod>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <UART_SetConfig+0x4e4>)
 8008e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	2164      	movs	r1, #100	; 0x64
 8008e42:	fb01 f303 	mul.w	r3, r1, r3
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	3332      	adds	r3, #50	; 0x32
 8008e4c:	4a08      	ldr	r2, [pc, #32]	; (8008e70 <UART_SetConfig+0x4e4>)
 8008e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	f003 020f 	and.w	r2, r3, #15
 8008e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4422      	add	r2, r4
 8008e60:	609a      	str	r2, [r3, #8]
}
 8008e62:	bf00      	nop
 8008e64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6e:	bf00      	nop
 8008e70:	51eb851f 	.word	0x51eb851f

08008e74 <__NVIC_SetPriority>:
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	db0a      	blt.n	8008e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	490c      	ldr	r1, [pc, #48]	; (8008ec0 <__NVIC_SetPriority+0x4c>)
 8008e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e92:	0112      	lsls	r2, r2, #4
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	440b      	add	r3, r1
 8008e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e9c:	e00a      	b.n	8008eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4908      	ldr	r1, [pc, #32]	; (8008ec4 <__NVIC_SetPriority+0x50>)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	f003 030f 	and.w	r3, r3, #15
 8008eaa:	3b04      	subs	r3, #4
 8008eac:	0112      	lsls	r2, r2, #4
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	440b      	add	r3, r1
 8008eb2:	761a      	strb	r2, [r3, #24]
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	e000e100 	.word	0xe000e100
 8008ec4:	e000ed00 	.word	0xe000ed00

08008ec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f06f 0004 	mvn.w	r0, #4
 8008ed2:	f7ff ffcf 	bl	8008e74 <__NVIC_SetPriority>
#endif
}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ee2:	f3ef 8305 	mrs	r3, IPSR
 8008ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008eee:	f06f 0305 	mvn.w	r3, #5
 8008ef2:	607b      	str	r3, [r7, #4]
 8008ef4:	e00c      	b.n	8008f10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <osKernelInitialize+0x44>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008efe:	4b08      	ldr	r3, [pc, #32]	; (8008f20 <osKernelInitialize+0x44>)
 8008f00:	2201      	movs	r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	607b      	str	r3, [r7, #4]
 8008f08:	e002      	b.n	8008f10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f10:	687b      	ldr	r3, [r7, #4]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	200008d0 	.word	0x200008d0

08008f24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2a:	f3ef 8305 	mrs	r3, IPSR
 8008f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f36:	f06f 0305 	mvn.w	r3, #5
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	e010      	b.n	8008f60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <osKernelStart+0x48>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d109      	bne.n	8008f5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f46:	f7ff ffbf 	bl	8008ec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f4a:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <osKernelStart+0x48>)
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f50:	f001 f910 	bl	800a174 <vTaskStartScheduler>
      stat = osOK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	e002      	b.n	8008f60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f60:	687b      	ldr	r3, [r7, #4]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200008d0 	.word	0x200008d0

08008f70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08e      	sub	sp, #56	; 0x38
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f80:	f3ef 8305 	mrs	r3, IPSR
 8008f84:	617b      	str	r3, [r7, #20]
  return(result);
 8008f86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d17e      	bne.n	800908a <osThreadNew+0x11a>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d07b      	beq.n	800908a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008f92:	2380      	movs	r3, #128	; 0x80
 8008f94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008f96:	2318      	movs	r3, #24
 8008f98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008fa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d045      	beq.n	8009036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <osThreadNew+0x48>
        name = attr->name;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <osThreadNew+0x6e>
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b38      	cmp	r3, #56	; 0x38
 8008fd0:	d805      	bhi.n	8008fde <osThreadNew+0x6e>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <osThreadNew+0x72>
        return (NULL);
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e054      	b.n	800908c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d003      	beq.n	8008ff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	089b      	lsrs	r3, r3, #2
 8008ff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00e      	beq.n	8009018 <osThreadNew+0xa8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	2b5b      	cmp	r3, #91	; 0x5b
 8009000:	d90a      	bls.n	8009018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009006:	2b00      	cmp	r3, #0
 8009008:	d006      	beq.n	8009018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <osThreadNew+0xa8>
        mem = 1;
 8009012:	2301      	movs	r3, #1
 8009014:	61bb      	str	r3, [r7, #24]
 8009016:	e010      	b.n	800903a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10c      	bne.n	800903a <osThreadNew+0xca>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d108      	bne.n	800903a <osThreadNew+0xca>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <osThreadNew+0xca>
          mem = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
 8009034:	e001      	b.n	800903a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d110      	bne.n	8009062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009048:	9202      	str	r2, [sp, #8]
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	6a3a      	ldr	r2, [r7, #32]
 8009054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fe38 	bl	8009ccc <xTaskCreateStatic>
 800905c:	4603      	mov	r3, r0
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	e013      	b.n	800908a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d110      	bne.n	800908a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	b29a      	uxth	r2, r3
 800906c:	f107 0310 	add.w	r3, r7, #16
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fe83 	bl	8009d86 <xTaskCreate>
 8009080:	4603      	mov	r3, r0
 8009082:	2b01      	cmp	r3, #1
 8009084:	d001      	beq.n	800908a <osThreadNew+0x11a>
            hTask = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800908a:	693b      	ldr	r3, [r7, #16]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3728      	adds	r7, #40	; 0x28
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800909c:	f3ef 8305 	mrs	r3, IPSR
 80090a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80090a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <osDelay+0x1c>
    stat = osErrorISR;
 80090a8:	f06f 0305 	mvn.w	r3, #5
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e007      	b.n	80090c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f001 f826 	bl	800a10c <vTaskDelay>
    }
  }

  return (stat);
 80090c0:	68fb      	ldr	r3, [r7, #12]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b086      	sub	sp, #24
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090d2:	f3ef 8305 	mrs	r3, IPSR
 80090d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80090d8:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80090de:	f06f 0305 	mvn.w	r3, #5
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e019      	b.n	800911a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80090ea:	f001 f955 	bl	800a398 <xTaskGetTickCount>
 80090ee:	4603      	mov	r3, r0
 80090f0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d009      	beq.n	8009114 <osDelayUntil+0x4a>
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	db06      	blt.n	8009114 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	6939      	ldr	r1, [r7, #16]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 ff7f 	bl	800a010 <vTaskDelayUntil>
 8009112:	e002      	b.n	800911a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009114:	f06f 0303 	mvn.w	r3, #3
 8009118:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4a07      	ldr	r2, [pc, #28]	; (8009150 <vApplicationGetIdleTaskMemory+0x2c>)
 8009134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	4a06      	ldr	r2, [pc, #24]	; (8009154 <vApplicationGetIdleTaskMemory+0x30>)
 800913a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2280      	movs	r2, #128	; 0x80
 8009140:	601a      	str	r2, [r3, #0]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	200008d4 	.word	0x200008d4
 8009154:	20000930 	.word	0x20000930

08009158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a07      	ldr	r2, [pc, #28]	; (8009184 <vApplicationGetTimerTaskMemory+0x2c>)
 8009168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	4a06      	ldr	r2, [pc, #24]	; (8009188 <vApplicationGetTimerTaskMemory+0x30>)
 800916e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009176:	601a      	str	r2, [r3, #0]
}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr
 8009184:	20000b30 	.word	0x20000b30
 8009188:	20000b8c 	.word	0x20000b8c

0800918c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f103 0208 	add.w	r2, r3, #8
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f103 0208 	add.w	r2, r3, #8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f103 0208 	add.w	r2, r3, #8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091da:	bf00      	nop
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	601a      	str	r2, [r3, #0]
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009244:	d103      	bne.n	800924e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	e00c      	b.n	8009268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	3308      	adds	r3, #8
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e002      	b.n	800925c <vListInsert+0x2e>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	429a      	cmp	r2, r3
 8009266:	d2f6      	bcs.n	8009256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	601a      	str	r2, [r3, #0]
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6892      	ldr	r2, [r2, #8]
 80092b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6852      	ldr	r2, [r2, #4]
 80092c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d103      	bne.n	80092d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1e5a      	subs	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800931e:	f002 f8c9 	bl	800b4b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932a:	68f9      	ldr	r1, [r7, #12]
 800932c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	441a      	add	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934e:	3b01      	subs	r3, #1
 8009350:	68f9      	ldr	r1, [r7, #12]
 8009352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009354:	fb01 f303 	mul.w	r3, r1, r3
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	22ff      	movs	r2, #255	; 0xff
 8009362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	22ff      	movs	r2, #255	; 0xff
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d114      	bne.n	800939e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3310      	adds	r3, #16
 8009380:	4618      	mov	r0, r3
 8009382:	f001 f981 	bl	800a688 <xTaskRemoveFromEventList>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d012      	beq.n	80093b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <xQueueGenericReset+0xcc>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	e009      	b.n	80093b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3310      	adds	r3, #16
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fef2 	bl	800918c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff feed 	bl	800918c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f002 f8af 	bl	800b514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093b6:	2301      	movs	r3, #1
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	e000ed04 	.word	0xe000ed04

080093c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <xQueueGenericCreateStatic+0x52>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <xQueueGenericCreateStatic+0x56>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <xQueueGenericCreateStatic+0x58>
 800941a:	2300      	movs	r3, #0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	623b      	str	r3, [r7, #32]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <xQueueGenericCreateStatic+0x7e>
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <xQueueGenericCreateStatic+0x82>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <xQueueGenericCreateStatic+0x84>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d10a      	bne.n	8009462 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	61fb      	str	r3, [r7, #28]
}
 800945e:	bf00      	nop
 8009460:	e7fe      	b.n	8009460 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009462:	2350      	movs	r3, #80	; 0x50
 8009464:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b50      	cmp	r3, #80	; 0x50
 800946a:	d00a      	beq.n	8009482 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	61bb      	str	r3, [r7, #24]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009482:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00d      	beq.n	80094aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009496:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f805 	bl	80094b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3730      	adds	r7, #48	; 0x30
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094e2:	2101      	movs	r1, #1
 80094e4:	69b8      	ldr	r0, [r7, #24]
 80094e6:	f7ff ff05 	bl	80092f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800950a:	2300      	movs	r3, #0
 800950c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueGenericSend+0x32>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d103      	bne.n	800953c <xQueueGenericSend+0x40>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <xQueueGenericSend+0x44>
 800953c:	2301      	movs	r3, #1
 800953e:	e000      	b.n	8009542 <xQueueGenericSend+0x46>
 8009540:	2300      	movs	r3, #0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <xQueueGenericSend+0x60>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d103      	bne.n	800956a <xQueueGenericSend+0x6e>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <xQueueGenericSend+0x72>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericSend+0x74>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xQueueGenericSend+0x8e>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800958a:	f001 fa3b 	bl	800aa04 <xTaskGetSchedulerState>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d102      	bne.n	800959a <xQueueGenericSend+0x9e>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <xQueueGenericSend+0xa2>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericSend+0xa4>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <xQueueGenericSend+0xbe>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	61fb      	str	r3, [r7, #28]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ba:	f001 ff7b 	bl	800b4b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d302      	bcc.n	80095d0 <xQueueGenericSend+0xd4>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d129      	bne.n	8009624 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095d6:	f000 fa0b 	bl	80099f0 <prvCopyDataToQueue>
 80095da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d010      	beq.n	8009606 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	3324      	adds	r3, #36	; 0x24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 f84d 	bl	800a688 <xTaskRemoveFromEventList>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d013      	beq.n	800961c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095f4:	4b3f      	ldr	r3, [pc, #252]	; (80096f4 <xQueueGenericSend+0x1f8>)
 80095f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	e00a      	b.n	800961c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800960c:	4b39      	ldr	r3, [pc, #228]	; (80096f4 <xQueueGenericSend+0x1f8>)
 800960e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800961c:	f001 ff7a 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 8009620:	2301      	movs	r3, #1
 8009622:	e063      	b.n	80096ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800962a:	f001 ff73 	bl	800b514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800962e:	2300      	movs	r3, #0
 8009630:	e05c      	b.n	80096ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009638:	f107 0314 	add.w	r3, r7, #20
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f887 	bl	800a750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009642:	2301      	movs	r3, #1
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009646:	f001 ff65 	bl	800b514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800964a:	f000 fdf9 	bl	800a240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800964e:	f001 ff31 	bl	800b4b4 <vPortEnterCritical>
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009658:	b25b      	sxtb	r3, r3
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d103      	bne.n	8009668 <xQueueGenericSend+0x16c>
 8009660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800966e:	b25b      	sxtb	r3, r3
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d103      	bne.n	800967e <xQueueGenericSend+0x182>
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800967e:	f001 ff49 	bl	800b514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009682:	1d3a      	adds	r2, r7, #4
 8009684:	f107 0314 	add.w	r3, r7, #20
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f001 f876 	bl	800a77c <xTaskCheckForTimeOut>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d124      	bne.n	80096e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009698:	f000 faa2 	bl	8009be0 <prvIsQueueFull>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d018      	beq.n	80096d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	3310      	adds	r3, #16
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4611      	mov	r1, r2
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 ff9c 	bl	800a5e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b2:	f000 fa2d 	bl	8009b10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096b6:	f000 fdd1 	bl	800a25c <xTaskResumeAll>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f af7c 	bne.w	80095ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <xQueueGenericSend+0x1f8>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	e772      	b.n	80095ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d6:	f000 fa1b 	bl	8009b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096da:	f000 fdbf 	bl	800a25c <xTaskResumeAll>
 80096de:	e76c      	b.n	80095ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e2:	f000 fa15 	bl	8009b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096e6:	f000 fdb9 	bl	800a25c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3738      	adds	r7, #56	; 0x38
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b090      	sub	sp, #64	; 0x40
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800970a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <xQueueGenericSendFromISR+0x3c>
 800972c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <xQueueGenericSendFromISR+0x40>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <xQueueGenericSendFromISR+0x42>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b02      	cmp	r3, #2
 8009758:	d103      	bne.n	8009762 <xQueueGenericSendFromISR+0x6a>
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <xQueueGenericSendFromISR+0x6e>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueGenericSendFromISR+0x70>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	623b      	str	r3, [r7, #32]
}
 800977e:	bf00      	nop
 8009780:	e7fe      	b.n	8009780 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009782:	f001 ff79 	bl	800b678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009786:	f3ef 8211 	mrs	r2, BASEPRI
 800978a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	61fa      	str	r2, [r7, #28]
 800979c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800979e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d302      	bcc.n	80097b4 <xQueueGenericSendFromISR+0xbc>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d12f      	bne.n	8009814 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ca:	f000 f911 	bl	80099f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d6:	d112      	bne.n	80097fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d016      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	3324      	adds	r3, #36	; 0x24
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 ff4f 	bl	800a688 <xTaskRemoveFromEventList>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00e      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00b      	beq.n	800980e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	e007      	b.n	800980e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009802:	3301      	adds	r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	b25a      	sxtb	r2, r3
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800980e:	2301      	movs	r3, #1
 8009810:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009812:	e001      	b.n	8009818 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009814:	2300      	movs	r3, #0
 8009816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009822:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009826:	4618      	mov	r0, r3
 8009828:	3740      	adds	r7, #64	; 0x40
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08c      	sub	sp, #48	; 0x30
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800983c:	2300      	movs	r3, #0
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <xQueueReceive+0x30>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	623b      	str	r3, [r7, #32]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueReceive+0x3e>
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <xQueueReceive+0x42>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueReceive+0x44>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xQueueReceive+0x5e>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	61fb      	str	r3, [r7, #28]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988e:	f001 f8b9 	bl	800aa04 <xTaskGetSchedulerState>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <xQueueReceive+0x6e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueReceive+0x72>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueReceive+0x74>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueReceive+0x8e>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	61bb      	str	r3, [r7, #24]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098be:	f001 fdf9 	bl	800b4b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d01f      	beq.n	800990e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098d2:	f000 f8f7 	bl	8009ac4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1e5a      	subs	r2, r3, #1
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00f      	beq.n	8009906 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	3310      	adds	r3, #16
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fecc 	bl	800a688 <xTaskRemoveFromEventList>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098f6:	4b3d      	ldr	r3, [pc, #244]	; (80099ec <xQueueReceive+0x1bc>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009906:	f001 fe05 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 800990a:	2301      	movs	r3, #1
 800990c:	e069      	b.n	80099e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d103      	bne.n	800991c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009914:	f001 fdfe 	bl	800b514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009918:	2300      	movs	r3, #0
 800991a:	e062      	b.n	80099e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009922:	f107 0310 	add.w	r3, r7, #16
 8009926:	4618      	mov	r0, r3
 8009928:	f000 ff12 	bl	800a750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009930:	f001 fdf0 	bl	800b514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009934:	f000 fc84 	bl	800a240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009938:	f001 fdbc 	bl	800b4b4 <vPortEnterCritical>
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009942:	b25b      	sxtb	r3, r3
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d103      	bne.n	8009952 <xQueueReceive+0x122>
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009958:	b25b      	sxtb	r3, r3
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995e:	d103      	bne.n	8009968 <xQueueReceive+0x138>
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009968:	f001 fdd4 	bl	800b514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800996c:	1d3a      	adds	r2, r7, #4
 800996e:	f107 0310 	add.w	r3, r7, #16
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f000 ff01 	bl	800a77c <xTaskCheckForTimeOut>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d123      	bne.n	80099c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f000 f917 	bl	8009bb4 <prvIsQueueEmpty>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d017      	beq.n	80099bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	4611      	mov	r1, r2
 8009994:	4618      	mov	r0, r3
 8009996:	f000 fe27 	bl	800a5e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f000 f8b8 	bl	8009b10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099a0:	f000 fc5c 	bl	800a25c <xTaskResumeAll>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d189      	bne.n	80098be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <xQueueReceive+0x1bc>)
 80099ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	e780      	b.n	80098be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099be:	f000 f8a7 	bl	8009b10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099c2:	f000 fc4b 	bl	800a25c <xTaskResumeAll>
 80099c6:	e77a      	b.n	80098be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ca:	f000 f8a1 	bl	8009b10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ce:	f000 fc45 	bl	800a25c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d4:	f000 f8ee 	bl	8009bb4 <prvIsQueueEmpty>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f43f af6f 	beq.w	80098be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3730      	adds	r7, #48	; 0x30
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10d      	bne.n	8009a2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d14d      	bne.n	8009ab2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f001 f810 	bl	800aa40 <xTaskPriorityDisinherit>
 8009a20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	609a      	str	r2, [r3, #8]
 8009a28:	e043      	b.n	8009ab2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d119      	bne.n	8009a64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6858      	ldr	r0, [r3, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	461a      	mov	r2, r3
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	f002 f870 	bl	800bb20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d32b      	bcc.n	8009ab2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	605a      	str	r2, [r3, #4]
 8009a62:	e026      	b.n	8009ab2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68d8      	ldr	r0, [r3, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	f002 f856 	bl	800bb20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	441a      	add	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d207      	bcs.n	8009aa0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	425b      	negs	r3, r3
 8009a9a:	441a      	add	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d105      	bne.n	8009ab2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009aba:	697b      	ldr	r3, [r7, #20]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3718      	adds	r7, #24
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d018      	beq.n	8009b08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	441a      	add	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d303      	bcc.n	8009af8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68d9      	ldr	r1, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	461a      	mov	r2, r3
 8009b02:	6838      	ldr	r0, [r7, #0]
 8009b04:	f002 f80c 	bl	800bb20 <memcpy>
	}
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b18:	f001 fccc 	bl	800b4b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b24:	e011      	b.n	8009b4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d012      	beq.n	8009b54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3324      	adds	r3, #36	; 0x24
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fda8 	bl	800a688 <xTaskRemoveFromEventList>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b3e:	f000 fe7f 	bl	800a840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	dce9      	bgt.n	8009b26 <prvUnlockQueue+0x16>
 8009b52:	e000      	b.n	8009b56 <prvUnlockQueue+0x46>
					break;
 8009b54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	22ff      	movs	r2, #255	; 0xff
 8009b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b5e:	f001 fcd9 	bl	800b514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b62:	f001 fca7 	bl	800b4b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b6e:	e011      	b.n	8009b94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d012      	beq.n	8009b9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3310      	adds	r3, #16
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 fd83 	bl	800a688 <xTaskRemoveFromEventList>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b88:	f000 fe5a 	bl	800a840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dce9      	bgt.n	8009b70 <prvUnlockQueue+0x60>
 8009b9c:	e000      	b.n	8009ba0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	22ff      	movs	r2, #255	; 0xff
 8009ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ba8:	f001 fcb4 	bl	800b514 <vPortExitCritical>
}
 8009bac:	bf00      	nop
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bbc:	f001 fc7a 	bl	800b4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d102      	bne.n	8009bce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e001      	b.n	8009bd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bd2:	f001 fc9f 	bl	800b514 <vPortExitCritical>

	return xReturn;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009be8:	f001 fc64 	bl	800b4b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d102      	bne.n	8009bfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	e001      	b.n	8009c02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c02:	f001 fc87 	bl	800b514 <vPortExitCritical>

	return xReturn;
 8009c06:	68fb      	ldr	r3, [r7, #12]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e014      	b.n	8009c4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c20:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10b      	bne.n	8009c44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c2c:	490c      	ldr	r1, [pc, #48]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c36:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <vQueueAddToRegistry+0x50>)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c42:	e006      	b.n	8009c52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b07      	cmp	r3, #7
 8009c4e:	d9e7      	bls.n	8009c20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20000f8c 	.word	0x20000f8c

08009c64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c74:	f001 fc1e 	bl	800b4b4 <vPortEnterCritical>
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c7e:	b25b      	sxtb	r3, r3
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d103      	bne.n	8009c8e <vQueueWaitForMessageRestricted+0x2a>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d103      	bne.n	8009ca4 <vQueueWaitForMessageRestricted+0x40>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ca4:	f001 fc36 	bl	800b514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 fcb9 	bl	800a630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cbe:	6978      	ldr	r0, [r7, #20]
 8009cc0:	f7ff ff26 	bl	8009b10 <prvUnlockQueue>
	}
 8009cc4:	bf00      	nop
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08e      	sub	sp, #56	; 0x38
 8009cd0:	af04      	add	r7, sp, #16
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	623b      	str	r3, [r7, #32]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10a      	bne.n	8009d12 <xTaskCreateStatic+0x46>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	61fb      	str	r3, [r7, #28]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d12:	235c      	movs	r3, #92	; 0x5c
 8009d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b5c      	cmp	r3, #92	; 0x5c
 8009d1a:	d00a      	beq.n	8009d32 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	61bb      	str	r3, [r7, #24]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01e      	beq.n	8009d78 <xTaskCreateStatic+0xac>
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01b      	beq.n	8009d78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d52:	2300      	movs	r3, #0
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	f107 0314 	add.w	r3, r7, #20
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f850 	bl	8009e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d72:	f000 f8dd 	bl	8009f30 <prvAddNewTaskToReadyList>
 8009d76:	e001      	b.n	8009d7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d7c:	697b      	ldr	r3, [r7, #20]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3728      	adds	r7, #40	; 0x28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b08c      	sub	sp, #48	; 0x30
 8009d8a:	af04      	add	r7, sp, #16
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	603b      	str	r3, [r7, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d96:	88fb      	ldrh	r3, [r7, #6]
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 fcac 	bl	800b6f8 <pvPortMalloc>
 8009da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009da8:	205c      	movs	r0, #92	; 0x5c
 8009daa:	f001 fca5 	bl	800b6f8 <pvPortMalloc>
 8009dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
 8009dbc:	e005      	b.n	8009dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dbe:	6978      	ldr	r0, [r7, #20]
 8009dc0:	f001 fd66 	bl	800b890 <vPortFree>
 8009dc4:	e001      	b.n	8009dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d017      	beq.n	8009e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009dd8:	88fa      	ldrh	r2, [r7, #6]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	9303      	str	r3, [sp, #12]
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	9302      	str	r3, [sp, #8]
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f000 f80e 	bl	8009e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009df4:	69f8      	ldr	r0, [r7, #28]
 8009df6:	f000 f89b 	bl	8009f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	61bb      	str	r3, [r7, #24]
 8009dfe:	e002      	b.n	8009e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e00:	f04f 33ff 	mov.w	r3, #4294967295
 8009e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e06:	69bb      	ldr	r3, [r7, #24]
	}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3720      	adds	r7, #32
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	461a      	mov	r2, r3
 8009e28:	21a5      	movs	r1, #165	; 0xa5
 8009e2a:	f001 fe87 	bl	800bb3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	4413      	add	r3, r2
 8009e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	f003 0307 	and.w	r3, r3, #7
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	617b      	str	r3, [r7, #20]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d01f      	beq.n	8009eae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	e012      	b.n	8009e9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	7819      	ldrb	r1, [r3, #0]
 8009e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	4413      	add	r3, r2
 8009e82:	3334      	adds	r3, #52	; 0x34
 8009e84:	460a      	mov	r2, r1
 8009e86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	3301      	adds	r3, #1
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	d9e9      	bls.n	8009e74 <prvInitialiseNewTask+0x64>
 8009ea0:	e000      	b.n	8009ea4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009ea2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eac:	e003      	b.n	8009eb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	2b37      	cmp	r3, #55	; 0x37
 8009eba:	d901      	bls.n	8009ec0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ebc:	2337      	movs	r3, #55	; 0x37
 8009ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7ff f978 	bl	80091cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3318      	adds	r3, #24
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff f973 	bl	80091cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	2200      	movs	r2, #0
 8009f00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	69b8      	ldr	r0, [r7, #24]
 8009f10:	f001 f9a6 	bl	800b260 <pxPortInitialiseStack>
 8009f14:	4602      	mov	r2, r0
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f26:	bf00      	nop
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f38:	f001 fabc 	bl	800b4b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f3c:	4b2d      	ldr	r3, [pc, #180]	; (8009ff4 <prvAddNewTaskToReadyList+0xc4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	3301      	adds	r3, #1
 8009f42:	4a2c      	ldr	r2, [pc, #176]	; (8009ff4 <prvAddNewTaskToReadyList+0xc4>)
 8009f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f46:	4b2c      	ldr	r3, [pc, #176]	; (8009ff8 <prvAddNewTaskToReadyList+0xc8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d109      	bne.n	8009f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ff8 <prvAddNewTaskToReadyList+0xc8>)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f54:	4b27      	ldr	r3, [pc, #156]	; (8009ff4 <prvAddNewTaskToReadyList+0xc4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d110      	bne.n	8009f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f5c:	f000 fc94 	bl	800a888 <prvInitialiseTaskLists>
 8009f60:	e00d      	b.n	8009f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f62:	4b26      	ldr	r3, [pc, #152]	; (8009ffc <prvAddNewTaskToReadyList+0xcc>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f6a:	4b23      	ldr	r3, [pc, #140]	; (8009ff8 <prvAddNewTaskToReadyList+0xc8>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d802      	bhi.n	8009f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <prvAddNewTaskToReadyList+0xc8>)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f7e:	4b20      	ldr	r3, [pc, #128]	; (800a000 <prvAddNewTaskToReadyList+0xd0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3301      	adds	r3, #1
 8009f84:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <prvAddNewTaskToReadyList+0xd0>)
 8009f86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <prvAddNewTaskToReadyList+0xd0>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4b1b      	ldr	r3, [pc, #108]	; (800a004 <prvAddNewTaskToReadyList+0xd4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d903      	bls.n	8009fa4 <prvAddNewTaskToReadyList+0x74>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	4a18      	ldr	r2, [pc, #96]	; (800a004 <prvAddNewTaskToReadyList+0xd4>)
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa8:	4613      	mov	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4413      	add	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4a15      	ldr	r2, [pc, #84]	; (800a008 <prvAddNewTaskToReadyList+0xd8>)
 8009fb2:	441a      	add	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f7ff f913 	bl	80091e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fc0:	f001 faa8 	bl	800b514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fc4:	4b0d      	ldr	r3, [pc, #52]	; (8009ffc <prvAddNewTaskToReadyList+0xcc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00e      	beq.n	8009fea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <prvAddNewTaskToReadyList+0xc8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d207      	bcs.n	8009fea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fda:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <prvAddNewTaskToReadyList+0xdc>)
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200014a0 	.word	0x200014a0
 8009ff8:	20000fcc 	.word	0x20000fcc
 8009ffc:	200014ac 	.word	0x200014ac
 800a000:	200014bc 	.word	0x200014bc
 800a004:	200014a8 	.word	0x200014a8
 800a008:	20000fd0 	.word	0x20000fd0
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08a      	sub	sp, #40	; 0x28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <vTaskDelayUntil+0x2a>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	617b      	str	r3, [r7, #20]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <vTaskDelayUntil+0x46>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	613b      	str	r3, [r7, #16]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a056:	4b2a      	ldr	r3, [pc, #168]	; (800a100 <vTaskDelayUntil+0xf0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <vTaskDelayUntil+0x64>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	60fb      	str	r3, [r7, #12]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a074:	f000 f8e4 	bl	800a240 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a078:	4b22      	ldr	r3, [pc, #136]	; (800a104 <vTaskDelayUntil+0xf4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	4413      	add	r3, r2
 800a086:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6a3a      	ldr	r2, [r7, #32]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d20b      	bcs.n	800a0aa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	69fa      	ldr	r2, [r7, #28]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d211      	bcs.n	800a0c0 <vTaskDelayUntil+0xb0>
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d90d      	bls.n	800a0c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a8:	e00a      	b.n	800a0c0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69fa      	ldr	r2, [r7, #28]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d303      	bcc.n	800a0bc <vTaskDelayUntil+0xac>
 800a0b4:	69fa      	ldr	r2, [r7, #28]
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d901      	bls.n	800a0c0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d006      	beq.n	800a0da <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	6a3b      	ldr	r3, [r7, #32]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fd21 	bl	800ab1c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a0da:	f000 f8bf 	bl	800a25c <xTaskResumeAll>
 800a0de:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d107      	bne.n	800a0f6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a0e6:	4b08      	ldr	r3, [pc, #32]	; (800a108 <vTaskDelayUntil+0xf8>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0f6:	bf00      	nop
 800a0f8:	3728      	adds	r7, #40	; 0x28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	200014c8 	.word	0x200014c8
 800a104:	200014a4 	.word	0x200014a4
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d017      	beq.n	800a14e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a11e:	4b13      	ldr	r3, [pc, #76]	; (800a16c <vTaskDelay+0x60>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <vTaskDelay+0x30>
	__asm volatile
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60bb      	str	r3, [r7, #8]
}
 800a138:	bf00      	nop
 800a13a:	e7fe      	b.n	800a13a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a13c:	f000 f880 	bl	800a240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a140:	2100      	movs	r1, #0
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fcea 	bl	800ab1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a148:	f000 f888 	bl	800a25c <xTaskResumeAll>
 800a14c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d107      	bne.n	800a164 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <vTaskDelay+0x64>)
 800a156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a164:	bf00      	nop
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	200014c8 	.word	0x200014c8
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	; 0x28
 800a178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a182:	463a      	mov	r2, r7
 800a184:	1d39      	adds	r1, r7, #4
 800a186:	f107 0308 	add.w	r3, r7, #8
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe ffca 	bl	8009124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	9202      	str	r2, [sp, #8]
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	2300      	movs	r3, #0
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	460a      	mov	r2, r1
 800a1a2:	4921      	ldr	r1, [pc, #132]	; (800a228 <vTaskStartScheduler+0xb4>)
 800a1a4:	4821      	ldr	r0, [pc, #132]	; (800a22c <vTaskStartScheduler+0xb8>)
 800a1a6:	f7ff fd91 	bl	8009ccc <xTaskCreateStatic>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	4a20      	ldr	r2, [pc, #128]	; (800a230 <vTaskStartScheduler+0xbc>)
 800a1ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a1b0:	4b1f      	ldr	r3, [pc, #124]	; (800a230 <vTaskStartScheduler+0xbc>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	e001      	b.n	800a1c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d102      	bne.n	800a1ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1c8:	f000 fcfc 	bl	800abc4 <xTimerCreateTimerTask>
 800a1cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d116      	bne.n	800a202 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	613b      	str	r3, [r7, #16]
}
 800a1e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1e8:	4b12      	ldr	r3, [pc, #72]	; (800a234 <vTaskStartScheduler+0xc0>)
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1f0:	4b11      	ldr	r3, [pc, #68]	; (800a238 <vTaskStartScheduler+0xc4>)
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1f6:	4b11      	ldr	r3, [pc, #68]	; (800a23c <vTaskStartScheduler+0xc8>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1fc:	f001 f8b8 	bl	800b370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a200:	e00e      	b.n	800a220 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a208:	d10a      	bne.n	800a220 <vTaskStartScheduler+0xac>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	60fb      	str	r3, [r7, #12]
}
 800a21c:	bf00      	nop
 800a21e:	e7fe      	b.n	800a21e <vTaskStartScheduler+0xaa>
}
 800a220:	bf00      	nop
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	0800c55c 	.word	0x0800c55c
 800a22c:	0800a859 	.word	0x0800a859
 800a230:	200014c4 	.word	0x200014c4
 800a234:	200014c0 	.word	0x200014c0
 800a238:	200014ac 	.word	0x200014ac
 800a23c:	200014a4 	.word	0x200014a4

0800a240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <vTaskSuspendAll+0x18>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	4a03      	ldr	r2, [pc, #12]	; (800a258 <vTaskSuspendAll+0x18>)
 800a24c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a24e:	bf00      	nop
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	200014c8 	.word	0x200014c8

0800a25c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a26a:	4b42      	ldr	r3, [pc, #264]	; (800a374 <xTaskResumeAll+0x118>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <xTaskResumeAll+0x2c>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	603b      	str	r3, [r7, #0]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a288:	f001 f914 	bl	800b4b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a28c:	4b39      	ldr	r3, [pc, #228]	; (800a374 <xTaskResumeAll+0x118>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	4a38      	ldr	r2, [pc, #224]	; (800a374 <xTaskResumeAll+0x118>)
 800a294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a296:	4b37      	ldr	r3, [pc, #220]	; (800a374 <xTaskResumeAll+0x118>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d162      	bne.n	800a364 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a29e:	4b36      	ldr	r3, [pc, #216]	; (800a378 <xTaskResumeAll+0x11c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d05e      	beq.n	800a364 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2a6:	e02f      	b.n	800a308 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a8:	4b34      	ldr	r3, [pc, #208]	; (800a37c <xTaskResumeAll+0x120>)
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3318      	adds	r3, #24
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe fff3 	bl	80092a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe ffee 	bl	80092a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	4b2d      	ldr	r3, [pc, #180]	; (800a380 <xTaskResumeAll+0x124>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d903      	bls.n	800a2d8 <xTaskResumeAll+0x7c>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <xTaskResumeAll+0x124>)
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4a27      	ldr	r2, [pc, #156]	; (800a384 <xTaskResumeAll+0x128>)
 800a2e6:	441a      	add	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7fe ff79 	bl	80091e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4b23      	ldr	r3, [pc, #140]	; (800a388 <xTaskResumeAll+0x12c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d302      	bcc.n	800a308 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a302:	4b22      	ldr	r3, [pc, #136]	; (800a38c <xTaskResumeAll+0x130>)
 800a304:	2201      	movs	r2, #1
 800a306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <xTaskResumeAll+0x120>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1cb      	bne.n	800a2a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a316:	f000 fb55 	bl	800a9c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a31a:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <xTaskResumeAll+0x134>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d010      	beq.n	800a348 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a326:	f000 f847 	bl	800a3b8 <xTaskIncrementTick>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a330:	4b16      	ldr	r3, [pc, #88]	; (800a38c <xTaskResumeAll+0x130>)
 800a332:	2201      	movs	r2, #1
 800a334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3b01      	subs	r3, #1
 800a33a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f1      	bne.n	800a326 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <xTaskResumeAll+0x134>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a348:	4b10      	ldr	r3, [pc, #64]	; (800a38c <xTaskResumeAll+0x130>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d009      	beq.n	800a364 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <xTaskResumeAll+0x138>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a364:	f001 f8d6 	bl	800b514 <vPortExitCritical>

	return xAlreadyYielded;
 800a368:	68bb      	ldr	r3, [r7, #8]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	200014c8 	.word	0x200014c8
 800a378:	200014a0 	.word	0x200014a0
 800a37c:	20001460 	.word	0x20001460
 800a380:	200014a8 	.word	0x200014a8
 800a384:	20000fd0 	.word	0x20000fd0
 800a388:	20000fcc 	.word	0x20000fcc
 800a38c:	200014b4 	.word	0x200014b4
 800a390:	200014b0 	.word	0x200014b0
 800a394:	e000ed04 	.word	0xe000ed04

0800a398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <xTaskGetTickCount+0x1c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3a4:	687b      	ldr	r3, [r7, #4]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	200014a4 	.word	0x200014a4

0800a3b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3c2:	4b4f      	ldr	r3, [pc, #316]	; (800a500 <xTaskIncrementTick+0x148>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f040 808f 	bne.w	800a4ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3cc:	4b4d      	ldr	r3, [pc, #308]	; (800a504 <xTaskIncrementTick+0x14c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3d4:	4a4b      	ldr	r2, [pc, #300]	; (800a504 <xTaskIncrementTick+0x14c>)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d120      	bne.n	800a422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3e0:	4b49      	ldr	r3, [pc, #292]	; (800a508 <xTaskIncrementTick+0x150>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <xTaskIncrementTick+0x48>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	603b      	str	r3, [r7, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <xTaskIncrementTick+0x46>
 800a400:	4b41      	ldr	r3, [pc, #260]	; (800a508 <xTaskIncrementTick+0x150>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	4b41      	ldr	r3, [pc, #260]	; (800a50c <xTaskIncrementTick+0x154>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a3f      	ldr	r2, [pc, #252]	; (800a508 <xTaskIncrementTick+0x150>)
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	4a3f      	ldr	r2, [pc, #252]	; (800a50c <xTaskIncrementTick+0x154>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <xTaskIncrementTick+0x158>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3301      	adds	r3, #1
 800a41a:	4a3d      	ldr	r2, [pc, #244]	; (800a510 <xTaskIncrementTick+0x158>)
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	f000 fad1 	bl	800a9c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a422:	4b3c      	ldr	r3, [pc, #240]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d349      	bcc.n	800a4c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a42c:	4b36      	ldr	r3, [pc, #216]	; (800a508 <xTaskIncrementTick+0x150>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d104      	bne.n	800a440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a436:	4b37      	ldr	r3, [pc, #220]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	601a      	str	r2, [r3, #0]
					break;
 800a43e:	e03f      	b.n	800a4c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a440:	4b31      	ldr	r3, [pc, #196]	; (800a508 <xTaskIncrementTick+0x150>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d203      	bcs.n	800a460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a458:	4a2e      	ldr	r2, [pc, #184]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a45e:	e02f      	b.n	800a4c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3304      	adds	r3, #4
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe ff1b 	bl	80092a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3318      	adds	r3, #24
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe ff12 	bl	80092a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	4b25      	ldr	r3, [pc, #148]	; (800a518 <xTaskIncrementTick+0x160>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d903      	bls.n	800a490 <xTaskIncrementTick+0xd8>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	4a22      	ldr	r2, [pc, #136]	; (800a518 <xTaskIncrementTick+0x160>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a1f      	ldr	r2, [pc, #124]	; (800a51c <xTaskIncrementTick+0x164>)
 800a49e:	441a      	add	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe fe9d 	bl	80091e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <xTaskIncrementTick+0x168>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d3b8      	bcc.n	800a42c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4be:	e7b5      	b.n	800a42c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <xTaskIncrementTick+0x168>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	4915      	ldr	r1, [pc, #84]	; (800a51c <xTaskIncrementTick+0x164>)
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	440b      	add	r3, r1
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d901      	bls.n	800a4dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <xTaskIncrementTick+0x16c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e004      	b.n	800a4f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <xTaskIncrementTick+0x170>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	4a0d      	ldr	r2, [pc, #52]	; (800a528 <xTaskIncrementTick+0x170>)
 800a4f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4f4:	697b      	ldr	r3, [r7, #20]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	200014c8 	.word	0x200014c8
 800a504:	200014a4 	.word	0x200014a4
 800a508:	20001458 	.word	0x20001458
 800a50c:	2000145c 	.word	0x2000145c
 800a510:	200014b8 	.word	0x200014b8
 800a514:	200014c0 	.word	0x200014c0
 800a518:	200014a8 	.word	0x200014a8
 800a51c:	20000fd0 	.word	0x20000fd0
 800a520:	20000fcc 	.word	0x20000fcc
 800a524:	200014b4 	.word	0x200014b4
 800a528:	200014b0 	.word	0x200014b0

0800a52c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a532:	4b28      	ldr	r3, [pc, #160]	; (800a5d4 <vTaskSwitchContext+0xa8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a53a:	4b27      	ldr	r3, [pc, #156]	; (800a5d8 <vTaskSwitchContext+0xac>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a540:	e041      	b.n	800a5c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a542:	4b25      	ldr	r3, [pc, #148]	; (800a5d8 <vTaskSwitchContext+0xac>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a548:	4b24      	ldr	r3, [pc, #144]	; (800a5dc <vTaskSwitchContext+0xb0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	e010      	b.n	800a572 <vTaskSwitchContext+0x46>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <vTaskSwitchContext+0x40>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	607b      	str	r3, [r7, #4]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <vTaskSwitchContext+0x3e>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3b01      	subs	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	491b      	ldr	r1, [pc, #108]	; (800a5e0 <vTaskSwitchContext+0xb4>)
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	440b      	add	r3, r1
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0e4      	beq.n	800a550 <vTaskSwitchContext+0x24>
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <vTaskSwitchContext+0xb4>)
 800a592:	4413      	add	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	605a      	str	r2, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d104      	bne.n	800a5b6 <vTaskSwitchContext+0x8a>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	605a      	str	r2, [r3, #4]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	4a09      	ldr	r2, [pc, #36]	; (800a5e4 <vTaskSwitchContext+0xb8>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	4a06      	ldr	r2, [pc, #24]	; (800a5dc <vTaskSwitchContext+0xb0>)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6013      	str	r3, [r2, #0]
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	200014c8 	.word	0x200014c8
 800a5d8:	200014b4 	.word	0x200014b4
 800a5dc:	200014a8 	.word	0x200014a8
 800a5e0:	20000fd0 	.word	0x20000fd0
 800a5e4:	20000fcc 	.word	0x20000fcc

0800a5e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10a      	bne.n	800a60e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	60fb      	str	r3, [r7, #12]
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <vTaskPlaceOnEventList+0x44>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3318      	adds	r3, #24
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7fe fe09 	bl	800922e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a61c:	2101      	movs	r1, #1
 800a61e:	6838      	ldr	r0, [r7, #0]
 800a620:	f000 fa7c 	bl	800ab1c <prvAddCurrentTaskToDelayedList>
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000fcc 	.word	0x20000fcc

0800a630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	617b      	str	r3, [r7, #20]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <vTaskPlaceOnEventListRestricted+0x54>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3318      	adds	r3, #24
 800a65e:	4619      	mov	r1, r3
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7fe fdc0 	bl	80091e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a66c:	f04f 33ff 	mov.w	r3, #4294967295
 800a670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	68b8      	ldr	r0, [r7, #8]
 800a676:	f000 fa51 	bl	800ab1c <prvAddCurrentTaskToDelayedList>
	}
 800a67a:	bf00      	nop
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000fcc 	.word	0x20000fcc

0800a688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	60fb      	str	r3, [r7, #12]
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	3318      	adds	r3, #24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7fe fdf1 	bl	80092a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6be:	4b1e      	ldr	r3, [pc, #120]	; (800a738 <xTaskRemoveFromEventList+0xb0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d11d      	bne.n	800a702 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fde8 	bl	80092a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d4:	4b19      	ldr	r3, [pc, #100]	; (800a73c <xTaskRemoveFromEventList+0xb4>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d903      	bls.n	800a6e4 <xTaskRemoveFromEventList+0x5c>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	4a16      	ldr	r2, [pc, #88]	; (800a73c <xTaskRemoveFromEventList+0xb4>)
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <xTaskRemoveFromEventList+0xb8>)
 800a6f2:	441a      	add	r2, r3
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	f7fe fd73 	bl	80091e6 <vListInsertEnd>
 800a700:	e005      	b.n	800a70e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	3318      	adds	r3, #24
 800a706:	4619      	mov	r1, r3
 800a708:	480e      	ldr	r0, [pc, #56]	; (800a744 <xTaskRemoveFromEventList+0xbc>)
 800a70a:	f7fe fd6c 	bl	80091e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a712:	4b0d      	ldr	r3, [pc, #52]	; (800a748 <xTaskRemoveFromEventList+0xc0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	429a      	cmp	r2, r3
 800a71a:	d905      	bls.n	800a728 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a71c:	2301      	movs	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a720:	4b0a      	ldr	r3, [pc, #40]	; (800a74c <xTaskRemoveFromEventList+0xc4>)
 800a722:	2201      	movs	r2, #1
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	e001      	b.n	800a72c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a72c:	697b      	ldr	r3, [r7, #20]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200014c8 	.word	0x200014c8
 800a73c:	200014a8 	.word	0x200014a8
 800a740:	20000fd0 	.word	0x20000fd0
 800a744:	20001460 	.word	0x20001460
 800a748:	20000fcc 	.word	0x20000fcc
 800a74c:	200014b4 	.word	0x200014b4

0800a750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a758:	4b06      	ldr	r3, [pc, #24]	; (800a774 <vTaskInternalSetTimeOutState+0x24>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <vTaskInternalSetTimeOutState+0x28>)
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	605a      	str	r2, [r3, #4]
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	200014b8 	.word	0x200014b8
 800a778:	200014a4 	.word	0x200014a4

0800a77c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10a      	bne.n	800a7a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	613b      	str	r3, [r7, #16]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	60fb      	str	r3, [r7, #12]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7be:	f000 fe79 	bl	800b4b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7c2:	4b1d      	ldr	r3, [pc, #116]	; (800a838 <xTaskCheckForTimeOut+0xbc>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	69ba      	ldr	r2, [r7, #24]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d102      	bne.n	800a7e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	61fb      	str	r3, [r7, #28]
 800a7e0:	e023      	b.n	800a82a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	4b15      	ldr	r3, [pc, #84]	; (800a83c <xTaskCheckForTimeOut+0xc0>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d007      	beq.n	800a7fe <xTaskCheckForTimeOut+0x82>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d302      	bcc.n	800a7fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e015      	b.n	800a82a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	429a      	cmp	r2, r3
 800a806:	d20b      	bcs.n	800a820 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ff9b 	bl	800a750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	e004      	b.n	800a82a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a826:	2301      	movs	r3, #1
 800a828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a82a:	f000 fe73 	bl	800b514 <vPortExitCritical>

	return xReturn;
 800a82e:	69fb      	ldr	r3, [r7, #28]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3720      	adds	r7, #32
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	200014a4 	.word	0x200014a4
 800a83c:	200014b8 	.word	0x200014b8

0800a840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a840:	b480      	push	{r7}
 800a842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a844:	4b03      	ldr	r3, [pc, #12]	; (800a854 <vTaskMissedYield+0x14>)
 800a846:	2201      	movs	r2, #1
 800a848:	601a      	str	r2, [r3, #0]
}
 800a84a:	bf00      	nop
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	200014b4 	.word	0x200014b4

0800a858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a860:	f000 f852 	bl	800a908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a864:	4b06      	ldr	r3, [pc, #24]	; (800a880 <prvIdleTask+0x28>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d9f9      	bls.n	800a860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <prvIdleTask+0x2c>)
 800a86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a872:	601a      	str	r2, [r3, #0]
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a87c:	e7f0      	b.n	800a860 <prvIdleTask+0x8>
 800a87e:	bf00      	nop
 800a880:	20000fd0 	.word	0x20000fd0
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	e00c      	b.n	800a8ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	4613      	mov	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4413      	add	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4a12      	ldr	r2, [pc, #72]	; (800a8e8 <prvInitialiseTaskLists+0x60>)
 800a8a0:	4413      	add	r3, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fc72 	bl	800918c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	607b      	str	r3, [r7, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b37      	cmp	r3, #55	; 0x37
 800a8b2:	d9ef      	bls.n	800a894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8b4:	480d      	ldr	r0, [pc, #52]	; (800a8ec <prvInitialiseTaskLists+0x64>)
 800a8b6:	f7fe fc69 	bl	800918c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8ba:	480d      	ldr	r0, [pc, #52]	; (800a8f0 <prvInitialiseTaskLists+0x68>)
 800a8bc:	f7fe fc66 	bl	800918c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8c0:	480c      	ldr	r0, [pc, #48]	; (800a8f4 <prvInitialiseTaskLists+0x6c>)
 800a8c2:	f7fe fc63 	bl	800918c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8c6:	480c      	ldr	r0, [pc, #48]	; (800a8f8 <prvInitialiseTaskLists+0x70>)
 800a8c8:	f7fe fc60 	bl	800918c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8cc:	480b      	ldr	r0, [pc, #44]	; (800a8fc <prvInitialiseTaskLists+0x74>)
 800a8ce:	f7fe fc5d 	bl	800918c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <prvInitialiseTaskLists+0x78>)
 800a8d4:	4a05      	ldr	r2, [pc, #20]	; (800a8ec <prvInitialiseTaskLists+0x64>)
 800a8d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <prvInitialiseTaskLists+0x7c>)
 800a8da:	4a05      	ldr	r2, [pc, #20]	; (800a8f0 <prvInitialiseTaskLists+0x68>)
 800a8dc:	601a      	str	r2, [r3, #0]
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20000fd0 	.word	0x20000fd0
 800a8ec:	20001430 	.word	0x20001430
 800a8f0:	20001444 	.word	0x20001444
 800a8f4:	20001460 	.word	0x20001460
 800a8f8:	20001474 	.word	0x20001474
 800a8fc:	2000148c 	.word	0x2000148c
 800a900:	20001458 	.word	0x20001458
 800a904:	2000145c 	.word	0x2000145c

0800a908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a90e:	e019      	b.n	800a944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a910:	f000 fdd0 	bl	800b4b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a914:	4b10      	ldr	r3, [pc, #64]	; (800a958 <prvCheckTasksWaitingTermination+0x50>)
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	4618      	mov	r0, r3
 800a922:	f7fe fcbd 	bl	80092a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a926:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <prvCheckTasksWaitingTermination+0x54>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	4a0b      	ldr	r2, [pc, #44]	; (800a95c <prvCheckTasksWaitingTermination+0x54>)
 800a92e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <prvCheckTasksWaitingTermination+0x58>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3b01      	subs	r3, #1
 800a936:	4a0a      	ldr	r2, [pc, #40]	; (800a960 <prvCheckTasksWaitingTermination+0x58>)
 800a938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a93a:	f000 fdeb 	bl	800b514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f810 	bl	800a964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a944:	4b06      	ldr	r3, [pc, #24]	; (800a960 <prvCheckTasksWaitingTermination+0x58>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e1      	bne.n	800a910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20001474 	.word	0x20001474
 800a95c:	200014a0 	.word	0x200014a0
 800a960:	20001488 	.word	0x20001488

0800a964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a972:	2b00      	cmp	r3, #0
 800a974:	d108      	bne.n	800a988 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 ff88 	bl	800b890 <vPortFree>
				vPortFree( pxTCB );
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 ff85 	bl	800b890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a986:	e018      	b.n	800a9ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d103      	bne.n	800a99a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 ff7c 	bl	800b890 <vPortFree>
	}
 800a998:	e00f      	b.n	800a9ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d00a      	beq.n	800a9ba <prvDeleteTCB+0x56>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60fb      	str	r3, [r7, #12]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <prvDeleteTCB+0x54>
	}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9ca:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <prvResetNextTaskUnblockTime+0x38>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d104      	bne.n	800a9de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9d4:	4b0a      	ldr	r3, [pc, #40]	; (800aa00 <prvResetNextTaskUnblockTime+0x3c>)
 800a9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9dc:	e008      	b.n	800a9f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <prvResetNextTaskUnblockTime+0x38>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	4a04      	ldr	r2, [pc, #16]	; (800aa00 <prvResetNextTaskUnblockTime+0x3c>)
 800a9ee:	6013      	str	r3, [r2, #0]
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	20001458 	.word	0x20001458
 800aa00:	200014c0 	.word	0x200014c0

0800aa04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa0a:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <xTaskGetSchedulerState+0x34>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d102      	bne.n	800aa18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa12:	2301      	movs	r3, #1
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	e008      	b.n	800aa2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa18:	4b08      	ldr	r3, [pc, #32]	; (800aa3c <xTaskGetSchedulerState+0x38>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa20:	2302      	movs	r3, #2
 800aa22:	607b      	str	r3, [r7, #4]
 800aa24:	e001      	b.n	800aa2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa26:	2300      	movs	r3, #0
 800aa28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa2a:	687b      	ldr	r3, [r7, #4]
	}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	200014ac 	.word	0x200014ac
 800aa3c:	200014c8 	.word	0x200014c8

0800aa40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d056      	beq.n	800ab04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa56:	4b2e      	ldr	r3, [pc, #184]	; (800ab10 <xTaskPriorityDisinherit+0xd0>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d00a      	beq.n	800aa76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	60bb      	str	r3, [r7, #8]
}
 800aa90:	bf00      	nop
 800aa92:	e7fe      	b.n	800aa92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	1e5a      	subs	r2, r3, #1
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d02c      	beq.n	800ab04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d128      	bne.n	800ab04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	3304      	adds	r3, #4
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe fbf2 	bl	80092a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad4:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <xTaskPriorityDisinherit+0xd4>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d903      	bls.n	800aae4 <xTaskPriorityDisinherit+0xa4>
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	4a0c      	ldr	r2, [pc, #48]	; (800ab14 <xTaskPriorityDisinherit+0xd4>)
 800aae2:	6013      	str	r3, [r2, #0]
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae8:	4613      	mov	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4a09      	ldr	r2, [pc, #36]	; (800ab18 <xTaskPriorityDisinherit+0xd8>)
 800aaf2:	441a      	add	r2, r3
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fe fb73 	bl	80091e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab00:	2301      	movs	r3, #1
 800ab02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab04:	697b      	ldr	r3, [r7, #20]
	}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000fcc 	.word	0x20000fcc
 800ab14:	200014a8 	.word	0x200014a8
 800ab18:	20000fd0 	.word	0x20000fd0

0800ab1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab26:	4b21      	ldr	r3, [pc, #132]	; (800abac <prvAddCurrentTaskToDelayedList+0x90>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab2c:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fbb4 	bl	80092a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3e:	d10a      	bne.n	800ab56 <prvAddCurrentTaskToDelayedList+0x3a>
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab46:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4819      	ldr	r0, [pc, #100]	; (800abb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab50:	f7fe fb49 	bl	80091e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab54:	e026      	b.n	800aba4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab5e:	4b14      	ldr	r3, [pc, #80]	; (800abb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d209      	bcs.n	800ab82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab6e:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	4b0f      	ldr	r3, [pc, #60]	; (800abb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fe fb57 	bl	800922e <vListInsert>
}
 800ab80:	e010      	b.n	800aba4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab82:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7fe fb4d 	bl	800922e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab94:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d202      	bcs.n	800aba4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	6013      	str	r3, [r2, #0]
}
 800aba4:	bf00      	nop
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	200014a4 	.word	0x200014a4
 800abb0:	20000fcc 	.word	0x20000fcc
 800abb4:	2000148c 	.word	0x2000148c
 800abb8:	2000145c 	.word	0x2000145c
 800abbc:	20001458 	.word	0x20001458
 800abc0:	200014c0 	.word	0x200014c0

0800abc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	; 0x28
 800abc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800abca:	2300      	movs	r3, #0
 800abcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800abce:	f000 fb07 	bl	800b1e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800abd2:	4b1c      	ldr	r3, [pc, #112]	; (800ac44 <xTimerCreateTimerTask+0x80>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d021      	beq.n	800ac1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800abe2:	1d3a      	adds	r2, r7, #4
 800abe4:	f107 0108 	add.w	r1, r7, #8
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe fab3 	bl	8009158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	9202      	str	r2, [sp, #8]
 800abfa:	9301      	str	r3, [sp, #4]
 800abfc:	2302      	movs	r3, #2
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	2300      	movs	r3, #0
 800ac02:	460a      	mov	r2, r1
 800ac04:	4910      	ldr	r1, [pc, #64]	; (800ac48 <xTimerCreateTimerTask+0x84>)
 800ac06:	4811      	ldr	r0, [pc, #68]	; (800ac4c <xTimerCreateTimerTask+0x88>)
 800ac08:	f7ff f860 	bl	8009ccc <xTaskCreateStatic>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <xTimerCreateTimerTask+0x8c>)
 800ac10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <xTimerCreateTimerTask+0x8c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	613b      	str	r3, [r7, #16]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac3a:	697b      	ldr	r3, [r7, #20]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	200014fc 	.word	0x200014fc
 800ac48:	0800c564 	.word	0x0800c564
 800ac4c:	0800ad89 	.word	0x0800ad89
 800ac50:	20001500 	.word	0x20001500

0800ac54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08a      	sub	sp, #40	; 0x28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	623b      	str	r3, [r7, #32]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac82:	4b1a      	ldr	r3, [pc, #104]	; (800acec <xTimerGenericCommand+0x98>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d02a      	beq.n	800ace0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b05      	cmp	r3, #5
 800ac9a:	dc18      	bgt.n	800acce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac9c:	f7ff feb2 	bl	800aa04 <xTaskGetSchedulerState>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d109      	bne.n	800acba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <xTimerGenericCommand+0x98>)
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	f107 0110 	add.w	r1, r7, #16
 800acae:	2300      	movs	r3, #0
 800acb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb2:	f7fe fc23 	bl	80094fc <xQueueGenericSend>
 800acb6:	6278      	str	r0, [r7, #36]	; 0x24
 800acb8:	e012      	b.n	800ace0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acba:	4b0c      	ldr	r3, [pc, #48]	; (800acec <xTimerGenericCommand+0x98>)
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	f107 0110 	add.w	r1, r7, #16
 800acc2:	2300      	movs	r3, #0
 800acc4:	2200      	movs	r2, #0
 800acc6:	f7fe fc19 	bl	80094fc <xQueueGenericSend>
 800acca:	6278      	str	r0, [r7, #36]	; 0x24
 800accc:	e008      	b.n	800ace0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800acce:	4b07      	ldr	r3, [pc, #28]	; (800acec <xTimerGenericCommand+0x98>)
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	f107 0110 	add.w	r1, r7, #16
 800acd6:	2300      	movs	r3, #0
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	f7fe fd0d 	bl	80096f8 <xQueueGenericSendFromISR>
 800acde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ace0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3728      	adds	r7, #40	; 0x28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200014fc 	.word	0x200014fc

0800acf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfa:	4b22      	ldr	r3, [pc, #136]	; (800ad84 <prvProcessExpiredTimer+0x94>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	3304      	adds	r3, #4
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fac9 	bl	80092a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d022      	beq.n	800ad62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	699a      	ldr	r2, [r3, #24]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	18d1      	adds	r1, r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	6978      	ldr	r0, [r7, #20]
 800ad2a:	f000 f8d1 	bl	800aed0 <prvInsertTimerInActiveList>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d01f      	beq.n	800ad74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad34:	2300      	movs	r3, #0
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	2300      	movs	r3, #0
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	6978      	ldr	r0, [r7, #20]
 800ad40:	f7ff ff88 	bl	800ac54 <xTimerGenericCommand>
 800ad44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d113      	bne.n	800ad74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60fb      	str	r3, [r7, #12]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad68:	f023 0301 	bic.w	r3, r3, #1
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	6a1b      	ldr	r3, [r3, #32]
 800ad78:	6978      	ldr	r0, [r7, #20]
 800ad7a:	4798      	blx	r3
}
 800ad7c:	bf00      	nop
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	200014f4 	.word	0x200014f4

0800ad88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f857 	bl	800ae48 <prvGetNextExpireTime>
 800ad9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f000 f803 	bl	800adac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ada6:	f000 f8d5 	bl	800af54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adaa:	e7f1      	b.n	800ad90 <prvTimerTask+0x8>

0800adac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adb6:	f7ff fa43 	bl	800a240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adba:	f107 0308 	add.w	r3, r7, #8
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 f866 	bl	800ae90 <prvSampleTimeNow>
 800adc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d130      	bne.n	800ae2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <prvProcessTimerOrBlockTask+0x3c>
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	429a      	cmp	r2, r3
 800add8:	d806      	bhi.n	800ade8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800adda:	f7ff fa3f 	bl	800a25c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff ff85 	bl	800acf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ade6:	e024      	b.n	800ae32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800adee:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <prvProcessTimerOrBlockTask+0x90>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <prvProcessTimerOrBlockTask+0x50>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e000      	b.n	800adfe <prvProcessTimerOrBlockTask+0x52>
 800adfc:	2300      	movs	r3, #0
 800adfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae00:	4b0f      	ldr	r3, [pc, #60]	; (800ae40 <prvProcessTimerOrBlockTask+0x94>)
 800ae02:	6818      	ldr	r0, [r3, #0]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f7fe ff29 	bl	8009c64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae12:	f7ff fa23 	bl	800a25c <xTaskResumeAll>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10a      	bne.n	800ae32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae1c:	4b09      	ldr	r3, [pc, #36]	; (800ae44 <prvProcessTimerOrBlockTask+0x98>)
 800ae1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	f3bf 8f6f 	isb	sy
}
 800ae2c:	e001      	b.n	800ae32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae2e:	f7ff fa15 	bl	800a25c <xTaskResumeAll>
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	200014f8 	.word	0x200014f8
 800ae40:	200014fc 	.word	0x200014fc
 800ae44:	e000ed04 	.word	0xe000ed04

0800ae48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae50:	4b0e      	ldr	r3, [pc, #56]	; (800ae8c <prvGetNextExpireTime+0x44>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <prvGetNextExpireTime+0x16>
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	e000      	b.n	800ae60 <prvGetNextExpireTime+0x18>
 800ae5e:	2200      	movs	r2, #0
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d105      	bne.n	800ae78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae6c:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <prvGetNextExpireTime+0x44>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60fb      	str	r3, [r7, #12]
 800ae76:	e001      	b.n	800ae7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	200014f4 	.word	0x200014f4

0800ae90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae98:	f7ff fa7e 	bl	800a398 <xTaskGetTickCount>
 800ae9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae9e:	4b0b      	ldr	r3, [pc, #44]	; (800aecc <prvSampleTimeNow+0x3c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d205      	bcs.n	800aeb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aea8:	f000 f936 	bl	800b118 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aeba:	4a04      	ldr	r2, [pc, #16]	; (800aecc <prvSampleTimeNow+0x3c>)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aec0:	68fb      	ldr	r3, [r7, #12]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	20001504 	.word	0x20001504

0800aed0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d812      	bhi.n	800af1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	1ad2      	subs	r2, r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	429a      	cmp	r2, r3
 800af02:	d302      	bcc.n	800af0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af04:	2301      	movs	r3, #1
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	e01b      	b.n	800af42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af0a:	4b10      	ldr	r3, [pc, #64]	; (800af4c <prvInsertTimerInActiveList+0x7c>)
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	3304      	adds	r3, #4
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f7fe f98a 	bl	800922e <vListInsert>
 800af1a:	e012      	b.n	800af42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d206      	bcs.n	800af32 <prvInsertTimerInActiveList+0x62>
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d302      	bcc.n	800af32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af2c:	2301      	movs	r3, #1
 800af2e:	617b      	str	r3, [r7, #20]
 800af30:	e007      	b.n	800af42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <prvInsertTimerInActiveList+0x80>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3304      	adds	r3, #4
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f7fe f976 	bl	800922e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af42:	697b      	ldr	r3, [r7, #20]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200014f8 	.word	0x200014f8
 800af50:	200014f4 	.word	0x200014f4

0800af54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08e      	sub	sp, #56	; 0x38
 800af58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af5a:	e0ca      	b.n	800b0f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	da18      	bge.n	800af94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af62:	1d3b      	adds	r3, r7, #4
 800af64:	3304      	adds	r3, #4
 800af66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	61fb      	str	r3, [r7, #28]
}
 800af80:	bf00      	nop
 800af82:	e7fe      	b.n	800af82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af8a:	6850      	ldr	r0, [r2, #4]
 800af8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af8e:	6892      	ldr	r2, [r2, #8]
 800af90:	4611      	mov	r1, r2
 800af92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f2c0 80aa 	blt.w	800b0f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d004      	beq.n	800afb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	3304      	adds	r3, #4
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe f977 	bl	80092a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afb2:	463b      	mov	r3, r7
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff ff6b 	bl	800ae90 <prvSampleTimeNow>
 800afba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b09      	cmp	r3, #9
 800afc0:	f200 8097 	bhi.w	800b0f2 <prvProcessReceivedCommands+0x19e>
 800afc4:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <prvProcessReceivedCommands+0x78>)
 800afc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afca:	bf00      	nop
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800aff5 	.word	0x0800aff5
 800afd8:	0800b069 	.word	0x0800b069
 800afdc:	0800b07d 	.word	0x0800b07d
 800afe0:	0800b0c7 	.word	0x0800b0c7
 800afe4:	0800aff5 	.word	0x0800aff5
 800afe8:	0800aff5 	.word	0x0800aff5
 800afec:	0800b069 	.word	0x0800b069
 800aff0:	0800b07d 	.word	0x0800b07d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b2da      	uxtb	r2, r3
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	18d1      	adds	r1, r2, r3
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b014:	f7ff ff5c 	bl	800aed0 <prvInsertTimerInActiveList>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d069      	beq.n	800b0f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b024:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d05e      	beq.n	800b0f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	441a      	add	r2, r3
 800b03c:	2300      	movs	r3, #0
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	2300      	movs	r3, #0
 800b042:	2100      	movs	r1, #0
 800b044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b046:	f7ff fe05 	bl	800ac54 <xTimerGenericCommand>
 800b04a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d14f      	bne.n	800b0f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	61bb      	str	r3, [r7, #24]
}
 800b064:	bf00      	nop
 800b066:	e7fe      	b.n	800b066 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b06e:	f023 0301 	bic.w	r3, r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b07a:	e03a      	b.n	800b0f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	b2da      	uxtb	r2, r3
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	617b      	str	r3, [r7, #20]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	699a      	ldr	r2, [r3, #24]
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	18d1      	adds	r1, r2, r3
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c0:	f7ff ff06 	bl	800aed0 <prvInsertTimerInActiveList>
					break;
 800b0c4:	e015      	b.n	800b0f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d103      	bne.n	800b0dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b0d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d6:	f000 fbdb 	bl	800b890 <vPortFree>
 800b0da:	e00a      	b.n	800b0f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0ee:	e000      	b.n	800b0f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b0f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0f2:	4b08      	ldr	r3, [pc, #32]	; (800b114 <prvProcessReceivedCommands+0x1c0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	1d39      	adds	r1, r7, #4
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fe fb98 	bl	8009830 <xQueueReceive>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	f47f af2a 	bne.w	800af5c <prvProcessReceivedCommands+0x8>
	}
}
 800b108:	bf00      	nop
 800b10a:	bf00      	nop
 800b10c:	3730      	adds	r7, #48	; 0x30
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	200014fc 	.word	0x200014fc

0800b118 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b11e:	e048      	b.n	800b1b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b120:	4b2d      	ldr	r3, [pc, #180]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b12a:	4b2b      	ldr	r3, [pc, #172]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3304      	adds	r3, #4
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe f8b1 	bl	80092a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d02e      	beq.n	800b1b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	4413      	add	r3, r2
 800b15c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	429a      	cmp	r2, r3
 800b164:	d90e      	bls.n	800b184 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b172:	4b19      	ldr	r3, [pc, #100]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3304      	adds	r3, #4
 800b17a:	4619      	mov	r1, r3
 800b17c:	4610      	mov	r0, r2
 800b17e:	f7fe f856 	bl	800922e <vListInsert>
 800b182:	e016      	b.n	800b1b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b184:	2300      	movs	r3, #0
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	2300      	movs	r3, #0
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	2100      	movs	r1, #0
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7ff fd60 	bl	800ac54 <xTimerGenericCommand>
 800b194:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10a      	bne.n	800b1b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	603b      	str	r3, [r7, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1b1      	bne.n	800b120 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b1c2:	4b06      	ldr	r3, [pc, #24]	; (800b1dc <prvSwitchTimerLists+0xc4>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a04      	ldr	r2, [pc, #16]	; (800b1d8 <prvSwitchTimerLists+0xc0>)
 800b1c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b1ca:	4a04      	ldr	r2, [pc, #16]	; (800b1dc <prvSwitchTimerLists+0xc4>)
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	6013      	str	r3, [r2, #0]
}
 800b1d0:	bf00      	nop
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200014f4 	.word	0x200014f4
 800b1dc:	200014f8 	.word	0x200014f8

0800b1e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1e6:	f000 f965 	bl	800b4b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1ea:	4b15      	ldr	r3, [pc, #84]	; (800b240 <prvCheckForValidListAndQueue+0x60>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d120      	bne.n	800b234 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1f2:	4814      	ldr	r0, [pc, #80]	; (800b244 <prvCheckForValidListAndQueue+0x64>)
 800b1f4:	f7fd ffca 	bl	800918c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1f8:	4813      	ldr	r0, [pc, #76]	; (800b248 <prvCheckForValidListAndQueue+0x68>)
 800b1fa:	f7fd ffc7 	bl	800918c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1fe:	4b13      	ldr	r3, [pc, #76]	; (800b24c <prvCheckForValidListAndQueue+0x6c>)
 800b200:	4a10      	ldr	r2, [pc, #64]	; (800b244 <prvCheckForValidListAndQueue+0x64>)
 800b202:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b204:	4b12      	ldr	r3, [pc, #72]	; (800b250 <prvCheckForValidListAndQueue+0x70>)
 800b206:	4a10      	ldr	r2, [pc, #64]	; (800b248 <prvCheckForValidListAndQueue+0x68>)
 800b208:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b20a:	2300      	movs	r3, #0
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4b11      	ldr	r3, [pc, #68]	; (800b254 <prvCheckForValidListAndQueue+0x74>)
 800b210:	4a11      	ldr	r2, [pc, #68]	; (800b258 <prvCheckForValidListAndQueue+0x78>)
 800b212:	2110      	movs	r1, #16
 800b214:	200a      	movs	r0, #10
 800b216:	f7fe f8d5 	bl	80093c4 <xQueueGenericCreateStatic>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4a08      	ldr	r2, [pc, #32]	; (800b240 <prvCheckForValidListAndQueue+0x60>)
 800b21e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b220:	4b07      	ldr	r3, [pc, #28]	; (800b240 <prvCheckForValidListAndQueue+0x60>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b228:	4b05      	ldr	r3, [pc, #20]	; (800b240 <prvCheckForValidListAndQueue+0x60>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	490b      	ldr	r1, [pc, #44]	; (800b25c <prvCheckForValidListAndQueue+0x7c>)
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe fcee 	bl	8009c10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b234:	f000 f96e 	bl	800b514 <vPortExitCritical>
}
 800b238:	bf00      	nop
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	200014fc 	.word	0x200014fc
 800b244:	200014cc 	.word	0x200014cc
 800b248:	200014e0 	.word	0x200014e0
 800b24c:	200014f4 	.word	0x200014f4
 800b250:	200014f8 	.word	0x200014f8
 800b254:	200015a8 	.word	0x200015a8
 800b258:	20001508 	.word	0x20001508
 800b25c:	0800c56c 	.word	0x0800c56c

0800b260 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3b04      	subs	r3, #4
 800b270:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3b04      	subs	r3, #4
 800b27e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f023 0201 	bic.w	r2, r3, #1
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	3b04      	subs	r3, #4
 800b28e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b290:	4a0c      	ldr	r2, [pc, #48]	; (800b2c4 <pxPortInitialiseStack+0x64>)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3b14      	subs	r3, #20
 800b29a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3b04      	subs	r3, #4
 800b2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f06f 0202 	mvn.w	r2, #2
 800b2ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3b20      	subs	r3, #32
 800b2b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	0800b2c9 	.word	0x0800b2c9

0800b2c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2d2:	4b12      	ldr	r3, [pc, #72]	; (800b31c <prvTaskExitError+0x54>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2da:	d00a      	beq.n	800b2f2 <prvTaskExitError+0x2a>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	60fb      	str	r3, [r7, #12]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <prvTaskExitError+0x28>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b306:	bf00      	nop
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0fc      	beq.n	800b308 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b30e:	bf00      	nop
 800b310:	bf00      	nop
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	2000003c 	.word	0x2000003c

0800b320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <pxCurrentTCBConst2>)
 800b322:	6819      	ldr	r1, [r3, #0]
 800b324:	6808      	ldr	r0, [r1, #0]
 800b326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	f380 8809 	msr	PSP, r0
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f04f 0000 	mov.w	r0, #0
 800b336:	f380 8811 	msr	BASEPRI, r0
 800b33a:	4770      	bx	lr
 800b33c:	f3af 8000 	nop.w

0800b340 <pxCurrentTCBConst2>:
 800b340:	20000fcc 	.word	0x20000fcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b344:	bf00      	nop
 800b346:	bf00      	nop

0800b348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b348:	4808      	ldr	r0, [pc, #32]	; (800b36c <prvPortStartFirstTask+0x24>)
 800b34a:	6800      	ldr	r0, [r0, #0]
 800b34c:	6800      	ldr	r0, [r0, #0]
 800b34e:	f380 8808 	msr	MSP, r0
 800b352:	f04f 0000 	mov.w	r0, #0
 800b356:	f380 8814 	msr	CONTROL, r0
 800b35a:	b662      	cpsie	i
 800b35c:	b661      	cpsie	f
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	df00      	svc	0
 800b368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b36a:	bf00      	nop
 800b36c:	e000ed08 	.word	0xe000ed08

0800b370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b376:	4b46      	ldr	r3, [pc, #280]	; (800b490 <xPortStartScheduler+0x120>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a46      	ldr	r2, [pc, #280]	; (800b494 <xPortStartScheduler+0x124>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d10a      	bne.n	800b396 <xPortStartScheduler+0x26>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	613b      	str	r3, [r7, #16]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b396:	4b3e      	ldr	r3, [pc, #248]	; (800b490 <xPortStartScheduler+0x120>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a3f      	ldr	r2, [pc, #252]	; (800b498 <xPortStartScheduler+0x128>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d10a      	bne.n	800b3b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	60fb      	str	r3, [r7, #12]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3b6:	4b39      	ldr	r3, [pc, #228]	; (800b49c <xPortStartScheduler+0x12c>)
 800b3b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	22ff      	movs	r2, #255	; 0xff
 800b3c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b3d0:	78fb      	ldrb	r3, [r7, #3]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	4b31      	ldr	r3, [pc, #196]	; (800b4a0 <xPortStartScheduler+0x130>)
 800b3dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b3de:	4b31      	ldr	r3, [pc, #196]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3e4:	e009      	b.n	800b3fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b3e6:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	4a2d      	ldr	r2, [pc, #180]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b3ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3f0:	78fb      	ldrb	r3, [r7, #3]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b402:	2b80      	cmp	r3, #128	; 0x80
 800b404:	d0ef      	beq.n	800b3e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b406:	4b27      	ldr	r3, [pc, #156]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f1c3 0307 	rsb	r3, r3, #7
 800b40e:	2b04      	cmp	r3, #4
 800b410:	d00a      	beq.n	800b428 <xPortStartScheduler+0xb8>
	__asm volatile
 800b412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b416:	f383 8811 	msr	BASEPRI, r3
 800b41a:	f3bf 8f6f 	isb	sy
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	60bb      	str	r3, [r7, #8]
}
 800b424:	bf00      	nop
 800b426:	e7fe      	b.n	800b426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b43a:	4a1a      	ldr	r2, [pc, #104]	; (800b4a4 <xPortStartScheduler+0x134>)
 800b43c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a17      	ldr	r2, [pc, #92]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b44c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b452:	4b15      	ldr	r3, [pc, #84]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a14      	ldr	r2, [pc, #80]	; (800b4a8 <xPortStartScheduler+0x138>)
 800b458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b45c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b45e:	f000 f8dd 	bl	800b61c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b462:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <xPortStartScheduler+0x13c>)
 800b464:	2200      	movs	r2, #0
 800b466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b468:	f000 f8fc 	bl	800b664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b46c:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <xPortStartScheduler+0x140>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <xPortStartScheduler+0x140>)
 800b472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b478:	f7ff ff66 	bl	800b348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b47c:	f7ff f856 	bl	800a52c <vTaskSwitchContext>
	prvTaskExitError();
 800b480:	f7ff ff22 	bl	800b2c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	e000ed00 	.word	0xe000ed00
 800b494:	410fc271 	.word	0x410fc271
 800b498:	410fc270 	.word	0x410fc270
 800b49c:	e000e400 	.word	0xe000e400
 800b4a0:	200015f8 	.word	0x200015f8
 800b4a4:	200015fc 	.word	0x200015fc
 800b4a8:	e000ed20 	.word	0xe000ed20
 800b4ac:	2000003c 	.word	0x2000003c
 800b4b0:	e000ef34 	.word	0xe000ef34

0800b4b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	607b      	str	r3, [r7, #4]
}
 800b4cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	; (800b50c <vPortEnterCritical+0x58>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <vPortEnterCritical+0x58>)
 800b4d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b4d8:	4b0c      	ldr	r3, [pc, #48]	; (800b50c <vPortEnterCritical+0x58>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d10f      	bne.n	800b500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	; (800b510 <vPortEnterCritical+0x5c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <vPortEnterCritical+0x4c>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	603b      	str	r3, [r7, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <vPortEnterCritical+0x4a>
	}
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	2000003c 	.word	0x2000003c
 800b510:	e000ed04 	.word	0xe000ed04

0800b514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b51a:	4b12      	ldr	r3, [pc, #72]	; (800b564 <vPortExitCritical+0x50>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <vPortExitCritical+0x24>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	607b      	str	r3, [r7, #4]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <vPortExitCritical+0x50>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <vPortExitCritical+0x50>)
 800b540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b542:	4b08      	ldr	r3, [pc, #32]	; (800b564 <vPortExitCritical+0x50>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d105      	bne.n	800b556 <vPortExitCritical+0x42>
 800b54a:	2300      	movs	r3, #0
 800b54c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	f383 8811 	msr	BASEPRI, r3
}
 800b554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b556:	bf00      	nop
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	2000003c 	.word	0x2000003c
	...

0800b570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b570:	f3ef 8009 	mrs	r0, PSP
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	4b15      	ldr	r3, [pc, #84]	; (800b5d0 <pxCurrentTCBConst>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	f01e 0f10 	tst.w	lr, #16
 800b580:	bf08      	it	eq
 800b582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58a:	6010      	str	r0, [r2, #0]
 800b58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b594:	f380 8811 	msr	BASEPRI, r0
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f7fe ffc4 	bl	800a52c <vTaskSwitchContext>
 800b5a4:	f04f 0000 	mov.w	r0, #0
 800b5a8:	f380 8811 	msr	BASEPRI, r0
 800b5ac:	bc09      	pop	{r0, r3}
 800b5ae:	6819      	ldr	r1, [r3, #0]
 800b5b0:	6808      	ldr	r0, [r1, #0]
 800b5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b6:	f01e 0f10 	tst.w	lr, #16
 800b5ba:	bf08      	it	eq
 800b5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5c0:	f380 8809 	msr	PSP, r0
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst>:
 800b5d0:	20000fcc 	.word	0x20000fcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	607b      	str	r3, [r7, #4]
}
 800b5f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b5f2:	f7fe fee1 	bl	800a3b8 <xTaskIncrementTick>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5fc:	4b06      	ldr	r3, [pc, #24]	; (800b618 <xPortSysTickHandler+0x40>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	2300      	movs	r3, #0
 800b606:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	f383 8811 	msr	BASEPRI, r3
}
 800b60e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b610:	bf00      	nop
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	e000ed04 	.word	0xe000ed04

0800b61c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b620:	4b0b      	ldr	r3, [pc, #44]	; (800b650 <vPortSetupTimerInterrupt+0x34>)
 800b622:	2200      	movs	r2, #0
 800b624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <vPortSetupTimerInterrupt+0x38>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <vPortSetupTimerInterrupt+0x3c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a0a      	ldr	r2, [pc, #40]	; (800b65c <vPortSetupTimerInterrupt+0x40>)
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	099b      	lsrs	r3, r3, #6
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <vPortSetupTimerInterrupt+0x44>)
 800b63a:	3b01      	subs	r3, #1
 800b63c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b63e:	4b04      	ldr	r3, [pc, #16]	; (800b650 <vPortSetupTimerInterrupt+0x34>)
 800b640:	2207      	movs	r2, #7
 800b642:	601a      	str	r2, [r3, #0]
}
 800b644:	bf00      	nop
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	e000e010 	.word	0xe000e010
 800b654:	e000e018 	.word	0xe000e018
 800b658:	20000030 	.word	0x20000030
 800b65c:	10624dd3 	.word	0x10624dd3
 800b660:	e000e014 	.word	0xe000e014

0800b664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b674 <vPortEnableVFP+0x10>
 800b668:	6801      	ldr	r1, [r0, #0]
 800b66a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b66e:	6001      	str	r1, [r0, #0]
 800b670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b672:	bf00      	nop
 800b674:	e000ed88 	.word	0xe000ed88

0800b678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b67e:	f3ef 8305 	mrs	r3, IPSR
 800b682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b0f      	cmp	r3, #15
 800b688:	d914      	bls.n	800b6b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b68a:	4a17      	ldr	r2, [pc, #92]	; (800b6e8 <vPortValidateInterruptPriority+0x70>)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b694:	4b15      	ldr	r3, [pc, #84]	; (800b6ec <vPortValidateInterruptPriority+0x74>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	7afa      	ldrb	r2, [r7, #11]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d20a      	bcs.n	800b6b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	607b      	str	r3, [r7, #4]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6b4:	4b0e      	ldr	r3, [pc, #56]	; (800b6f0 <vPortValidateInterruptPriority+0x78>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6bc:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <vPortValidateInterruptPriority+0x7c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d90a      	bls.n	800b6da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	603b      	str	r3, [r7, #0]
}
 800b6d6:	bf00      	nop
 800b6d8:	e7fe      	b.n	800b6d8 <vPortValidateInterruptPriority+0x60>
	}
 800b6da:	bf00      	nop
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	e000e3f0 	.word	0xe000e3f0
 800b6ec:	200015f8 	.word	0x200015f8
 800b6f0:	e000ed0c 	.word	0xe000ed0c
 800b6f4:	200015fc 	.word	0x200015fc

0800b6f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b704:	f7fe fd9c 	bl	800a240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b708:	4b5b      	ldr	r3, [pc, #364]	; (800b878 <pvPortMalloc+0x180>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b710:	f000 f920 	bl	800b954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b714:	4b59      	ldr	r3, [pc, #356]	; (800b87c <pvPortMalloc+0x184>)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f040 8093 	bne.w	800b848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d01d      	beq.n	800b764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b728:	2208      	movs	r2, #8
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d014      	beq.n	800b764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	3308      	adds	r3, #8
 800b742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00a      	beq.n	800b764 <pvPortMalloc+0x6c>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	617b      	str	r3, [r7, #20]
}
 800b760:	bf00      	nop
 800b762:	e7fe      	b.n	800b762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d06e      	beq.n	800b848 <pvPortMalloc+0x150>
 800b76a:	4b45      	ldr	r3, [pc, #276]	; (800b880 <pvPortMalloc+0x188>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	429a      	cmp	r2, r3
 800b772:	d869      	bhi.n	800b848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b774:	4b43      	ldr	r3, [pc, #268]	; (800b884 <pvPortMalloc+0x18c>)
 800b776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b778:	4b42      	ldr	r3, [pc, #264]	; (800b884 <pvPortMalloc+0x18c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b77e:	e004      	b.n	800b78a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	429a      	cmp	r2, r3
 800b792:	d903      	bls.n	800b79c <pvPortMalloc+0xa4>
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f1      	bne.n	800b780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b79c:	4b36      	ldr	r3, [pc, #216]	; (800b878 <pvPortMalloc+0x180>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d050      	beq.n	800b848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2208      	movs	r2, #8
 800b7ac:	4413      	add	r3, r2
 800b7ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	1ad2      	subs	r2, r2, r3
 800b7c0:	2308      	movs	r3, #8
 800b7c2:	005b      	lsls	r3, r3, #1
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d91f      	bls.n	800b808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	613b      	str	r3, [r7, #16]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b802:	69b8      	ldr	r0, [r7, #24]
 800b804:	f000 f908 	bl	800ba18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b808:	4b1d      	ldr	r3, [pc, #116]	; (800b880 <pvPortMalloc+0x188>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	4a1b      	ldr	r2, [pc, #108]	; (800b880 <pvPortMalloc+0x188>)
 800b814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b816:	4b1a      	ldr	r3, [pc, #104]	; (800b880 <pvPortMalloc+0x188>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <pvPortMalloc+0x190>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d203      	bcs.n	800b82a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b822:	4b17      	ldr	r3, [pc, #92]	; (800b880 <pvPortMalloc+0x188>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a18      	ldr	r2, [pc, #96]	; (800b888 <pvPortMalloc+0x190>)
 800b828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <pvPortMalloc+0x184>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	431a      	orrs	r2, r3
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b83e:	4b13      	ldr	r3, [pc, #76]	; (800b88c <pvPortMalloc+0x194>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	4a11      	ldr	r2, [pc, #68]	; (800b88c <pvPortMalloc+0x194>)
 800b846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b848:	f7fe fd08 	bl	800a25c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	f003 0307 	and.w	r3, r3, #7
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <pvPortMalloc+0x174>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60fb      	str	r3, [r7, #12]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <pvPortMalloc+0x172>
	return pvReturn;
 800b86c:	69fb      	ldr	r3, [r7, #28]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3728      	adds	r7, #40	; 0x28
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20005208 	.word	0x20005208
 800b87c:	2000521c 	.word	0x2000521c
 800b880:	2000520c 	.word	0x2000520c
 800b884:	20005200 	.word	0x20005200
 800b888:	20005210 	.word	0x20005210
 800b88c:	20005214 	.word	0x20005214

0800b890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b086      	sub	sp, #24
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d04d      	beq.n	800b93e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8a2:	2308      	movs	r3, #8
 800b8a4:	425b      	negs	r3, r3
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	4b24      	ldr	r3, [pc, #144]	; (800b948 <vPortFree+0xb8>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <vPortFree+0x44>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60fb      	str	r3, [r7, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00a      	beq.n	800b8f2 <vPortFree+0x62>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60bb      	str	r3, [r7, #8]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <vPortFree+0xb8>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d01e      	beq.n	800b93e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d11a      	bne.n	800b93e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	685a      	ldr	r2, [r3, #4]
 800b90c:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <vPortFree+0xb8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	43db      	mvns	r3, r3
 800b912:	401a      	ands	r2, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b918:	f7fe fc92 	bl	800a240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <vPortFree+0xbc>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4413      	add	r3, r2
 800b926:	4a09      	ldr	r2, [pc, #36]	; (800b94c <vPortFree+0xbc>)
 800b928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b92a:	6938      	ldr	r0, [r7, #16]
 800b92c:	f000 f874 	bl	800ba18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <vPortFree+0xc0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3301      	adds	r3, #1
 800b936:	4a06      	ldr	r2, [pc, #24]	; (800b950 <vPortFree+0xc0>)
 800b938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b93a:	f7fe fc8f 	bl	800a25c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b93e:	bf00      	nop
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	2000521c 	.word	0x2000521c
 800b94c:	2000520c 	.word	0x2000520c
 800b950:	20005218 	.word	0x20005218

0800b954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b95a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b95e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b960:	4b27      	ldr	r3, [pc, #156]	; (800ba00 <prvHeapInit+0xac>)
 800b962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00c      	beq.n	800b988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3307      	adds	r3, #7
 800b972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0307 	bic.w	r3, r3, #7
 800b97a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	4a1f      	ldr	r2, [pc, #124]	; (800ba00 <prvHeapInit+0xac>)
 800b984:	4413      	add	r3, r2
 800b986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b98c:	4a1d      	ldr	r2, [pc, #116]	; (800ba04 <prvHeapInit+0xb0>)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <prvHeapInit+0xb0>)
 800b994:	2200      	movs	r2, #0
 800b996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	4413      	add	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f023 0307 	bic.w	r3, r3, #7
 800b9ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a15      	ldr	r2, [pc, #84]	; (800ba08 <prvHeapInit+0xb4>)
 800b9b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <prvHeapInit+0xb4>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <prvHeapInit+0xb4>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9d4:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <prvHeapInit+0xb4>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	4a0a      	ldr	r2, [pc, #40]	; (800ba0c <prvHeapInit+0xb8>)
 800b9e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	4a09      	ldr	r2, [pc, #36]	; (800ba10 <prvHeapInit+0xbc>)
 800b9ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9ec:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <prvHeapInit+0xc0>)
 800b9ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9f2:	601a      	str	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	20001600 	.word	0x20001600
 800ba04:	20005200 	.word	0x20005200
 800ba08:	20005208 	.word	0x20005208
 800ba0c:	20005210 	.word	0x20005210
 800ba10:	2000520c 	.word	0x2000520c
 800ba14:	2000521c 	.word	0x2000521c

0800ba18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba20:	4b28      	ldr	r3, [pc, #160]	; (800bac4 <prvInsertBlockIntoFreeList+0xac>)
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	e002      	b.n	800ba2c <prvInsertBlockIntoFreeList+0x14>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d8f7      	bhi.n	800ba26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	68ba      	ldr	r2, [r7, #8]
 800ba40:	4413      	add	r3, r2
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d108      	bne.n	800ba5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	441a      	add	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	441a      	add	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d118      	bne.n	800baa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	4b15      	ldr	r3, [pc, #84]	; (800bac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d00d      	beq.n	800ba96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	441a      	add	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	e008      	b.n	800baa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba96:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <prvInsertBlockIntoFreeList+0xb0>)
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	e003      	b.n	800baa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	429a      	cmp	r2, r3
 800baae:	d002      	beq.n	800bab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bab6:	bf00      	nop
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	20005200 	.word	0x20005200
 800bac8:	20005208 	.word	0x20005208

0800bacc <__errno>:
 800bacc:	4b01      	ldr	r3, [pc, #4]	; (800bad4 <__errno+0x8>)
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000040 	.word	0x20000040

0800bad8 <__libc_init_array>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	4d0d      	ldr	r5, [pc, #52]	; (800bb10 <__libc_init_array+0x38>)
 800badc:	4c0d      	ldr	r4, [pc, #52]	; (800bb14 <__libc_init_array+0x3c>)
 800bade:	1b64      	subs	r4, r4, r5
 800bae0:	10a4      	asrs	r4, r4, #2
 800bae2:	2600      	movs	r6, #0
 800bae4:	42a6      	cmp	r6, r4
 800bae6:	d109      	bne.n	800bafc <__libc_init_array+0x24>
 800bae8:	4d0b      	ldr	r5, [pc, #44]	; (800bb18 <__libc_init_array+0x40>)
 800baea:	4c0c      	ldr	r4, [pc, #48]	; (800bb1c <__libc_init_array+0x44>)
 800baec:	f000 fc96 	bl	800c41c <_init>
 800baf0:	1b64      	subs	r4, r4, r5
 800baf2:	10a4      	asrs	r4, r4, #2
 800baf4:	2600      	movs	r6, #0
 800baf6:	42a6      	cmp	r6, r4
 800baf8:	d105      	bne.n	800bb06 <__libc_init_array+0x2e>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb00:	4798      	blx	r3
 800bb02:	3601      	adds	r6, #1
 800bb04:	e7ee      	b.n	800bae4 <__libc_init_array+0xc>
 800bb06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb0a:	4798      	blx	r3
 800bb0c:	3601      	adds	r6, #1
 800bb0e:	e7f2      	b.n	800baf6 <__libc_init_array+0x1e>
 800bb10:	0800d0c4 	.word	0x0800d0c4
 800bb14:	0800d0c4 	.word	0x0800d0c4
 800bb18:	0800d0c4 	.word	0x0800d0c4
 800bb1c:	0800d0c8 	.word	0x0800d0c8

0800bb20 <memcpy>:
 800bb20:	440a      	add	r2, r1
 800bb22:	4291      	cmp	r1, r2
 800bb24:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb28:	d100      	bne.n	800bb2c <memcpy+0xc>
 800bb2a:	4770      	bx	lr
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb36:	4291      	cmp	r1, r2
 800bb38:	d1f9      	bne.n	800bb2e <memcpy+0xe>
 800bb3a:	bd10      	pop	{r4, pc}

0800bb3c <memset>:
 800bb3c:	4402      	add	r2, r0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d100      	bne.n	800bb46 <memset+0xa>
 800bb44:	4770      	bx	lr
 800bb46:	f803 1b01 	strb.w	r1, [r3], #1
 800bb4a:	e7f9      	b.n	800bb40 <memset+0x4>

0800bb4c <siprintf>:
 800bb4c:	b40e      	push	{r1, r2, r3}
 800bb4e:	b500      	push	{lr}
 800bb50:	b09c      	sub	sp, #112	; 0x70
 800bb52:	ab1d      	add	r3, sp, #116	; 0x74
 800bb54:	9002      	str	r0, [sp, #8]
 800bb56:	9006      	str	r0, [sp, #24]
 800bb58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb5c:	4809      	ldr	r0, [pc, #36]	; (800bb84 <siprintf+0x38>)
 800bb5e:	9107      	str	r1, [sp, #28]
 800bb60:	9104      	str	r1, [sp, #16]
 800bb62:	4909      	ldr	r1, [pc, #36]	; (800bb88 <siprintf+0x3c>)
 800bb64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb68:	9105      	str	r1, [sp, #20]
 800bb6a:	6800      	ldr	r0, [r0, #0]
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	a902      	add	r1, sp, #8
 800bb70:	f000 f870 	bl	800bc54 <_svfiprintf_r>
 800bb74:	9b02      	ldr	r3, [sp, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	b01c      	add	sp, #112	; 0x70
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	20000040 	.word	0x20000040
 800bb88:	ffff0208 	.word	0xffff0208

0800bb8c <strcpy>:
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb92:	f803 2b01 	strb.w	r2, [r3], #1
 800bb96:	2a00      	cmp	r2, #0
 800bb98:	d1f9      	bne.n	800bb8e <strcpy+0x2>
 800bb9a:	4770      	bx	lr

0800bb9c <__ssputs_r>:
 800bb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	688e      	ldr	r6, [r1, #8]
 800bba2:	429e      	cmp	r6, r3
 800bba4:	4682      	mov	sl, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	4690      	mov	r8, r2
 800bbaa:	461f      	mov	r7, r3
 800bbac:	d838      	bhi.n	800bc20 <__ssputs_r+0x84>
 800bbae:	898a      	ldrh	r2, [r1, #12]
 800bbb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbb4:	d032      	beq.n	800bc1c <__ssputs_r+0x80>
 800bbb6:	6825      	ldr	r5, [r4, #0]
 800bbb8:	6909      	ldr	r1, [r1, #16]
 800bbba:	eba5 0901 	sub.w	r9, r5, r1
 800bbbe:	6965      	ldr	r5, [r4, #20]
 800bbc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbc8:	3301      	adds	r3, #1
 800bbca:	444b      	add	r3, r9
 800bbcc:	106d      	asrs	r5, r5, #1
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	bf38      	it	cc
 800bbd2:	461d      	movcc	r5, r3
 800bbd4:	0553      	lsls	r3, r2, #21
 800bbd6:	d531      	bpl.n	800bc3c <__ssputs_r+0xa0>
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f000 fb55 	bl	800c288 <_malloc_r>
 800bbde:	4606      	mov	r6, r0
 800bbe0:	b950      	cbnz	r0, 800bbf8 <__ssputs_r+0x5c>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	f8ca 3000 	str.w	r3, [sl]
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf8:	6921      	ldr	r1, [r4, #16]
 800bbfa:	464a      	mov	r2, r9
 800bbfc:	f7ff ff90 	bl	800bb20 <memcpy>
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	6126      	str	r6, [r4, #16]
 800bc0e:	6165      	str	r5, [r4, #20]
 800bc10:	444e      	add	r6, r9
 800bc12:	eba5 0509 	sub.w	r5, r5, r9
 800bc16:	6026      	str	r6, [r4, #0]
 800bc18:	60a5      	str	r5, [r4, #8]
 800bc1a:	463e      	mov	r6, r7
 800bc1c:	42be      	cmp	r6, r7
 800bc1e:	d900      	bls.n	800bc22 <__ssputs_r+0x86>
 800bc20:	463e      	mov	r6, r7
 800bc22:	6820      	ldr	r0, [r4, #0]
 800bc24:	4632      	mov	r2, r6
 800bc26:	4641      	mov	r1, r8
 800bc28:	f000 faa8 	bl	800c17c <memmove>
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	1b9b      	subs	r3, r3, r6
 800bc30:	60a3      	str	r3, [r4, #8]
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	4433      	add	r3, r6
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e7db      	b.n	800bbf4 <__ssputs_r+0x58>
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	f000 fb97 	bl	800c370 <_realloc_r>
 800bc42:	4606      	mov	r6, r0
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1e1      	bne.n	800bc0c <__ssputs_r+0x70>
 800bc48:	6921      	ldr	r1, [r4, #16]
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f000 fab0 	bl	800c1b0 <_free_r>
 800bc50:	e7c7      	b.n	800bbe2 <__ssputs_r+0x46>
	...

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d50e      	bpl.n	800bc86 <_svfiprintf_r+0x32>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b963      	cbnz	r3, 800bc86 <_svfiprintf_r+0x32>
 800bc6c:	2140      	movs	r1, #64	; 0x40
 800bc6e:	f000 fb0b 	bl	800c288 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b920      	cbnz	r0, 800bc82 <_svfiprintf_r+0x2e>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e0d1      	b.n	800be26 <_svfiprintf_r+0x1d2>
 800bc82:	2340      	movs	r3, #64	; 0x40
 800bc84:	616b      	str	r3, [r5, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be40 <_svfiprintf_r+0x1ec>
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9e:	f04f 0901 	mov.w	r9, #1
 800bca2:	4623      	mov	r3, r4
 800bca4:	469a      	mov	sl, r3
 800bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcaa:	b10a      	cbz	r2, 800bcb0 <_svfiprintf_r+0x5c>
 800bcac:	2a25      	cmp	r2, #37	; 0x25
 800bcae:	d1f9      	bne.n	800bca4 <_svfiprintf_r+0x50>
 800bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb4:	d00b      	beq.n	800bcce <_svfiprintf_r+0x7a>
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ff6d 	bl	800bb9c <__ssputs_r>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f000 80aa 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcca:	445a      	add	r2, fp
 800bccc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcce:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a2 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295
 800bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce2:	f10a 0a01 	add.w	sl, sl, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	9307      	str	r3, [sp, #28]
 800bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcee:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	4851      	ldr	r0, [pc, #324]	; (800be40 <_svfiprintf_r+0x1ec>)
 800bcfa:	f7f4 fa71 	bl	80001e0 <memchr>
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	b9d8      	cbnz	r0, 800bd3a <_svfiprintf_r+0xe6>
 800bd02:	06d0      	lsls	r0, r2, #27
 800bd04:	bf44      	itt	mi
 800bd06:	2320      	movmi	r3, #32
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	0711      	lsls	r1, r2, #28
 800bd0e:	bf44      	itt	mi
 800bd10:	232b      	movmi	r3, #43	; 0x2b
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1c:	d015      	beq.n	800bd4a <_svfiprintf_r+0xf6>
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d94e      	bls.n	800bdd2 <_svfiprintf_r+0x17e>
 800bd34:	b1b0      	cbz	r0, 800bd64 <_svfiprintf_r+0x110>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e014      	b.n	800bd64 <_svfiprintf_r+0x110>
 800bd3a:	eba0 0308 	sub.w	r3, r0, r8
 800bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	46a2      	mov	sl, r4
 800bd48:	e7d2      	b.n	800bcf0 <_svfiprintf_r+0x9c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9103      	str	r1, [sp, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5c:	9307      	strge	r3, [sp, #28]
 800bd5e:	9307      	strlt	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	9204      	strlt	r2, [sp, #16]
 800bd64:	7823      	ldrb	r3, [r4, #0]
 800bd66:	2b2e      	cmp	r3, #46	; 0x2e
 800bd68:	d10c      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6a:	7863      	ldrb	r3, [r4, #1]
 800bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6e:	d135      	bne.n	800bddc <_svfiprintf_r+0x188>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9203      	str	r2, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb8      	it	lt
 800bd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be50 <_svfiprintf_r+0x1fc>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa27 	bl	80001e0 <memchr>
 800bd92:	b140      	cbz	r0, 800bda6 <_svfiprintf_r+0x152>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	4303      	orrs	r3, r0
 800bda2:	3401      	adds	r4, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdaa:	4826      	ldr	r0, [pc, #152]	; (800be44 <_svfiprintf_r+0x1f0>)
 800bdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb0:	2206      	movs	r2, #6
 800bdb2:	f7f4 fa15 	bl	80001e0 <memchr>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d038      	beq.n	800be2c <_svfiprintf_r+0x1d8>
 800bdba:	4b23      	ldr	r3, [pc, #140]	; (800be48 <_svfiprintf_r+0x1f4>)
 800bdbc:	bb1b      	cbnz	r3, 800be06 <_svfiprintf_r+0x1b2>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	f023 0307 	bic.w	r3, r3, #7
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdcc:	4433      	add	r3, r6
 800bdce:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd0:	e767      	b.n	800bca2 <_svfiprintf_r+0x4e>
 800bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	2001      	movs	r0, #1
 800bdda:	e7a5      	b.n	800bd28 <_svfiprintf_r+0xd4>
 800bddc:	2300      	movs	r3, #0
 800bdde:	3401      	adds	r4, #1
 800bde0:	9305      	str	r3, [sp, #20]
 800bde2:	4619      	mov	r1, r3
 800bde4:	f04f 0c0a 	mov.w	ip, #10
 800bde8:	4620      	mov	r0, r4
 800bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdee:	3a30      	subs	r2, #48	; 0x30
 800bdf0:	2a09      	cmp	r2, #9
 800bdf2:	d903      	bls.n	800bdfc <_svfiprintf_r+0x1a8>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0c5      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	e7c3      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800be00:	4604      	mov	r4, r0
 800be02:	2301      	movs	r3, #1
 800be04:	e7f0      	b.n	800bde8 <_svfiprintf_r+0x194>
 800be06:	ab03      	add	r3, sp, #12
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	462a      	mov	r2, r5
 800be0c:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be0e:	a904      	add	r1, sp, #16
 800be10:	4638      	mov	r0, r7
 800be12:	f3af 8000 	nop.w
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	4606      	mov	r6, r0
 800be1a:	d1d6      	bne.n	800bdca <_svfiprintf_r+0x176>
 800be1c:	89ab      	ldrh	r3, [r5, #12]
 800be1e:	065b      	lsls	r3, r3, #25
 800be20:	f53f af2c 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be26:	b01d      	add	sp, #116	; 0x74
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b06      	ldr	r3, [pc, #24]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4638      	mov	r0, r7
 800be38:	f000 f87a 	bl	800bf30 <_printf_i>
 800be3c:	e7eb      	b.n	800be16 <_svfiprintf_r+0x1c2>
 800be3e:	bf00      	nop
 800be40:	0800d088 	.word	0x0800d088
 800be44:	0800d092 	.word	0x0800d092
 800be48:	00000000 	.word	0x00000000
 800be4c:	0800bb9d 	.word	0x0800bb9d
 800be50:	0800d08e 	.word	0x0800d08e

0800be54 <_printf_common>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	4616      	mov	r6, r2
 800be5a:	4699      	mov	r9, r3
 800be5c:	688a      	ldr	r2, [r1, #8]
 800be5e:	690b      	ldr	r3, [r1, #16]
 800be60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be64:	4293      	cmp	r3, r2
 800be66:	bfb8      	it	lt
 800be68:	4613      	movlt	r3, r2
 800be6a:	6033      	str	r3, [r6, #0]
 800be6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be70:	4607      	mov	r7, r0
 800be72:	460c      	mov	r4, r1
 800be74:	b10a      	cbz	r2, 800be7a <_printf_common+0x26>
 800be76:	3301      	adds	r3, #1
 800be78:	6033      	str	r3, [r6, #0]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	0699      	lsls	r1, r3, #26
 800be7e:	bf42      	ittt	mi
 800be80:	6833      	ldrmi	r3, [r6, #0]
 800be82:	3302      	addmi	r3, #2
 800be84:	6033      	strmi	r3, [r6, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	f015 0506 	ands.w	r5, r5, #6
 800be8c:	d106      	bne.n	800be9c <_printf_common+0x48>
 800be8e:	f104 0a19 	add.w	sl, r4, #25
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	6832      	ldr	r2, [r6, #0]
 800be96:	1a9b      	subs	r3, r3, r2
 800be98:	42ab      	cmp	r3, r5
 800be9a:	dc26      	bgt.n	800beea <_printf_common+0x96>
 800be9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bea0:	1e13      	subs	r3, r2, #0
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	bf18      	it	ne
 800bea6:	2301      	movne	r3, #1
 800bea8:	0692      	lsls	r2, r2, #26
 800beaa:	d42b      	bmi.n	800bf04 <_printf_common+0xb0>
 800beac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb0:	4649      	mov	r1, r9
 800beb2:	4638      	mov	r0, r7
 800beb4:	47c0      	blx	r8
 800beb6:	3001      	adds	r0, #1
 800beb8:	d01e      	beq.n	800bef8 <_printf_common+0xa4>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	68e5      	ldr	r5, [r4, #12]
 800bebe:	6832      	ldr	r2, [r6, #0]
 800bec0:	f003 0306 	and.w	r3, r3, #6
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	bf08      	it	eq
 800bec8:	1aad      	subeq	r5, r5, r2
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	6922      	ldr	r2, [r4, #16]
 800bece:	bf0c      	ite	eq
 800bed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bed4:	2500      	movne	r5, #0
 800bed6:	4293      	cmp	r3, r2
 800bed8:	bfc4      	itt	gt
 800beda:	1a9b      	subgt	r3, r3, r2
 800bedc:	18ed      	addgt	r5, r5, r3
 800bede:	2600      	movs	r6, #0
 800bee0:	341a      	adds	r4, #26
 800bee2:	42b5      	cmp	r5, r6
 800bee4:	d11a      	bne.n	800bf1c <_printf_common+0xc8>
 800bee6:	2000      	movs	r0, #0
 800bee8:	e008      	b.n	800befc <_printf_common+0xa8>
 800beea:	2301      	movs	r3, #1
 800beec:	4652      	mov	r2, sl
 800beee:	4649      	mov	r1, r9
 800bef0:	4638      	mov	r0, r7
 800bef2:	47c0      	blx	r8
 800bef4:	3001      	adds	r0, #1
 800bef6:	d103      	bne.n	800bf00 <_printf_common+0xac>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf00:	3501      	adds	r5, #1
 800bf02:	e7c6      	b.n	800be92 <_printf_common+0x3e>
 800bf04:	18e1      	adds	r1, r4, r3
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	2030      	movs	r0, #48	; 0x30
 800bf0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf0e:	4422      	add	r2, r4
 800bf10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf18:	3302      	adds	r3, #2
 800bf1a:	e7c7      	b.n	800beac <_printf_common+0x58>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4622      	mov	r2, r4
 800bf20:	4649      	mov	r1, r9
 800bf22:	4638      	mov	r0, r7
 800bf24:	47c0      	blx	r8
 800bf26:	3001      	adds	r0, #1
 800bf28:	d0e6      	beq.n	800bef8 <_printf_common+0xa4>
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	e7d9      	b.n	800bee2 <_printf_common+0x8e>
	...

0800bf30 <_printf_i>:
 800bf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf34:	7e0f      	ldrb	r7, [r1, #24]
 800bf36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf38:	2f78      	cmp	r7, #120	; 0x78
 800bf3a:	4691      	mov	r9, r2
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	469a      	mov	sl, r3
 800bf42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf46:	d807      	bhi.n	800bf58 <_printf_i+0x28>
 800bf48:	2f62      	cmp	r7, #98	; 0x62
 800bf4a:	d80a      	bhi.n	800bf62 <_printf_i+0x32>
 800bf4c:	2f00      	cmp	r7, #0
 800bf4e:	f000 80d8 	beq.w	800c102 <_printf_i+0x1d2>
 800bf52:	2f58      	cmp	r7, #88	; 0x58
 800bf54:	f000 80a3 	beq.w	800c09e <_printf_i+0x16e>
 800bf58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf60:	e03a      	b.n	800bfd8 <_printf_i+0xa8>
 800bf62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf66:	2b15      	cmp	r3, #21
 800bf68:	d8f6      	bhi.n	800bf58 <_printf_i+0x28>
 800bf6a:	a101      	add	r1, pc, #4	; (adr r1, 800bf70 <_printf_i+0x40>)
 800bf6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf70:	0800bfc9 	.word	0x0800bfc9
 800bf74:	0800bfdd 	.word	0x0800bfdd
 800bf78:	0800bf59 	.word	0x0800bf59
 800bf7c:	0800bf59 	.word	0x0800bf59
 800bf80:	0800bf59 	.word	0x0800bf59
 800bf84:	0800bf59 	.word	0x0800bf59
 800bf88:	0800bfdd 	.word	0x0800bfdd
 800bf8c:	0800bf59 	.word	0x0800bf59
 800bf90:	0800bf59 	.word	0x0800bf59
 800bf94:	0800bf59 	.word	0x0800bf59
 800bf98:	0800bf59 	.word	0x0800bf59
 800bf9c:	0800c0e9 	.word	0x0800c0e9
 800bfa0:	0800c00d 	.word	0x0800c00d
 800bfa4:	0800c0cb 	.word	0x0800c0cb
 800bfa8:	0800bf59 	.word	0x0800bf59
 800bfac:	0800bf59 	.word	0x0800bf59
 800bfb0:	0800c10b 	.word	0x0800c10b
 800bfb4:	0800bf59 	.word	0x0800bf59
 800bfb8:	0800c00d 	.word	0x0800c00d
 800bfbc:	0800bf59 	.word	0x0800bf59
 800bfc0:	0800bf59 	.word	0x0800bf59
 800bfc4:	0800c0d3 	.word	0x0800c0d3
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	1d1a      	adds	r2, r3, #4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	602a      	str	r2, [r5, #0]
 800bfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e0a3      	b.n	800c124 <_printf_i+0x1f4>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	6829      	ldr	r1, [r5, #0]
 800bfe0:	0606      	lsls	r6, r0, #24
 800bfe2:	f101 0304 	add.w	r3, r1, #4
 800bfe6:	d50a      	bpl.n	800bffe <_printf_i+0xce>
 800bfe8:	680e      	ldr	r6, [r1, #0]
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	da03      	bge.n	800bff8 <_printf_i+0xc8>
 800bff0:	232d      	movs	r3, #45	; 0x2d
 800bff2:	4276      	negs	r6, r6
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff8:	485e      	ldr	r0, [pc, #376]	; (800c174 <_printf_i+0x244>)
 800bffa:	230a      	movs	r3, #10
 800bffc:	e019      	b.n	800c032 <_printf_i+0x102>
 800bffe:	680e      	ldr	r6, [r1, #0]
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c006:	bf18      	it	ne
 800c008:	b236      	sxthne	r6, r6
 800c00a:	e7ef      	b.n	800bfec <_printf_i+0xbc>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	6820      	ldr	r0, [r4, #0]
 800c010:	1d19      	adds	r1, r3, #4
 800c012:	6029      	str	r1, [r5, #0]
 800c014:	0601      	lsls	r1, r0, #24
 800c016:	d501      	bpl.n	800c01c <_printf_i+0xec>
 800c018:	681e      	ldr	r6, [r3, #0]
 800c01a:	e002      	b.n	800c022 <_printf_i+0xf2>
 800c01c:	0646      	lsls	r6, r0, #25
 800c01e:	d5fb      	bpl.n	800c018 <_printf_i+0xe8>
 800c020:	881e      	ldrh	r6, [r3, #0]
 800c022:	4854      	ldr	r0, [pc, #336]	; (800c174 <_printf_i+0x244>)
 800c024:	2f6f      	cmp	r7, #111	; 0x6f
 800c026:	bf0c      	ite	eq
 800c028:	2308      	moveq	r3, #8
 800c02a:	230a      	movne	r3, #10
 800c02c:	2100      	movs	r1, #0
 800c02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c032:	6865      	ldr	r5, [r4, #4]
 800c034:	60a5      	str	r5, [r4, #8]
 800c036:	2d00      	cmp	r5, #0
 800c038:	bfa2      	ittt	ge
 800c03a:	6821      	ldrge	r1, [r4, #0]
 800c03c:	f021 0104 	bicge.w	r1, r1, #4
 800c040:	6021      	strge	r1, [r4, #0]
 800c042:	b90e      	cbnz	r6, 800c048 <_printf_i+0x118>
 800c044:	2d00      	cmp	r5, #0
 800c046:	d04d      	beq.n	800c0e4 <_printf_i+0x1b4>
 800c048:	4615      	mov	r5, r2
 800c04a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c04e:	fb03 6711 	mls	r7, r3, r1, r6
 800c052:	5dc7      	ldrb	r7, [r0, r7]
 800c054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c058:	4637      	mov	r7, r6
 800c05a:	42bb      	cmp	r3, r7
 800c05c:	460e      	mov	r6, r1
 800c05e:	d9f4      	bls.n	800c04a <_printf_i+0x11a>
 800c060:	2b08      	cmp	r3, #8
 800c062:	d10b      	bne.n	800c07c <_printf_i+0x14c>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	07de      	lsls	r6, r3, #31
 800c068:	d508      	bpl.n	800c07c <_printf_i+0x14c>
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	6861      	ldr	r1, [r4, #4]
 800c06e:	4299      	cmp	r1, r3
 800c070:	bfde      	ittt	le
 800c072:	2330      	movle	r3, #48	; 0x30
 800c074:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c07c:	1b52      	subs	r2, r2, r5
 800c07e:	6122      	str	r2, [r4, #16]
 800c080:	f8cd a000 	str.w	sl, [sp]
 800c084:	464b      	mov	r3, r9
 800c086:	aa03      	add	r2, sp, #12
 800c088:	4621      	mov	r1, r4
 800c08a:	4640      	mov	r0, r8
 800c08c:	f7ff fee2 	bl	800be54 <_printf_common>
 800c090:	3001      	adds	r0, #1
 800c092:	d14c      	bne.n	800c12e <_printf_i+0x1fe>
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	b004      	add	sp, #16
 800c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09e:	4835      	ldr	r0, [pc, #212]	; (800c174 <_printf_i+0x244>)
 800c0a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0a4:	6829      	ldr	r1, [r5, #0]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0ac:	6029      	str	r1, [r5, #0]
 800c0ae:	061d      	lsls	r5, r3, #24
 800c0b0:	d514      	bpl.n	800c0dc <_printf_i+0x1ac>
 800c0b2:	07df      	lsls	r7, r3, #31
 800c0b4:	bf44      	itt	mi
 800c0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ba:	6023      	strmi	r3, [r4, #0]
 800c0bc:	b91e      	cbnz	r6, 800c0c6 <_printf_i+0x196>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	f023 0320 	bic.w	r3, r3, #32
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	2310      	movs	r3, #16
 800c0c8:	e7b0      	b.n	800c02c <_printf_i+0xfc>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	f043 0320 	orr.w	r3, r3, #32
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	2378      	movs	r3, #120	; 0x78
 800c0d4:	4828      	ldr	r0, [pc, #160]	; (800c178 <_printf_i+0x248>)
 800c0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0da:	e7e3      	b.n	800c0a4 <_printf_i+0x174>
 800c0dc:	0659      	lsls	r1, r3, #25
 800c0de:	bf48      	it	mi
 800c0e0:	b2b6      	uxthmi	r6, r6
 800c0e2:	e7e6      	b.n	800c0b2 <_printf_i+0x182>
 800c0e4:	4615      	mov	r5, r2
 800c0e6:	e7bb      	b.n	800c060 <_printf_i+0x130>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	6826      	ldr	r6, [r4, #0]
 800c0ec:	6961      	ldr	r1, [r4, #20]
 800c0ee:	1d18      	adds	r0, r3, #4
 800c0f0:	6028      	str	r0, [r5, #0]
 800c0f2:	0635      	lsls	r5, r6, #24
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	d501      	bpl.n	800c0fc <_printf_i+0x1cc>
 800c0f8:	6019      	str	r1, [r3, #0]
 800c0fa:	e002      	b.n	800c102 <_printf_i+0x1d2>
 800c0fc:	0670      	lsls	r0, r6, #25
 800c0fe:	d5fb      	bpl.n	800c0f8 <_printf_i+0x1c8>
 800c100:	8019      	strh	r1, [r3, #0]
 800c102:	2300      	movs	r3, #0
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	4615      	mov	r5, r2
 800c108:	e7ba      	b.n	800c080 <_printf_i+0x150>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	602a      	str	r2, [r5, #0]
 800c110:	681d      	ldr	r5, [r3, #0]
 800c112:	6862      	ldr	r2, [r4, #4]
 800c114:	2100      	movs	r1, #0
 800c116:	4628      	mov	r0, r5
 800c118:	f7f4 f862 	bl	80001e0 <memchr>
 800c11c:	b108      	cbz	r0, 800c122 <_printf_i+0x1f2>
 800c11e:	1b40      	subs	r0, r0, r5
 800c120:	6060      	str	r0, [r4, #4]
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	6123      	str	r3, [r4, #16]
 800c126:	2300      	movs	r3, #0
 800c128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c12c:	e7a8      	b.n	800c080 <_printf_i+0x150>
 800c12e:	6923      	ldr	r3, [r4, #16]
 800c130:	462a      	mov	r2, r5
 800c132:	4649      	mov	r1, r9
 800c134:	4640      	mov	r0, r8
 800c136:	47d0      	blx	sl
 800c138:	3001      	adds	r0, #1
 800c13a:	d0ab      	beq.n	800c094 <_printf_i+0x164>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	079b      	lsls	r3, r3, #30
 800c140:	d413      	bmi.n	800c16a <_printf_i+0x23a>
 800c142:	68e0      	ldr	r0, [r4, #12]
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	4298      	cmp	r0, r3
 800c148:	bfb8      	it	lt
 800c14a:	4618      	movlt	r0, r3
 800c14c:	e7a4      	b.n	800c098 <_printf_i+0x168>
 800c14e:	2301      	movs	r3, #1
 800c150:	4632      	mov	r2, r6
 800c152:	4649      	mov	r1, r9
 800c154:	4640      	mov	r0, r8
 800c156:	47d0      	blx	sl
 800c158:	3001      	adds	r0, #1
 800c15a:	d09b      	beq.n	800c094 <_printf_i+0x164>
 800c15c:	3501      	adds	r5, #1
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	9903      	ldr	r1, [sp, #12]
 800c162:	1a5b      	subs	r3, r3, r1
 800c164:	42ab      	cmp	r3, r5
 800c166:	dcf2      	bgt.n	800c14e <_printf_i+0x21e>
 800c168:	e7eb      	b.n	800c142 <_printf_i+0x212>
 800c16a:	2500      	movs	r5, #0
 800c16c:	f104 0619 	add.w	r6, r4, #25
 800c170:	e7f5      	b.n	800c15e <_printf_i+0x22e>
 800c172:	bf00      	nop
 800c174:	0800d099 	.word	0x0800d099
 800c178:	0800d0aa 	.word	0x0800d0aa

0800c17c <memmove>:
 800c17c:	4288      	cmp	r0, r1
 800c17e:	b510      	push	{r4, lr}
 800c180:	eb01 0402 	add.w	r4, r1, r2
 800c184:	d902      	bls.n	800c18c <memmove+0x10>
 800c186:	4284      	cmp	r4, r0
 800c188:	4623      	mov	r3, r4
 800c18a:	d807      	bhi.n	800c19c <memmove+0x20>
 800c18c:	1e43      	subs	r3, r0, #1
 800c18e:	42a1      	cmp	r1, r4
 800c190:	d008      	beq.n	800c1a4 <memmove+0x28>
 800c192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c19a:	e7f8      	b.n	800c18e <memmove+0x12>
 800c19c:	4402      	add	r2, r0
 800c19e:	4601      	mov	r1, r0
 800c1a0:	428a      	cmp	r2, r1
 800c1a2:	d100      	bne.n	800c1a6 <memmove+0x2a>
 800c1a4:	bd10      	pop	{r4, pc}
 800c1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c1ae:	e7f7      	b.n	800c1a0 <memmove+0x24>

0800c1b0 <_free_r>:
 800c1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	d044      	beq.n	800c240 <_free_r+0x90>
 800c1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ba:	9001      	str	r0, [sp, #4]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f1a1 0404 	sub.w	r4, r1, #4
 800c1c2:	bfb8      	it	lt
 800c1c4:	18e4      	addlt	r4, r4, r3
 800c1c6:	f000 f913 	bl	800c3f0 <__malloc_lock>
 800c1ca:	4a1e      	ldr	r2, [pc, #120]	; (800c244 <_free_r+0x94>)
 800c1cc:	9801      	ldr	r0, [sp, #4]
 800c1ce:	6813      	ldr	r3, [r2, #0]
 800c1d0:	b933      	cbnz	r3, 800c1e0 <_free_r+0x30>
 800c1d2:	6063      	str	r3, [r4, #4]
 800c1d4:	6014      	str	r4, [r2, #0]
 800c1d6:	b003      	add	sp, #12
 800c1d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1dc:	f000 b90e 	b.w	800c3fc <__malloc_unlock>
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d908      	bls.n	800c1f6 <_free_r+0x46>
 800c1e4:	6825      	ldr	r5, [r4, #0]
 800c1e6:	1961      	adds	r1, r4, r5
 800c1e8:	428b      	cmp	r3, r1
 800c1ea:	bf01      	itttt	eq
 800c1ec:	6819      	ldreq	r1, [r3, #0]
 800c1ee:	685b      	ldreq	r3, [r3, #4]
 800c1f0:	1949      	addeq	r1, r1, r5
 800c1f2:	6021      	streq	r1, [r4, #0]
 800c1f4:	e7ed      	b.n	800c1d2 <_free_r+0x22>
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	b10b      	cbz	r3, 800c200 <_free_r+0x50>
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	d9fa      	bls.n	800c1f6 <_free_r+0x46>
 800c200:	6811      	ldr	r1, [r2, #0]
 800c202:	1855      	adds	r5, r2, r1
 800c204:	42a5      	cmp	r5, r4
 800c206:	d10b      	bne.n	800c220 <_free_r+0x70>
 800c208:	6824      	ldr	r4, [r4, #0]
 800c20a:	4421      	add	r1, r4
 800c20c:	1854      	adds	r4, r2, r1
 800c20e:	42a3      	cmp	r3, r4
 800c210:	6011      	str	r1, [r2, #0]
 800c212:	d1e0      	bne.n	800c1d6 <_free_r+0x26>
 800c214:	681c      	ldr	r4, [r3, #0]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	6053      	str	r3, [r2, #4]
 800c21a:	4421      	add	r1, r4
 800c21c:	6011      	str	r1, [r2, #0]
 800c21e:	e7da      	b.n	800c1d6 <_free_r+0x26>
 800c220:	d902      	bls.n	800c228 <_free_r+0x78>
 800c222:	230c      	movs	r3, #12
 800c224:	6003      	str	r3, [r0, #0]
 800c226:	e7d6      	b.n	800c1d6 <_free_r+0x26>
 800c228:	6825      	ldr	r5, [r4, #0]
 800c22a:	1961      	adds	r1, r4, r5
 800c22c:	428b      	cmp	r3, r1
 800c22e:	bf04      	itt	eq
 800c230:	6819      	ldreq	r1, [r3, #0]
 800c232:	685b      	ldreq	r3, [r3, #4]
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	bf04      	itt	eq
 800c238:	1949      	addeq	r1, r1, r5
 800c23a:	6021      	streq	r1, [r4, #0]
 800c23c:	6054      	str	r4, [r2, #4]
 800c23e:	e7ca      	b.n	800c1d6 <_free_r+0x26>
 800c240:	b003      	add	sp, #12
 800c242:	bd30      	pop	{r4, r5, pc}
 800c244:	20005220 	.word	0x20005220

0800c248 <sbrk_aligned>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	4e0e      	ldr	r6, [pc, #56]	; (800c284 <sbrk_aligned+0x3c>)
 800c24c:	460c      	mov	r4, r1
 800c24e:	6831      	ldr	r1, [r6, #0]
 800c250:	4605      	mov	r5, r0
 800c252:	b911      	cbnz	r1, 800c25a <sbrk_aligned+0x12>
 800c254:	f000 f8bc 	bl	800c3d0 <_sbrk_r>
 800c258:	6030      	str	r0, [r6, #0]
 800c25a:	4621      	mov	r1, r4
 800c25c:	4628      	mov	r0, r5
 800c25e:	f000 f8b7 	bl	800c3d0 <_sbrk_r>
 800c262:	1c43      	adds	r3, r0, #1
 800c264:	d00a      	beq.n	800c27c <sbrk_aligned+0x34>
 800c266:	1cc4      	adds	r4, r0, #3
 800c268:	f024 0403 	bic.w	r4, r4, #3
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d007      	beq.n	800c280 <sbrk_aligned+0x38>
 800c270:	1a21      	subs	r1, r4, r0
 800c272:	4628      	mov	r0, r5
 800c274:	f000 f8ac 	bl	800c3d0 <_sbrk_r>
 800c278:	3001      	adds	r0, #1
 800c27a:	d101      	bne.n	800c280 <sbrk_aligned+0x38>
 800c27c:	f04f 34ff 	mov.w	r4, #4294967295
 800c280:	4620      	mov	r0, r4
 800c282:	bd70      	pop	{r4, r5, r6, pc}
 800c284:	20005224 	.word	0x20005224

0800c288 <_malloc_r>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	1ccd      	adds	r5, r1, #3
 800c28e:	f025 0503 	bic.w	r5, r5, #3
 800c292:	3508      	adds	r5, #8
 800c294:	2d0c      	cmp	r5, #12
 800c296:	bf38      	it	cc
 800c298:	250c      	movcc	r5, #12
 800c29a:	2d00      	cmp	r5, #0
 800c29c:	4607      	mov	r7, r0
 800c29e:	db01      	blt.n	800c2a4 <_malloc_r+0x1c>
 800c2a0:	42a9      	cmp	r1, r5
 800c2a2:	d905      	bls.n	800c2b0 <_malloc_r+0x28>
 800c2a4:	230c      	movs	r3, #12
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	2600      	movs	r6, #0
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b0:	4e2e      	ldr	r6, [pc, #184]	; (800c36c <_malloc_r+0xe4>)
 800c2b2:	f000 f89d 	bl	800c3f0 <__malloc_lock>
 800c2b6:	6833      	ldr	r3, [r6, #0]
 800c2b8:	461c      	mov	r4, r3
 800c2ba:	bb34      	cbnz	r4, 800c30a <_malloc_r+0x82>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f7ff ffc2 	bl	800c248 <sbrk_aligned>
 800c2c4:	1c43      	adds	r3, r0, #1
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	d14d      	bne.n	800c366 <_malloc_r+0xde>
 800c2ca:	6834      	ldr	r4, [r6, #0]
 800c2cc:	4626      	mov	r6, r4
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d140      	bne.n	800c354 <_malloc_r+0xcc>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	eb04 0803 	add.w	r8, r4, r3
 800c2dc:	f000 f878 	bl	800c3d0 <_sbrk_r>
 800c2e0:	4580      	cmp	r8, r0
 800c2e2:	d13a      	bne.n	800c35a <_malloc_r+0xd2>
 800c2e4:	6821      	ldr	r1, [r4, #0]
 800c2e6:	3503      	adds	r5, #3
 800c2e8:	1a6d      	subs	r5, r5, r1
 800c2ea:	f025 0503 	bic.w	r5, r5, #3
 800c2ee:	3508      	adds	r5, #8
 800c2f0:	2d0c      	cmp	r5, #12
 800c2f2:	bf38      	it	cc
 800c2f4:	250c      	movcc	r5, #12
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff ffa5 	bl	800c248 <sbrk_aligned>
 800c2fe:	3001      	adds	r0, #1
 800c300:	d02b      	beq.n	800c35a <_malloc_r+0xd2>
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	442b      	add	r3, r5
 800c306:	6023      	str	r3, [r4, #0]
 800c308:	e00e      	b.n	800c328 <_malloc_r+0xa0>
 800c30a:	6822      	ldr	r2, [r4, #0]
 800c30c:	1b52      	subs	r2, r2, r5
 800c30e:	d41e      	bmi.n	800c34e <_malloc_r+0xc6>
 800c310:	2a0b      	cmp	r2, #11
 800c312:	d916      	bls.n	800c342 <_malloc_r+0xba>
 800c314:	1961      	adds	r1, r4, r5
 800c316:	42a3      	cmp	r3, r4
 800c318:	6025      	str	r5, [r4, #0]
 800c31a:	bf18      	it	ne
 800c31c:	6059      	strne	r1, [r3, #4]
 800c31e:	6863      	ldr	r3, [r4, #4]
 800c320:	bf08      	it	eq
 800c322:	6031      	streq	r1, [r6, #0]
 800c324:	5162      	str	r2, [r4, r5]
 800c326:	604b      	str	r3, [r1, #4]
 800c328:	4638      	mov	r0, r7
 800c32a:	f104 060b 	add.w	r6, r4, #11
 800c32e:	f000 f865 	bl	800c3fc <__malloc_unlock>
 800c332:	f026 0607 	bic.w	r6, r6, #7
 800c336:	1d23      	adds	r3, r4, #4
 800c338:	1af2      	subs	r2, r6, r3
 800c33a:	d0b6      	beq.n	800c2aa <_malloc_r+0x22>
 800c33c:	1b9b      	subs	r3, r3, r6
 800c33e:	50a3      	str	r3, [r4, r2]
 800c340:	e7b3      	b.n	800c2aa <_malloc_r+0x22>
 800c342:	6862      	ldr	r2, [r4, #4]
 800c344:	42a3      	cmp	r3, r4
 800c346:	bf0c      	ite	eq
 800c348:	6032      	streq	r2, [r6, #0]
 800c34a:	605a      	strne	r2, [r3, #4]
 800c34c:	e7ec      	b.n	800c328 <_malloc_r+0xa0>
 800c34e:	4623      	mov	r3, r4
 800c350:	6864      	ldr	r4, [r4, #4]
 800c352:	e7b2      	b.n	800c2ba <_malloc_r+0x32>
 800c354:	4634      	mov	r4, r6
 800c356:	6876      	ldr	r6, [r6, #4]
 800c358:	e7b9      	b.n	800c2ce <_malloc_r+0x46>
 800c35a:	230c      	movs	r3, #12
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	4638      	mov	r0, r7
 800c360:	f000 f84c 	bl	800c3fc <__malloc_unlock>
 800c364:	e7a1      	b.n	800c2aa <_malloc_r+0x22>
 800c366:	6025      	str	r5, [r4, #0]
 800c368:	e7de      	b.n	800c328 <_malloc_r+0xa0>
 800c36a:	bf00      	nop
 800c36c:	20005220 	.word	0x20005220

0800c370 <_realloc_r>:
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	4680      	mov	r8, r0
 800c376:	4614      	mov	r4, r2
 800c378:	460e      	mov	r6, r1
 800c37a:	b921      	cbnz	r1, 800c386 <_realloc_r+0x16>
 800c37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c380:	4611      	mov	r1, r2
 800c382:	f7ff bf81 	b.w	800c288 <_malloc_r>
 800c386:	b92a      	cbnz	r2, 800c394 <_realloc_r+0x24>
 800c388:	f7ff ff12 	bl	800c1b0 <_free_r>
 800c38c:	4625      	mov	r5, r4
 800c38e:	4628      	mov	r0, r5
 800c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c394:	f000 f838 	bl	800c408 <_malloc_usable_size_r>
 800c398:	4284      	cmp	r4, r0
 800c39a:	4607      	mov	r7, r0
 800c39c:	d802      	bhi.n	800c3a4 <_realloc_r+0x34>
 800c39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3a2:	d812      	bhi.n	800c3ca <_realloc_r+0x5a>
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	f7ff ff6e 	bl	800c288 <_malloc_r>
 800c3ac:	4605      	mov	r5, r0
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d0ed      	beq.n	800c38e <_realloc_r+0x1e>
 800c3b2:	42bc      	cmp	r4, r7
 800c3b4:	4622      	mov	r2, r4
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	bf28      	it	cs
 800c3ba:	463a      	movcs	r2, r7
 800c3bc:	f7ff fbb0 	bl	800bb20 <memcpy>
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	f7ff fef4 	bl	800c1b0 <_free_r>
 800c3c8:	e7e1      	b.n	800c38e <_realloc_r+0x1e>
 800c3ca:	4635      	mov	r5, r6
 800c3cc:	e7df      	b.n	800c38e <_realloc_r+0x1e>
	...

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	; (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f7 fef2 	bl	80041c4 <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	20005228 	.word	0x20005228

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f000 b811 	b.w	800c418 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	2000522c 	.word	0x2000522c

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f000 b80c 	b.w	800c41a <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	2000522c 	.word	0x2000522c

0800c408 <_malloc_usable_size_r>:
 800c408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c40c:	1f18      	subs	r0, r3, #4
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bfbc      	itt	lt
 800c412:	580b      	ldrlt	r3, [r1, r0]
 800c414:	18c0      	addlt	r0, r0, r3
 800c416:	4770      	bx	lr

0800c418 <__retarget_lock_acquire_recursive>:
 800c418:	4770      	bx	lr

0800c41a <__retarget_lock_release_recursive>:
 800c41a:	4770      	bx	lr

0800c41c <_init>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	bf00      	nop
 800c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c422:	bc08      	pop	{r3}
 800c424:	469e      	mov	lr, r3
 800c426:	4770      	bx	lr

0800c428 <_fini>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	bf00      	nop
 800c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42e:	bc08      	pop	{r3}
 800c430:	469e      	mov	lr, r3
 800c432:	4770      	bx	lr
