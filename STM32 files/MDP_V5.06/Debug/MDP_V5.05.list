
MDP_V5.05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  0800cd24  0800cd24  0001cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9ec  0800d9ec  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9ec  0800d9ec  0001d9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9f4  0800d9f4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9f4  0800d9f4  0001d9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9f8  0800d9f8  0001d9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800d9fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000051fc  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200052a4  200052a4  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023325  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004042  00000000  00000000  000433f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  00047440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001830  00000000  00000000  00048db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024565  00000000  00000000  0004a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d42a  00000000  00000000  0006eb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da31d  00000000  00000000  0008bf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016628c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007244  00000000  00000000  001662e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd0c 	.word	0x0800cd0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800cd0c 	.word	0x0800cd0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <IMU_Initialise>:
//uint32_t gyroPrev[3];
/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000f60:	4bad      	ldr	r3, [pc, #692]	; (8001218 <IMU_Initialise+0x2c4>)
 8000f62:	f107 0418 	add.w	r4, r7, #24
 8000f66:	461d      	mov	r5, r3
 8000f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	7023      	strb	r3, [r4, #0]
 8000f70:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f74:	2200      	movs	r2, #0
 8000f76:	801a      	strh	r2, [r3, #0]
 8000f78:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	605a      	str	r2, [r3, #4]
	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

*/
	  ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	217f      	movs	r1, #127	; 0x7f
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f000 f9ba 	bl	8001304 <IMU_WriteOneByte>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4ba1      	ldr	r3, [pc, #644]	; (800121c <IMU_Initialise+0x2c8>)
 8000f96:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK ){
 8000f98:	4ba0      	ldr	r3, [pc, #640]	; (800121c <IMU_Initialise+0x2c8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <IMU_Initialise+0x5c>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <IMU_Initialise+0x2cc>)
 8000fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fa8:	c303      	stmia	r3!, {r0, r1}
 8000faa:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fac:	2300      	movs	r3, #0
 8000fae:	e19a      	b.n	80012e6 <IMU_Initialise+0x392>
	  	   }

	  //check ID
/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f107 0317 	add.w	r3, r7, #23
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 f9c3 	bl	8001344 <IMU_ReadOneByte>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b96      	ldr	r3, [pc, #600]	; (800121c <IMU_Initialise+0x2c8>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000fc6:	4b95      	ldr	r3, [pc, #596]	; (800121c <IMU_Initialise+0x2c8>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <IMU_Initialise+0x8a>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	4a94      	ldr	r2, [pc, #592]	; (8001224 <IMU_Initialise+0x2d0>)
 8000fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd6:	c303      	stmia	r3!, {r0, r1}
 8000fd8:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e183      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
	  else{
		  //sprintf(hex, "%x", buf[0]); // change to hexidecimal
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	4990      	ldr	r1, [pc, #576]	; (8001228 <IMU_Initialise+0x2d4>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f00b fa67 	bl	800c4bc <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000fee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00b fa7f 	bl	800c4fc <strcpy>
	      uartbuf[12] = uartbuf[0]-32; // change to upper case
 8000ffe:	7e3b      	ldrb	r3, [r7, #24]
 8001000:	3b20      	subs	r3, #32
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1]-32;
 8001008:	7e7b      	ldrb	r3, [r7, #25]
 800100a:	3b20      	subs	r3, #32
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 8001012:	230d      	movs	r3, #13
 8001014:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8001018:	230a      	movs	r3, #10
 800101a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 800101e:	2300      	movs	r3, #0
 8001020:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8001024:	230d      	movs	r3, #13
 8001026:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8001028:	230a      	movs	r3, #10
 800102a:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 800102c:	2349      	movs	r3, #73	; 0x49
 800102e:	76bb      	strb	r3, [r7, #26]
	      }


      // for debuggiing - send to uart and return to main to display on OLED and UART
	  HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	685c      	ldr	r4, [r3, #4]
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f8c9 	bl	80001d0 <strlen>
 800103e:	4603      	mov	r3, r0
 8001040:	b29a      	uxth	r2, r3
 8001042:	f107 0118 	add.w	r1, r7, #24
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	4620      	mov	r0, r4
 800104c:	f007 fabb 	bl	80085c6 <HAL_UART_Transmit>
	  //return &buf[0];

	  // Initialize
	  // Bank 0 - Reset the device and then auto selects the best available clock source
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001050:	2200      	movs	r2, #0
 8001052:	217f      	movs	r1, #127	; 0x7f
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f000 f955 	bl	8001304 <IMU_WriteOneByte>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <IMU_Initialise+0x2c8>)
 8001060:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001062:	4b6e      	ldr	r3, [pc, #440]	; (800121c <IMU_Initialise+0x2c8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <IMU_Initialise+0x126>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4a6f      	ldr	r2, [pc, #444]	; (800122c <IMU_Initialise+0x2d8>)
 8001070:	ca07      	ldmia	r2, {r0, r1, r2}
 8001072:	c303      	stmia	r3!, {r0, r1}
 8001074:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001076:	2300      	movs	r3, #0
 8001078:	e135      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 800107a:	22f1      	movs	r2, #241	; 0xf1
 800107c:	2106      	movs	r1, #6
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f940 	bl	8001304 <IMU_WriteOneByte>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b64      	ldr	r3, [pc, #400]	; (800121c <IMU_Initialise+0x2c8>)
 800108a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800108c:	4b63      	ldr	r3, [pc, #396]	; (800121c <IMU_Initialise+0x2c8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00a      	beq.n	80010aa <IMU_Initialise+0x156>
	       strcpy((char*)uartbuf, "Error 4a\r\n");
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	4a65      	ldr	r2, [pc, #404]	; (8001230 <IMU_Initialise+0x2dc>)
 800109a:	ca07      	ldmia	r2, {r0, r1, r2}
 800109c:	c303      	stmia	r3!, {r0, r1}
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	0c12      	lsrs	r2, r2, #16
 80010a4:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010a6:	2300      	movs	r3, #0
 80010a8:	e11d      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
      HAL_Delay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f003 fb44 	bl	8004738 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 80010b0:	2201      	movs	r2, #1
 80010b2:	2106      	movs	r1, #6
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 f925 	bl	8001304 <IMU_WriteOneByte>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <IMU_Initialise+0x2c8>)
 80010c0:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010c2:	4b56      	ldr	r3, [pc, #344]	; (800121c <IMU_Initialise+0x2c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <IMU_Initialise+0x18c>
	       strcpy((char*)uartbuf, "Error 4b\r\n");
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4a59      	ldr	r2, [pc, #356]	; (8001234 <IMU_Initialise+0x2e0>)
 80010d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d2:	c303      	stmia	r3!, {r0, r1}
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	0c12      	lsrs	r2, r2, #16
 80010da:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010dc:	2300      	movs	r3, #0
 80010de:	e102      	b.n	80012e6 <IMU_Initialise+0x392>
	       }


	  // Turn off and on Accelator and Gyro - page 28
      HAL_Delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f003 fb29 	bl	8004738 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 80010e6:	223f      	movs	r2, #63	; 0x3f
 80010e8:	2107      	movs	r1, #7
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f90a 	bl	8001304 <IMU_WriteOneByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <IMU_Initialise+0x2c8>)
 80010f6:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010f8:	4b48      	ldr	r3, [pc, #288]	; (800121c <IMU_Initialise+0x2c8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00a      	beq.n	8001116 <IMU_Initialise+0x1c2>
	       strcpy((char*)uartbuf, "Error 5a\r\n");
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <IMU_Initialise+0x2e4>)
 8001106:	ca07      	ldmia	r2, {r0, r1, r2}
 8001108:	c303      	stmia	r3!, {r0, r1}
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	3302      	adds	r3, #2
 800110e:	0c12      	lsrs	r2, r2, #16
 8001110:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001112:	2300      	movs	r3, #0
 8001114:	e0e7      	b.n	80012e6 <IMU_Initialise+0x392>
	       }

      HAL_Delay(10);
 8001116:	200a      	movs	r0, #10
 8001118:	f003 fb0e 	bl	8004738 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 800111c:	2200      	movs	r2, #0
 800111e:	2107      	movs	r1, #7
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 f8ef 	bl	8001304 <IMU_WriteOneByte>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <IMU_Initialise+0x2c8>)
 800112c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <IMU_Initialise+0x2c8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <IMU_Initialise+0x1f8>
	       strcpy((char*)uartbuf, "Error 5b\r\n");
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	4a40      	ldr	r2, [pc, #256]	; (800123c <IMU_Initialise+0x2e8>)
 800113c:	ca07      	ldmia	r2, {r0, r1, r2}
 800113e:	c303      	stmia	r3!, {r0, r1}
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	3302      	adds	r3, #2
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001148:	2300      	movs	r3, #0
 800114a:	e0cc      	b.n	80012e6 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 800114c:	2201      	movs	r2, #1
 800114e:	2110      	movs	r1, #16
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 f8d7 	bl	8001304 <IMU_WriteOneByte>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <IMU_Initialise+0x2c8>)
 800115c:	701a      	strb	r2, [r3, #0]


      // Bank 2 - Gyro and Acce and start running
      /* user bank 2 register */
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 800115e:	2220      	movs	r2, #32
 8001160:	217f      	movs	r1, #127	; 0x7f
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f8ce 	bl	8001304 <IMU_WriteOneByte>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <IMU_Initialise+0x2c8>)
 800116e:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <IMU_Initialise+0x2c8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <IMU_Initialise+0x234>
	       strcpy((char*)uartbuf, "Error 6\r\n");
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	4a30      	ldr	r2, [pc, #192]	; (8001240 <IMU_Initialise+0x2ec>)
 800117e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001180:	c303      	stmia	r3!, {r0, r1}
 8001182:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001184:	2300      	movs	r3, #0
 8001186:	e0ae      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x04);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 8001188:	2204      	movs	r2, #4
 800118a:	2100      	movs	r1, #0
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f8b9 	bl	8001304 <IMU_WriteOneByte>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <IMU_Initialise+0x2c8>)
 8001198:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <IMU_Initialise+0x2c8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <IMU_Initialise+0x25e>
	       strcpy((char*)uartbuf, "Error 7\r\n");
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4a27      	ldr	r2, [pc, #156]	; (8001244 <IMU_Initialise+0x2f0>)
 80011a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011aa:	c303      	stmia	r3!, {r0, r1}
 80011ac:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011ae:	2300      	movs	r3, #0
 80011b0:	e099      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 80011b2:	2233      	movs	r2, #51	; 0x33
 80011b4:	2101      	movs	r1, #1
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f8a4 	bl	8001304 <IMU_WriteOneByte>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <IMU_Initialise+0x2c8>)
 80011c2:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <IMU_Initialise+0x2c8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <IMU_Initialise+0x288>
	       strcpy((char*)uartbuf, "Error 8\r\n");
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <IMU_Initialise+0x2f4>)
 80011d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d4:	c303      	stmia	r3!, {r0, r1}
 80011d6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011d8:	2300      	movs	r3, #0
 80011da:	e084      	b.n	80012e6 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 80011dc:	2207      	movs	r2, #7
 80011de:	2111      	movs	r1, #17
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f88f 	bl	8001304 <IMU_WriteOneByte>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <IMU_Initialise+0x2c8>)
 80011ec:	701a      	strb	r2, [r3, #0]
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 f886 	bl	8001304 <IMU_WriteOneByte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <IMU_Initialise+0x2c8>)
 80011fe:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <IMU_Initialise+0x2c8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d023      	beq.n	8001250 <IMU_Initialise+0x2fc>
	       strcpy((char*)uartbuf, "Error 9\r\n");
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <IMU_Initialise+0x2f8>)
 800120e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001210:	c303      	stmia	r3!, {r0, r1}
 8001212:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001214:	2300      	movs	r3, #0
 8001216:	e066      	b.n	80012e6 <IMU_Initialise+0x392>
 8001218:	0800cdc4 	.word	0x0800cdc4
 800121c:	20004a48 	.word	0x20004a48
 8001220:	0800cd24 	.word	0x0800cd24
 8001224:	0800cd30 	.word	0x0800cd30
 8001228:	0800cd3c 	.word	0x0800cd3c
 800122c:	0800cd40 	.word	0x0800cd40
 8001230:	0800cd4c 	.word	0x0800cd4c
 8001234:	0800cd58 	.word	0x0800cd58
 8001238:	0800cd64 	.word	0x0800cd64
 800123c:	0800cd70 	.word	0x0800cd70
 8001240:	0800cd7c 	.word	0x0800cd7c
 8001244:	0800cd88 	.word	0x0800cd88
 8001248:	0800cd94 	.word	0x0800cd94
 800124c:	0800cda0 	.word	0x0800cda0
	       }

	  // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 8001250:	2231      	movs	r2, #49	; 0x31
 8001252:	2114      	movs	r1, #20
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f000 f855 	bl	8001304 <IMU_WriteOneByte>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <IMU_Initialise+0x39c>)
 8001260:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <IMU_Initialise+0x39c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <IMU_Initialise+0x32c>
	       strcpy((char*)uartbuf, "Error 10\r\n");
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <IMU_Initialise+0x3a0>)
 8001270:	ca07      	ldmia	r2, {r0, r1, r2}
 8001272:	c303      	stmia	r3!, {r0, r1}
 8001274:	801a      	strh	r2, [r3, #0]
 8001276:	3302      	adds	r3, #2
 8001278:	0c12      	lsrs	r2, r2, #16
 800127a:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 800127c:	2300      	movs	r3, #0
 800127e:	e032      	b.n	80012e6 <IMU_Initialise+0x392>
	       }

	  IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001280:	2200      	movs	r2, #0
 8001282:	2153      	movs	r1, #83	; 0x53
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f83d 	bl	8001304 <IMU_WriteOneByte>



      // back to bank 0
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800128a:	2200      	movs	r2, #0
 800128c:	217f      	movs	r1, #127	; 0x7f
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f838 	bl	8001304 <IMU_WriteOneByte>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <IMU_Initialise+0x39c>)
 800129a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <IMU_Initialise+0x39c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00a      	beq.n	80012ba <IMU_Initialise+0x366>
	       strcpy((char*)uartbuf, "Error 11\r\n");
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <IMU_Initialise+0x3a4>)
 80012aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ac:	c303      	stmia	r3!, {r0, r1}
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	3302      	adds	r3, #2
 80012b2:	0c12      	lsrs	r2, r2, #16
 80012b4:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80012b6:	2300      	movs	r3, #0
 80012b8:	e015      	b.n	80012e6 <IMU_Initialise+0x392>
	       }
      HAL_Delay(100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f003 fa3c 	bl	8004738 <HAL_Delay>

      /* offset */
//      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
      gyroPosOld[0] = 0;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <IMU_Initialise+0x3a8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
      gyroPosOld[1] = 0;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <IMU_Initialise+0x3a8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
      gyroPosOld[2] = 0;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <IMU_Initialise+0x3a8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]

      gyroNegOld[0] = 0;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <IMU_Initialise+0x3ac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
	  gyroNegOld[1] = 0;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <IMU_Initialise+0x3ac>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
	  gyroNegOld[2] = 0;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <IMU_Initialise+0x3ac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
      // everthing OK
      //strcpy((char*)buf, "Initialize OK\r\n");
      //return &buf;
      return 0; // 0 means 0 error
 80012e4:	2300      	movs	r3, #0

}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3730      	adds	r7, #48	; 0x30
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20004a48 	.word	0x20004a48
 80012f4:	0800cdac 	.word	0x0800cdac
 80012f8:	0800cdb8 	.word	0x0800cdb8
 80012fc:	20004a3c 	.word	0x20004a3c
 8001300:	20004a30 	.word	0x20004a30

08001304 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001314:	78bb      	ldrb	r3, [r7, #2]
 8001316:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	23d0      	movs	r3, #208	; 0xd0
 800131e:	b299      	uxth	r1, r3
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	b29a      	uxth	r2, r3
 8001324:	f04f 33ff 	mov.w	r3, #4294967295
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030f 	add.w	r3, r7, #15
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	f004 fa63 	bl	8005800 <HAL_I2C_Mem_Write>
 800133a:	4603      	mov	r3, r0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af04      	add	r7, sp, #16
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	460b      	mov	r3, r1
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	23d0      	movs	r3, #208	; 0xd0
 8001358:	b299      	uxth	r1, r3
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	b29a      	uxth	r2, r3
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	9302      	str	r3, [sp, #8]
 8001364:	2301      	movs	r3, #1
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	f004 fb41 	bl	80059f4 <HAL_I2C_Mem_Read>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <IMU_ReadOneByte+0x44>)
 8001378:	701a      	strb	r2, [r3, #0]
	return ret;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <IMU_ReadOneByte+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20004a48 	.word	0x20004a48

0800138c <IMU_GyroReadHeading>:
//int32_t cmpfunc (const void * a, const void * b) {
//   return ( *(int32_t*)a - *(int32_t*)b );
//}

int32_t IMU_GyroReadHeading(ICM20948 *dev)
{   // return the change in value instead of current value
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    uint8_t i, u8Buf[2] = {0}; // reset to zero
 8001394:	2300      	movs	r3, #0
 8001396:	81bb      	strh	r3, [r7, #12]
    int32_t gyroRaw = {0};  // reset to zero
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    uint32_t gyroPos, gyroNeg;
    uint32_t valPos, valNeg;
    uint32_t elapsedMs, tick;
    int32_t gyroSum = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	461a      	mov	r2, r3
 80013a6:	2138      	movs	r1, #56	; 0x38
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ffcb 	bl	8001344 <IMU_ReadOneByte>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b7c      	ldr	r3, [pc, #496]	; (80015a4 <IMU_GyroReadHeading+0x218>)
 80013b4:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	3301      	adds	r3, #1
 80013bc:	461a      	mov	r2, r3
 80013be:	2137      	movs	r1, #55	; 0x37
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffbf 	bl	8001344 <IMU_ReadOneByte>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <IMU_GyroReadHeading+0x218>)
 80013cc:	701a      	strb	r2, [r3, #0]
    if (prevTick == 0){
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <IMU_GyroReadHeading+0x21c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d107      	bne.n	80013e6 <IMU_GyroReadHeading+0x5a>
    	prevTick = xTaskGetTickCount();
 80013d6:	f009 fc97 	bl	800ad08 <xTaskGetTickCount>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b72      	ldr	r3, [pc, #456]	; (80015a8 <IMU_GyroReadHeading+0x21c>)
 80013e0:	601a      	str	r2, [r3, #0]
    	return 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e11b      	b.n	800161e <IMU_GyroReadHeading+0x292>
    }
    tick = xTaskGetTickCount();
 80013e6:	f009 fc8f 	bl	800ad08 <xTaskGetTickCount>
 80013ea:	4603      	mov	r3, r0
 80013ec:	617b      	str	r3, [r7, #20]
    elapsedMs = tick-prevTick;
 80013ee:	4b6e      	ldr	r3, [pc, #440]	; (80015a8 <IMU_GyroReadHeading+0x21c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	613b      	str	r3, [r7, #16]
    prevTick = tick;
 80013f8:	4a6b      	ldr	r2, [pc, #428]	; (80015a8 <IMU_GyroReadHeading+0x21c>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	6013      	str	r3, [r2, #0]

    gyroRaw = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 80013fe:	7b7b      	ldrb	r3, [r7, #13]
 8001400:	021a      	lsls	r2, r3, #8
 8001402:	7b3b      	ldrb	r3, [r7, #12]
 8001404:	4619      	mov	r1, r3
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <IMU_GyroReadHeading+0x220>)
 8001408:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	61fb      	str	r3, [r7, #28]
    if(gyroRaw < 0x8000){
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001418:	da04      	bge.n	8001424 <IMU_GyroReadHeading+0x98>
//    	gyroRaw = gyroRaw*0.01525878906*elapsedMs/10*2.546257;
    	gyroNeg = gyroRaw;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001422:	e006      	b.n	8001432 <IMU_GyroReadHeading+0xa6>

    }
    else{
//    	gyroRaw = (65535 - gyroRaw)*0.01525878906*elapsedMs/10*2.546257;
		gyroNeg = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 65535 - gyroRaw;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800142e:	33ff      	adds	r3, #255	; 0xff
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Median Filtering
    gyroNegOld[2] = gyroNegOld[1];
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a5e      	ldr	r2, [pc, #376]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001438:	6093      	str	r3, [r2, #8]
	gyroPosOld[2] = gyroPosOld[1];
 800143a:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001440:	6093      	str	r3, [r2, #8]

	gyroNegOld[1] = gyroNegOld[0];
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001448:	6053      	str	r3, [r2, #4]
	gyroPosOld[1] = gyroPosOld[0];
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a59      	ldr	r2, [pc, #356]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001450:	6053      	str	r3, [r2, #4]

	gyroNegOld[0] = gyroNeg;
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001456:	6013      	str	r3, [r2, #0]
	gyroPosOld[0] = gyroPos;
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800145c:	6013      	str	r3, [r2, #0]

	if(gyroNegOld[1] <= gyroNegOld[0] && gyroNegOld[1] >= gyroNegOld[2])valNeg = gyroNegOld[1];
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	dc09      	bgt.n	800147e <IMU_GyroReadHeading+0xf2>
 800146a:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	429a      	cmp	r2, r3
 8001474:	db03      	blt.n	800147e <IMU_GyroReadHeading+0xf2>
 8001476:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	e042      	b.n	8001504 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[1] <= gyroNegOld[2] && gyroNegOld[1] >= gyroNegOld[0])valNeg = gyroNegOld[1];
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4b4b      	ldr	r3, [pc, #300]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	dc09      	bgt.n	800149e <IMU_GyroReadHeading+0x112>
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	429a      	cmp	r2, r3
 8001494:	db03      	blt.n	800149e <IMU_GyroReadHeading+0x112>
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	e032      	b.n	8001504 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 800149e:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dc09      	bgt.n	80014be <IMU_GyroReadHeading+0x132>
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	db03      	blt.n	80014be <IMU_GyroReadHeading+0x132>
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	e022      	b.n	8001504 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b3b      	ldr	r3, [pc, #236]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dc09      	bgt.n	80014de <IMU_GyroReadHeading+0x152>
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	db03      	blt.n	80014de <IMU_GyroReadHeading+0x152>
 80014d6:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	e012      	b.n	8001504 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[2] <= gyroNegOld[0] && gyroNegOld[2] >= gyroNegOld[1])valNeg = gyroNegOld[2];
 80014de:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dc09      	bgt.n	80014fe <IMU_GyroReadHeading+0x172>
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	db03      	blt.n	80014fe <IMU_GyroReadHeading+0x172>
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	e002      	b.n	8001504 <IMU_GyroReadHeading+0x178>
	else valNeg = gyroNegOld[2];
 80014fe:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <IMU_GyroReadHeading+0x224>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	623b      	str	r3, [r7, #32]

	if(gyroPosOld[1] <= gyroPosOld[0] && gyroPosOld[1] >= gyroPosOld[2])valPos = gyroPosOld[1];
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	dc09      	bgt.n	8001524 <IMU_GyroReadHeading+0x198>
 8001510:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	429a      	cmp	r2, r3
 800151a:	db03      	blt.n	8001524 <IMU_GyroReadHeading+0x198>
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
 8001522:	e04c      	b.n	80015be <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[1] <= gyroPosOld[2] && gyroPosOld[1] >= gyroPosOld[0])valPos = gyroPosOld[1];
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	dc09      	bgt.n	8001544 <IMU_GyroReadHeading+0x1b8>
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	db03      	blt.n	8001544 <IMU_GyroReadHeading+0x1b8>
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e03c      	b.n	80015be <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	dc09      	bgt.n	8001564 <IMU_GyroReadHeading+0x1d8>
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	db03      	blt.n	8001564 <IMU_GyroReadHeading+0x1d8>
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	e02c      	b.n	80015be <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	429a      	cmp	r2, r3
 800156e:	dc09      	bgt.n	8001584 <IMU_GyroReadHeading+0x1f8>
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	db03      	blt.n	8001584 <IMU_GyroReadHeading+0x1f8>
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
 8001582:	e01c      	b.n	80015be <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[2] <= gyroPosOld[0] && gyroPosOld[2] >= gyroPosOld[1])valPos = gyroPosOld[2];
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	dc13      	bgt.n	80015b8 <IMU_GyroReadHeading+0x22c>
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	db0d      	blt.n	80015b8 <IMU_GyroReadHeading+0x22c>
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <IMU_GyroReadHeading+0x228>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
 80015a2:	e00c      	b.n	80015be <IMU_GyroReadHeading+0x232>
 80015a4:	20004a48 	.word	0x20004a48
 80015a8:	200000c4 	.word	0x200000c4
 80015ac:	200000c8 	.word	0x200000c8
 80015b0:	20004a30 	.word	0x20004a30
 80015b4:	20004a3c 	.word	0x20004a3c
	else valPos = gyroPosOld[2];
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <IMU_GyroReadHeading+0x29c>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
//    			valPos = gyroNegOld - gyroNeg;
//    			valNeg = 0;
//    		}
//    	}
//    }
	dev->gyro[2] = ((double)((int32_t)valPos - (int32_t)valNeg - (int32_t)gyro_offset_f)*0.01525878906f*elapsedMs/1000);
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	1ad2      	subs	r2, r2, r3
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <IMU_GyroReadHeading+0x2a0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffaa 	bl	8000524 <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <IMU_GyroReadHeading+0x2a4>)
 80015d6:	f7ff f80f 	bl	80005f8 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4614      	mov	r4, r2
 80015e0:	461d      	mov	r5, r3
 80015e2:	6938      	ldr	r0, [r7, #16]
 80015e4:	f7fe ff8e 	bl	8000504 <__aeabi_ui2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7ff f802 	bl	80005f8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <IMU_GyroReadHeading+0x2a8>)
 8001602:	f7ff f923 	bl	800084c <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fad5 	bl	8000bbc <__aeabi_d2f>
 8001612:	4602      	mov	r2, r0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	61da      	str	r2, [r3, #28]
//		heading_f = heading_f - 360;
//	}
//	while(heading_f < 0){
//		heading_f = heading_f + 360;
//	}
	return (int32_t)valPos - (int32_t)valNeg;
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	1ad3      	subs	r3, r2, r3
//    if(heading >= 122850) heading = heading - 122850;
//
////    heading %= 360;
//	return heading*0.29304029304;

}
 800161e:	4618      	mov	r0, r3
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	20004a3c 	.word	0x20004a3c
 800162c:	200000d0 	.word	0x200000d0
 8001630:	3f8f4000 	.word	0x3f8f4000
 8001634:	408f4000 	.word	0x408f4000

08001638 <Gyro_calibrateHeading>:

void Gyro_calibrateHeading(ICM20948 *dev, double ticks)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	ed87 0b00 	vstr	d0, [r7]
    int32_t offset_local = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
    int16_t i;
    for (i=0; i< 512; i++){
 8001648:	2300      	movs	r3, #0
 800164a:	827b      	strh	r3, [r7, #18]
 800164c:	e00c      	b.n	8001668 <Gyro_calibrateHeading+0x30>
		IMU_GyroReadHeading(dev);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe9c 	bl	800138c <IMU_GyroReadHeading>
		osDelayUntil(ticks); // wait for 10msec
 8001654:	ed97 0b00 	vldr	d0, [r7]
 8001658:	f008 f9ef 	bl	8009a3a <osDelayUntil>
    for (i=0; i< 512; i++){
 800165c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001660:	b29b      	uxth	r3, r3
 8001662:	3301      	adds	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	827b      	strh	r3, [r7, #18]
 8001668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800166c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001670:	dbed      	blt.n	800164e <Gyro_calibrateHeading+0x16>
	}

    for (i=0; i< 2048; i++){
 8001672:	2300      	movs	r3, #0
 8001674:	827b      	strh	r3, [r7, #18]
 8001676:	e010      	b.n	800169a <Gyro_calibrateHeading+0x62>
    	offset_local = offset_local + IMU_GyroReadHeading(dev);
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f7ff fe87 	bl	800138c <IMU_GyroReadHeading>
 800167e:	4602      	mov	r2, r0
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
//		offset_local = offset_local + (double)dev->gyro[2]/64.0;
    	osDelayUntil(ticks); // wait for 10msec
 8001686:	ed97 0b00 	vldr	d0, [r7]
 800168a:	f008 f9d6 	bl	8009a3a <osDelayUntil>
    for (i=0; i< 2048; i++){
 800168e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001692:	b29b      	uxth	r3, r3
 8001694:	3301      	adds	r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	827b      	strh	r3, [r7, #18]
 800169a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a2:	dbe9      	blt.n	8001678 <Gyro_calibrateHeading+0x40>
    }

    gyro_offset_f = offset_local>>11;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	12db      	asrs	r3, r3, #11
 80016a8:	4a02      	ldr	r2, [pc, #8]	; (80016b4 <Gyro_calibrateHeading+0x7c>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000d0 	.word	0x200000d0

080016b8 <delay>:
uint32_t Difference = 0;
uint32_t Distance = 0;
uint8_t Is_First_Captured = 0;  // is the first value captured ?

void delay(uint16_t time)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <delay+0x30>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80016ca:	bf00      	nop
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <delay+0x30>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3f9      	bcc.n	80016cc <delay+0x14>
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20004aa0 	.word	0x20004aa0
 80016ec:	00000000 	.word	0x00000000

080016f0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7f1b      	ldrb	r3, [r3, #28]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 8082 	bne.w	8001806 <HAL_TIM_IC_CaptureCallback+0x116>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001702:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11a      	bne.n	8001740 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 800170a:	2104      	movs	r1, #4
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f006 f985 	bl	8007a1c <HAL_TIM_ReadCapturedValue>
 8001712:	4603      	mov	r3, r0
 8001714:	4a41      	ldr	r2, [pc, #260]	; (800181c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001716:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x128>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a1a      	ldr	r2, [r3, #32]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800172c:	621a      	str	r2, [r3, #32]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6a1a      	ldr	r2, [r3, #32]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0220 	orr.w	r2, r2, #32
 800173c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
		}
	}
}
 800173e:	e062      	b.n	8001806 <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d15e      	bne.n	8001806 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001748:	2104      	movs	r1, #4
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f006 f966 	bl	8007a1c <HAL_TIM_ReadCapturedValue>
 8001750:	4603      	mov	r3, r0
 8001752:	4a33      	ldr	r2, [pc, #204]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001754:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d907      	bls.n	800177a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x130>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	4a2b      	ldr	r2, [pc, #172]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e00f      	b.n	800179a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800177a:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d909      	bls.n	800179a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001794:	33ff      	adds	r3, #255	; 0xff
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001798:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x134>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe feb0 	bl	8000504 <__aeabi_ui2d>
 80017a4:	a31a      	add	r3, pc, #104	; (adr r3, 8001810 <HAL_TIM_IC_CaptureCallback+0x120>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7fe ff25 	bl	80005f8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017be:	f7ff f845 	bl	800084c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9d7 	bl	8000b7c <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017d2:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017e8:	621a      	str	r2, [r3, #32]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a12      	ldr	r2, [r2, #32]
 80017f4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0204 	bic.w	r2, r2, #4
 8001804:	60da      	str	r2, [r3, #12]
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	b020c49c 	.word	0xb020c49c
 8001814:	3fa16872 	.word	0x3fa16872
 8001818:	2000010c 	.word	0x2000010c
 800181c:	200000fc 	.word	0x200000fc
 8001820:	20000100 	.word	0x20000100
 8001824:	20000104 	.word	0x20000104
 8001828:	20000108 	.word	0x20000108
 800182c:	20004aa0 	.word	0x20004aa0

08001830 <HCSR04_Read>:

void HCSR04_Read(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001834:	2201      	movs	r2, #1
 8001836:	2110      	movs	r1, #16
 8001838:	480a      	ldr	r0, [pc, #40]	; (8001864 <HCSR04_Read+0x34>)
 800183a:	f003 fe69 	bl	8005510 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800183e:	200a      	movs	r0, #10
 8001840:	f7ff ff3a 	bl	80016b8 <delay>
	HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	4806      	ldr	r0, [pc, #24]	; (8001864 <HCSR04_Read+0x34>)
 800184a:	f003 fe61 	bl	8005510 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HCSR04_Read+0x38>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <HCSR04_Read+0x38>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0204 	orr.w	r2, r2, #4
 800185c:	60da      	str	r2, [r3, #12]
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020c00 	.word	0x40020c00
 8001868:	20004aa0 	.word	0x20004aa0

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001870:	f002 fef0 	bl	8004654 <HAL_Init>

  /* USER CODE BEGIN Init */

  Buffer[0] = 'd';
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <main+0xcc>)
 8001876:	2264      	movs	r2, #100	; 0x64
 8001878:	701a      	strb	r2, [r3, #0]
  Buffer[1] = 'W';
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <main+0xcc>)
 800187c:	2257      	movs	r2, #87	; 0x57
 800187e:	705a      	strb	r2, [r3, #1]
  Buffer[2] = '0';
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <main+0xcc>)
 8001882:	2230      	movs	r2, #48	; 0x30
 8001884:	709a      	strb	r2, [r3, #2]
  Buffer[3] = '9';
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <main+0xcc>)
 8001888:	2239      	movs	r2, #57	; 0x39
 800188a:	70da      	strb	r2, [r3, #3]
  Buffer[4] = '0';
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <main+0xcc>)
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	711a      	strb	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001892:	f000 f875 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001896:	f000 fb8b 	bl	8001fb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800189a:	f000 fb69 	bl	8001f70 <MX_DMA_Init>
  MX_TIM8_Init();
 800189e:	f000 fa93 	bl	8001dc8 <MX_TIM8_Init>
  MX_TIM2_Init();
 80018a2:	f000 f995 	bl	8001bd0 <MX_TIM2_Init>
  MX_TIM1_Init();
 80018a6:	f000 f8f7 	bl	8001a98 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80018aa:	f000 fb37 	bl	8001f1c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80018ae:	f000 f9e3 	bl	8001c78 <MX_TIM3_Init>
  MX_I2C1_Init();
 80018b2:	f000 f8c3 	bl	8001a3c <MX_I2C1_Init>
  MX_TIM4_Init();
 80018b6:	f000 fa33 	bl	8001d20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80018ba:	f002 f809 	bl	80038d0 <OLED_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <main+0xd0>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <main+0xd0>)
 80018c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018c8:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <main+0xd4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <main+0xd4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <main+0xd4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018dc:	f007 ffb6 	bl	800984c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <main+0xd8>)
 80018e2:	2100      	movs	r1, #0
 80018e4:	4818      	ldr	r0, [pc, #96]	; (8001948 <main+0xdc>)
 80018e6:	f007 fffb 	bl	80098e0 <osThreadNew>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a17      	ldr	r2, [pc, #92]	; (800194c <main+0xe0>)
 80018ee:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <main+0xe4>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4817      	ldr	r0, [pc, #92]	; (8001954 <main+0xe8>)
 80018f6:	f007 fff3 	bl	80098e0 <osThreadNew>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a16      	ldr	r2, [pc, #88]	; (8001958 <main+0xec>)
 80018fe:	6013      	str	r3, [r2, #0]

  /* creation of Motor_L */
  Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <main+0xf0>)
 8001902:	2100      	movs	r1, #0
 8001904:	4816      	ldr	r0, [pc, #88]	; (8001960 <main+0xf4>)
 8001906:	f007 ffeb 	bl	80098e0 <osThreadNew>
 800190a:	4603      	mov	r3, r0
 800190c:	4a15      	ldr	r2, [pc, #84]	; (8001964 <main+0xf8>)
 800190e:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(GyroFunc, NULL, &GyroTask_attributes);
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <main+0xfc>)
 8001912:	2100      	movs	r1, #0
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <main+0x100>)
 8001916:	f007 ffe3 	bl	80098e0 <osThreadNew>
 800191a:	4603      	mov	r3, r0
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <main+0x104>)
 800191e:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic */
  UltrasonicHandle = osThreadNew(sonic_sensor, NULL, &Ultrasonic_attributes);
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <main+0x108>)
 8001922:	2100      	movs	r1, #0
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <main+0x10c>)
 8001926:	f007 ffdb 	bl	80098e0 <osThreadNew>
 800192a:	4603      	mov	r3, r0
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <main+0x110>)
 800192e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001930:	f007 ffb0 	bl	8009894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001934:	e7fe      	b.n	8001934 <main+0xc8>
 8001936:	bf00      	nop
 8001938:	20004e00 	.word	0x20004e00
 800193c:	e000edf0 	.word	0xe000edf0
 8001940:	e0001000 	.word	0xe0001000
 8001944:	0800ce80 	.word	0x0800ce80
 8001948:	08002119 	.word	0x08002119
 800194c:	20004a54 	.word	0x20004a54
 8001950:	0800cea4 	.word	0x0800cea4
 8001954:	0800215d 	.word	0x0800215d
 8001958:	20004dfc 	.word	0x20004dfc
 800195c:	0800cec8 	.word	0x0800cec8
 8001960:	080021b1 	.word	0x080021b1
 8001964:	20004a50 	.word	0x20004a50
 8001968:	0800ceec 	.word	0x0800ceec
 800196c:	080032e1 	.word	0x080032e1
 8001970:	20004d38 	.word	0x20004d38
 8001974:	0800cf10 	.word	0x0800cf10
 8001978:	0800353d 	.word	0x0800353d
 800197c:	20004df8 	.word	0x20004df8

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f00a fd8c 	bl	800c4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <SystemClock_Config+0xb4>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <SystemClock_Config+0xb4>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <SystemClock_Config+0xb4>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <SystemClock_Config+0xb8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <SystemClock_Config+0xb8>)
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <SystemClock_Config+0xb8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e0:	2301      	movs	r3, #1
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019e4:	2310      	movs	r3, #16
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0320 	add.w	r3, r7, #32
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fda9 	bl	8006548 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80019fc:	f001 fdbc 	bl	8003578 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 f80c 	bl	8006a38 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a26:	f001 fda7 	bl	8003578 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <MX_I2C1_Init+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_I2C1_Init+0x58>)
 8001a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a7a:	f003 fd7d 	bl	8005578 <HAL_I2C_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a84:	f001 fd78 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20004bb0 	.word	0x20004bb0
 8001a90:	40005400 	.word	0x40005400
 8001a94:	000186a0 	.word	0x000186a0

08001a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b096      	sub	sp, #88	; 0x58
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2220      	movs	r2, #32
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f00a fceb 	bl	800c4ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <MX_TIM1_Init+0x134>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001adc:	4b3a      	ldr	r3, [pc, #232]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001ade:	22a0      	movs	r2, #160	; 0xa0
 8001ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001ae8:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af6:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b02:	4831      	ldr	r0, [pc, #196]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001b04:	f005 f968 	bl	8006dd8 <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b0e:	f001 fd33 	bl	8003578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001b20:	f005 feb4 	bl	800788c <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b2a:	f001 fd25 	bl	8003578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001b30:	f005 f9a1 	bl	8006e76 <HAL_TIM_PWM_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b3a:	f001 fd1d 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001b4e:	f006 fc0b 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b58:	f001 fd0e 	bl	8003578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5c:	2360      	movs	r3, #96	; 0x60
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	220c      	movs	r2, #12
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001b7e:	f005 fdc3 	bl	8007708 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001b88:	f001 fcf6 	bl	8003578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_TIM1_Init+0x130>)
 8001bb0:	f006 fc56 	bl	8008460 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001bba:	f001 fcdd 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3758      	adds	r7, #88	; 0x58
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20004d3c 	.word	0x20004d3c
 8001bcc:	40010000 	.word	0x40010000

08001bd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	2224      	movs	r2, #36	; 0x24
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f00a fc64 	bl	800c4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c14:	2303      	movs	r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c24:	230a      	movs	r3, #10
 8001c26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c34:	230a      	movs	r3, #10
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c40:	f005 fa89 	bl	8007156 <HAL_TIM_Encoder_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c4a:	f001 fc95 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM2_Init+0xa4>)
 8001c5c:	f006 fb84 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c66:	f001 fc87 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3730      	adds	r7, #48	; 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004e08 	.word	0x20004e08

08001c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00a fc10 	bl	800c4ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001c96:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <MX_TIM3_Init+0xa4>)
 8001c98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001cca:	230a      	movs	r3, #10
 8001ccc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001cda:	230a      	movs	r3, #10
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001ce6:	f005 fa36 	bl	8007156 <HAL_TIM_Encoder_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cf0:	f001 fc42 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_TIM3_Init+0xa0>)
 8001d02:	f006 fb31 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d0c:	f001 fc34 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	3730      	adds	r7, #48	; 0x30
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20004c04 	.word	0x20004c04
 8001d1c:	40000400 	.word	0x40000400

08001d20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d3e:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <MX_TIM4_Init+0xa4>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d44:	2210      	movs	r2, #16
 8001d46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d62:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d64:	f005 f9a8 	bl	80070b8 <HAL_TIM_IC_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f001 fc03 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001d82:	f006 faf1 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d8c:	f001 fbf4 	bl	8003578 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d94:	2301      	movs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001da0:	463b      	mov	r3, r7
 8001da2:	2204      	movs	r2, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <MX_TIM4_Init+0xa0>)
 8001da8:	f005 fc11 	bl	80075ce <HAL_TIM_IC_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001db2:	f001 fbe1 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20004aa0 	.word	0x20004aa0
 8001dc4:	40000800 	.word	0x40000800

08001dc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b096      	sub	sp, #88	; 0x58
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	615a      	str	r2, [r3, #20]
 8001df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00a fb53 	bl	800c4ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e08:	4a43      	ldr	r2, [pc, #268]	; (8001f18 <MX_TIM8_Init+0x150>)
 8001e0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e12:	4b40      	ldr	r3, [pc, #256]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001e18:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e1a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e32:	4838      	ldr	r0, [pc, #224]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e34:	f004 ffd0 	bl	8006dd8 <HAL_TIM_Base_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001e3e:	f001 fb9b 	bl	8003578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e50:	f005 fd1c 	bl	800788c <HAL_TIM_ConfigClockSource>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001e5a:	f001 fb8d 	bl	8003578 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e5e:	482d      	ldr	r0, [pc, #180]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e60:	f005 f809 	bl	8006e76 <HAL_TIM_PWM_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001e6a:	f001 fb85 	bl	8003578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4825      	ldr	r0, [pc, #148]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001e7e:	f006 fa73 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001e88:	f001 fb76 	bl	8003578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e8c:	2360      	movs	r3, #96	; 0x60
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	2200      	movs	r2, #0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4818      	ldr	r0, [pc, #96]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001eb2:	f005 fc29 	bl	8007708 <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ebc:	f001 fb5c 	bl	8003578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4812      	ldr	r0, [pc, #72]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001eca:	f005 fc1d 	bl	8007708 <HAL_TIM_PWM_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ed4:	f001 fb50 	bl	8003578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <MX_TIM8_Init+0x14c>)
 8001efc:	f006 fab0 	bl	8008460 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001f06:	f001 fb37 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3758      	adds	r7, #88	; 0x58
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20004a58 	.word	0x20004a58
 8001f18:	40010400 	.word	0x40010400

08001f1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_USART3_UART_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_USART3_UART_Init+0x4c>)
 8001f54:	f006 faea 	bl	800852c <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f001 fb0b 	bl	8003578 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20004b6c 	.word	0x20004b6c
 8001f6c:	40004800 	.word	0x40004800

08001f70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_DMA_Init+0x3c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <MX_DMA_Init+0x3c>)
 8001f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_DMA_Init+0x3c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2105      	movs	r1, #5
 8001f96:	200c      	movs	r0, #12
 8001f98:	f002 fccd 	bl	8004936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f9c:	200c      	movs	r0, #12
 8001f9e:	f002 fce6 	bl	800496e <HAL_NVIC_EnableIRQ>

}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <MX_GPIO_Init+0x158>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a4e      	ldr	r2, [pc, #312]	; (8002108 <MX_GPIO_Init+0x158>)
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <MX_GPIO_Init+0x158>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b48      	ldr	r3, [pc, #288]	; (8002108 <MX_GPIO_Init+0x158>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <MX_GPIO_Init+0x158>)
 8001fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <MX_GPIO_Init+0x158>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <MX_GPIO_Init+0x158>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a40      	ldr	r2, [pc, #256]	; (8002108 <MX_GPIO_Init+0x158>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <MX_GPIO_Init+0x158>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <MX_GPIO_Init+0x158>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a39      	ldr	r2, [pc, #228]	; (8002108 <MX_GPIO_Init+0x158>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <MX_GPIO_Init+0x158>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <MX_GPIO_Init+0x158>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a32      	ldr	r2, [pc, #200]	; (8002108 <MX_GPIO_Init+0x158>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <MX_GPIO_Init+0x158>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <MX_GPIO_Init+0x158>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <MX_GPIO_Init+0x158>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b29      	ldr	r3, [pc, #164]	; (8002108 <MX_GPIO_Init+0x158>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8002074:	4825      	ldr	r0, [pc, #148]	; (800210c <MX_GPIO_Init+0x15c>)
 8002076:	f003 fa4b 	bl	8005510 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	213c      	movs	r1, #60	; 0x3c
 800207e:	4824      	ldr	r0, [pc, #144]	; (8002110 <MX_GPIO_Init+0x160>)
 8002080:	f003 fa46 	bl	8005510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_OUT_GPIO_Port, US_OUT_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	2110      	movs	r1, #16
 8002088:	4822      	ldr	r0, [pc, #136]	; (8002114 <MX_GPIO_Init+0x164>)
 800208a:	f003 fa41 	bl	8005510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800208e:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8002092:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <MX_GPIO_Init+0x15c>)
 80020a8:	f003 f87e 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80020ac:	233c      	movs	r3, #60	; 0x3c
 80020ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <MX_GPIO_Init+0x160>)
 80020c4:	f003 f870 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80020c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	480d      	ldr	r0, [pc, #52]	; (8002114 <MX_GPIO_Init+0x164>)
 80020de:	f003 f863 	bl	80051a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_OUT_Pin */
  GPIO_InitStruct.Pin = US_OUT_Pin;
 80020e2:	2310      	movs	r3, #16
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(US_OUT_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	4806      	ldr	r0, [pc, #24]	; (8002114 <MX_GPIO_Init+0x164>)
 80020fa:	f003 f855 	bl	80051a8 <HAL_GPIO_Init>

}
 80020fe:	bf00      	nop
 8002100:	3730      	adds	r7, #48	; 0x30
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40021000 	.word	0x40021000
 8002110:	40020000 	.word	0x40020000
 8002114:	40020c00 	.word	0x40020c00

08002118 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//  HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
  for(;;)
  {

	sprintf(hello, "buff:%s", Buffer);
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <StartDefaultTask+0x38>)
 8002126:	490b      	ldr	r1, [pc, #44]	; (8002154 <StartDefaultTask+0x3c>)
 8002128:	4618      	mov	r0, r3
 800212a:	f00a f9c7 	bl	800c4bc <siprintf>
	OLED_ShowString(10,20,hello);
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	461a      	mov	r2, r3
 8002134:	2114      	movs	r1, #20
 8002136:	200a      	movs	r0, #10
 8002138:	f001 fb98 	bl	800386c <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 800213c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <StartDefaultTask+0x40>)
 8002142:	f003 f9fe 	bl	8005542 <HAL_GPIO_TogglePin>
    osDelay(1);
 8002146:	2001      	movs	r0, #1
 8002148:	f007 fc5c 	bl	8009a04 <osDelay>
	sprintf(hello, "buff:%s", Buffer);
 800214c:	e7e8      	b.n	8002120 <StartDefaultTask+0x8>
 800214e:	bf00      	nop
 8002150:	20004e00 	.word	0x20004e00
 8002154:	0800ce10 	.word	0x0800ce10
 8002158:	40021000 	.word	0x40021000

0800215c <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "testV5!\0";
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <Display+0x48>)
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	ca07      	ldmia	r2, {r0, r1, r2}
 800216c:	c303      	stmia	r3!, {r0, r1}
 800216e:	701a      	strb	r2, [r3, #0]
 8002170:	f107 0315 	add.w	r3, r7, #21
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	f8c3 2007 	str.w	r2, [r3, #7]
  /* Infinite loop */
  for(;;)
  {
	sprintf(hello, "ver5.05 fast");
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4909      	ldr	r1, [pc, #36]	; (80021a8 <Display+0x4c>)
 8002184:	4618      	mov	r0, r3
 8002186:	f00a f999 	bl	800c4bc <siprintf>
	OLED_ShowString(10,10,hello);
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	461a      	mov	r2, r3
 8002190:	210a      	movs	r1, #10
 8002192:	200a      	movs	r0, #10
 8002194:	f001 fb6a 	bl	800386c <OLED_ShowString>
	OLED_Refresh_Gram();
 8002198:	f001 fa3e 	bl	8003618 <OLED_Refresh_Gram>
    osDelay(1);
 800219c:	2001      	movs	r0, #1
 800219e:	f007 fc31 	bl	8009a04 <osDelay>
	sprintf(hello, "ver5.05 fast");
 80021a2:	e7ec      	b.n	800217e <Display+0x22>
 80021a4:	0800ce28 	.word	0x0800ce28
 80021a8:	0800ce18 	.word	0x0800ce18
 80021ac:	00000000 	.word	0x00000000

080021b0 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 80021b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b4:	ed2d 8b02 	vpush	{d8}
 80021b8:	b09f      	sub	sp, #124	; 0x7c
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80021be:	2100      	movs	r1, #0
 80021c0:	489d      	ldr	r0, [pc, #628]	; (8002438 <LeftMotor+0x288>)
 80021c2:	f004 feb1 	bl	8006f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80021c6:	2104      	movs	r1, #4
 80021c8:	489b      	ldr	r0, [pc, #620]	; (8002438 <LeftMotor+0x288>)
 80021ca:	f004 fead 	bl	8006f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80021ce:	210c      	movs	r1, #12
 80021d0:	489a      	ldr	r0, [pc, #616]	; (800243c <LeftMotor+0x28c>)
 80021d2:	f004 fea9 	bl	8006f28 <HAL_TIM_PWM_Start>


  int16_t value;


  while(!is_calibrated){
 80021d6:	e002      	b.n	80021de <LeftMotor+0x2e>
	  osDelay(100);
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	f007 fc13 	bl	8009a04 <osDelay>
  while(!is_calibrated){
 80021de:	4b98      	ldr	r3, [pc, #608]	; (8002440 <LeftMotor+0x290>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f8      	beq.n	80021d8 <LeftMotor+0x28>
  }
  htim1.Instance ->CCR4 = 148.4;
 80021e6:	4b95      	ldr	r3, [pc, #596]	; (800243c <LeftMotor+0x28c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2294      	movs	r2, #148	; 0x94
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40




  double target_angle = 90;
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	4b94      	ldr	r3, [pc, #592]	; (8002444 <LeftMotor+0x294>)
 80021f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  uint8_t target_is_before = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  double left_pwm = 0, right_pwm = 0;
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double PID_dist;

  double target_dist = 0;
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double slip_x = 0, slip_y = 0;
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  char sbuf[10];
  t_heading = current_angle;
 800223a:	4b83      	ldr	r3, [pc, #524]	; (8002448 <LeftMotor+0x298>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc72 	bl	8000b2c <__aeabi_d2iz>
 8002248:	4603      	mov	r3, r0
 800224a:	4a80      	ldr	r2, [pc, #512]	; (800244c <LeftMotor+0x29c>)
 800224c:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA (&huart3, Buffer, 5);
 800224e:	2205      	movs	r2, #5
 8002250:	497f      	ldr	r1, [pc, #508]	; (8002450 <LeftMotor+0x2a0>)
 8002252:	4880      	ldr	r0, [pc, #512]	; (8002454 <LeftMotor+0x2a4>)
 8002254:	f006 fa49 	bl	80086ea <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;){
	  // Loop until next command is received
	  do{
		  osDelay(100);
 8002258:	2064      	movs	r0, #100	; 0x64
 800225a:	f007 fbd3 	bl	8009a04 <osDelay>
	  }while(Buffer[0] == 'd');
 800225e:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <LeftMotor+0x2a0>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d0f8      	beq.n	8002258 <LeftMotor+0xa8>
	  // Convert instruction value to int
	  value = (Buffer[2] - '0')*100 + (Buffer[3] - '0')*10 + Buffer[4] - '0';
 8002266:	4b7a      	ldr	r3, [pc, #488]	; (8002450 <LeftMotor+0x2a0>)
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	3b30      	subs	r3, #48	; 0x30
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4413      	add	r3, r2
 8002274:	461a      	mov	r2, r3
 8002276:	0091      	lsls	r1, r2, #2
 8002278:	461a      	mov	r2, r3
 800227a:	460b      	mov	r3, r1
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <LeftMotor+0x2a0>)
 8002284:	78db      	ldrb	r3, [r3, #3]
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	b29b      	uxth	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	0089      	lsls	r1, r1, #2
 800228e:	440b      	add	r3, r1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	b29b      	uxth	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b29a      	uxth	r2, r3
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <LeftMotor+0x2a0>)
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b30      	subs	r3, #48	; 0x30
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//	  dist = value;

	  // For counter-clockwise turning
	  if((Buffer[0]=='F' && Buffer[1]=='L')||(Buffer[0]=='B' && Buffer[1]=='R')){
 80022aa:	4b69      	ldr	r3, [pc, #420]	; (8002450 <LeftMotor+0x2a0>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b46      	cmp	r3, #70	; 0x46
 80022b0:	d103      	bne.n	80022ba <LeftMotor+0x10a>
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <LeftMotor+0x2a0>)
 80022b4:	785b      	ldrb	r3, [r3, #1]
 80022b6:	2b4c      	cmp	r3, #76	; 0x4c
 80022b8:	d007      	beq.n	80022ca <LeftMotor+0x11a>
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <LeftMotor+0x2a0>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b42      	cmp	r3, #66	; 0x42
 80022c0:	d117      	bne.n	80022f2 <LeftMotor+0x142>
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <LeftMotor+0x2a0>)
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b52      	cmp	r3, #82	; 0x52
 80022c8:	d113      	bne.n	80022f2 <LeftMotor+0x142>
		  t_heading = t_heading - value;	// Set target heading
 80022ca:	4b60      	ldr	r3, [pc, #384]	; (800244c <LeftMotor+0x29c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	4a5d      	ldr	r2, [pc, #372]	; (800244c <LeftMotor+0x29c>)
 80022d6:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 80022d8:	4b5c      	ldr	r3, [pc, #368]	; (800244c <LeftMotor+0x29c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f921 	bl	8000524 <__aeabi_i2d>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  target_is_before = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80022f0:	e030      	b.n	8002354 <LeftMotor+0x1a4>
	  }
	  // For clockwise turning
	  else if ((Buffer[0]=='F' && Buffer[1]=='R')||(Buffer[0]=='B' && Buffer[1]=='L')){
 80022f2:	4b57      	ldr	r3, [pc, #348]	; (8002450 <LeftMotor+0x2a0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b46      	cmp	r3, #70	; 0x46
 80022f8:	d103      	bne.n	8002302 <LeftMotor+0x152>
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <LeftMotor+0x2a0>)
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	2b52      	cmp	r3, #82	; 0x52
 8002300:	d007      	beq.n	8002312 <LeftMotor+0x162>
 8002302:	4b53      	ldr	r3, [pc, #332]	; (8002450 <LeftMotor+0x2a0>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b42      	cmp	r3, #66	; 0x42
 8002308:	d117      	bne.n	800233a <LeftMotor+0x18a>
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <LeftMotor+0x2a0>)
 800230c:	785b      	ldrb	r3, [r3, #1]
 800230e:	2b4c      	cmp	r3, #76	; 0x4c
 8002310:	d113      	bne.n	800233a <LeftMotor+0x18a>
		  t_heading = t_heading + value;
 8002312:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8002316:	4b4d      	ldr	r3, [pc, #308]	; (800244c <LeftMotor+0x29c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <LeftMotor+0x29c>)
 800231e:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 8002320:	4b4a      	ldr	r3, [pc, #296]	; (800244c <LeftMotor+0x29c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f8fd 	bl	8000524 <__aeabi_i2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		  target_is_before = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002338:	e00c      	b.n	8002354 <LeftMotor+0x1a4>
	  }
	  else if(Buffer[1] == 'W'){
 800233a:	4b45      	ldr	r3, [pc, #276]	; (8002450 <LeftMotor+0x2a0>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b57      	cmp	r3, #87	; 0x57
 8002340:	d108      	bne.n	8002354 <LeftMotor+0x1a4>
		  target_angle = (double)t_heading;
 8002342:	4b42      	ldr	r3, [pc, #264]	; (800244c <LeftMotor+0x29c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8ec 	bl	8000524 <__aeabi_i2d>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  }

	  // Set servo values
	  if(Buffer[1] == 'L'){
 8002354:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <LeftMotor+0x2a0>)
 8002356:	785b      	ldrb	r3, [r3, #1]
 8002358:	2b4c      	cmp	r3, #76	; 0x4c
 800235a:	d104      	bne.n	8002366 <LeftMotor+0x1b6>
		  htim1.Instance ->CCR4 = 91;
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <LeftMotor+0x28c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	225b      	movs	r2, #91	; 0x5b
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
 8002364:	e00c      	b.n	8002380 <LeftMotor+0x1d0>
	  }
	  else if(Buffer[1] == 'R'){
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <LeftMotor+0x2a0>)
 8002368:	785b      	ldrb	r3, [r3, #1]
 800236a:	2b52      	cmp	r3, #82	; 0x52
 800236c:	d104      	bne.n	8002378 <LeftMotor+0x1c8>
		  htim1.Instance ->CCR4 = 240;
 800236e:	4b33      	ldr	r3, [pc, #204]	; (800243c <LeftMotor+0x28c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	22f0      	movs	r2, #240	; 0xf0
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
 8002376:	e003      	b.n	8002380 <LeftMotor+0x1d0>
	  }
	  else{
		  htim1.Instance ->CCR4 = 148.4;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <LeftMotor+0x28c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2294      	movs	r2, #148	; 0x94
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  // Wait for servo to turn
	  osDelay(550);
 8002380:	f240 2026 	movw	r0, #550	; 0x226
 8002384:	f007 fb3e 	bl	8009a04 <osDelay>
	  // If currently running turning instruction
	  if(Buffer[1] != 'W'){
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <LeftMotor+0x2a0>)
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	2b57      	cmp	r3, #87	; 0x57
 800238e:	f000 8400 	beq.w	8002b92 <LeftMotor+0x9e2>
		  PID_out = 0;
 8002392:	4931      	ldr	r1, [pc, #196]	; (8002458 <LeftMotor+0x2a8>)
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9c1 2300 	strd	r2, r3, [r1]
		  // Set PID Controller (constants are Kp,Ki,Kd)
		  PID(&Turning_PID, &current_angle, &PID_out, &target_angle, 0.021, 0.1, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80023a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a4:	2200      	movs	r2, #0
 80023a6:	9201      	str	r2, [sp, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	9200      	str	r2, [sp, #0]
 80023ac:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8002420 <LeftMotor+0x270>
 80023b0:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002428 <LeftMotor+0x278>
 80023b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002430 <LeftMotor+0x280>
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <LeftMotor+0x2a8>)
 80023ba:	4923      	ldr	r1, [pc, #140]	; (8002448 <LeftMotor+0x298>)
 80023bc:	4827      	ldr	r0, [pc, #156]	; (800245c <LeftMotor+0x2ac>)
 80023be:	f001 fb4f 	bl	8003a60 <PID>

		  PID_SetMode(&Turning_PID, _PID_MODE_AUTOMATIC);
 80023c2:	2101      	movs	r1, #1
 80023c4:	4825      	ldr	r0, [pc, #148]	; (800245c <LeftMotor+0x2ac>)
 80023c6:	f001 fc81 	bl	8003ccc <PID_SetMode>
		  PID_SetSampleTime(&Turning_PID, 10);
 80023ca:	210a      	movs	r1, #10
 80023cc:	4823      	ldr	r0, [pc, #140]	; (800245c <LeftMotor+0x2ac>)
 80023ce:	f001 fdf1 	bl	8003fb4 <PID_SetSampleTime>
		  PID_SetOutputLimits(&Turning_PID, -1.0f+min_pwm_turn, 1.0f-min_pwm_turn);
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <LeftMotor+0x2b0>)
 80023d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <LeftMotor+0x2b4>)
 80023de:	f7fd ff53 	bl	8000288 <__aeabi_dsub>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ec43 2b18 	vmov	d8, r2, r3
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <LeftMotor+0x2b0>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f04f 0000 	mov.w	r0, #0
 80023f4:	491b      	ldr	r1, [pc, #108]	; (8002464 <LeftMotor+0x2b4>)
 80023f6:	f7fd ff47 	bl	8000288 <__aeabi_dsub>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ec43 2b17 	vmov	d7, r2, r3
 8002402:	eeb0 1a47 	vmov.f32	s2, s14
 8002406:	eef0 1a67 	vmov.f32	s3, s15
 800240a:	eeb0 0a48 	vmov.f32	s0, s16
 800240e:	eef0 0a68 	vmov.f32	s1, s17
 8002412:	4812      	ldr	r0, [pc, #72]	; (800245c <LeftMotor+0x2ac>)
 8002414:	f001 fc78 	bl	8003d08 <PID_SetOutputLimits>
	  //	  sprintf(sbuf, "%d", (int)(-1.0f*(double)target_is_before)*(target_angle - current_angle));
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, sizeof(sbuf), HAL_MAX_DELAY);
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

		  // Loop until robot's heading passes target heading
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 8002418:	e37b      	b.n	8002b12 <LeftMotor+0x962>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
	...
 8002428:	9999999a 	.word	0x9999999a
 800242c:	3fb99999 	.word	0x3fb99999
 8002430:	24dd2f1b 	.word	0x24dd2f1b
 8002434:	3f958106 	.word	0x3f958106
 8002438:	20004a58 	.word	0x20004a58
 800243c:	20004d3c 	.word	0x20004d3c
 8002440:	200000e8 	.word	0x200000e8
 8002444:	40568000 	.word	0x40568000
 8002448:	200000d8 	.word	0x200000d8
 800244c:	200000d4 	.word	0x200000d4
 8002450:	20004e00 	.word	0x20004e00
 8002454:	20004b6c 	.word	0x20004b6c
 8002458:	20004c50 	.word	0x20004c50
 800245c:	20004c58 	.word	0x20004c58
 8002460:	20000020 	.word	0x20000020
 8002464:	3ff00000 	.word	0x3ff00000
			  // Blinking LED for checking program crashes
			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246c:	48a6      	ldr	r0, [pc, #664]	; (8002708 <LeftMotor+0x558>)
 800246e:	f003 f868 	bl	8005542 <HAL_GPIO_TogglePin>

			  // Compute next pwm val
			  PID_Compute(&Turning_PID);
 8002472:	48a6      	ldr	r0, [pc, #664]	; (800270c <LeftMotor+0x55c>)
 8002474:	f001 fb40 	bl	8003af8 <PID_Compute>

			  taskENTER_CRITICAL();
 8002478:	f009 fcd4 	bl	800be24 <vPortEnterCritical>
			  // If steering left
			  if(Buffer[1] == 'L')
 800247c:	4ba4      	ldr	r3, [pc, #656]	; (8002710 <LeftMotor+0x560>)
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	2b4c      	cmp	r3, #76	; 0x4c
 8002482:	f040 819f 	bne.w	80027c4 <LeftMotor+0x614>
			  {
				  // Forward
				  if(PID_out < 0){
 8002486:	4ba3      	ldr	r3, [pc, #652]	; (8002714 <LeftMotor+0x564>)
 8002488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	f7fe fb22 	bl	8000adc <__aeabi_dcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80bd 	beq.w	800261a <LeftMotor+0x46a>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2104      	movs	r1, #4
 80024a4:	489c      	ldr	r0, [pc, #624]	; (8002718 <LeftMotor+0x568>)
 80024a6:	f003 f833 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	2108      	movs	r1, #8
 80024ae:	489a      	ldr	r0, [pc, #616]	; (8002718 <LeftMotor+0x568>)
 80024b0:	f003 f82e 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2120      	movs	r1, #32
 80024b8:	4897      	ldr	r0, [pc, #604]	; (8002718 <LeftMotor+0x568>)
 80024ba:	f003 f829 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2110      	movs	r1, #16
 80024c2:	4895      	ldr	r0, [pc, #596]	; (8002718 <LeftMotor+0x568>)
 80024c4:	f003 f824 	bl	8005510 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 80024c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f819 	bl	8000504 <__aeabi_ui2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	4990      	ldr	r1, [pc, #576]	; (800271c <LeftMotor+0x56c>)
 80024dc:	f7fd fed4 	bl	8000288 <__aeabi_dsub>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	f7fd fece 	bl	800028c <__adddf3>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4690      	mov	r8, r2
 80024f6:	4699      	mov	r9, r3
 80024f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024fc:	4b88      	ldr	r3, [pc, #544]	; (8002720 <LeftMotor+0x570>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fec1 	bl	8000288 <__aeabi_dsub>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4640      	mov	r0, r8
 800250c:	4649      	mov	r1, r9
 800250e:	f7fe f873 	bl	80005f8 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b81      	ldr	r3, [pc, #516]	; (8002724 <LeftMotor+0x574>)
 8002520:	f7fe fadc 	bl	8000adc <__aeabi_dcmplt>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d031      	beq.n	800258e <LeftMotor+0x3de>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*min_pwm_turn);
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <LeftMotor+0x578>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ffe8 	bl	8000504 <__aeabi_ui2d>
 8002534:	4b7d      	ldr	r3, [pc, #500]	; (800272c <LeftMotor+0x57c>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f85d 	bl	80005f8 <__aeabi_dmul>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <LeftMotor+0x580>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f854 	bl	80005f8 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4977      	ldr	r1, [pc, #476]	; (8002734 <LeftMotor+0x584>)
 8002556:	680e      	ldr	r6, [r1, #0]
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb0e 	bl	8000b7c <__aeabi_d2uiz>
 8002560:	4603      	mov	r3, r0
 8002562:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*min_pwm_turn);
 8002564:	4b70      	ldr	r3, [pc, #448]	; (8002728 <LeftMotor+0x578>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffcb 	bl	8000504 <__aeabi_ui2d>
 800256e:	4b70      	ldr	r3, [pc, #448]	; (8002730 <LeftMotor+0x580>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe f840 	bl	80005f8 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	496d      	ldr	r1, [pc, #436]	; (8002734 <LeftMotor+0x584>)
 800257e:	680e      	ldr	r6, [r1, #0]
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fafa 	bl	8000b7c <__aeabi_d2uiz>
 8002588:	4603      	mov	r3, r0
 800258a:	63b3      	str	r3, [r6, #56]	; 0x38
 800258c:	e2bc      	b.n	8002b08 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*(-PID_out+min_pwm_turn));
 800258e:	4b66      	ldr	r3, [pc, #408]	; (8002728 <LeftMotor+0x578>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffb6 	bl	8000504 <__aeabi_ui2d>
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <LeftMotor+0x57c>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f7fe f82b 	bl	80005f8 <__aeabi_dmul>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4690      	mov	r8, r2
 80025a8:	4699      	mov	r9, r3
 80025aa:	4b61      	ldr	r3, [pc, #388]	; (8002730 <LeftMotor+0x580>)
 80025ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b0:	4b58      	ldr	r3, [pc, #352]	; (8002714 <LeftMotor+0x564>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd fe67 	bl	8000288 <__aeabi_dsub>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4640      	mov	r0, r8
 80025c0:	4649      	mov	r1, r9
 80025c2:	f7fe f819 	bl	80005f8 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	495a      	ldr	r1, [pc, #360]	; (8002734 <LeftMotor+0x584>)
 80025cc:	680e      	ldr	r6, [r1, #0]
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fad3 	bl	8000b7c <__aeabi_d2uiz>
 80025d6:	4603      	mov	r3, r0
 80025d8:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*(-PID_out+min_pwm_turn));
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <LeftMotor+0x578>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ff90 	bl	8000504 <__aeabi_ui2d>
 80025e4:	4680      	mov	r8, r0
 80025e6:	4689      	mov	r9, r1
 80025e8:	4b51      	ldr	r3, [pc, #324]	; (8002730 <LeftMotor+0x580>)
 80025ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <LeftMotor+0x564>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fd fe48 	bl	8000288 <__aeabi_dsub>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4640      	mov	r0, r8
 80025fe:	4649      	mov	r1, r9
 8002600:	f7fd fffa 	bl	80005f8 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	494a      	ldr	r1, [pc, #296]	; (8002734 <LeftMotor+0x584>)
 800260a:	680e      	ldr	r6, [r1, #0]
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fab4 	bl	8000b7c <__aeabi_d2uiz>
 8002614:	4603      	mov	r3, r0
 8002616:	63b3      	str	r3, [r6, #56]	; 0x38
 8002618:	e276      	b.n	8002b08 <LeftMotor+0x958>
					  }
				  }
				  // Backwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	2108      	movs	r1, #8
 800261e:	483e      	ldr	r0, [pc, #248]	; (8002718 <LeftMotor+0x568>)
 8002620:	f002 ff76 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	2104      	movs	r1, #4
 8002628:	483b      	ldr	r0, [pc, #236]	; (8002718 <LeftMotor+0x568>)
 800262a:	f002 ff71 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	2110      	movs	r1, #16
 8002632:	4839      	ldr	r0, [pc, #228]	; (8002718 <LeftMotor+0x568>)
 8002634:	f002 ff6c 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002638:	2201      	movs	r2, #1
 800263a:	2120      	movs	r1, #32
 800263c:	4836      	ldr	r0, [pc, #216]	; (8002718 <LeftMotor+0x568>)
 800263e:	f002 ff67 	bl	8005510 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff5c 	bl	8000504 <__aeabi_ui2d>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	f04f 0000 	mov.w	r0, #0
 8002654:	4931      	ldr	r1, [pc, #196]	; (800271c <LeftMotor+0x56c>)
 8002656:	f7fd fe17 	bl	8000288 <__aeabi_dsub>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	f7fd fe11 	bl	800028c <__adddf3>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4690      	mov	r8, r2
 8002670:	4699      	mov	r9, r3
 8002672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002676:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <LeftMotor+0x570>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd fe04 	bl	8000288 <__aeabi_dsub>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4640      	mov	r0, r8
 8002686:	4649      	mov	r1, r9
 8002688:	f7fd ffb6 	bl	80005f8 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <LeftMotor+0x574>)
 800269a:	f7fe fa1f 	bl	8000adc <__aeabi_dcmplt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d049      	beq.n	8002738 <LeftMotor+0x588>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*min_pwm_turn);
 80026a4:	4b20      	ldr	r3, [pc, #128]	; (8002728 <LeftMotor+0x578>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff2b 	bl	8000504 <__aeabi_ui2d>
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <LeftMotor+0x57c>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fd ffa0 	bl	80005f8 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <LeftMotor+0x580>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd ff97 	bl	80005f8 <__aeabi_dmul>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4919      	ldr	r1, [pc, #100]	; (8002734 <LeftMotor+0x584>)
 80026d0:	680e      	ldr	r6, [r1, #0]
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa51 	bl	8000b7c <__aeabi_d2uiz>
 80026da:	4603      	mov	r3, r0
 80026dc:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*min_pwm_turn);
 80026de:	4b12      	ldr	r3, [pc, #72]	; (8002728 <LeftMotor+0x578>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd ff0e 	bl	8000504 <__aeabi_ui2d>
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <LeftMotor+0x580>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ff83 	bl	80005f8 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	490f      	ldr	r1, [pc, #60]	; (8002734 <LeftMotor+0x584>)
 80026f8:	680e      	ldr	r6, [r1, #0]
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa3d 	bl	8000b7c <__aeabi_d2uiz>
 8002702:	4603      	mov	r3, r0
 8002704:	63b3      	str	r3, [r6, #56]	; 0x38
 8002706:	e1ff      	b.n	8002b08 <LeftMotor+0x958>
 8002708:	40021000 	.word	0x40021000
 800270c:	20004c58 	.word	0x20004c58
 8002710:	20004e00 	.word	0x20004e00
 8002714:	20004c50 	.word	0x20004c50
 8002718:	40020000 	.word	0x40020000
 800271c:	3fe00000 	.word	0x3fe00000
 8002720:	200000d8 	.word	0x200000d8
 8002724:	40240000 	.word	0x40240000
 8002728:	20000012 	.word	0x20000012
 800272c:	20000008 	.word	0x20000008
 8002730:	20000020 	.word	0x20000020
 8002734:	20004a58 	.word	0x20004a58
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*left_ratio*(PID_out+min_pwm_turn));
 8002738:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <LeftMotor+0x7b4>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fee1 	bl	8000504 <__aeabi_ui2d>
 8002742:	4b89      	ldr	r3, [pc, #548]	; (8002968 <LeftMotor+0x7b8>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd ff56 	bl	80005f8 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4690      	mov	r8, r2
 8002752:	4699      	mov	r9, r3
 8002754:	4b85      	ldr	r3, [pc, #532]	; (800296c <LeftMotor+0x7bc>)
 8002756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275a:	4b85      	ldr	r3, [pc, #532]	; (8002970 <LeftMotor+0x7c0>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd fd94 	bl	800028c <__adddf3>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4640      	mov	r0, r8
 800276a:	4649      	mov	r1, r9
 800276c:	f7fd ff44 	bl	80005f8 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	497f      	ldr	r1, [pc, #508]	; (8002974 <LeftMotor+0x7c4>)
 8002776:	680e      	ldr	r6, [r1, #0]
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe f9fe 	bl	8000b7c <__aeabi_d2uiz>
 8002780:	4603      	mov	r3, r0
 8002782:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*(PID_out+min_pwm_turn));
 8002784:	4b77      	ldr	r3, [pc, #476]	; (8002964 <LeftMotor+0x7b4>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd febb 	bl	8000504 <__aeabi_ui2d>
 800278e:	4680      	mov	r8, r0
 8002790:	4689      	mov	r9, r1
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <LeftMotor+0x7bc>)
 8002794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002798:	4b75      	ldr	r3, [pc, #468]	; (8002970 <LeftMotor+0x7c0>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd fd75 	bl	800028c <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd ff25 	bl	80005f8 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4970      	ldr	r1, [pc, #448]	; (8002974 <LeftMotor+0x7c4>)
 80027b4:	680e      	ldr	r6, [r1, #0]
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe f9df 	bl	8000b7c <__aeabi_d2uiz>
 80027be:	4603      	mov	r3, r0
 80027c0:	63b3      	str	r3, [r6, #56]	; 0x38
 80027c2:	e1a1      	b.n	8002b08 <LeftMotor+0x958>
					  }
				  }
			  }
			  // If steering right
			  else if(Buffer[1] == 'R')
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <LeftMotor+0x7c8>)
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b52      	cmp	r3, #82	; 0x52
 80027ca:	f040 819d 	bne.w	8002b08 <LeftMotor+0x958>
			  {
				  // Backwards
				  if(PID_out < 0){
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <LeftMotor+0x7bc>)
 80027d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f7fe f97e 	bl	8000adc <__aeabi_dcmplt>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80d4 	beq.w	8002990 <LeftMotor+0x7e0>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2108      	movs	r1, #8
 80027ec:	4863      	ldr	r0, [pc, #396]	; (800297c <LeftMotor+0x7cc>)
 80027ee:	f002 fe8f 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2104      	movs	r1, #4
 80027f6:	4861      	ldr	r0, [pc, #388]	; (800297c <LeftMotor+0x7cc>)
 80027f8:	f002 fe8a 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2110      	movs	r1, #16
 8002800:	485e      	ldr	r0, [pc, #376]	; (800297c <LeftMotor+0x7cc>)
 8002802:	f002 fe85 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002806:	2201      	movs	r2, #1
 8002808:	2120      	movs	r1, #32
 800280a:	485c      	ldr	r0, [pc, #368]	; (800297c <LeftMotor+0x7cc>)
 800280c:	f002 fe80 	bl	8005510 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002810:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe75 	bl	8000504 <__aeabi_ui2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	4957      	ldr	r1, [pc, #348]	; (8002980 <LeftMotor+0x7d0>)
 8002824:	f7fd fd30 	bl	8000288 <__aeabi_dsub>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	f7fd fd2a 	bl	800028c <__adddf3>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4690      	mov	r8, r2
 800283e:	4699      	mov	r9, r3
 8002840:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <LeftMotor+0x7d4>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fd1d 	bl	8000288 <__aeabi_dsub>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4640      	mov	r0, r8
 8002854:	4649      	mov	r1, r9
 8002856:	f7fd fecf 	bl	80005f8 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b48      	ldr	r3, [pc, #288]	; (8002988 <LeftMotor+0x7d8>)
 8002868:	f7fe f938 	bl	8000adc <__aeabi_dcmplt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d031      	beq.n	80028d6 <LeftMotor+0x726>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*min_pwm_turn);
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <LeftMotor+0x7b4>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe44 	bl	8000504 <__aeabi_ui2d>
 800287c:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <LeftMotor+0x7c0>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd feb9 	bl	80005f8 <__aeabi_dmul>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	493a      	ldr	r1, [pc, #232]	; (8002974 <LeftMotor+0x7c4>)
 800288c:	680e      	ldr	r6, [r1, #0]
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f973 	bl	8000b7c <__aeabi_d2uiz>
 8002896:	4603      	mov	r3, r0
 8002898:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*min_pwm_turn);
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <LeftMotor+0x7b4>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe30 	bl	8000504 <__aeabi_ui2d>
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <LeftMotor+0x7dc>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fea5 	bl	80005f8 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	4b2e      	ldr	r3, [pc, #184]	; (8002970 <LeftMotor+0x7c0>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe9c 	bl	80005f8 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	492b      	ldr	r1, [pc, #172]	; (8002974 <LeftMotor+0x7c4>)
 80028c6:	680e      	ldr	r6, [r1, #0]
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f956 	bl	8000b7c <__aeabi_d2uiz>
 80028d0:	4603      	mov	r3, r0
 80028d2:	63b3      	str	r3, [r6, #56]	; 0x38
 80028d4:	e118      	b.n	8002b08 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*(-PID_out+min_pwm_turn));
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <LeftMotor+0x7b4>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fd fe12 	bl	8000504 <__aeabi_ui2d>
 80028e0:	4680      	mov	r8, r0
 80028e2:	4689      	mov	r9, r1
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <LeftMotor+0x7c0>)
 80028e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <LeftMotor+0x7bc>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fcca 	bl	8000288 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4640      	mov	r0, r8
 80028fa:	4649      	mov	r1, r9
 80028fc:	f7fd fe7c 	bl	80005f8 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	491b      	ldr	r1, [pc, #108]	; (8002974 <LeftMotor+0x7c4>)
 8002906:	680e      	ldr	r6, [r1, #0]
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f936 	bl	8000b7c <__aeabi_d2uiz>
 8002910:	4603      	mov	r3, r0
 8002912:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*(-PID_out+min_pwm_turn));
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <LeftMotor+0x7b4>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fd fdf3 	bl	8000504 <__aeabi_ui2d>
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <LeftMotor+0x7dc>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fe68 	bl	80005f8 <__aeabi_dmul>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4690      	mov	r8, r2
 800292e:	4699      	mov	r9, r3
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <LeftMotor+0x7c0>)
 8002932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <LeftMotor+0x7bc>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fca4 	bl	8000288 <__aeabi_dsub>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4640      	mov	r0, r8
 8002946:	4649      	mov	r1, r9
 8002948:	f7fd fe56 	bl	80005f8 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4908      	ldr	r1, [pc, #32]	; (8002974 <LeftMotor+0x7c4>)
 8002952:	680e      	ldr	r6, [r1, #0]
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f7fe f910 	bl	8000b7c <__aeabi_d2uiz>
 800295c:	4603      	mov	r3, r0
 800295e:	63b3      	str	r3, [r6, #56]	; 0x38
 8002960:	e0d2      	b.n	8002b08 <LeftMotor+0x958>
 8002962:	bf00      	nop
 8002964:	20000012 	.word	0x20000012
 8002968:	20000008 	.word	0x20000008
 800296c:	20004c50 	.word	0x20004c50
 8002970:	20000020 	.word	0x20000020
 8002974:	20004a58 	.word	0x20004a58
 8002978:	20004e00 	.word	0x20004e00
 800297c:	40020000 	.word	0x40020000
 8002980:	3fe00000 	.word	0x3fe00000
 8002984:	200000d8 	.word	0x200000d8
 8002988:	40240000 	.word	0x40240000
 800298c:	20000000 	.word	0x20000000
					  }
				  }
				  // Forwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	2104      	movs	r1, #4
 8002994:	489c      	ldr	r0, [pc, #624]	; (8002c08 <LeftMotor+0xa58>)
 8002996:	f002 fdbb 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800299a:	2201      	movs	r2, #1
 800299c:	2108      	movs	r1, #8
 800299e:	489a      	ldr	r0, [pc, #616]	; (8002c08 <LeftMotor+0xa58>)
 80029a0:	f002 fdb6 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2120      	movs	r1, #32
 80029a8:	4897      	ldr	r0, [pc, #604]	; (8002c08 <LeftMotor+0xa58>)
 80029aa:	f002 fdb1 	bl	8005510 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80029ae:	2201      	movs	r2, #1
 80029b0:	2110      	movs	r1, #16
 80029b2:	4895      	ldr	r0, [pc, #596]	; (8002c08 <LeftMotor+0xa58>)
 80029b4:	f002 fdac 	bl	8005510 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 80029b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fda1 	bl	8000504 <__aeabi_ui2d>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	f04f 0000 	mov.w	r0, #0
 80029ca:	4990      	ldr	r1, [pc, #576]	; (8002c0c <LeftMotor+0xa5c>)
 80029cc:	f7fd fc5c 	bl	8000288 <__aeabi_dsub>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	f7fd fc56 	bl	800028c <__adddf3>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4690      	mov	r8, r2
 80029e6:	4699      	mov	r9, r3
 80029e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <LeftMotor+0xa60>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fc49 	bl	8000288 <__aeabi_dsub>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4640      	mov	r0, r8
 80029fc:	4649      	mov	r1, r9
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b81      	ldr	r3, [pc, #516]	; (8002c14 <LeftMotor+0xa64>)
 8002a10:	f7fe f864 	bl	8000adc <__aeabi_dcmplt>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d031      	beq.n	8002a7e <LeftMotor+0x8ce>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*min_pwm_turn);
 8002a1a:	4b7f      	ldr	r3, [pc, #508]	; (8002c18 <LeftMotor+0xa68>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd70 	bl	8000504 <__aeabi_ui2d>
 8002a24:	4b7d      	ldr	r3, [pc, #500]	; (8002c1c <LeftMotor+0xa6c>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fde5 	bl	80005f8 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	497b      	ldr	r1, [pc, #492]	; (8002c20 <LeftMotor+0xa70>)
 8002a34:	680e      	ldr	r6, [r1, #0]
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f89f 	bl	8000b7c <__aeabi_d2uiz>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*min_pwm_turn);
 8002a42:	4b75      	ldr	r3, [pc, #468]	; (8002c18 <LeftMotor+0xa68>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd5c 	bl	8000504 <__aeabi_ui2d>
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <LeftMotor+0xa74>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fdd1 	bl	80005f8 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	; (8002c1c <LeftMotor+0xa6c>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fdc8 	bl	80005f8 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	496c      	ldr	r1, [pc, #432]	; (8002c20 <LeftMotor+0xa70>)
 8002a6e:	680e      	ldr	r6, [r1, #0]
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f882 	bl	8000b7c <__aeabi_d2uiz>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	63b3      	str	r3, [r6, #56]	; 0x38
 8002a7c:	e044      	b.n	8002b08 <LeftMotor+0x958>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_Turn*(PID_out+min_pwm_turn));
 8002a7e:	4b66      	ldr	r3, [pc, #408]	; (8002c18 <LeftMotor+0xa68>)
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd3e 	bl	8000504 <__aeabi_ui2d>
 8002a88:	4680      	mov	r8, r0
 8002a8a:	4689      	mov	r9, r1
 8002a8c:	4b66      	ldr	r3, [pc, #408]	; (8002c28 <LeftMotor+0xa78>)
 8002a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <LeftMotor+0xa6c>)
 8002a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a98:	f7fd fbf8 	bl	800028c <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	f7fd fda8 	bl	80005f8 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	495c      	ldr	r1, [pc, #368]	; (8002c20 <LeftMotor+0xa70>)
 8002aae:	680e      	ldr	r6, [r1, #0]
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f862 	bl	8000b7c <__aeabi_d2uiz>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_Turn*right_ratio*(PID_out+min_pwm_turn));
 8002abc:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <LeftMotor+0xa68>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fd1f 	bl	8000504 <__aeabi_ui2d>
 8002ac6:	4b57      	ldr	r3, [pc, #348]	; (8002c24 <LeftMotor+0xa74>)
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	f7fd fd94 	bl	80005f8 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4690      	mov	r8, r2
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <LeftMotor+0xa78>)
 8002ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ade:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <LeftMotor+0xa6c>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd fbd2 	bl	800028c <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4640      	mov	r0, r8
 8002aee:	4649      	mov	r1, r9
 8002af0:	f7fd fd82 	bl	80005f8 <__aeabi_dmul>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4949      	ldr	r1, [pc, #292]	; (8002c20 <LeftMotor+0xa70>)
 8002afa:	680e      	ldr	r6, [r1, #0]
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fe f83c 	bl	8000b7c <__aeabi_d2uiz>
 8002b04:	4603      	mov	r3, r0
 8002b06:	63b3      	str	r3, [r6, #56]	; 0x38
					  }
				  }
			  }
			  taskEXIT_CRITICAL();
 8002b08:	f009 f9bc 	bl	800be84 <vPortExitCritical>

			  // Loops every 10ms
			  osDelayUntil(pdMS_TO_TICKS(10));
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	f006 ff94 	bl	8009a3a <osDelayUntil>
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 8002b12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fcf4 	bl	8000504 <__aeabi_ui2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	4939      	ldr	r1, [pc, #228]	; (8002c0c <LeftMotor+0xa5c>)
 8002b26:	f7fd fbaf 	bl	8000288 <__aeabi_dsub>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	f7fd fba9 	bl	800028c <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4690      	mov	r8, r2
 8002b40:	4699      	mov	r9, r3
 8002b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b46:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <LeftMotor+0xa60>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fb9c 	bl	8000288 <__aeabi_dsub>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4640      	mov	r0, r8
 8002b56:	4649      	mov	r1, r9
 8002b58:	f7fd fd4e 	bl	80005f8 <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	f7fd ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f ac78 	bne.w	8002468 <LeftMotor+0x2b8>
		  }
		  // Set both motor's speed to 0
		  taskENTER_CRITICAL();
 8002b78:	f009 f954 	bl	800be24 <vPortEnterCritical>
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <LeftMotor+0xa70>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8002b84:	4b26      	ldr	r3, [pc, #152]	; (8002c20 <LeftMotor+0xa70>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
		  taskEXIT_CRITICAL();
 8002b8c:	f009 f97a 	bl	800be84 <vPortExitCritical>
 8002b90:	e384      	b.n	800329c <LeftMotor+0x10ec>
	  }
	  // If currently running straight line instruction
	  else{
		  // Reset traveled distance to 0
		  travel_dist = 0;
 8002b92:	4926      	ldr	r1, [pc, #152]	; (8002c2c <LeftMotor+0xa7c>)
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_position = 0;
 8002ba0:	4b23      	ldr	r3, [pc, #140]	; (8002c30 <LeftMotor+0xa80>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
		  if(Buffer[0] == 'F'){
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <LeftMotor+0xa84>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b46      	cmp	r3, #70	; 0x46
 8002bac:	d144      	bne.n	8002c38 <LeftMotor+0xa88>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2104      	movs	r1, #4
 8002bb2:	4815      	ldr	r0, [pc, #84]	; (8002c08 <LeftMotor+0xa58>)
 8002bb4:	f002 fcac 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002bb8:	2201      	movs	r2, #1
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4812      	ldr	r0, [pc, #72]	; (8002c08 <LeftMotor+0xa58>)
 8002bbe:	f002 fca7 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	4810      	ldr	r0, [pc, #64]	; (8002c08 <LeftMotor+0xa58>)
 8002bc8:	f002 fca2 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2110      	movs	r1, #16
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <LeftMotor+0xa58>)
 8002bd2:	f002 fc9d 	bl	8005510 <HAL_GPIO_WritePin>
			  target_is_before = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = (double)value * 100.0/102.5;
			  target_dist = (double)value * 1.01;
 8002bdc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fc9f 	bl	8000524 <__aeabi_i2d>
 8002be6:	a306      	add	r3, pc, #24	; (adr r3, 8002c00 <LeftMotor+0xa50>)
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f7fd fd04 	bl	80005f8 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002bf8:	e04e      	b.n	8002c98 <LeftMotor+0xae8>
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	c28f5c29 	.word	0xc28f5c29
 8002c04:	3ff028f5 	.word	0x3ff028f5
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	3fe00000 	.word	0x3fe00000
 8002c10:	200000d8 	.word	0x200000d8
 8002c14:	40240000 	.word	0x40240000
 8002c18:	20000012 	.word	0x20000012
 8002c1c:	20000020 	.word	0x20000020
 8002c20:	20004a58 	.word	0x20004a58
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20004c50 	.word	0x20004c50
 8002c2c:	200000f0 	.word	0x200000f0
 8002c30:	200000f8 	.word	0x200000f8
 8002c34:	20004e00 	.word	0x20004e00
//			  }
//			  else{
//				  target_dist = (double)value * 100.0/105.0;
//			  }
		  }
		  else if(Buffer[0] == 'B'){
 8002c38:	4b93      	ldr	r3, [pc, #588]	; (8002e88 <LeftMotor+0xcd8>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b42      	cmp	r3, #66	; 0x42
 8002c3e:	d12b      	bne.n	8002c98 <LeftMotor+0xae8>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2108      	movs	r1, #8
 8002c44:	4891      	ldr	r0, [pc, #580]	; (8002e8c <LeftMotor+0xcdc>)
 8002c46:	f002 fc63 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	488f      	ldr	r0, [pc, #572]	; (8002e8c <LeftMotor+0xcdc>)
 8002c50:	f002 fc5e 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2110      	movs	r1, #16
 8002c58:	488c      	ldr	r0, [pc, #560]	; (8002e8c <LeftMotor+0xcdc>)
 8002c5a:	f002 fc59 	bl	8005510 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2120      	movs	r1, #32
 8002c62:	488a      	ldr	r0, [pc, #552]	; (8002e8c <LeftMotor+0xcdc>)
 8002c64:	f002 fc54 	bl	8005510 <HAL_GPIO_WritePin>
			  target_is_before = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = -(double)value * 100.0/102.5;
			  target_dist = -(double)value * 1.01;
 8002c6e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc56 	bl	8000524 <__aeabi_i2d>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002c82:	a375      	add	r3, pc, #468	; (adr r3, 8002e58 <LeftMotor+0xca8>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd fcb4 	bl	80005f8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	e9c7 2306 	strd	r2, r3, [r7, #24]
//			  }
//			  else{
//				  target_dist = -(double)value * 100.0/105.0;
//			  }
		  }
		  PID_out = 0;
 8002c98:	497d      	ldr	r1, [pc, #500]	; (8002e90 <LeftMotor+0xce0>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	e9c1 2300 	strd	r2, r3, [r1]
		  PID_dist = 0;
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  // Set straight distance PID controller (constants are Kp,Ki,Kd)
		  PID(&Straight_PID, &travel_dist, &PID_dist, &target_dist, 0.02, 0.07, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002cb2:	f107 0318 	add.w	r3, r7, #24
 8002cb6:	f107 0220 	add.w	r2, r7, #32
 8002cba:	2100      	movs	r1, #0
 8002cbc:	9101      	str	r1, [sp, #4]
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	9100      	str	r1, [sp, #0]
 8002cc2:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8002e60 <LeftMotor+0xcb0>
 8002cc6:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002e68 <LeftMotor+0xcb8>
 8002cca:	ed9f 0b69 	vldr	d0, [pc, #420]	; 8002e70 <LeftMotor+0xcc0>
 8002cce:	4971      	ldr	r1, [pc, #452]	; (8002e94 <LeftMotor+0xce4>)
 8002cd0:	4871      	ldr	r0, [pc, #452]	; (8002e98 <LeftMotor+0xce8>)
 8002cd2:	f000 fec5 	bl	8003a60 <PID>

		  PID_SetMode(&Straight_PID, _PID_MODE_AUTOMATIC);
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	486f      	ldr	r0, [pc, #444]	; (8002e98 <LeftMotor+0xce8>)
 8002cda:	f000 fff7 	bl	8003ccc <PID_SetMode>
		  PID_SetSampleTime(&Straight_PID, 10);
 8002cde:	210a      	movs	r1, #10
 8002ce0:	486d      	ldr	r0, [pc, #436]	; (8002e98 <LeftMotor+0xce8>)
 8002ce2:	f001 f967 	bl	8003fb4 <PID_SetSampleTime>
		  PID_SetOutputLimits(&Straight_PID, -1.0f+min_pwm_ratio, 1.0f-min_pwm_ratio);
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <LeftMotor+0xcec>)
 8002ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <LeftMotor+0xcf0>)
 8002cf2:	f7fd fac9 	bl	8000288 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	ec43 2b18 	vmov	d8, r2, r3
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <LeftMotor+0xcec>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	4965      	ldr	r1, [pc, #404]	; (8002ea0 <LeftMotor+0xcf0>)
 8002d0a:	f7fd fabd 	bl	8000288 <__aeabi_dsub>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	ec43 2b17 	vmov	d7, r2, r3
 8002d16:	eeb0 1a47 	vmov.f32	s2, s14
 8002d1a:	eef0 1a67 	vmov.f32	s3, s15
 8002d1e:	eeb0 0a48 	vmov.f32	s0, s16
 8002d22:	eef0 0a68 	vmov.f32	s1, s17
 8002d26:	485c      	ldr	r0, [pc, #368]	; (8002e98 <LeftMotor+0xce8>)
 8002d28:	f000 ffee 	bl	8003d08 <PID_SetOutputLimits>

		  // Set straight line error correction PID controller (constants are Kp,Ki,Kd)
		  PID(&StraightErr_PID, &current_angle, &PID_out, &target_angle, 0.05, 0.02, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 8002d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d30:	2200      	movs	r2, #0
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	9200      	str	r2, [sp, #0]
 8002d38:	ed9f 2b49 	vldr	d2, [pc, #292]	; 8002e60 <LeftMotor+0xcb0>
 8002d3c:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8002e70 <LeftMotor+0xcc0>
 8002d40:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002e78 <LeftMotor+0xcc8>
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <LeftMotor+0xce0>)
 8002d46:	4957      	ldr	r1, [pc, #348]	; (8002ea4 <LeftMotor+0xcf4>)
 8002d48:	4857      	ldr	r0, [pc, #348]	; (8002ea8 <LeftMotor+0xcf8>)
 8002d4a:	f000 fe89 	bl	8003a60 <PID>

		  PID_SetMode(&StraightErr_PID, _PID_MODE_AUTOMATIC);
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4855      	ldr	r0, [pc, #340]	; (8002ea8 <LeftMotor+0xcf8>)
 8002d52:	f000 ffbb 	bl	8003ccc <PID_SetMode>
		  PID_SetSampleTime(&StraightErr_PID, 10);
 8002d56:	210a      	movs	r1, #10
 8002d58:	4853      	ldr	r0, [pc, #332]	; (8002ea8 <LeftMotor+0xcf8>)
 8002d5a:	f001 f92b 	bl	8003fb4 <PID_SetSampleTime>
		  PID_SetOutputLimits(&StraightErr_PID, -max_pwm_dif, max_pwm_dif);
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <LeftMotor+0xcfc>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	4692      	mov	sl, r2
 8002d66:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002d6a:	4b50      	ldr	r3, [pc, #320]	; (8002eac <LeftMotor+0xcfc>)
 8002d6c:	ed93 7b00 	vldr	d7, [r3]
 8002d70:	eeb0 1a47 	vmov.f32	s2, s14
 8002d74:	eef0 1a67 	vmov.f32	s3, s15
 8002d78:	ec4b ab10 	vmov	d0, sl, fp
 8002d7c:	484a      	ldr	r0, [pc, #296]	; (8002ea8 <LeftMotor+0xcf8>)
 8002d7e:	f000 ffc3 	bl	8003d08 <PID_SetOutputLimits>

		  // Start motor speed to 0
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)0);
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <LeftMotor+0xd00>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)0);
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <LeftMotor+0xd00>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38

		  // Loop until traveled distance exceeds target distance (target_is_before is to account for backward movements)
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 8002d92:	e252      	b.n	800323a <LeftMotor+0x108a>
//			  sprintf(sbuf, "%7d", (int)target_pulse);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

			  // Comput PID values
			  PID_Compute(&Straight_PID);
 8002d94:	4840      	ldr	r0, [pc, #256]	; (8002e98 <LeftMotor+0xce8>)
 8002d96:	f000 feaf 	bl	8003af8 <PID_Compute>
			  PID_Compute(&StraightErr_PID);
 8002d9a:	4843      	ldr	r0, [pc, #268]	; (8002ea8 <LeftMotor+0xcf8>)
 8002d9c:	f000 feac 	bl	8003af8 <PID_Compute>
			  if(Buffer[0] == 'F')
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <LeftMotor+0xcd8>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b46      	cmp	r3, #70	; 0x46
 8002da6:	f040 808b 	bne.w	8002ec0 <LeftMotor+0xd10>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (target_angle - current_angle)*3;
 8002daa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dae:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <LeftMotor+0xcf4>)
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fa68 	bl	8000288 <__aeabi_dsub>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <LeftMotor+0xd04>)
 8002dc6:	f7fd fc17 	bl	80005f8 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	a32b      	add	r3, pc, #172	; (adr r3, 8002e80 <LeftMotor+0xcd0>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fa58 	bl	800028c <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <LeftMotor+0xd08>)
 8002de2:	680e      	ldr	r6, [r1, #0]
 8002de4:	4610      	mov	r0, r2
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7fd fec8 	bl	8000b7c <__aeabi_d2uiz>
 8002dec:	4603      	mov	r3, r0
 8002dee:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1+PID_out);
 8002df0:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <LeftMotor+0xd0c>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fb85 	bl	8000504 <__aeabi_ui2d>
 8002dfa:	4680      	mov	r8, r0
 8002dfc:	4689      	mov	r9, r1
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <LeftMotor+0xce0>)
 8002e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <LeftMotor+0xcf0>)
 8002e0a:	f7fd fa3f 	bl	800028c <__adddf3>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4640      	mov	r0, r8
 8002e14:	4649      	mov	r1, r9
 8002e16:	f7fd fbef 	bl	80005f8 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1-PID_out);
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <LeftMotor+0xd0c>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb6c 	bl	8000504 <__aeabi_ui2d>
 8002e2c:	4680      	mov	r8, r0
 8002e2e:	4689      	mov	r9, r1
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <LeftMotor+0xce0>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	4919      	ldr	r1, [pc, #100]	; (8002ea0 <LeftMotor+0xcf0>)
 8002e3c:	f7fd fa24 	bl	8000288 <__aeabi_dsub>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4640      	mov	r0, r8
 8002e46:	4649      	mov	r1, r9
 8002e48:	f7fd fbd6 	bl	80005f8 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002e54:	e08d      	b.n	8002f72 <LeftMotor+0xdc2>
 8002e56:	bf00      	nop
 8002e58:	c28f5c29 	.word	0xc28f5c29
 8002e5c:	3ff028f5 	.word	0x3ff028f5
	...
 8002e68:	1eb851ec 	.word	0x1eb851ec
 8002e6c:	3fb1eb85 	.word	0x3fb1eb85
 8002e70:	47ae147b 	.word	0x47ae147b
 8002e74:	3f947ae1 	.word	0x3f947ae1
 8002e78:	9999999a 	.word	0x9999999a
 8002e7c:	3fa99999 	.word	0x3fa99999
 8002e80:	cccccccd 	.word	0xcccccccd
 8002e84:	40628ccc 	.word	0x40628ccc
 8002e88:	20004e00 	.word	0x20004e00
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	20004c50 	.word	0x20004c50
 8002e94:	200000f0 	.word	0x200000f0
 8002e98:	20004cc8 	.word	0x20004cc8
 8002e9c:	20000018 	.word	0x20000018
 8002ea0:	3ff00000 	.word	0x3ff00000
 8002ea4:	200000d8 	.word	0x200000d8
 8002ea8:	20004d88 	.word	0x20004d88
 8002eac:	20000028 	.word	0x20000028
 8002eb0:	20004a58 	.word	0x20004a58
 8002eb4:	40080000 	.word	0x40080000
 8002eb8:	20004d3c 	.word	0x20004d3c
 8002ebc:	20000010 	.word	0x20000010
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1+PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1-PID_out));
			  }
			  else if(Buffer[0] == 'B')
 8002ec0:	4bb5      	ldr	r3, [pc, #724]	; (8003198 <LeftMotor+0xfe8>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b42      	cmp	r3, #66	; 0x42
 8002ec6:	d154      	bne.n	8002f72 <LeftMotor+0xdc2>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (current_angle - target_angle)*3;
 8002ec8:	4bb4      	ldr	r3, [pc, #720]	; (800319c <LeftMotor+0xfec>)
 8002eca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ed2:	f7fd f9d9 	bl	8000288 <__aeabi_dsub>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4baf      	ldr	r3, [pc, #700]	; (80031a0 <LeftMotor+0xff0>)
 8002ee4:	f7fd fb88 	bl	80005f8 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	a3a7      	add	r3, pc, #668	; (adr r3, 8003190 <LeftMotor+0xfe0>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd f9c9 	bl	800028c <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	49a9      	ldr	r1, [pc, #676]	; (80031a4 <LeftMotor+0xff4>)
 8002f00:	680e      	ldr	r6, [r1, #0]
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe39 	bl	8000b7c <__aeabi_d2uiz>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1-PID_out);
 8002f0e:	4ba6      	ldr	r3, [pc, #664]	; (80031a8 <LeftMotor+0xff8>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd faf6 	bl	8000504 <__aeabi_ui2d>
 8002f18:	4680      	mov	r8, r0
 8002f1a:	4689      	mov	r9, r1
 8002f1c:	4ba3      	ldr	r3, [pc, #652]	; (80031ac <LeftMotor+0xffc>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	49a2      	ldr	r1, [pc, #648]	; (80031b0 <LeftMotor+0x1000>)
 8002f28:	f7fd f9ae 	bl	8000288 <__aeabi_dsub>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd fb60 	bl	80005f8 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1+PID_out);
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <LeftMotor+0xff8>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fadd 	bl	8000504 <__aeabi_ui2d>
 8002f4a:	4680      	mov	r8, r0
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	4b97      	ldr	r3, [pc, #604]	; (80031ac <LeftMotor+0xffc>)
 8002f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	4b95      	ldr	r3, [pc, #596]	; (80031b0 <LeftMotor+0x1000>)
 8002f5a:	f7fd f997 	bl	800028c <__adddf3>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4640      	mov	r0, r8
 8002f64:	4649      	mov	r1, r9
 8002f66:	f7fd fb47 	bl	80005f8 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1-PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1+PID_out));
			  }

			  taskENTER_CRITICAL();
 8002f72:	f008 ff57 	bl	800be24 <vPortEnterCritical>
			  if(PID_dist < 0){
 8002f76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f7fd fdab 	bl	8000adc <__aeabi_dcmplt>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 8099 	beq.w	80030c0 <LeftMotor+0xf10>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2108      	movs	r1, #8
 8002f92:	4888      	ldr	r0, [pc, #544]	; (80031b4 <LeftMotor+0x1004>)
 8002f94:	f002 fabc 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	4885      	ldr	r0, [pc, #532]	; (80031b4 <LeftMotor+0x1004>)
 8002f9e:	f002 fab7 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	4883      	ldr	r0, [pc, #524]	; (80031b4 <LeftMotor+0x1004>)
 8002fa8:	f002 fab2 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002fac:	2201      	movs	r2, #1
 8002fae:	2120      	movs	r1, #32
 8002fb0:	4880      	ldr	r0, [pc, #512]	; (80031b4 <LeftMotor+0x1004>)
 8002fb2:	f002 faad 	bl	8005510 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<8){
 8002fb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd faa2 	bl	8000504 <__aeabi_ui2d>
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <LeftMotor+0x1008>)
 8002fc6:	f7fd f95f 	bl	8000288 <__aeabi_dsub>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	f7fd f959 	bl	800028c <__adddf3>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4690      	mov	r8, r2
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fe6:	4b75      	ldr	r3, [pc, #468]	; (80031bc <LeftMotor+0x100c>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f7fd f94c 	bl	8000288 <__aeabi_dsub>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd fafe 	bl	80005f8 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b6d      	ldr	r3, [pc, #436]	; (80031c0 <LeftMotor+0x1010>)
 800300a:	f7fd fd67 	bl	8000adc <__aeabi_dcmplt>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d022      	beq.n	800305a <LeftMotor+0xeaa>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8003014:	4b6b      	ldr	r3, [pc, #428]	; (80031c4 <LeftMotor+0x1014>)
 8003016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800301e:	f7fd faeb 	bl	80005f8 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4968      	ldr	r1, [pc, #416]	; (80031c8 <LeftMotor+0x1018>)
 8003028:	680e      	ldr	r6, [r1, #0]
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fda5 	bl	8000b7c <__aeabi_d2uiz>
 8003032:	4603      	mov	r3, r0
 8003034:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <LeftMotor+0x1014>)
 8003038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800303c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003040:	f7fd fada 	bl	80005f8 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	495f      	ldr	r1, [pc, #380]	; (80031c8 <LeftMotor+0x1018>)
 800304a:	680e      	ldr	r6, [r1, #0]
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	f7fd fd94 	bl	8000b7c <__aeabi_d2uiz>
 8003054:	4603      	mov	r3, r0
 8003056:	63b3      	str	r3, [r6, #56]	; 0x38
 8003058:	e0ea      	b.n	8003230 <LeftMotor+0x1080>
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio-PID_dist));
 800305a:	4b5a      	ldr	r3, [pc, #360]	; (80031c4 <LeftMotor+0x1014>)
 800305c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003060:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003064:	f7fd f910 	bl	8000288 <__aeabi_dsub>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003074:	f7fd fac0 	bl	80005f8 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4952      	ldr	r1, [pc, #328]	; (80031c8 <LeftMotor+0x1018>)
 800307e:	680e      	ldr	r6, [r1, #0]
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f7fd fd7a 	bl	8000b7c <__aeabi_d2uiz>
 8003088:	4603      	mov	r3, r0
 800308a:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio-PID_dist));
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <LeftMotor+0x1014>)
 800308e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003096:	f7fd f8f7 	bl	8000288 <__aeabi_dsub>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4610      	mov	r0, r2
 80030a0:	4619      	mov	r1, r3
 80030a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030a6:	f7fd faa7 	bl	80005f8 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4946      	ldr	r1, [pc, #280]	; (80031c8 <LeftMotor+0x1018>)
 80030b0:	680e      	ldr	r6, [r1, #0]
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd61 	bl	8000b7c <__aeabi_d2uiz>
 80030ba:	4603      	mov	r3, r0
 80030bc:	63b3      	str	r3, [r6, #56]	; 0x38
 80030be:	e0b7      	b.n	8003230 <LeftMotor+0x1080>
				  }

			  }
			  else{
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2104      	movs	r1, #4
 80030c4:	483b      	ldr	r0, [pc, #236]	; (80031b4 <LeftMotor+0x1004>)
 80030c6:	f002 fa23 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80030ca:	2201      	movs	r2, #1
 80030cc:	2108      	movs	r1, #8
 80030ce:	4839      	ldr	r0, [pc, #228]	; (80031b4 <LeftMotor+0x1004>)
 80030d0:	f002 fa1e 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2120      	movs	r1, #32
 80030d8:	4836      	ldr	r0, [pc, #216]	; (80031b4 <LeftMotor+0x1004>)
 80030da:	f002 fa19 	bl	8005510 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80030de:	2201      	movs	r2, #1
 80030e0:	2110      	movs	r1, #16
 80030e2:	4834      	ldr	r0, [pc, #208]	; (80031b4 <LeftMotor+0x1004>)
 80030e4:	f002 fa14 	bl	8005510 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<8){
 80030e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa09 	bl	8000504 <__aeabi_ui2d>
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <LeftMotor+0x1008>)
 80030f8:	f7fd f8c6 	bl	8000288 <__aeabi_dsub>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	f7fd f8c0 	bl	800028c <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4690      	mov	r8, r2
 8003112:	4699      	mov	r9, r3
 8003114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <LeftMotor+0x100c>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd f8b3 	bl	8000288 <__aeabi_dsub>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4640      	mov	r0, r8
 8003128:	4649      	mov	r1, r9
 800312a:	f7fd fa65 	bl	80005f8 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <LeftMotor+0x1010>)
 800313c:	f7fd fcce 	bl	8000adc <__aeabi_dcmplt>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d042      	beq.n	80031cc <LeftMotor+0x101c>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <LeftMotor+0x1014>)
 8003148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800314c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003150:	f7fd fa52 	bl	80005f8 <__aeabi_dmul>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	491b      	ldr	r1, [pc, #108]	; (80031c8 <LeftMotor+0x1018>)
 800315a:	680e      	ldr	r6, [r1, #0]
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fd0c 	bl	8000b7c <__aeabi_d2uiz>
 8003164:	4603      	mov	r3, r0
 8003166:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <LeftMotor+0x1014>)
 800316a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800316e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003172:	f7fd fa41 	bl	80005f8 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4913      	ldr	r1, [pc, #76]	; (80031c8 <LeftMotor+0x1018>)
 800317c:	680e      	ldr	r6, [r1, #0]
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fcfb 	bl	8000b7c <__aeabi_d2uiz>
 8003186:	4603      	mov	r3, r0
 8003188:	63b3      	str	r3, [r6, #56]	; 0x38
 800318a:	e051      	b.n	8003230 <LeftMotor+0x1080>
 800318c:	f3af 8000 	nop.w
 8003190:	cccccccd 	.word	0xcccccccd
 8003194:	40628ccc 	.word	0x40628ccc
 8003198:	20004e00 	.word	0x20004e00
 800319c:	200000d8 	.word	0x200000d8
 80031a0:	40080000 	.word	0x40080000
 80031a4:	20004d3c 	.word	0x20004d3c
 80031a8:	20000010 	.word	0x20000010
 80031ac:	20004c50 	.word	0x20004c50
 80031b0:	3ff00000 	.word	0x3ff00000
 80031b4:	40020000 	.word	0x40020000
 80031b8:	3fe00000 	.word	0x3fe00000
 80031bc:	200000f0 	.word	0x200000f0
 80031c0:	40200000 	.word	0x40200000
 80031c4:	20000018 	.word	0x20000018
 80031c8:	20004a58 	.word	0x20004a58
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio+PID_dist));
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <LeftMotor+0x1114>)
 80031ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d6:	f7fd f859 	bl	800028c <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80031e6:	f7fd fa07 	bl	80005f8 <__aeabi_dmul>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4936      	ldr	r1, [pc, #216]	; (80032c8 <LeftMotor+0x1118>)
 80031f0:	680e      	ldr	r6, [r1, #0]
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fcc1 	bl	8000b7c <__aeabi_d2uiz>
 80031fa:	4603      	mov	r3, r0
 80031fc:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio+PID_dist));
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <LeftMotor+0x1114>)
 8003200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003204:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003208:	f7fd f840 	bl	800028c <__adddf3>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003218:	f7fd f9ee 	bl	80005f8 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4929      	ldr	r1, [pc, #164]	; (80032c8 <LeftMotor+0x1118>)
 8003222:	680e      	ldr	r6, [r1, #0]
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fca8 	bl	8000b7c <__aeabi_d2uiz>
 800322c:	4603      	mov	r3, r0
 800322e:	63b3      	str	r3, [r6, #56]	; 0x38
				  }
			  }
			  taskEXIT_CRITICAL();
 8003230:	f008 fe28 	bl	800be84 <vPortExitCritical>
			  osDelayUntil(pdMS_TO_TICKS(10));
 8003234:	200a      	movs	r0, #10
 8003236:	f006 fc00 	bl	8009a3a <osDelayUntil>
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 800323a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f960 	bl	8000504 <__aeabi_ui2d>
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <LeftMotor+0x111c>)
 800324a:	f7fd f81d 	bl	8000288 <__aeabi_dsub>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	f7fd f817 	bl	800028c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <LeftMotor+0x1120>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f7fd f80a 	bl	8000288 <__aeabi_dsub>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fd f9bc 	bl	80005f8 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4610      	mov	r0, r2
 8003286:	4619      	mov	r1, r3
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	f7fd fc42 	bl	8000b18 <__aeabi_dcmpgt>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f47f ad7c 	bne.w	8002d94 <LeftMotor+0xbe4>
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_S*0.5);
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*0.5);
////			  HAL_Delay(1);
////		  }
//	  }
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);		// Sets both wheel to 0 speed
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <LeftMotor+0x1118>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <LeftMotor+0x1118>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
	  Buffer[0] = 'd';		// Sets start of instruction buffer to invalid command so the stm doesn't repeat itself
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <LeftMotor+0x1124>)
 80032ae:	2264      	movs	r2, #100	; 0x64
 80032b0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,"R", sizeof("R"), HAL_MAX_DELAY);	// Sends ready signal to RPi
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	2202      	movs	r2, #2
 80032b8:	4907      	ldr	r1, [pc, #28]	; (80032d8 <LeftMotor+0x1128>)
 80032ba:	4808      	ldr	r0, [pc, #32]	; (80032dc <LeftMotor+0x112c>)
 80032bc:	f005 f983 	bl	80085c6 <HAL_UART_Transmit>
  for(;;){
 80032c0:	f7fe bfca 	b.w	8002258 <LeftMotor+0xa8>
 80032c4:	20000018 	.word	0x20000018
 80032c8:	20004a58 	.word	0x20004a58
 80032cc:	3fe00000 	.word	0x3fe00000
 80032d0:	200000f0 	.word	0x200000f0
 80032d4:	20004e00 	.word	0x20004e00
 80032d8:	0800ce3c 	.word	0x0800ce3c
 80032dc:	20004b6c 	.word	0x20004b6c

080032e0 <GyroFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroFunc */
void GyroFunc(void *argument)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08e      	sub	sp, #56	; 0x38
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroFunc */
  uint8_t* status = IMU_Initialise(&imu, &hi2c1, &huart3);	// Initialize gyro
 80032e8:	4a87      	ldr	r2, [pc, #540]	; (8003508 <GyroFunc+0x228>)
 80032ea:	4988      	ldr	r1, [pc, #544]	; (800350c <GyroFunc+0x22c>)
 80032ec:	4888      	ldr	r0, [pc, #544]	; (8003510 <GyroFunc+0x230>)
 80032ee:	f7fd fe31 	bl	8000f54 <IMU_Initialise>
 80032f2:	62b8      	str	r0, [r7, #40]	; 0x28
  uint8_t dispBuff[20];

  // Calibrate gyroscope
  taskENTER_CRITICAL();
 80032f4:	f008 fd96 	bl	800be24 <vPortEnterCritical>
  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4985      	ldr	r1, [pc, #532]	; (8003514 <GyroFunc+0x234>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f009 f8dc 	bl	800c4bc <siprintf>
  OLED_ShowString(10,30,dispBuff);
 8003304:	f107 0314 	add.w	r3, r7, #20
 8003308:	461a      	mov	r2, r3
 800330a:	211e      	movs	r1, #30
 800330c:	200a      	movs	r0, #10
 800330e:	f000 faad 	bl	800386c <OLED_ShowString>
//  OLED_Refresh_Gram();
  osDelay(2000);
 8003312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003316:	f006 fb75 	bl	8009a04 <osDelay>
  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 800331a:	ed9f 0b77 	vldr	d0, [pc, #476]	; 80034f8 <GyroFunc+0x218>
 800331e:	487c      	ldr	r0, [pc, #496]	; (8003510 <GyroFunc+0x230>)
 8003320:	f7fe f98a 	bl	8001638 <Gyro_calibrateHeading>
  osDelay(2000);
 8003324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003328:	f006 fb6c 	bl	8009a04 <osDelay>
  taskEXIT_CRITICAL();
 800332c:	f008 fdaa 	bl	800be84 <vPortExitCritical>
  is_calibrated = 1;	// Set finish calibration flag to start running other task
 8003330:	4b79      	ldr	r3, [pc, #484]	; (8003518 <GyroFunc+0x238>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
  char sbuf[10];

  int32_t encoder_prev = -1, encoder_cur = -1, dif = 0;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003346:	213c      	movs	r1, #60	; 0x3c
 8003348:	4874      	ldr	r0, [pc, #464]	; (800351c <GyroFunc+0x23c>)
 800334a:	f003 ffaa 	bl	80072a2 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  for(;;)
  {
	  // Read gyro value
	  taskENTER_CRITICAL();
 800334e:	f008 fd69 	bl	800be24 <vPortEnterCritical>
	  IMU_GyroReadHeading(&imu);
 8003352:	486f      	ldr	r0, [pc, #444]	; (8003510 <GyroFunc+0x230>)
 8003354:	f7fe f81a 	bl	800138c <IMU_GyroReadHeading>
	  taskEXIT_CRITICAL();
 8003358:	f008 fd94 	bl	800be84 <vPortExitCritical>

	  // Update heading values
	  current_gyro = current_gyro + imu.gyro[2];		// Manual gyro offset
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <GyroFunc+0x230>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f8f1 	bl	8000548 <__aeabi_f2d>
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <GyroFunc+0x240>)
 8003368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336c:	f7fc ff8e 	bl	800028c <__adddf3>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	496a      	ldr	r1, [pc, #424]	; (8003520 <GyroFunc+0x240>)
 8003376:	e9c1 2300 	strd	r2, r3, [r1]
	  current_angle = current_gyro*1.0f;		// Increase if robot turns too much
 800337a:	4b69      	ldr	r3, [pc, #420]	; (8003520 <GyroFunc+0x240>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	4968      	ldr	r1, [pc, #416]	; (8003524 <GyroFunc+0x244>)
 8003382:	e9c1 2300 	strd	r2, r3, [r1]

	  // Check if it's the first time running
	  if(encoder_prev == -1 || encoder_cur == -1){
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d003      	beq.n	8003396 <GyroFunc+0xb6>
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d106      	bne.n	80033a4 <GyroFunc+0xc4>
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <GyroFunc+0x23c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
		  encoder_prev = encoder_cur;
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
 80033a2:	e033      	b.n	800340c <GyroFunc+0x12c>
	  }
	  else{
		  encoder_prev = encoder_cur;
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 80033a8:	4b5c      	ldr	r3, [pc, #368]	; (800351c <GyroFunc+0x23c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	633b      	str	r3, [r7, #48]	; 0x30
		  // Deal with the encoder value wrapping around at 65535
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80033b0:	4b5a      	ldr	r3, [pc, #360]	; (800351c <GyroFunc+0x23c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	d110      	bne.n	80033e0 <GyroFunc+0x100>
			  if(encoder_cur <= encoder_prev){
 80033be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dc04      	bgt.n	80033d0 <GyroFunc+0xf0>
				  dif = encoder_prev - encoder_cur;
 80033c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ce:	e017      	b.n	8003400 <GyroFunc+0x120>
			  }
			  else{
				  dif = encoder_prev + (65535 - encoder_cur);
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033d6:	33ff      	adds	r3, #255	; 0xff
 80033d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033da:	4413      	add	r3, r2
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033de:	e00f      	b.n	8003400 <GyroFunc+0x120>
			  }
		  }
		  else{
			  if(encoder_cur >= encoder_prev){
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e4:	429a      	cmp	r2, r3
 80033e6:	db04      	blt.n	80033f2 <GyroFunc+0x112>
				  dif = encoder_prev - encoder_cur;
 80033e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f0:	e006      	b.n	8003400 <GyroFunc+0x120>
			  }
			  else{
				  dif = encoder_prev - (65535 + encoder_cur);
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80033f8:	33ff      	adds	r3, #255	; 0xff
 80033fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
		  }
		  encoder_position = encoder_position + dif;
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <GyroFunc+0x248>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	4413      	add	r3, r2
 8003408:	4a47      	ldr	r2, [pc, #284]	; (8003528 <GyroFunc+0x248>)
 800340a:	6013      	str	r3, [r2, #0]
	  }
//	  travel_dist = (double)encoder_position * 0.01310615989;		// Edit constant to calibrate straight line distance
	  travel_dist = (double)encoder_position * 0.01308996939;
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <GyroFunc+0x248>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f887 	bl	8000524 <__aeabi_i2d>
 8003416:	a33a      	add	r3, pc, #232	; (adr r3, 8003500 <GyroFunc+0x220>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f7fd f8ec 	bl	80005f8 <__aeabi_dmul>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4941      	ldr	r1, [pc, #260]	; (800352c <GyroFunc+0x24c>)
 8003426:	e9c1 2300 	strd	r2, r3, [r1]
	  sprintf(dispBuff, "%5d        ", (int)current_angle*1000);	// Prints current heading angle (x1000)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <GyroFunc+0x244>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fb7a 	bl	8000b2c <__aeabi_d2iz>
 8003438:	4603      	mov	r3, r0
 800343a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800343e:	fb02 f203 	mul.w	r2, r2, r3
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	493a      	ldr	r1, [pc, #232]	; (8003530 <GyroFunc+0x250>)
 8003448:	4618      	mov	r0, r3
 800344a:	f009 f837 	bl	800c4bc <siprintf>
	  OLED_ShowString(10,30,dispBuff);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	461a      	mov	r2, r3
 8003454:	211e      	movs	r1, #30
 8003456:	200a      	movs	r0, #10
 8003458:	f000 fa08 	bl	800386c <OLED_ShowString>

	  if(!HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)){
 800345c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003460:	4834      	ldr	r0, [pc, #208]	; (8003534 <GyroFunc+0x254>)
 8003462:	f002 f83d 	bl	80054e0 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d140      	bne.n	80034ee <GyroFunc+0x20e>
		  encoder_position = 0;
 800346c:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <GyroFunc+0x248>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
		  travel_dist = 0;
 8003472:	492e      	ldr	r1, [pc, #184]	; (800352c <GyroFunc+0x24c>)
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_prev = -1;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = -1;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
		  dif = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  current_gyro = 0;
 8003490:	4923      	ldr	r1, [pc, #140]	; (8003520 <GyroFunc+0x240>)
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9c1 2300 	strd	r2, r3, [r1]
		  current_angle = 0;
 800349e:	4921      	ldr	r1, [pc, #132]	; (8003524 <GyroFunc+0x244>)
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	e9c1 2300 	strd	r2, r3, [r1]
		  t_heading = 0;
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <GyroFunc+0x258>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
		  taskENTER_CRITICAL();
 80034b2:	f008 fcb7 	bl	800be24 <vPortEnterCritical>
		  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4916      	ldr	r1, [pc, #88]	; (8003514 <GyroFunc+0x234>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f008 fffd 	bl	800c4bc <siprintf>
		  OLED_ShowString(10,30,dispBuff);
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	461a      	mov	r2, r3
 80034c8:	211e      	movs	r1, #30
 80034ca:	200a      	movs	r0, #10
 80034cc:	f000 f9ce 	bl	800386c <OLED_ShowString>
		  osDelay(2000);
 80034d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034d4:	f006 fa96 	bl	8009a04 <osDelay>
		  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 80034d8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80034f8 <GyroFunc+0x218>
 80034dc:	480c      	ldr	r0, [pc, #48]	; (8003510 <GyroFunc+0x230>)
 80034de:	f7fe f8ab 	bl	8001638 <Gyro_calibrateHeading>
		  osDelay(2000);
 80034e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80034e6:	f006 fa8d 	bl	8009a04 <osDelay>
		  taskEXIT_CRITICAL();
 80034ea:	f008 fccb 	bl	800be84 <vPortExitCritical>
////	  sprintf(sbuf, "%9ul", (DWT->CYCCNT));
////	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 9, HAL_MAX_DELAY);
//	  sprintf(sbuf, "\r\n");
//	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 2, HAL_MAX_DELAY);

      osDelayUntil(pdMS_TO_TICKS(10));
 80034ee:	200a      	movs	r0, #10
 80034f0:	f006 faa3 	bl	8009a3a <osDelayUntil>
	  taskENTER_CRITICAL();
 80034f4:	e72b      	b.n	800334e <GyroFunc+0x6e>
 80034f6:	bf00      	nop
 80034f8:	00000000 	.word	0x00000000
 80034fc:	40350000 	.word	0x40350000
 8003500:	f37c4b99 	.word	0xf37c4b99
 8003504:	3f8acee9 	.word	0x3f8acee9
 8003508:	20004b6c 	.word	0x20004b6c
 800350c:	20004bb0 	.word	0x20004bb0
 8003510:	20004ae8 	.word	0x20004ae8
 8003514:	0800ce40 	.word	0x0800ce40
 8003518:	200000e8 	.word	0x200000e8
 800351c:	20004e08 	.word	0x20004e08
 8003520:	200000e0 	.word	0x200000e0
 8003524:	200000d8 	.word	0x200000d8
 8003528:	200000f8 	.word	0x200000f8
 800352c:	200000f0 	.word	0x200000f0
 8003530:	0800ce50 	.word	0x0800ce50
 8003534:	40020c00 	.word	0x40020c00
 8003538:	200000d4 	.word	0x200000d4

0800353c <sonic_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sonic_sensor */
void sonic_sensor(void *argument)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sonic_sensor */
  uint8_t hello[20];
  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 8003544:	f7fe f974 	bl	8001830 <HCSR04_Read>
	sprintf(hello, "Sonic:%5d\0",Distance);
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <sonic_sensor+0x34>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	4908      	ldr	r1, [pc, #32]	; (8003574 <sonic_sensor+0x38>)
 8003552:	4618      	mov	r0, r3
 8003554:	f008 ffb2 	bl	800c4bc <siprintf>
	OLED_ShowString(10,40,hello);
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	461a      	mov	r2, r3
 800355e:	2128      	movs	r1, #40	; 0x28
 8003560:	200a      	movs	r0, #10
 8003562:	f000 f983 	bl	800386c <OLED_ShowString>
    osDelay(200);
 8003566:	20c8      	movs	r0, #200	; 0xc8
 8003568:	f006 fa4c 	bl	8009a04 <osDelay>
	HCSR04_Read();
 800356c:	e7ea      	b.n	8003544 <sonic_sensor+0x8>
 800356e:	bf00      	nop
 8003570:	20000108 	.word	0x20000108
 8003574:	0800ce5c 	.word	0x0800ce5c

08003578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800357c:	b672      	cpsid	i
}
 800357e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003580:	e7fe      	b.n	8003580 <Error_Handler+0x8>
	...

08003584 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	460a      	mov	r2, r1
 800358e:	71fb      	strb	r3, [r7, #7]
 8003590:	4613      	mov	r3, r2
 8003592:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 8003594:	79bb      	ldrb	r3, [r7, #6]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d106      	bne.n	80035a8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 800359a:	2201      	movs	r2, #1
 800359c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035a0:	481c      	ldr	r0, [pc, #112]	; (8003614 <OLED_WR_Byte+0x90>)
 80035a2:	f001 ffb5 	bl	8005510 <HAL_GPIO_WritePin>
 80035a6:	e005      	b.n	80035b4 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ae:	4819      	ldr	r0, [pc, #100]	; (8003614 <OLED_WR_Byte+0x90>)
 80035b0:	f001 ffae 	bl	8005510 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e01e      	b.n	80035f8 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 80035ba:	2200      	movs	r2, #0
 80035bc:	2120      	movs	r1, #32
 80035be:	4815      	ldr	r0, [pc, #84]	; (8003614 <OLED_WR_Byte+0x90>)
 80035c0:	f001 ffa6 	bl	8005510 <HAL_GPIO_WritePin>
		if(dat & 0x80)
 80035c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	da05      	bge.n	80035d8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80035cc:	2201      	movs	r2, #1
 80035ce:	2140      	movs	r1, #64	; 0x40
 80035d0:	4810      	ldr	r0, [pc, #64]	; (8003614 <OLED_WR_Byte+0x90>)
 80035d2:	f001 ff9d 	bl	8005510 <HAL_GPIO_WritePin>
 80035d6:	e004      	b.n	80035e2 <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 80035d8:	2200      	movs	r2, #0
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <OLED_WR_Byte+0x90>)
 80035de:	f001 ff97 	bl	8005510 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80035e2:	2201      	movs	r2, #1
 80035e4:	2120      	movs	r1, #32
 80035e6:	480b      	ldr	r0, [pc, #44]	; (8003614 <OLED_WR_Byte+0x90>)
 80035e8:	f001 ff92 	bl	8005510 <HAL_GPIO_WritePin>
		dat <<= 1;
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d9dd      	bls.n	80035ba <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 80035fe:	2201      	movs	r2, #1
 8003600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <OLED_WR_Byte+0x90>)
 8003606:	f001 ff83 	bl	8005510 <HAL_GPIO_WritePin>
} 
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000

08003618 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 800361e:	2300      	movs	r3, #0
 8003620:	71fb      	strb	r3, [r7, #7]
 8003622:	e026      	b.n	8003672 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	3b50      	subs	r3, #80	; 0x50
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ffa9 	bl	8003584 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8003632:	2100      	movs	r1, #0
 8003634:	2000      	movs	r0, #0
 8003636:	f7ff ffa5 	bl	8003584 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 800363a:	2100      	movs	r1, #0
 800363c:	2010      	movs	r0, #16
 800363e:	f7ff ffa1 	bl	8003584 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8003642:	2300      	movs	r3, #0
 8003644:	71bb      	strb	r3, [r7, #6]
 8003646:	e00d      	b.n	8003664 <OLED_Refresh_Gram+0x4c>
 8003648:	79ba      	ldrb	r2, [r7, #6]
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	490d      	ldr	r1, [pc, #52]	; (8003684 <OLED_Refresh_Gram+0x6c>)
 800364e:	00d2      	lsls	r2, r2, #3
 8003650:	440a      	add	r2, r1
 8003652:	4413      	add	r3, r2
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff93 	bl	8003584 <OLED_WR_Byte>
 800365e:	79bb      	ldrb	r3, [r7, #6]
 8003660:	3301      	adds	r3, #1
 8003662:	71bb      	strb	r3, [r7, #6]
 8003664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003668:	2b00      	cmp	r3, #0
 800366a:	daed      	bge.n	8003648 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	3301      	adds	r3, #1
 8003670:	71fb      	strb	r3, [r7, #7]
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2b07      	cmp	r3, #7
 8003676:	d9d5      	bls.n	8003624 <OLED_Refresh_Gram+0xc>
	}
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20004e50 	.word	0x20004e50

08003688 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800368e:	2300      	movs	r3, #0
 8003690:	71fb      	strb	r3, [r7, #7]
 8003692:	e014      	b.n	80036be <OLED_Clear+0x36>
 8003694:	2300      	movs	r3, #0
 8003696:	71bb      	strb	r3, [r7, #6]
 8003698:	e00a      	b.n	80036b0 <OLED_Clear+0x28>
 800369a:	79ba      	ldrb	r2, [r7, #6]
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	490c      	ldr	r1, [pc, #48]	; (80036d0 <OLED_Clear+0x48>)
 80036a0:	00d2      	lsls	r2, r2, #3
 80036a2:	440a      	add	r2, r1
 80036a4:	4413      	add	r3, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	79bb      	ldrb	r3, [r7, #6]
 80036ac:	3301      	adds	r3, #1
 80036ae:	71bb      	strb	r3, [r7, #6]
 80036b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	daf0      	bge.n	800369a <OLED_Clear+0x12>
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	3301      	adds	r3, #1
 80036bc:	71fb      	strb	r3, [r7, #7]
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	2b07      	cmp	r3, #7
 80036c2:	d9e7      	bls.n	8003694 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80036c4:	f7ff ffa8 	bl	8003618 <OLED_Refresh_Gram>
}
 80036c8:	bf00      	nop
 80036ca:	3708      	adds	r7, #8
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20004e50 	.word	0x20004e50

080036d4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
 80036de:	460b      	mov	r3, r1
 80036e0:	71bb      	strb	r3, [r7, #6]
 80036e2:	4613      	mov	r3, r2
 80036e4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db41      	blt.n	8003776 <OLED_DrawPoint+0xa2>
 80036f2:	79bb      	ldrb	r3, [r7, #6]
 80036f4:	2b3f      	cmp	r3, #63	; 0x3f
 80036f6:	d83e      	bhi.n	8003776 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	08db      	lsrs	r3, r3, #3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003704:	79bb      	ldrb	r3, [r7, #6]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800370c:	7b7b      	ldrb	r3, [r7, #13]
 800370e:	f1c3 0307 	rsb	r3, r3, #7
 8003712:	2201      	movs	r2, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800371a:	797b      	ldrb	r3, [r7, #5]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <OLED_DrawPoint+0x72>
 8003720:	79fa      	ldrb	r2, [r7, #7]
 8003722:	7bbb      	ldrb	r3, [r7, #14]
 8003724:	4917      	ldr	r1, [pc, #92]	; (8003784 <OLED_DrawPoint+0xb0>)
 8003726:	00d2      	lsls	r2, r2, #3
 8003728:	440a      	add	r2, r1
 800372a:	4413      	add	r3, r2
 800372c:	7818      	ldrb	r0, [r3, #0]
 800372e:	79fa      	ldrb	r2, [r7, #7]
 8003730:	7bbb      	ldrb	r3, [r7, #14]
 8003732:	7bf9      	ldrb	r1, [r7, #15]
 8003734:	4301      	orrs	r1, r0
 8003736:	b2c8      	uxtb	r0, r1
 8003738:	4912      	ldr	r1, [pc, #72]	; (8003784 <OLED_DrawPoint+0xb0>)
 800373a:	00d2      	lsls	r2, r2, #3
 800373c:	440a      	add	r2, r1
 800373e:	4413      	add	r3, r2
 8003740:	4602      	mov	r2, r0
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e018      	b.n	8003778 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	7bbb      	ldrb	r3, [r7, #14]
 800374a:	490e      	ldr	r1, [pc, #56]	; (8003784 <OLED_DrawPoint+0xb0>)
 800374c:	00d2      	lsls	r2, r2, #3
 800374e:	440a      	add	r2, r1
 8003750:	4413      	add	r3, r2
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b25a      	sxtb	r2, r3
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	43db      	mvns	r3, r3
 800375c:	b25b      	sxtb	r3, r3
 800375e:	4013      	ands	r3, r2
 8003760:	b259      	sxtb	r1, r3
 8003762:	79fa      	ldrb	r2, [r7, #7]
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	b2c8      	uxtb	r0, r1
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <OLED_DrawPoint+0xb0>)
 800376a:	00d2      	lsls	r2, r2, #3
 800376c:	440a      	add	r2, r1
 800376e:	4413      	add	r3, r2
 8003770:	4602      	mov	r2, r0
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e000      	b.n	8003778 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003776:	bf00      	nop
}
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20004e50 	.word	0x20004e50

08003788 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4623      	mov	r3, r4
 8003798:	71fb      	strb	r3, [r7, #7]
 800379a:	4603      	mov	r3, r0
 800379c:	71bb      	strb	r3, [r7, #6]
 800379e:	460b      	mov	r3, r1
 80037a0:	717b      	strb	r3, [r7, #5]
 80037a2:	4613      	mov	r3, r2
 80037a4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80037a6:	79bb      	ldrb	r3, [r7, #6]
 80037a8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80037aa:	797b      	ldrb	r3, [r7, #5]
 80037ac:	3b20      	subs	r3, #32
 80037ae:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	73bb      	strb	r3, [r7, #14]
 80037b4:	e04d      	b.n	8003852 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80037b6:	793b      	ldrb	r3, [r7, #4]
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d10b      	bne.n	80037d4 <OLED_ShowChar+0x4c>
 80037bc:	797a      	ldrb	r2, [r7, #5]
 80037be:	7bb9      	ldrb	r1, [r7, #14]
 80037c0:	4828      	ldr	r0, [pc, #160]	; (8003864 <OLED_ShowChar+0xdc>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4403      	add	r3, r0
 80037cc:	440b      	add	r3, r1
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	73fb      	strb	r3, [r7, #15]
 80037d2:	e007      	b.n	80037e4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80037d4:	797a      	ldrb	r2, [r7, #5]
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	4923      	ldr	r1, [pc, #140]	; (8003868 <OLED_ShowChar+0xe0>)
 80037da:	0112      	lsls	r2, r2, #4
 80037dc:	440a      	add	r2, r1
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	737b      	strb	r3, [r7, #13]
 80037e8:	e02d      	b.n	8003846 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da07      	bge.n	8003802 <OLED_ShowChar+0x7a>
 80037f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037f6:	79b9      	ldrb	r1, [r7, #6]
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff ff6a 	bl	80036d4 <OLED_DrawPoint>
 8003800:	e00c      	b.n	800381c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ff5c 	bl	80036d4 <OLED_DrawPoint>
			temp<<=1;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
			y++;
 8003822:	79bb      	ldrb	r3, [r7, #6]
 8003824:	3301      	adds	r3, #1
 8003826:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003828:	79ba      	ldrb	r2, [r7, #6]
 800382a:	7b3b      	ldrb	r3, [r7, #12]
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	793b      	ldrb	r3, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d105      	bne.n	8003840 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003834:	7b3b      	ldrb	r3, [r7, #12]
 8003836:	71bb      	strb	r3, [r7, #6]
				x++;
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	3301      	adds	r3, #1
 800383c:	71fb      	strb	r3, [r7, #7]
				break;
 800383e:	e005      	b.n	800384c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8003840:	7b7b      	ldrb	r3, [r7, #13]
 8003842:	3301      	adds	r3, #1
 8003844:	737b      	strb	r3, [r7, #13]
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	2b07      	cmp	r3, #7
 800384a:	d9ce      	bls.n	80037ea <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	3301      	adds	r3, #1
 8003850:	73bb      	strb	r3, [r7, #14]
 8003852:	7bba      	ldrb	r2, [r7, #14]
 8003854:	793b      	ldrb	r3, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3ad      	bcc.n	80037b6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	0800cf34 	.word	0x0800cf34
 8003868:	0800d3a8 	.word	0x0800d3a8

0800386c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af02      	add	r7, sp, #8
 8003872:	4603      	mov	r3, r0
 8003874:	603a      	str	r2, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	460b      	mov	r3, r1
 800387a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800387c:	e01f      	b.n	80038be <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b7a      	cmp	r3, #122	; 0x7a
 8003882:	d904      	bls.n	800388e <OLED_ShowString+0x22>
 8003884:	2300      	movs	r3, #0
 8003886:	71fb      	strb	r3, [r7, #7]
 8003888:	79bb      	ldrb	r3, [r7, #6]
 800388a:	3310      	adds	r3, #16
 800388c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800388e:	79bb      	ldrb	r3, [r7, #6]
 8003890:	2b3a      	cmp	r3, #58	; 0x3a
 8003892:	d905      	bls.n	80038a0 <OLED_ShowString+0x34>
 8003894:	2300      	movs	r3, #0
 8003896:	71fb      	strb	r3, [r7, #7]
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	71bb      	strb	r3, [r7, #6]
 800389c:	f7ff fef4 	bl	8003688 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	79b9      	ldrb	r1, [r7, #6]
 80038a6:	79f8      	ldrb	r0, [r7, #7]
 80038a8:	2301      	movs	r3, #1
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	230c      	movs	r3, #12
 80038ae:	f7ff ff6b 	bl	8003788 <OLED_ShowChar>
        x+=8;
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	3308      	adds	r3, #8
 80038b6:	71fb      	strb	r3, [r7, #7]
        p++;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1db      	bne.n	800387e <OLED_ShowString+0x12>
    }  
}	 
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <OLED_Init>:

void OLED_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80038d4:	f002 fe10 	bl	80064f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80038d8:	4b41      	ldr	r3, [pc, #260]	; (80039e0 <OLED_Init+0x110>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <OLED_Init+0x110>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <OLED_Init+0x110>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <OLED_Init+0x110>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80038f0:	f002 fe16 	bl	8006520 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	483a      	ldr	r0, [pc, #232]	; (80039e4 <OLED_Init+0x114>)
 80038fa:	f001 fe09 	bl	8005510 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80038fe:	2064      	movs	r0, #100	; 0x64
 8003900:	f000 ff1a 	bl	8004738 <HAL_Delay>
	OLED_RST_Set();
 8003904:	2201      	movs	r2, #1
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	4836      	ldr	r0, [pc, #216]	; (80039e4 <OLED_Init+0x114>)
 800390a:	f001 fe01 	bl	8005510 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800390e:	2100      	movs	r1, #0
 8003910:	20ae      	movs	r0, #174	; 0xae
 8003912:	f7ff fe37 	bl	8003584 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8003916:	2100      	movs	r1, #0
 8003918:	20d5      	movs	r0, #213	; 0xd5
 800391a:	f7ff fe33 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800391e:	2100      	movs	r1, #0
 8003920:	2050      	movs	r0, #80	; 0x50
 8003922:	f7ff fe2f 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8003926:	2100      	movs	r1, #0
 8003928:	20a8      	movs	r0, #168	; 0xa8
 800392a:	f7ff fe2b 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800392e:	2100      	movs	r1, #0
 8003930:	203f      	movs	r0, #63	; 0x3f
 8003932:	f7ff fe27 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8003936:	2100      	movs	r1, #0
 8003938:	20d3      	movs	r0, #211	; 0xd3
 800393a:	f7ff fe23 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800393e:	2100      	movs	r1, #0
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff fe1f 	bl	8003584 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8003946:	2100      	movs	r1, #0
 8003948:	2040      	movs	r0, #64	; 0x40
 800394a:	f7ff fe1b 	bl	8003584 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800394e:	2100      	movs	r1, #0
 8003950:	208d      	movs	r0, #141	; 0x8d
 8003952:	f7ff fe17 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8003956:	2100      	movs	r1, #0
 8003958:	2014      	movs	r0, #20
 800395a:	f7ff fe13 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800395e:	2100      	movs	r1, #0
 8003960:	2020      	movs	r0, #32
 8003962:	f7ff fe0f 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8003966:	2100      	movs	r1, #0
 8003968:	2002      	movs	r0, #2
 800396a:	f7ff fe0b 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800396e:	2100      	movs	r1, #0
 8003970:	20a1      	movs	r0, #161	; 0xa1
 8003972:	f7ff fe07 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8003976:	2100      	movs	r1, #0
 8003978:	20c0      	movs	r0, #192	; 0xc0
 800397a:	f7ff fe03 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800397e:	2100      	movs	r1, #0
 8003980:	20da      	movs	r0, #218	; 0xda
 8003982:	f7ff fdff 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8003986:	2100      	movs	r1, #0
 8003988:	2012      	movs	r0, #18
 800398a:	f7ff fdfb 	bl	8003584 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800398e:	2100      	movs	r1, #0
 8003990:	2081      	movs	r0, #129	; 0x81
 8003992:	f7ff fdf7 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8003996:	2100      	movs	r1, #0
 8003998:	20ef      	movs	r0, #239	; 0xef
 800399a:	f7ff fdf3 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800399e:	2100      	movs	r1, #0
 80039a0:	20d9      	movs	r0, #217	; 0xd9
 80039a2:	f7ff fdef 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80039a6:	2100      	movs	r1, #0
 80039a8:	20f1      	movs	r0, #241	; 0xf1
 80039aa:	f7ff fdeb 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80039ae:	2100      	movs	r1, #0
 80039b0:	20db      	movs	r0, #219	; 0xdb
 80039b2:	f7ff fde7 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80039b6:	2100      	movs	r1, #0
 80039b8:	2030      	movs	r0, #48	; 0x30
 80039ba:	f7ff fde3 	bl	8003584 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80039be:	2100      	movs	r1, #0
 80039c0:	20a4      	movs	r0, #164	; 0xa4
 80039c2:	f7ff fddf 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80039c6:	2100      	movs	r1, #0
 80039c8:	20a6      	movs	r0, #166	; 0xa6
 80039ca:	f7ff fddb 	bl	8003584 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80039ce:	2100      	movs	r1, #0
 80039d0:	20af      	movs	r0, #175	; 0xaf
 80039d2:	f7ff fdd7 	bl	8003584 <OLED_WR_Byte>
	OLED_Clear(); 
 80039d6:	f7ff fe57 	bl	8003688 <OLED_Clear>
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40021000 	.word	0x40021000

080039e8 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a18:	f7fd f87e 	bl	8000b18 <__aeabi_dcmpgt>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8003a2e:	e011      	b.n	8003a54 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a3c:	f7fd f84e 	bl	8000adc <__aeabi_dcmplt>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d100      	bne.n	8003a48 <PID_Init+0x60>
}
 8003a46:	e005      	b.n	8003a54 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	0000      	movs	r0, r0
	...

08003a60 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6278      	str	r0, [r7, #36]	; 0x24
 8003a68:	6239      	str	r1, [r7, #32]
 8003a6a:	61fa      	str	r2, [r7, #28]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8003a72:	ed87 1b02 	vstr	d1, [r7, #8]
 8003a76:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003a92:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003ae8 <PID+0x88>
 8003a96:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003af0 <PID+0x90>
 8003a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9c:	f000 f934 	bl	8003d08 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	2264      	movs	r2, #100	; 0x64
 8003aa4:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003aa6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aae:	f000 fa41 	bl	8003f34 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003ab2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	ed97 2b00 	vldr	d2, [r7]
 8003abc:	ed97 1b02 	vldr	d1, [r7, #8]
 8003ac0:	ed97 0b04 	vldr	d0, [r7, #16]
 8003ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac6:	f000 f98d 	bl	8003de4 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003aca:	f000 fe29 	bl	8004720 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	605a      	str	r2, [r3, #4]
	
}
 8003ada:	bf00      	nop
 8003adc:	3728      	adds	r7, #40	; 0x28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	00000000 	.word	0x00000000
 8003aec:	406fe000 	.word	0x406fe000
	...

08003af8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <PID_Compute+0x14>
	{
		return _FALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e0db      	b.n	8003cc4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003b0c:	f000 fe08 	bl	8004720 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	6a3a      	ldr	r2, [r7, #32]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	f0c0 80cd 	bcc.w	8003cc2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b40:	f7fc fba2 	bl	8000288 <__aeabi_dsub>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003b52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b56:	f7fc fb97 	bl	8000288 <__aeabi_dsub>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003b6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b72:	f7fc fd41 	bl	80005f8 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc fb85 	bl	800028c <__adddf3>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d114      	bne.n	8003bbe <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba4:	f7fc fd28 	bl	80005f8 <__aeabi_dmul>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4620      	mov	r0, r4
 8003bae:	4629      	mov	r1, r5
 8003bb0:	f7fc fb6a 	bl	8000288 <__aeabi_dsub>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003bca:	f7fc ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003be0:	e010      	b.n	8003c04 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003bee:	f7fc ff75 	bl	8000adc <__aeabi_dcmplt>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c16:	f7fc fcef 	bl	80005f8 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003c22:	e005      	b.n	8003c30 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c40:	f7fc fcda 	bl	80005f8 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4620      	mov	r0, r4
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fb1c 	bl	8000288 <__aeabi_dsub>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c58:	f7fc fb18 	bl	800028c <__adddf3>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c6e:	f7fc ff53 	bl	8000b18 <__aeabi_dcmpgt>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003c82:	e00e      	b.n	8003ca2 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c8e:	f7fc ff25 	bl	8000adc <__aeabi_dcmplt>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003c9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003caa:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8003cc2:	2300      	movs	r3, #0
	}
	
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bdb0      	pop	{r4, r5, r7, pc}

08003ccc <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <PID_SetMode+0x2e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fe77 	bl	80039e8 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	705a      	strb	r2, [r3, #1]
	
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6178      	str	r0, [r7, #20]
 8003d10:	ed87 0b02 	vstr	d0, [r7, #8]
 8003d14:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d20:	f7fc fef0 	bl	8000b04 <__aeabi_dcmpge>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d158      	bne.n	8003ddc <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003d2a:	6979      	ldr	r1, [r7, #20]
 8003d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d30:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003d34:	6979      	ldr	r1, [r7, #20]
 8003d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d3a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d04b      	beq.n	8003dde <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003d54:	f7fc fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003d68:	e9c1 2300 	strd	r2, r3, [r1]
 8003d6c:	e012      	b.n	8003d94 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003d7c:	f7fc feae 	bl	8000adc <__aeabi_dcmplt>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003d90:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003da0:	f7fc feba 	bl	8000b18 <__aeabi_dcmpgt>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d006      	beq.n	8003db8 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003db0:	6979      	ldr	r1, [r7, #20]
 8003db2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003db6:	e012      	b.n	8003dde <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003dc4:	f7fc fe8a 	bl	8000adc <__aeabi_dcmplt>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003dd4:	6979      	ldr	r1, [r7, #20]
 8003dd6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003dda:	e000      	b.n	8003dde <PID_SetOutputLimits+0xd6>
		return;
 8003ddc:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	61f8      	str	r0, [r7, #28]
 8003dec:	ed87 0b04 	vstr	d0, [r7, #16]
 8003df0:	ed87 1b02 	vstr	d1, [r7, #8]
 8003df4:	ed87 2b00 	vstr	d2, [r7]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e08:	f7fc fe68 	bl	8000adc <__aeabi_dcmplt>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 8089 	bne.w	8003f26 <PID_SetTunings2+0x142>
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e20:	f7fc fe5c 	bl	8000adc <__aeabi_dcmplt>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d17d      	bne.n	8003f26 <PID_SetTunings2+0x142>
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e36:	f7fc fe51 	bl	8000adc <__aeabi_dcmplt>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d172      	bne.n	8003f26 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	7efa      	ldrb	r2, [r7, #27]
 8003e44:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003e46:	7efb      	ldrb	r3, [r7, #27]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e5e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e68:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003e6c:	69f9      	ldr	r1, [r7, #28]
 8003e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e72:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fb42 	bl	8000504 <__aeabi_ui2d>
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <PID_SetTunings2+0x14c>)
 8003e86:	f7fc fce1 	bl	800084c <__aeabi_ddiv>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8003e92:	69f9      	ldr	r1, [r7, #28]
 8003e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e98:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003e9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ea4:	f7fc fba8 	bl	80005f8 <__aeabi_dmul>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eba:	f7fc fcc7 	bl	800084c <__aeabi_ddiv>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	69f9      	ldr	r1, [r7, #28]
 8003ec4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	78db      	ldrb	r3, [r3, #3]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d12b      	bne.n	8003f28 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003ed6:	f04f 0000 	mov.w	r0, #0
 8003eda:	f04f 0100 	mov.w	r1, #0
 8003ede:	f7fc f9d3 	bl	8000288 <__aeabi_dsub>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	69f9      	ldr	r1, [r7, #28]
 8003ee8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f7fc f9c5 	bl	8000288 <__aeabi_dsub>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	69f9      	ldr	r1, [r7, #28]
 8003f04:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	f7fc f9b7 	bl	8000288 <__aeabi_dsub>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003f24:	e000      	b.n	8003f28 <PID_SetTunings2+0x144>
		return;
 8003f26:	bf00      	nop
		
	}
	
}
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	408f4000 	.word	0x408f4000

08003f34 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02e      	beq.n	8003fa6 <PID_SetControllerDirection+0x72>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	78db      	ldrb	r3, [r3, #3]
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d029      	beq.n	8003fa6 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	f7fc f992 	bl	8000288 <__aeabi_dsub>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f7fc f984 	bl	8000288 <__aeabi_dsub>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003f90:	f04f 0000 	mov.w	r0, #0
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f7fc f976 	bl	8000288 <__aeabi_dsub>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	70da      	strb	r2, [r3, #3]
	
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	dd2e      	ble.n	8004022 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003fc4:	6838      	ldr	r0, [r7, #0]
 8003fc6:	f7fc faad 	bl	8000524 <__aeabi_i2d>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	460d      	mov	r5, r1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fc fa96 	bl	8000504 <__aeabi_ui2d>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc fc34 	bl	800084c <__aeabi_ddiv>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff6:	f7fc faff 	bl	80005f8 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800400a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400e:	f7fc fc1d 	bl	800084c <__aeabi_ddiv>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800402c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_MspInit+0x54>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a11      	ldr	r2, [pc, #68]	; (8004080 <HAL_MspInit+0x54>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_MspInit+0x54>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_MspInit+0x54>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a0a      	ldr	r2, [pc, #40]	; (8004080 <HAL_MspInit+0x54>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_MspInit+0x54>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	210f      	movs	r1, #15
 800406e:	f06f 0001 	mvn.w	r0, #1
 8004072:	f000 fc60 	bl	8004936 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_I2C_MspInit+0x84>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d12c      	bne.n	8004100 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a17      	ldr	r2, [pc, #92]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c8:	2312      	movs	r3, #18
 80040ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	2303      	movs	r3, #3
 80040d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040d4:	2304      	movs	r3, #4
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	4619      	mov	r1, r3
 80040de:	480c      	ldr	r0, [pc, #48]	; (8004110 <HAL_I2C_MspInit+0x8c>)
 80040e0:	f001 f862 	bl	80051a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f2:	6413      	str	r3, [r2, #64]	; 0x40
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_I2C_MspInit+0x88>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004100:	bf00      	nop
 8004102:	3728      	adds	r7, #40	; 0x28
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40005400 	.word	0x40005400
 800410c:	40023800 	.word	0x40023800
 8004110:	40020400 	.word	0x40020400

08004114 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411c:	f107 031c 	add.w	r3, r7, #28
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	60da      	str	r2, [r3, #12]
 800412a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_TIM_Base_MspInit+0xe8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d12d      	bne.n	8004192 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 800413c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413e:	4a30      	ldr	r2, [pc, #192]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6453      	str	r3, [r2, #68]	; 0x44
 8004146:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 8004148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	4b2a      	ldr	r3, [pc, #168]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 800415c:	f043 0310 	orr.w	r3, r3, #16
 8004160:	6313      	str	r3, [r2, #48]	; 0x30
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 800416e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004174:	2302      	movs	r3, #2
 8004176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004178:	2300      	movs	r3, #0
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004180:	2301      	movs	r3, #1
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8004184:	f107 031c 	add.w	r3, r7, #28
 8004188:	4619      	mov	r1, r3
 800418a:	481e      	ldr	r0, [pc, #120]	; (8004204 <HAL_TIM_Base_MspInit+0xf0>)
 800418c:	f001 f80c 	bl	80051a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004190:	e030      	b.n	80041f4 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_TIM_Base_MspInit+0xf4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d12b      	bne.n	80041f4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	6453      	str	r3, [r2, #68]	; 0x44
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	4b10      	ldr	r3, [pc, #64]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	4a0f      	ldr	r2, [pc, #60]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041c2:	f043 0304 	orr.w	r3, r3, #4
 80041c6:	6313      	str	r3, [r2, #48]	; 0x30
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <HAL_TIM_Base_MspInit+0xec>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80041d4:	23c0      	movs	r3, #192	; 0xc0
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80041e4:	2303      	movs	r3, #3
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	4619      	mov	r1, r3
 80041ee:	4807      	ldr	r0, [pc, #28]	; (800420c <HAL_TIM_Base_MspInit+0xf8>)
 80041f0:	f000 ffda 	bl	80051a8 <HAL_GPIO_Init>
}
 80041f4:	bf00      	nop
 80041f6:	3730      	adds	r7, #48	; 0x30
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40010000 	.word	0x40010000
 8004200:	40023800 	.word	0x40023800
 8004204:	40021000 	.word	0x40021000
 8004208:	40010400 	.word	0x40010400
 800420c:	40020800 	.word	0x40020800

08004210 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08c      	sub	sp, #48	; 0x30
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 031c 	add.w	r3, r7, #28
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d14b      	bne.n	80042ca <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a3e      	ldr	r2, [pc, #248]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	4b38      	ldr	r3, [pc, #224]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a37      	ldr	r2, [pc, #220]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	4a30      	ldr	r2, [pc, #192]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	6313      	str	r3, [r2, #48]	; 0x30
 800427a:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428c:	2302      	movs	r3, #2
 800428e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004298:	2301      	movs	r3, #1
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	4619      	mov	r1, r3
 80042a2:	4825      	ldr	r0, [pc, #148]	; (8004338 <HAL_TIM_Encoder_MspInit+0x128>)
 80042a4:	f000 ff80 	bl	80051a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042a8:	2308      	movs	r3, #8
 80042aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ac:	2302      	movs	r3, #2
 80042ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042b8:	2301      	movs	r3, #1
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	481e      	ldr	r0, [pc, #120]	; (800433c <HAL_TIM_Encoder_MspInit+0x12c>)
 80042c4:	f000 ff70 	bl	80051a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80042c8:	e030      	b.n	800432c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Encoder_MspInit+0x130>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d12b      	bne.n	800432c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 80042de:	f043 0302 	orr.w	r3, r3, #2
 80042e2:	6413      	str	r3, [r2, #64]	; 0x40
 80042e4:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_TIM_Encoder_MspInit+0x124>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800430c:	23c0      	movs	r3, #192	; 0xc0
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	2302      	movs	r3, #2
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004314:	2300      	movs	r3, #0
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004318:	2300      	movs	r3, #0
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800431c:	2302      	movs	r3, #2
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	4619      	mov	r1, r3
 8004326:	4804      	ldr	r0, [pc, #16]	; (8004338 <HAL_TIM_Encoder_MspInit+0x128>)
 8004328:	f000 ff3e 	bl	80051a8 <HAL_GPIO_Init>
}
 800432c:	bf00      	nop
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	40020000 	.word	0x40020000
 800433c:	40020400 	.word	0x40020400
 8004340:	40000400 	.word	0x40000400

08004344 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	60da      	str	r2, [r3, #12]
 800435a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <HAL_TIM_IC_MspInit+0x94>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d134      	bne.n	80043d0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	4b1c      	ldr	r3, [pc, #112]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	4a14      	ldr	r2, [pc, #80]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	6313      	str	r3, [r2, #48]	; 0x30
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_TIM_IC_MspInit+0x98>)
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800439e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043b0:	2302      	movs	r3, #2
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043b4:	f107 0314 	add.w	r3, r7, #20
 80043b8:	4619      	mov	r1, r3
 80043ba:	4809      	ldr	r0, [pc, #36]	; (80043e0 <HAL_TIM_IC_MspInit+0x9c>)
 80043bc:	f000 fef4 	bl	80051a8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	2105      	movs	r1, #5
 80043c4:	201e      	movs	r0, #30
 80043c6:	f000 fab6 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80043ca:	201e      	movs	r0, #30
 80043cc:	f000 facf 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80043d0:	bf00      	nop
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40020c00 	.word	0x40020c00

080043e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a35      	ldr	r2, [pc, #212]	; (80044d8 <HAL_UART_MspInit+0xf4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d163      	bne.n	80044ce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	4b34      	ldr	r3, [pc, #208]	; (80044dc <HAL_UART_MspInit+0xf8>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a33      	ldr	r2, [pc, #204]	; (80044dc <HAL_UART_MspInit+0xf8>)
 8004410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b31      	ldr	r3, [pc, #196]	; (80044dc <HAL_UART_MspInit+0xf8>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <HAL_UART_MspInit+0xf8>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <HAL_UART_MspInit+0xf8>)
 800442c:	f043 0304 	orr.w	r3, r3, #4
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <HAL_UART_MspInit+0xf8>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800443e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444c:	2303      	movs	r3, #3
 800444e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004450:	2307      	movs	r3, #7
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	4619      	mov	r1, r3
 800445a:	4821      	ldr	r0, [pc, #132]	; (80044e0 <HAL_UART_MspInit+0xfc>)
 800445c:	f000 fea4 	bl	80051a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_UART_MspInit+0x104>)
 8004464:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004468:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800446c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_UART_MspInit+0x100>)
 800447c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004480:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004482:	4b18      	ldr	r3, [pc, #96]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <HAL_UART_MspInit+0x100>)
 800448a:	2200      	movs	r2, #0
 800448c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004494:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_UART_MspInit+0x100>)
 8004498:	2200      	movs	r2, #0
 800449a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800449c:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_UART_MspInit+0x100>)
 800449e:	2200      	movs	r2, #0
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044a2:	4810      	ldr	r0, [pc, #64]	; (80044e4 <HAL_UART_MspInit+0x100>)
 80044a4:	f000 fa7e 	bl	80049a4 <HAL_DMA_Init>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80044ae:	f7ff f863 	bl	8003578 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <HAL_UART_MspInit+0x100>)
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_UART_MspInit+0x100>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80044be:	2200      	movs	r2, #0
 80044c0:	2105      	movs	r1, #5
 80044c2:	2027      	movs	r0, #39	; 0x27
 80044c4:	f000 fa37 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044c8:	2027      	movs	r0, #39	; 0x27
 80044ca:	f000 fa50 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80044ce:	bf00      	nop
 80044d0:	3728      	adds	r7, #40	; 0x28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40004800 	.word	0x40004800
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40020800 	.word	0x40020800
 80044e4:	20004b0c 	.word	0x20004b0c
 80044e8:	40026028 	.word	0x40026028

080044ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <NMI_Handler+0x4>

080044f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044f6:	e7fe      	b.n	80044f6 <HardFault_Handler+0x4>

080044f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044fc:	e7fe      	b.n	80044fc <MemManage_Handler+0x4>

080044fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004502:	e7fe      	b.n	8004502 <BusFault_Handler+0x4>

08004504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004508:	e7fe      	b.n	8004508 <UsageFault_Handler+0x4>

0800450a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800451c:	f000 f8ec 	bl	80046f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004520:	f006 ff28 	bl	800b374 <xTaskGetSchedulerState>
 8004524:	4603      	mov	r3, r0
 8004526:	2b01      	cmp	r3, #1
 8004528:	d001      	beq.n	800452e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800452a:	f007 fd0d 	bl	800bf48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <DMA1_Stream1_IRQHandler+0x10>)
 800453a:	f000 fbcb 	bl	8004cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20004b0c 	.word	0x20004b0c

08004548 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800454c:	4802      	ldr	r0, [pc, #8]	; (8004558 <TIM4_IRQHandler+0x10>)
 800454e:	f002 ff36 	bl	80073be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20004aa0 	.word	0x20004aa0

0800455c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004560:	4802      	ldr	r0, [pc, #8]	; (800456c <USART3_IRQHandler+0x10>)
 8004562:	f004 f8f3 	bl	800874c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20004b6c 	.word	0x20004b6c

08004570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <_sbrk+0x5c>)
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <_sbrk+0x60>)
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <_sbrk+0x64>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800458c:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <_sbrk+0x64>)
 800458e:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <_sbrk+0x68>)
 8004590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <_sbrk+0x64>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	429a      	cmp	r2, r3
 800459e:	d207      	bcs.n	80045b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045a0:	f007 ff4c 	bl	800c43c <__errno>
 80045a4:	4603      	mov	r3, r0
 80045a6:	220c      	movs	r2, #12
 80045a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	e009      	b.n	80045c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <_sbrk+0x64>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <_sbrk+0x64>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <_sbrk+0x64>)
 80045c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20020000 	.word	0x20020000
 80045d0:	00000400 	.word	0x00000400
 80045d4:	20000110 	.word	0x20000110
 80045d8:	200052a8 	.word	0x200052a8

080045dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <SystemInit+0x20>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	4a05      	ldr	r2, [pc, #20]	; (80045fc <SystemInit+0x20>)
 80045e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004638 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004604:	480d      	ldr	r0, [pc, #52]	; (800463c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004606:	490e      	ldr	r1, [pc, #56]	; (8004640 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004608:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800460a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800460c:	e002      	b.n	8004614 <LoopCopyDataInit>

0800460e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800460e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004612:	3304      	adds	r3, #4

08004614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004618:	d3f9      	bcc.n	800460e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800461a:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800461c:	4c0b      	ldr	r4, [pc, #44]	; (800464c <LoopFillZerobss+0x26>)
  movs r3, #0
 800461e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004620:	e001      	b.n	8004626 <LoopFillZerobss>

08004622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004624:	3204      	adds	r2, #4

08004626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004628:	d3fb      	bcc.n	8004622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800462a:	f7ff ffd7 	bl	80045dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800462e:	f007 ff0b 	bl	800c448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004632:	f7fd f91b 	bl	800186c <main>
  bx  lr    
 8004636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800463c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004640:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004644:	0800d9fc 	.word	0x0800d9fc
  ldr r2, =_sbss
 8004648:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800464c:	200052a4 	.word	0x200052a4

08004650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004650:	e7fe      	b.n	8004650 <ADC_IRQHandler>
	...

08004654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004658:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_Init+0x40>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <HAL_Init+0x40>)
 800465e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_Init+0x40>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <HAL_Init+0x40>)
 800466a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800466e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_Init+0x40>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_Init+0x40>)
 8004676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467c:	2003      	movs	r0, #3
 800467e:	f000 f94f 	bl	8004920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004682:	200f      	movs	r0, #15
 8004684:	f000 f808 	bl	8004698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004688:	f7ff fcd0 	bl	800402c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00

08004698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <HAL_InitTick+0x54>)
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_InitTick+0x58>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f967 	bl	800498a <HAL_SYSTICK_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e00e      	b.n	80046e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d80a      	bhi.n	80046e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046cc:	2200      	movs	r2, #0
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	f04f 30ff 	mov.w	r0, #4294967295
 80046d4:	f000 f92f 	bl	8004936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046d8:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <HAL_InitTick+0x5c>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000030 	.word	0x20000030
 80046f0:	20000038 	.word	0x20000038
 80046f4:	20000034 	.word	0x20000034

080046f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046fc:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_IncTick+0x20>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_IncTick+0x24>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4413      	add	r3, r2
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <HAL_IncTick+0x24>)
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000038 	.word	0x20000038
 800471c:	20005250 	.word	0x20005250

08004720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return uwTick;
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <HAL_GetTick+0x14>)
 8004726:	681b      	ldr	r3, [r3, #0]
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20005250 	.word	0x20005250

08004738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004740:	f7ff ffee 	bl	8004720 <HAL_GetTick>
 8004744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d005      	beq.n	800475e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <HAL_Delay+0x44>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800475e:	bf00      	nop
 8004760:	f7ff ffde 	bl	8004720 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	429a      	cmp	r2, r3
 800476e:	d8f7      	bhi.n	8004760 <HAL_Delay+0x28>
  {
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000038 	.word	0x20000038

08004780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800479c:	4013      	ands	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0307 	and.w	r3, r3, #7
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0b      	blt.n	800480e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <__NVIC_EnableIRQ+0x38>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2001      	movs	r0, #1
 8004806:	fa00 f202 	lsl.w	r2, r0, r2
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	; (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ec:	d301      	bcc.n	80048f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ee:	2301      	movs	r3, #1
 80048f0:	e00f      	b.n	8004912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <SysTick_Config+0x40>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048fa:	210f      	movs	r1, #15
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	f7ff ff8e 	bl	8004820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <SysTick_Config+0x40>)
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490a:	4b04      	ldr	r3, [pc, #16]	; (800491c <SysTick_Config+0x40>)
 800490c:	2207      	movs	r2, #7
 800490e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	e000e010 	.word	0xe000e010

08004920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff29 	bl	8004780 <__NVIC_SetPriorityGrouping>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004948:	f7ff ff3e 	bl	80047c8 <__NVIC_GetPriorityGrouping>
 800494c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff8e 	bl	8004874 <NVIC_EncodePriority>
 8004958:	4602      	mov	r2, r0
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff5d 	bl	8004820 <__NVIC_SetPriority>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff31 	bl	80047e4 <__NVIC_EnableIRQ>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ffa2 	bl	80048dc <SysTick_Config>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7ff feb6 	bl	8004720 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e099      	b.n	8004af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e0:	e00f      	b.n	8004a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e2:	f7ff fe9d 	bl	8004720 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d908      	bls.n	8004a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2203      	movs	r2, #3
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e078      	b.n	8004af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e8      	bne.n	80049e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4b38      	ldr	r3, [pc, #224]	; (8004afc <HAL_DMA_Init+0x158>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d107      	bne.n	8004a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	4313      	orrs	r3, r2
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f023 0307 	bic.w	r3, r3, #7
 8004a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d117      	bne.n	8004ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb01 	bl	80050b0 <DMA_CheckFifoParam>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e016      	b.n	8004af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fab8 	bl	8005044 <DMA_CalcBaseAndBitshift>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	223f      	movs	r2, #63	; 0x3f
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	f010803f 	.word	0xf010803f

08004b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <HAL_DMA_Start_IT+0x26>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e040      	b.n	8004ba8 <HAL_DMA_Start_IT+0xa8>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d12f      	bne.n	8004b9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fa4a 	bl	8004fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	223f      	movs	r2, #63	; 0x3f
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0216 	orr.w	r2, r2, #22
 8004b6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e005      	b.n	8004ba6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bbe:	f7ff fdaf 	bl	8004720 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d008      	beq.n	8004be2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e052      	b.n	8004c88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0216 	bic.w	r2, r2, #22
 8004bf0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <HAL_DMA_Abort+0x62>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0208 	bic.w	r2, r2, #8
 8004c20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c32:	e013      	b.n	8004c5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c34:	f7ff fd74 	bl	8004720 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d90c      	bls.n	8004c5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e015      	b.n	8004c88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e4      	bne.n	8004c34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	223f      	movs	r2, #63	; 0x3f
 8004c70:	409a      	lsls	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d004      	beq.n	8004cae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e00c      	b.n	8004cc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2205      	movs	r2, #5
 8004cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ce0:	4b92      	ldr	r3, [pc, #584]	; (8004f2c <HAL_DMA_IRQHandler+0x258>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a92      	ldr	r2, [pc, #584]	; (8004f30 <HAL_DMA_IRQHandler+0x25c>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	0a9b      	lsrs	r3, r3, #10
 8004cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	2208      	movs	r2, #8
 8004d00:	409a      	lsls	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01a      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	409a      	lsls	r2, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	2201      	movs	r2, #1
 8004d46:	409a      	lsls	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d012      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d62:	2201      	movs	r2, #1
 8004d64:	409a      	lsls	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f043 0202 	orr.w	r2, r3, #2
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	2204      	movs	r2, #4
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	f043 0204 	orr.w	r2, r3, #4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	2210      	movs	r2, #16
 8004db2:	409a      	lsls	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d043      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d03c      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dce:	2210      	movs	r2, #16
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d018      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d024      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	4798      	blx	r3
 8004e02:	e01f      	b.n	8004e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01b      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
 8004e14:	e016      	b.n	8004e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0208 	bic.w	r2, r2, #8
 8004e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	2220      	movs	r2, #32
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 808e 	beq.w	8004f72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8086 	beq.w	8004f72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d136      	bne.n	8004eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0216 	bic.w	r2, r2, #22
 8004e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_DMA_IRQHandler+0x1da>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0208 	bic.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	223f      	movs	r2, #63	; 0x3f
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d07d      	beq.n	8004fde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
        }
        return;
 8004eea:	e078      	b.n	8004fde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01c      	beq.n	8004f34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d108      	bne.n	8004f1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d030      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
 8004f18:	e02b      	b.n	8004f72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d027      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
 8004f2a:	e022      	b.n	8004f72 <HAL_DMA_IRQHandler+0x29e>
 8004f2c:	20000030 	.word	0x20000030
 8004f30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10f      	bne.n	8004f62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0210 	bic.w	r2, r2, #16
 8004f50:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d032      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d022      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d307      	bcc.n	8004fba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f2      	bne.n	8004f9e <HAL_DMA_IRQHandler+0x2ca>
 8004fb8:	e000      	b.n	8004fbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004fba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
 8004fdc:	e000      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004fde:	bf00      	nop
    }
  }
}
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop

08004fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d108      	bne.n	8005028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005026:	e007      	b.n	8005038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	3b10      	subs	r3, #16
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800505e:	4a13      	ldr	r2, [pc, #76]	; (80050ac <DMA_CalcBaseAndBitshift+0x68>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d909      	bls.n	8005086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800507a:	f023 0303 	bic.w	r3, r3, #3
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	659a      	str	r2, [r3, #88]	; 0x58
 8005084:	e007      	b.n	8005096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	aaaaaaab 	.word	0xaaaaaaab
 80050ac:	0800d9b0 	.word	0x0800d9b0

080050b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11f      	bne.n	800510a <DMA_CheckFifoParam+0x5a>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d856      	bhi.n	800517e <DMA_CheckFifoParam+0xce>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <DMA_CheckFifoParam+0x28>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050fb 	.word	0x080050fb
 80050e0:	080050e9 	.word	0x080050e9
 80050e4:	0800517f 	.word	0x0800517f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d046      	beq.n	8005182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050f8:	e043      	b.n	8005182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005102:	d140      	bne.n	8005186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005108:	e03d      	b.n	8005186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005112:	d121      	bne.n	8005158 <DMA_CheckFifoParam+0xa8>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d837      	bhi.n	800518a <DMA_CheckFifoParam+0xda>
 800511a:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <DMA_CheckFifoParam+0x70>)
 800511c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005120:	08005131 	.word	0x08005131
 8005124:	08005137 	.word	0x08005137
 8005128:	08005131 	.word	0x08005131
 800512c:	08005149 	.word	0x08005149
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
      break;
 8005134:	e030      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d025      	beq.n	800518e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005146:	e022      	b.n	800518e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005150:	d11f      	bne.n	8005192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005156:	e01c      	b.n	8005192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d903      	bls.n	8005166 <DMA_CheckFifoParam+0xb6>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d003      	beq.n	800516c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005164:	e018      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
      break;
 800516a:	e015      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      break;
 800517c:	e00b      	b.n	8005196 <DMA_CheckFifoParam+0xe6>
      break;
 800517e:	bf00      	nop
 8005180:	e00a      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;
 8005182:	bf00      	nop
 8005184:	e008      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;
 8005186:	bf00      	nop
 8005188:	e006      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;
 800518a:	bf00      	nop
 800518c:	e004      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;   
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <DMA_CheckFifoParam+0xe8>
      break;
 8005196:	bf00      	nop
    }
  } 
  
  return status; 
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop

080051a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e16b      	b.n	800549c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051c4:	2201      	movs	r2, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	429a      	cmp	r2, r3
 80051de:	f040 815a 	bne.w	8005496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d005      	beq.n	80051fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d130      	bne.n	800525c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	2203      	movs	r2, #3
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005230:	2201      	movs	r2, #1
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 0201 	and.w	r2, r3, #1
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b03      	cmp	r3, #3
 8005266:	d017      	beq.n	8005298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d123      	bne.n	80052ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	08da      	lsrs	r2, r3, #3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3208      	adds	r2, #8
 80052ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	220f      	movs	r2, #15
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	43db      	mvns	r3, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4013      	ands	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4313      	orrs	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	08da      	lsrs	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3208      	adds	r2, #8
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	2203      	movs	r2, #3
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 0203 	and.w	r2, r3, #3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80b4 	beq.w	8005496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	4b60      	ldr	r3, [pc, #384]	; (80054b4 <HAL_GPIO_Init+0x30c>)
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	4a5f      	ldr	r2, [pc, #380]	; (80054b4 <HAL_GPIO_Init+0x30c>)
 8005338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800533c:	6453      	str	r3, [r2, #68]	; 0x44
 800533e:	4b5d      	ldr	r3, [pc, #372]	; (80054b4 <HAL_GPIO_Init+0x30c>)
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800534a:	4a5b      	ldr	r2, [pc, #364]	; (80054b8 <HAL_GPIO_Init+0x310>)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	3302      	adds	r3, #2
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	220f      	movs	r2, #15
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a52      	ldr	r2, [pc, #328]	; (80054bc <HAL_GPIO_Init+0x314>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d02b      	beq.n	80053ce <HAL_GPIO_Init+0x226>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a51      	ldr	r2, [pc, #324]	; (80054c0 <HAL_GPIO_Init+0x318>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d025      	beq.n	80053ca <HAL_GPIO_Init+0x222>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a50      	ldr	r2, [pc, #320]	; (80054c4 <HAL_GPIO_Init+0x31c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <HAL_GPIO_Init+0x21e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a4f      	ldr	r2, [pc, #316]	; (80054c8 <HAL_GPIO_Init+0x320>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d019      	beq.n	80053c2 <HAL_GPIO_Init+0x21a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a4e      	ldr	r2, [pc, #312]	; (80054cc <HAL_GPIO_Init+0x324>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_GPIO_Init+0x216>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a4d      	ldr	r2, [pc, #308]	; (80054d0 <HAL_GPIO_Init+0x328>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00d      	beq.n	80053ba <HAL_GPIO_Init+0x212>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a4c      	ldr	r2, [pc, #304]	; (80054d4 <HAL_GPIO_Init+0x32c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <HAL_GPIO_Init+0x20e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a4b      	ldr	r2, [pc, #300]	; (80054d8 <HAL_GPIO_Init+0x330>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d101      	bne.n	80053b2 <HAL_GPIO_Init+0x20a>
 80053ae:	2307      	movs	r3, #7
 80053b0:	e00e      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053b2:	2308      	movs	r3, #8
 80053b4:	e00c      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053b6:	2306      	movs	r3, #6
 80053b8:	e00a      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053ba:	2305      	movs	r3, #5
 80053bc:	e008      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053be:	2304      	movs	r3, #4
 80053c0:	e006      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053c2:	2303      	movs	r3, #3
 80053c4:	e004      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e002      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_GPIO_Init+0x228>
 80053ce:	2300      	movs	r3, #0
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	f002 0203 	and.w	r2, r2, #3
 80053d6:	0092      	lsls	r2, r2, #2
 80053d8:	4093      	lsls	r3, r2
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053e0:	4935      	ldr	r1, [pc, #212]	; (80054b8 <HAL_GPIO_Init+0x310>)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	3302      	adds	r3, #2
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ee:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_GPIO_Init+0x334>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005412:	4a32      	ldr	r2, [pc, #200]	; (80054dc <HAL_GPIO_Init+0x334>)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005418:	4b30      	ldr	r3, [pc, #192]	; (80054dc <HAL_GPIO_Init+0x334>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	43db      	mvns	r3, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <HAL_GPIO_Init+0x334>)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005442:	4b26      	ldr	r3, [pc, #152]	; (80054dc <HAL_GPIO_Init+0x334>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005466:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <HAL_GPIO_Init+0x334>)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_GPIO_Init+0x334>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005490:	4a12      	ldr	r2, [pc, #72]	; (80054dc <HAL_GPIO_Init+0x334>)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3301      	adds	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	f67f ae90 	bls.w	80051c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3724      	adds	r7, #36	; 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40013800 	.word	0x40013800
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40020400 	.word	0x40020400
 80054c4:	40020800 	.word	0x40020800
 80054c8:	40020c00 	.word	0x40020c00
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40021400 	.word	0x40021400
 80054d4:	40021800 	.word	0x40021800
 80054d8:	40021c00 	.word	0x40021c00
 80054dc:	40013c00 	.word	0x40013c00

080054e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	887b      	ldrh	r3, [r7, #2]
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	e001      	b.n	8005502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	807b      	strh	r3, [r7, #2]
 800551c:	4613      	mov	r3, r2
 800551e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005520:	787b      	ldrb	r3, [r7, #1]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005526:	887a      	ldrh	r2, [r7, #2]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800552c:	e003      	b.n	8005536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	041a      	lsls	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	619a      	str	r2, [r3, #24]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005554:	887a      	ldrh	r2, [r7, #2]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4013      	ands	r3, r2
 800555a:	041a      	lsls	r2, r3, #16
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	43d9      	mvns	r1, r3
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	400b      	ands	r3, r1
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	619a      	str	r2, [r3, #24]
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e12b      	b.n	80057e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fe fd70 	bl	8004084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2224      	movs	r2, #36	; 0x24
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0201 	bic.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055dc:	f001 fbd4 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 80055e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a81      	ldr	r2, [pc, #516]	; (80057ec <HAL_I2C_Init+0x274>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d807      	bhi.n	80055fc <HAL_I2C_Init+0x84>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a80      	ldr	r2, [pc, #512]	; (80057f0 <HAL_I2C_Init+0x278>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bf94      	ite	ls
 80055f4:	2301      	movls	r3, #1
 80055f6:	2300      	movhi	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e006      	b.n	800560a <HAL_I2C_Init+0x92>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_I2C_Init+0x27c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	bf94      	ite	ls
 8005604:	2301      	movls	r3, #1
 8005606:	2300      	movhi	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e0e7      	b.n	80057e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a78      	ldr	r2, [pc, #480]	; (80057f8 <HAL_I2C_Init+0x280>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	0c9b      	lsrs	r3, r3, #18
 800561c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a6a      	ldr	r2, [pc, #424]	; (80057ec <HAL_I2C_Init+0x274>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d802      	bhi.n	800564c <HAL_I2C_Init+0xd4>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3301      	adds	r3, #1
 800564a:	e009      	b.n	8005660 <HAL_I2C_Init+0xe8>
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	4a69      	ldr	r2, [pc, #420]	; (80057fc <HAL_I2C_Init+0x284>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	099b      	lsrs	r3, r3, #6
 800565e:	3301      	adds	r3, #1
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	430b      	orrs	r3, r1
 8005666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	495c      	ldr	r1, [pc, #368]	; (80057ec <HAL_I2C_Init+0x274>)
 800567c:	428b      	cmp	r3, r1
 800567e:	d819      	bhi.n	80056b4 <HAL_I2C_Init+0x13c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1e59      	subs	r1, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	fbb1 f3f3 	udiv	r3, r1, r3
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005694:	400b      	ands	r3, r1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_I2C_Init+0x138>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1e59      	subs	r1, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	e051      	b.n	8005754 <HAL_I2C_Init+0x1dc>
 80056b0:	2304      	movs	r3, #4
 80056b2:	e04f      	b.n	8005754 <HAL_I2C_Init+0x1dc>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d111      	bne.n	80056e0 <HAL_I2C_Init+0x168>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1e58      	subs	r0, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	440b      	add	r3, r1
 80056ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ce:	3301      	adds	r3, #1
 80056d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	e012      	b.n	8005706 <HAL_I2C_Init+0x18e>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1e58      	subs	r0, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6859      	ldr	r1, [r3, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	0099      	lsls	r1, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f6:	3301      	adds	r3, #1
 80056f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <HAL_I2C_Init+0x196>
 800570a:	2301      	movs	r3, #1
 800570c:	e022      	b.n	8005754 <HAL_I2C_Init+0x1dc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10e      	bne.n	8005734 <HAL_I2C_Init+0x1bc>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1e58      	subs	r0, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	440b      	add	r3, r1
 8005724:	fbb0 f3f3 	udiv	r3, r0, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	e00f      	b.n	8005754 <HAL_I2C_Init+0x1dc>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1e58      	subs	r0, r3, #1
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	0099      	lsls	r1, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	fbb0 f3f3 	udiv	r3, r0, r3
 800574a:	3301      	adds	r3, #1
 800574c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	6809      	ldr	r1, [r1, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69da      	ldr	r2, [r3, #28]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005782:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6911      	ldr	r1, [r2, #16]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68d2      	ldr	r2, [r2, #12]
 800578e:	4311      	orrs	r1, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	430b      	orrs	r3, r1
 8005796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0201 	orr.w	r2, r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	000186a0 	.word	0x000186a0
 80057f0:	001e847f 	.word	0x001e847f
 80057f4:	003d08ff 	.word	0x003d08ff
 80057f8:	431bde83 	.word	0x431bde83
 80057fc:	10624dd3 	.word	0x10624dd3

08005800 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	461a      	mov	r2, r3
 800580e:	4603      	mov	r3, r0
 8005810:	817b      	strh	r3, [r7, #10]
 8005812:	460b      	mov	r3, r1
 8005814:	813b      	strh	r3, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800581a:	f7fe ff81 	bl	8004720 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b20      	cmp	r3, #32
 800582a:	f040 80d9 	bne.w	80059e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	2319      	movs	r3, #25
 8005834:	2201      	movs	r2, #1
 8005836:	496d      	ldr	r1, [pc, #436]	; (80059ec <HAL_I2C_Mem_Write+0x1ec>)
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fc7f 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
 8005846:	e0cc      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_I2C_Mem_Write+0x56>
 8005852:	2302      	movs	r3, #2
 8005854:	e0c5      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d007      	beq.n	800587c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800588a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2221      	movs	r2, #33	; 0x21
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4a4d      	ldr	r2, [pc, #308]	; (80059f0 <HAL_I2C_Mem_Write+0x1f0>)
 80058bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058be:	88f8      	ldrh	r0, [r7, #6]
 80058c0:	893a      	ldrh	r2, [r7, #8]
 80058c2:	8979      	ldrh	r1, [r7, #10]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	4603      	mov	r3, r0
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fab6 	bl	8005e40 <I2C_RequestMemoryWrite>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d052      	beq.n	8005980 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e081      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fd00 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d107      	bne.n	8005906 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e06b      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d11b      	bne.n	8005980 <HAL_I2C_Mem_Write+0x180>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d017      	beq.n	8005980 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1aa      	bne.n	80058de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fcec 	bl	800636a <I2C_WaitOnBTFFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2b04      	cmp	r3, #4
 800599e:	d107      	bne.n	80059b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e016      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059dc:	2300      	movs	r3, #0
 80059de:	e000      	b.n	80059e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
  }
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	00100002 	.word	0x00100002
 80059f0:	ffff0000 	.word	0xffff0000

080059f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	817b      	strh	r3, [r7, #10]
 8005a06:	460b      	mov	r3, r1
 8005a08:	813b      	strh	r3, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a0e:	f7fe fe87 	bl	8004720 <HAL_GetTick>
 8005a12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	f040 8208 	bne.w	8005e32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2319      	movs	r3, #25
 8005a28:	2201      	movs	r2, #1
 8005a2a:	497b      	ldr	r1, [pc, #492]	; (8005c18 <HAL_I2C_Mem_Read+0x224>)
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f000 fb85 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e1fb      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_I2C_Mem_Read+0x56>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e1f4      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d007      	beq.n	8005a70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2222      	movs	r2, #34	; 0x22
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2240      	movs	r2, #64	; 0x40
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4a5b      	ldr	r2, [pc, #364]	; (8005c1c <HAL_I2C_Mem_Read+0x228>)
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ab2:	88f8      	ldrh	r0, [r7, #6]
 8005ab4:	893a      	ldrh	r2, [r7, #8]
 8005ab6:	8979      	ldrh	r1, [r7, #10]
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa52 	bl	8005f6c <I2C_RequestMemoryRead>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e1b0      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d113      	bne.n	8005b02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	623b      	str	r3, [r7, #32]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	623b      	str	r3, [r7, #32]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	623b      	str	r3, [r7, #32]
 8005aee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e184      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d11b      	bne.n	8005b42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e164      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d11b      	bne.n	8005b82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	61bb      	str	r3, [r7, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	e144      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b98:	e138      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	f200 80f1 	bhi.w	8005d86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d123      	bne.n	8005bf4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 fc1b 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e139      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bf2:	e10b      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d14e      	bne.n	8005c9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	2200      	movs	r2, #0
 8005c04:	4906      	ldr	r1, [pc, #24]	; (8005c20 <HAL_I2C_Mem_Read+0x22c>)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fa98 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e10e      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
 8005c16:	bf00      	nop
 8005c18:	00100002 	.word	0x00100002
 8005c1c:	ffff0000 	.word	0xffff0000
 8005c20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c98:	e0b8      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	4966      	ldr	r1, [pc, #408]	; (8005e3c <HAL_I2C_Mem_Read+0x448>)
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa49 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0bf      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	494f      	ldr	r1, [pc, #316]	; (8005e3c <HAL_I2C_Mem_Read+0x448>)
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fa1b 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e091      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d84:	e042      	b.n	8005e0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fb2e 	bl	80063ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e04c      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d118      	bne.n	8005e0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f aec2 	bne.w	8005b9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3728      	adds	r7, #40	; 0x28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	00010004 	.word	0x00010004

08005e40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4603      	mov	r3, r0
 8005e50:	817b      	strh	r3, [r7, #10]
 8005e52:	460b      	mov	r3, r1
 8005e54:	813b      	strh	r3, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f960 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e90:	d103      	bne.n	8005e9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e05f      	b.n	8005f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	492d      	ldr	r1, [pc, #180]	; (8005f68 <I2C_RequestMemoryWrite+0x128>)
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f998 	bl	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e04c      	b.n	8005f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	6a39      	ldr	r1, [r7, #32]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fa02 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d107      	bne.n	8005f02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e02b      	b.n	8005f5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d105      	bne.n	8005f18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f0c:	893b      	ldrh	r3, [r7, #8]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	e021      	b.n	8005f5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f28:	6a39      	ldr	r1, [r7, #32]
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f9dc 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00d      	beq.n	8005f52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d107      	bne.n	8005f4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e005      	b.n	8005f5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f52:	893b      	ldrh	r3, [r7, #8]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	00010002 	.word	0x00010002

08005f6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	817b      	strh	r3, [r7, #10]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	813b      	strh	r3, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 f8c2 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fcc:	d103      	bne.n	8005fd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0aa      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fda:	897b      	ldrh	r3, [r7, #10]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fe8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	6a3a      	ldr	r2, [r7, #32]
 8005fee:	4952      	ldr	r1, [pc, #328]	; (8006138 <I2C_RequestMemoryRead+0x1cc>)
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8fa 	bl	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e097      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006018:	6a39      	ldr	r1, [r7, #32]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f964 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00d      	beq.n	8006042 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b04      	cmp	r3, #4
 800602c:	d107      	bne.n	800603e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e076      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d105      	bne.n	8006054 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006048:	893b      	ldrh	r3, [r7, #8]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	611a      	str	r2, [r3, #16]
 8006052:	e021      	b.n	8006098 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	b29b      	uxth	r3, r3
 800605a:	b2da      	uxtb	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	6a39      	ldr	r1, [r7, #32]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f93e 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00d      	beq.n	800608e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b04      	cmp	r3, #4
 8006078:	d107      	bne.n	800608a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006088:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e050      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800608e:	893b      	ldrh	r3, [r7, #8]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609a:	6a39      	ldr	r1, [r7, #32]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f923 	bl	80062e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00d      	beq.n	80060c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d107      	bne.n	80060c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e035      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2200      	movs	r2, #0
 80060dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f82b 	bl	800613c <I2C_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00d      	beq.n	8006108 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	d103      	bne.n	8006104 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e013      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006108:	897b      	ldrh	r3, [r7, #10]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f043 0301 	orr.w	r3, r3, #1
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	6a3a      	ldr	r2, [r7, #32]
 800611c:	4906      	ldr	r1, [pc, #24]	; (8006138 <I2C_RequestMemoryRead+0x1cc>)
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f863 	bl	80061ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	00010002 	.word	0x00010002

0800613c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800614c:	e025      	b.n	800619a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d021      	beq.n	800619a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006156:	f7fe fae3 	bl	8004720 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d302      	bcc.n	800616c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d116      	bne.n	800619a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0220 	orr.w	r2, r3, #32
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e023      	b.n	80061e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	0c1b      	lsrs	r3, r3, #16
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d10d      	bne.n	80061c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	43da      	mvns	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4013      	ands	r3, r2
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	e00c      	b.n	80061da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	43da      	mvns	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0b6      	beq.n	800614e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061f8:	e051      	b.n	800629e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006208:	d123      	bne.n	8006252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006218:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006222:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f043 0204 	orr.w	r2, r3, #4
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e046      	b.n	80062e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d021      	beq.n	800629e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625a:	f7fe fa61 	bl	8004720 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d116      	bne.n	800629e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e020      	b.n	80062e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	0c1b      	lsrs	r3, r3, #16
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d10c      	bne.n	80062c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	43da      	mvns	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4013      	ands	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e00b      	b.n	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	43da      	mvns	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4013      	ands	r3, r2
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d18d      	bne.n	80061fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062f4:	e02d      	b.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f8ce 	bl	8006498 <I2C_IsAcknowledgeFailed>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e02d      	b.n	8006362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d021      	beq.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fe fa07 	bl	8004720 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d116      	bne.n	8006352 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f043 0220 	orr.w	r2, r3, #32
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e007      	b.n	8006362 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	2b80      	cmp	r3, #128	; 0x80
 800635e:	d1ca      	bne.n	80062f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006376:	e02d      	b.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 f88d 	bl	8006498 <I2C_IsAcknowledgeFailed>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e02d      	b.n	80063e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d021      	beq.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006390:	f7fe f9c6 	bl	8004720 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d116      	bne.n	80063d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e007      	b.n	80063e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d1ca      	bne.n	8006378 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f8:	e042      	b.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b10      	cmp	r3, #16
 8006406:	d119      	bne.n	800643c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0210 	mvn.w	r2, #16
 8006410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e029      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643c:	f7fe f970 	bl	8004720 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d302      	bcc.n	8006452 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e007      	b.n	8006490 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d1b5      	bne.n	80063fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d11b      	bne.n	80064e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	f043 0204 	orr.w	r2, r3, #4
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_PWR_EnableBkUpAccess+0x24>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800650a:	687b      	ldr	r3, [r7, #4]
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	420e0020 	.word	0x420e0020
 800651c:	40007000 	.word	0x40007000

08006520 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006526:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800652c:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_PWR_DisableBkUpAccess+0x24>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006532:	687b      	ldr	r3, [r7, #4]
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	420e0020 	.word	0x420e0020
 8006544:	40007000 	.word	0x40007000

08006548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e264      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d075      	beq.n	8006652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006566:	4ba3      	ldr	r3, [pc, #652]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00c      	beq.n	800658c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006572:	4ba0      	ldr	r3, [pc, #640]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800657a:	2b08      	cmp	r3, #8
 800657c:	d112      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657e:	4b9d      	ldr	r3, [pc, #628]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800658a:	d10b      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	4b99      	ldr	r3, [pc, #612]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05b      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d157      	bne.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e23f      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d106      	bne.n	80065bc <HAL_RCC_OscConfig+0x74>
 80065ae:	4b91      	ldr	r3, [pc, #580]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a90      	ldr	r2, [pc, #576]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01d      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x98>
 80065c6:	4b8b      	ldr	r3, [pc, #556]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a8a      	ldr	r2, [pc, #552]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b88      	ldr	r3, [pc, #544]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a87      	ldr	r2, [pc, #540]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065e0:	4b84      	ldr	r3, [pc, #528]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a83      	ldr	r2, [pc, #524]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b81      	ldr	r3, [pc, #516]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a80      	ldr	r2, [pc, #512]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fe f88e 	bl	8004720 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006608:	f7fe f88a 	bl	8004720 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e204      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b76      	ldr	r3, [pc, #472]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0xc0>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fe f87a 	bl	8004720 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006630:	f7fe f876 	bl	8004720 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	; 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e1f0      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006642:	4b6c      	ldr	r3, [pc, #432]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d063      	beq.n	8006726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800665e:	4b65      	ldr	r3, [pc, #404]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666a:	4b62      	ldr	r3, [pc, #392]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006672:	2b08      	cmp	r3, #8
 8006674:	d11c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006676:	4b5f      	ldr	r3, [pc, #380]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006682:	4b5c      	ldr	r3, [pc, #368]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e1c4      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669a:	4b56      	ldr	r3, [pc, #344]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4952      	ldr	r1, [pc, #328]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ae:	e03a      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b8:	4b4f      	ldr	r3, [pc, #316]	; (80067f8 <HAL_RCC_OscConfig+0x2b0>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fe f82f 	bl	8004720 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fe f82b 	bl	8004720 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1a5      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d8:	4b46      	ldr	r3, [pc, #280]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	4b43      	ldr	r3, [pc, #268]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4940      	ldr	r1, [pc, #256]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	e015      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fa:	4b3f      	ldr	r3, [pc, #252]	; (80067f8 <HAL_RCC_OscConfig+0x2b0>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fe f80e 	bl	8004720 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006708:	f7fe f80a 	bl	8004720 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e184      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d030      	beq.n	8006794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800673a:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_RCC_OscConfig+0x2b4>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fd ffee 	bl	8004720 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006748:	f7fd ffea 	bl	8004720 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e164      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675a:	4b26      	ldr	r3, [pc, #152]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x200>
 8006766:	e015      	b.n	8006794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b24      	ldr	r3, [pc, #144]	; (80067fc <HAL_RCC_OscConfig+0x2b4>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7fd ffd7 	bl	8004720 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006776:	f7fd ffd3 	bl	8004720 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e14d      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006788:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 800678a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1f0      	bne.n	8006776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80a0 	beq.w	80068e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10f      	bne.n	80067d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80067bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6413      	str	r3, [r2, #64]	; 0x40
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <HAL_RCC_OscConfig+0x2ac>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ca:	60bb      	str	r3, [r7, #8]
 80067cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_OscConfig+0x2b8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d121      	bne.n	8006822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCC_OscConfig+0x2b8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <HAL_RCC_OscConfig+0x2b8>)
 80067e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ea:	f7fd ff99 	bl	8004720 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f0:	e011      	b.n	8006816 <HAL_RCC_OscConfig+0x2ce>
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470000 	.word	0x42470000
 80067fc:	42470e80 	.word	0x42470e80
 8006800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006804:	f7fd ff8c 	bl	8004720 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e106      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006816:	4b85      	ldr	r3, [pc, #532]	; (8006a2c <HAL_RCC_OscConfig+0x4e4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0f0      	beq.n	8006804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d106      	bne.n	8006838 <HAL_RCC_OscConfig+0x2f0>
 800682a:	4b81      	ldr	r3, [pc, #516]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	4a80      	ldr	r2, [pc, #512]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	6713      	str	r3, [r2, #112]	; 0x70
 8006836:	e01c      	b.n	8006872 <HAL_RCC_OscConfig+0x32a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b05      	cmp	r3, #5
 800683e:	d10c      	bne.n	800685a <HAL_RCC_OscConfig+0x312>
 8006840:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	4a7a      	ldr	r2, [pc, #488]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006846:	f043 0304 	orr.w	r3, r3, #4
 800684a:	6713      	str	r3, [r2, #112]	; 0x70
 800684c:	4b78      	ldr	r3, [pc, #480]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	4a77      	ldr	r2, [pc, #476]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	6713      	str	r3, [r2, #112]	; 0x70
 8006858:	e00b      	b.n	8006872 <HAL_RCC_OscConfig+0x32a>
 800685a:	4b75      	ldr	r3, [pc, #468]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	4a74      	ldr	r2, [pc, #464]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	6713      	str	r3, [r2, #112]	; 0x70
 8006866:	4b72      	ldr	r3, [pc, #456]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	4a71      	ldr	r2, [pc, #452]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 800686c:	f023 0304 	bic.w	r3, r3, #4
 8006870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d015      	beq.n	80068a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fd ff51 	bl	8004720 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006880:	e00a      	b.n	8006898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006882:	f7fd ff4d 	bl	8004720 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006890:	4293      	cmp	r3, r2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e0c5      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006898:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0ee      	beq.n	8006882 <HAL_RCC_OscConfig+0x33a>
 80068a4:	e014      	b.n	80068d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a6:	f7fd ff3b 	bl	8004720 <HAL_GetTick>
 80068aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ac:	e00a      	b.n	80068c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ae:	f7fd ff37 	bl	8004720 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	4293      	cmp	r3, r2
 80068be:	d901      	bls.n	80068c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e0af      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068c4:	4b5a      	ldr	r3, [pc, #360]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ee      	bne.n	80068ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d105      	bne.n	80068e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d6:	4b56      	ldr	r3, [pc, #344]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	4a55      	ldr	r2, [pc, #340]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80068dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 809b 	beq.w	8006a22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068ec:	4b50      	ldr	r3, [pc, #320]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d05c      	beq.n	80069b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d141      	bne.n	8006984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006900:	4b4c      	ldr	r3, [pc, #304]	; (8006a34 <HAL_RCC_OscConfig+0x4ec>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006906:	f7fd ff0b 	bl	8004720 <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800690e:	f7fd ff07 	bl	8004720 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e081      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006920:	4b43      	ldr	r3, [pc, #268]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	3b01      	subs	r3, #1
 8006946:	041b      	lsls	r3, r3, #16
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	061b      	lsls	r3, r3, #24
 8006950:	4937      	ldr	r1, [pc, #220]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006952:	4313      	orrs	r3, r2
 8006954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <HAL_RCC_OscConfig+0x4ec>)
 8006958:	2201      	movs	r2, #1
 800695a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695c:	f7fd fee0 	bl	8004720 <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006964:	f7fd fedc 	bl	8004720 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e056      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006976:	4b2e      	ldr	r3, [pc, #184]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0f0      	beq.n	8006964 <HAL_RCC_OscConfig+0x41c>
 8006982:	e04e      	b.n	8006a22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006984:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_OscConfig+0x4ec>)
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fd fec9 	bl	8004720 <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006992:	f7fd fec5 	bl	8004720 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e03f      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a4:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1f0      	bne.n	8006992 <HAL_RCC_OscConfig+0x44a>
 80069b0:	e037      	b.n	8006a22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e032      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069be:	4b1c      	ldr	r3, [pc, #112]	; (8006a30 <HAL_RCC_OscConfig+0x4e8>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d028      	beq.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d121      	bne.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d11a      	bne.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069ee:	4013      	ands	r3, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d111      	bne.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	3b01      	subs	r3, #1
 8006a08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d107      	bne.n	8006a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40007000 	.word	0x40007000
 8006a30:	40023800 	.word	0x40023800
 8006a34:	42470060 	.word	0x42470060

08006a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0cc      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b68      	ldr	r3, [pc, #416]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d90c      	bls.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b65      	ldr	r3, [pc, #404]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	4b63      	ldr	r3, [pc, #396]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0b8      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a8c:	4b59      	ldr	r3, [pc, #356]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4a58      	ldr	r2, [pc, #352]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa4:	4b53      	ldr	r3, [pc, #332]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a52      	ldr	r2, [pc, #328]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b50      	ldr	r3, [pc, #320]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	494d      	ldr	r1, [pc, #308]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d044      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad6:	4b47      	ldr	r3, [pc, #284]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d119      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e07f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d003      	beq.n	8006af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d107      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af6:	4b3f      	ldr	r3, [pc, #252]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b06:	4b3b      	ldr	r3, [pc, #236]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e067      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b16:	4b37      	ldr	r3, [pc, #220]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f023 0203 	bic.w	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4934      	ldr	r1, [pc, #208]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b28:	f7fd fdfa 	bl	8004720 <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b30:	f7fd fdf6 	bl	8004720 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e04f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	4b2b      	ldr	r3, [pc, #172]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 020c 	and.w	r2, r3, #12
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1eb      	bne.n	8006b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b58:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d20c      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b20      	ldr	r3, [pc, #128]	; (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e032      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4916      	ldr	r1, [pc, #88]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006baa:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	490e      	ldr	r1, [pc, #56]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bbe:	f000 f821 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	490a      	ldr	r1, [pc, #40]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	5ccb      	ldrb	r3, [r1, r3]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_ClockConfig+0x1c8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fd5a 	bl	8004698 <HAL_InitTick>

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023c00 	.word	0x40023c00
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800d998 	.word	0x0800d998
 8006bfc:	20000030 	.word	0x20000030
 8006c00:	20000034 	.word	0x20000034

08006c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	b5b0      	push	{r4, r5, r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	6079      	str	r1, [r7, #4]
 8006c0e:	2100      	movs	r1, #0
 8006c10:	60f9      	str	r1, [r7, #12]
 8006c12:	2100      	movs	r1, #0
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006c16:	2100      	movs	r1, #0
 8006c18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c1a:	4952      	ldr	r1, [pc, #328]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c1c:	6889      	ldr	r1, [r1, #8]
 8006c1e:	f001 010c 	and.w	r1, r1, #12
 8006c22:	2908      	cmp	r1, #8
 8006c24:	d00d      	beq.n	8006c42 <HAL_RCC_GetSysClockFreq+0x3e>
 8006c26:	2908      	cmp	r1, #8
 8006c28:	f200 8094 	bhi.w	8006d54 <HAL_RCC_GetSysClockFreq+0x150>
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	d002      	beq.n	8006c36 <HAL_RCC_GetSysClockFreq+0x32>
 8006c30:	2904      	cmp	r1, #4
 8006c32:	d003      	beq.n	8006c3c <HAL_RCC_GetSysClockFreq+0x38>
 8006c34:	e08e      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c36:	4b4c      	ldr	r3, [pc, #304]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8006c38:	60bb      	str	r3, [r7, #8]
       break;
 8006c3a:	e08e      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3c:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006c3e:	60bb      	str	r3, [r7, #8]
      break;
 8006c40:	e08b      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c42:	4948      	ldr	r1, [pc, #288]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c44:	6849      	ldr	r1, [r1, #4]
 8006c46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006c4a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c4c:	4945      	ldr	r1, [pc, #276]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c4e:	6849      	ldr	r1, [r1, #4]
 8006c50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d024      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c58:	4942      	ldr	r1, [pc, #264]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c5a:	6849      	ldr	r1, [r1, #4]
 8006c5c:	0989      	lsrs	r1, r1, #6
 8006c5e:	4608      	mov	r0, r1
 8006c60:	f04f 0100 	mov.w	r1, #0
 8006c64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006c68:	f04f 0500 	mov.w	r5, #0
 8006c6c:	ea00 0204 	and.w	r2, r0, r4
 8006c70:	ea01 0305 	and.w	r3, r1, r5
 8006c74:	493d      	ldr	r1, [pc, #244]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006c76:	fb01 f003 	mul.w	r0, r1, r3
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	fb01 f102 	mul.w	r1, r1, r2
 8006c80:	1844      	adds	r4, r0, r1
 8006c82:	493a      	ldr	r1, [pc, #232]	; (8006d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006c84:	fba2 0101 	umull	r0, r1, r2, r1
 8006c88:	1863      	adds	r3, r4, r1
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	f7f9 ffe2 	bl	8000c5c <__aeabi_uldivmod>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e04a      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca2:	4b30      	ldr	r3, [pc, #192]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	099b      	lsrs	r3, r3, #6
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	ea02 0400 	and.w	r4, r2, r0
 8006cba:	ea03 0501 	and.w	r5, r3, r1
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	014b      	lsls	r3, r1, #5
 8006ccc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006cd0:	0142      	lsls	r2, r0, #5
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	1b00      	subs	r0, r0, r4
 8006cd8:	eb61 0105 	sbc.w	r1, r1, r5
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	018b      	lsls	r3, r1, #6
 8006ce6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006cea:	0182      	lsls	r2, r0, #6
 8006cec:	1a12      	subs	r2, r2, r0
 8006cee:	eb63 0301 	sbc.w	r3, r3, r1
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f04f 0100 	mov.w	r1, #0
 8006cfa:	00d9      	lsls	r1, r3, #3
 8006cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d00:	00d0      	lsls	r0, r2, #3
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	1912      	adds	r2, r2, r4
 8006d08:	eb45 0303 	adc.w	r3, r5, r3
 8006d0c:	f04f 0000 	mov.w	r0, #0
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	0299      	lsls	r1, r3, #10
 8006d16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006d1a:	0290      	lsls	r0, r2, #10
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	f7f9 ff96 	bl	8000c5c <__aeabi_uldivmod>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4613      	mov	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d38:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	3301      	adds	r3, #1
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d50:	60bb      	str	r3, [r7, #8]
      break;
 8006d52:	e002      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8006d56:	60bb      	str	r3, [r7, #8]
      break;
 8006d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdb0      	pop	{r4, r5, r7, pc}
 8006d64:	40023800 	.word	0x40023800
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	017d7840 	.word	0x017d7840

08006d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d74:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d76:	681b      	ldr	r3, [r3, #0]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000030 	.word	0x20000030

08006d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d8c:	f7ff fff0 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	0a9b      	lsrs	r3, r3, #10
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	4903      	ldr	r1, [pc, #12]	; (8006dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d9e:	5ccb      	ldrb	r3, [r1, r3]
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40023800 	.word	0x40023800
 8006dac:	0800d9a8 	.word	0x0800d9a8

08006db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006db4:	f7ff ffdc 	bl	8006d70 <HAL_RCC_GetHCLKFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	0b5b      	lsrs	r3, r3, #13
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	4903      	ldr	r1, [pc, #12]	; (8006dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	0800d9a8 	.word	0x0800d9a8

08006dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e041      	b.n	8006e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fd f988 	bl	8004114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4619      	mov	r1, r3
 8006e16:	4610      	mov	r0, r2
 8006e18:	f000 fe6c 	bl	8007af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e041      	b.n	8006f0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f839 	bl	8006f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 fe1d 	bl	8007af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_TIM_PWM_Start+0x24>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	e022      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d109      	bne.n	8006f66 <HAL_TIM_PWM_Start+0x3e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	bf14      	ite	ne
 8006f5e:	2301      	movne	r3, #1
 8006f60:	2300      	moveq	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	e015      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d109      	bne.n	8006f80 <HAL_TIM_PWM_Start+0x58>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e008      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07c      	b.n	8007094 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0x82>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa8:	e013      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_PWM_Start+0x92>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb8:	e00b      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_PWM_Start+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc8:	e003      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f99e 	bl	800831c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	; (800709c <HAL_TIM_PWM_Start+0x174>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_PWM_Start+0xcc>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2c      	ldr	r2, [pc, #176]	; (80070a0 <HAL_TIM_PWM_Start+0x178>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Start+0xd0>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_PWM_Start+0xd2>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a22      	ldr	r2, [pc, #136]	; (800709c <HAL_TIM_PWM_Start+0x174>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d022      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d01d      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_TIM_PWM_Start+0x17c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d018      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_TIM_PWM_Start+0x180>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_TIM_PWM_Start+0x184>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00e      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <HAL_TIM_PWM_Start+0x178>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_TIM_PWM_Start+0x188>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_TIM_PWM_Start+0x18c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d111      	bne.n	8007082 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b06      	cmp	r3, #6
 800706e:	d010      	beq.n	8007092 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	e007      	b.n	8007092 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40010000 	.word	0x40010000
 80070a0:	40010400 	.word	0x40010400
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40001800 	.word	0x40001800

080070b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e041      	b.n	800714e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fd f930 	bl	8004344 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f000 fcfc 	bl	8007af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e097      	b.n	800729a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fd f846 	bl	8004210 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f000 fca2 	bl	8007af4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	4313      	orrs	r3, r2
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071f6:	f023 030c 	bic.w	r3, r3, #12
 80071fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	4313      	orrs	r3, r2
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	011a      	lsls	r2, r3, #4
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	031b      	lsls	r3, r3, #12
 8007226:	4313      	orrs	r3, r2
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007234:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800723c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4313      	orrs	r3, r2
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072ba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072c2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072ca:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d110      	bne.n	80072f4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d102      	bne.n	80072de <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072d8:	7b7b      	ldrb	r3, [r7, #13]
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d001      	beq.n	80072e2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e069      	b.n	80073b6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2202      	movs	r2, #2
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f2:	e031      	b.n	8007358 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d110      	bne.n	800731c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d102      	bne.n	8007306 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007300:	7b3b      	ldrb	r3, [r7, #12]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d001      	beq.n	800730a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e055      	b.n	80073b6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800731a:	e01d      	b.n	8007358 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d108      	bne.n	8007334 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d105      	bne.n	8007334 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007328:	7b7b      	ldrb	r3, [r7, #13]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d102      	bne.n	8007334 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800732e:	7b3b      	ldrb	r3, [r7, #12]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d001      	beq.n	8007338 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e03e      	b.n	80073b6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_Encoder_Start+0xc4>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b04      	cmp	r3, #4
 8007362:	d008      	beq.n	8007376 <HAL_TIM_Encoder_Start+0xd4>
 8007364:	e00f      	b.n	8007386 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2201      	movs	r2, #1
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 ffd4 	bl	800831c <TIM_CCxChannelCmd>
      break;
 8007374:	e016      	b.n	80073a4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2201      	movs	r2, #1
 800737c:	2104      	movs	r1, #4
 800737e:	4618      	mov	r0, r3
 8007380:	f000 ffcc 	bl	800831c <TIM_CCxChannelCmd>
      break;
 8007384:	e00e      	b.n	80073a4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2201      	movs	r2, #1
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f000 ffc4 	bl	800831c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	2104      	movs	r1, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f000 ffbd 	bl	800831c <TIM_CCxChannelCmd>
      break;
 80073a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d122      	bne.n	800741a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d11b      	bne.n	800741a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f06f 0202 	mvn.w	r2, #2
 80073ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f003 0303 	and.w	r3, r3, #3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fa f975 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007406:	e005      	b.n	8007414 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb55 	bl	8007ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fb5c 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b04      	cmp	r3, #4
 8007426:	d122      	bne.n	800746e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b04      	cmp	r3, #4
 8007434:	d11b      	bne.n	800746e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f06f 0204 	mvn.w	r2, #4
 800743e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fa f94b 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 800745a:	e005      	b.n	8007468 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fb2b 	bl	8007ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb32 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d122      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b08      	cmp	r3, #8
 8007488:	d11b      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f06f 0208 	mvn.w	r2, #8
 8007492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2204      	movs	r2, #4
 8007498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fa f921 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 80074ae:	e005      	b.n	80074bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fb01 	bl	8007ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fb08 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0310 	and.w	r3, r3, #16
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d122      	bne.n	8007516 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d11b      	bne.n	8007516 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f06f 0210 	mvn.w	r2, #16
 80074e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2208      	movs	r2, #8
 80074ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fa f8f7 	bl	80016f0 <HAL_TIM_IC_CaptureCallback>
 8007502:	e005      	b.n	8007510 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fad7 	bl	8007ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fade 	bl	8007acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d10e      	bne.n	8007542 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b01      	cmp	r3, #1
 8007530:	d107      	bne.n	8007542 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f06f 0201 	mvn.w	r2, #1
 800753a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fab1 	bl	8007aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754c:	2b80      	cmp	r3, #128	; 0x80
 800754e:	d10e      	bne.n	800756e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b80      	cmp	r3, #128	; 0x80
 800755c:	d107      	bne.n	800756e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 ffd5 	bl	8008518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d10e      	bne.n	800759a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d107      	bne.n	800759a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 faa3 	bl	8007ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d10e      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b20      	cmp	r3, #32
 80075b4:	d107      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f06f 0220 	mvn.w	r2, #32
 80075be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ff9f 	bl	8008504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e088      	b.n	80076fe <HAL_TIM_IC_ConfigChannel+0x130>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d11b      	bne.n	8007632 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6818      	ldr	r0, [r3, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f000 fcc3 	bl	8007f94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699a      	ldr	r2, [r3, #24]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 020c 	bic.w	r2, r2, #12
 800761c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6999      	ldr	r1, [r3, #24]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	619a      	str	r2, [r3, #24]
 8007630:	e060      	b.n	80076f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b04      	cmp	r3, #4
 8007636:	d11c      	bne.n	8007672 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f000 fd47 	bl	80080da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800765a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6999      	ldr	r1, [r3, #24]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	021a      	lsls	r2, r3, #8
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	619a      	str	r2, [r3, #24]
 8007670:	e040      	b.n	80076f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d11b      	bne.n	80076b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f000 fd94 	bl	80081b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 020c 	bic.w	r2, r2, #12
 800769a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69d9      	ldr	r1, [r3, #28]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689a      	ldr	r2, [r3, #8]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	61da      	str	r2, [r3, #28]
 80076ae:	e021      	b.n	80076f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b0c      	cmp	r3, #12
 80076b4:	d11c      	bne.n	80076f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f000 fdb1 	bl	800822c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	021a      	lsls	r2, r3, #8
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	61da      	str	r2, [r3, #28]
 80076ee:	e001      	b.n	80076f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007722:	2302      	movs	r3, #2
 8007724:	e0ae      	b.n	8007884 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b0c      	cmp	r3, #12
 8007732:	f200 809f 	bhi.w	8007874 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007771 	.word	0x08007771
 8007740:	08007875 	.word	0x08007875
 8007744:	08007875 	.word	0x08007875
 8007748:	08007875 	.word	0x08007875
 800774c:	080077b1 	.word	0x080077b1
 8007750:	08007875 	.word	0x08007875
 8007754:	08007875 	.word	0x08007875
 8007758:	08007875 	.word	0x08007875
 800775c:	080077f3 	.word	0x080077f3
 8007760:	08007875 	.word	0x08007875
 8007764:	08007875 	.word	0x08007875
 8007768:	08007875 	.word	0x08007875
 800776c:	08007833 	.word	0x08007833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fa5c 	bl	8007c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0208 	orr.w	r2, r2, #8
 800778a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0204 	bic.w	r2, r2, #4
 800779a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6999      	ldr	r1, [r3, #24]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	619a      	str	r2, [r3, #24]
      break;
 80077ae:	e064      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 faac 	bl	8007d14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699a      	ldr	r2, [r3, #24]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6999      	ldr	r1, [r3, #24]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	021a      	lsls	r2, r3, #8
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	619a      	str	r2, [r3, #24]
      break;
 80077f0:	e043      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fb01 	bl	8007e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0208 	orr.w	r2, r2, #8
 800780c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0204 	bic.w	r2, r2, #4
 800781c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69d9      	ldr	r1, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	61da      	str	r2, [r3, #28]
      break;
 8007830:	e023      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fb55 	bl	8007ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800784c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69d9      	ldr	r1, [r3, #28]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	021a      	lsls	r2, r3, #8
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	61da      	str	r2, [r3, #28]
      break;
 8007872:	e002      	b.n	800787a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIM_ConfigClockSource+0x1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e0b4      	b.n	8007a12 <HAL_TIM_ConfigClockSource+0x186>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e0:	d03e      	beq.n	8007960 <HAL_TIM_ConfigClockSource+0xd4>
 80078e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e6:	f200 8087 	bhi.w	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	f000 8086 	beq.w	80079fe <HAL_TIM_ConfigClockSource+0x172>
 80078f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078f6:	d87f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f8:	2b70      	cmp	r3, #112	; 0x70
 80078fa:	d01a      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0xa6>
 80078fc:	2b70      	cmp	r3, #112	; 0x70
 80078fe:	d87b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b60      	cmp	r3, #96	; 0x60
 8007902:	d050      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x11a>
 8007904:	2b60      	cmp	r3, #96	; 0x60
 8007906:	d877      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b50      	cmp	r3, #80	; 0x50
 800790a:	d03c      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0xfa>
 800790c:	2b50      	cmp	r3, #80	; 0x50
 800790e:	d873      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007910:	2b40      	cmp	r3, #64	; 0x40
 8007912:	d058      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x13a>
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	d86f      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b30      	cmp	r3, #48	; 0x30
 800791a:	d064      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 800791c:	2b30      	cmp	r3, #48	; 0x30
 800791e:	d86b      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007920:	2b20      	cmp	r3, #32
 8007922:	d060      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007924:	2b20      	cmp	r3, #32
 8007926:	d867      	bhi.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d05c      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 800792c:	2b10      	cmp	r3, #16
 800792e:	d05a      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	e062      	b.n	80079f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6899      	ldr	r1, [r3, #8]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f000 fccb 	bl	80082dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	609a      	str	r2, [r3, #8]
      break;
 800795e:	e04f      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	6899      	ldr	r1, [r3, #8]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f000 fcb4 	bl	80082dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007982:	609a      	str	r2, [r3, #8]
      break;
 8007984:	e03c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fb72 	bl	800807c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2150      	movs	r1, #80	; 0x50
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fc81 	bl	80082a6 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e02c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fbce 	bl	8008154 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2160      	movs	r1, #96	; 0x60
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fc71 	bl	80082a6 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e01c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 fb52 	bl	800807c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2140      	movs	r1, #64	; 0x40
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fc61 	bl	80082a6 <TIM_ITRx_SetConfig>
      break;
 80079e4:	e00c      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f000 fc58 	bl	80082a6 <TIM_ITRx_SetConfig>
      break;
 80079f6:	e003      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
      break;
 80079fc:	e000      	b.n	8007a00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b0c      	cmp	r3, #12
 8007a2e:	d831      	bhi.n	8007a94 <HAL_TIM_ReadCapturedValue+0x78>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a6d 	.word	0x08007a6d
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a95 	.word	0x08007a95
 8007a48:	08007a77 	.word	0x08007a77
 8007a4c:	08007a95 	.word	0x08007a95
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a95 	.word	0x08007a95
 8007a60:	08007a95 	.word	0x08007a95
 8007a64:	08007a95 	.word	0x08007a95
 8007a68:	08007a8b 	.word	0x08007a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	60fb      	str	r3, [r7, #12]

      break;
 8007a74:	e00f      	b.n	8007a96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	60fb      	str	r3, [r7, #12]

      break;
 8007a7e:	e00a      	b.n	8007a96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	60fb      	str	r3, [r7, #12]

      break;
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	60fb      	str	r3, [r7, #12]

      break;
 8007a92:	e000      	b.n	8007a96 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007a94:	bf00      	nop
  }

  return tmpreg;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a40      	ldr	r2, [pc, #256]	; (8007c08 <TIM_Base_SetConfig+0x114>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d00f      	beq.n	8007b34 <TIM_Base_SetConfig+0x40>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a3d      	ldr	r2, [pc, #244]	; (8007c0c <TIM_Base_SetConfig+0x118>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00b      	beq.n	8007b34 <TIM_Base_SetConfig+0x40>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a3c      	ldr	r2, [pc, #240]	; (8007c10 <TIM_Base_SetConfig+0x11c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d007      	beq.n	8007b34 <TIM_Base_SetConfig+0x40>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a3b      	ldr	r2, [pc, #236]	; (8007c14 <TIM_Base_SetConfig+0x120>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_Base_SetConfig+0x40>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a3a      	ldr	r2, [pc, #232]	; (8007c18 <TIM_Base_SetConfig+0x124>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d108      	bne.n	8007b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2f      	ldr	r2, [pc, #188]	; (8007c08 <TIM_Base_SetConfig+0x114>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d02b      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d027      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <TIM_Base_SetConfig+0x118>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d023      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a2b      	ldr	r2, [pc, #172]	; (8007c10 <TIM_Base_SetConfig+0x11c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d01f      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2a      	ldr	r2, [pc, #168]	; (8007c14 <TIM_Base_SetConfig+0x120>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d01b      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a29      	ldr	r2, [pc, #164]	; (8007c18 <TIM_Base_SetConfig+0x124>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d017      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a28      	ldr	r2, [pc, #160]	; (8007c1c <TIM_Base_SetConfig+0x128>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d013      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a27      	ldr	r2, [pc, #156]	; (8007c20 <TIM_Base_SetConfig+0x12c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00f      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a26      	ldr	r2, [pc, #152]	; (8007c24 <TIM_Base_SetConfig+0x130>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00b      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <TIM_Base_SetConfig+0x134>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d007      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <TIM_Base_SetConfig+0x138>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_Base_SetConfig+0xb2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a23      	ldr	r2, [pc, #140]	; (8007c30 <TIM_Base_SetConfig+0x13c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d108      	bne.n	8007bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <TIM_Base_SetConfig+0x114>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_Base_SetConfig+0xf8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <TIM_Base_SetConfig+0x124>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d103      	bne.n	8007bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	615a      	str	r2, [r3, #20]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40010000 	.word	0x40010000
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40010400 	.word	0x40010400
 8007c1c:	40014000 	.word	0x40014000
 8007c20:	40014400 	.word	0x40014400
 8007c24:	40014800 	.word	0x40014800
 8007c28:	40001800 	.word	0x40001800
 8007c2c:	40001c00 	.word	0x40001c00
 8007c30:	40002000 	.word	0x40002000

08007c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f023 0201 	bic.w	r2, r3, #1
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f023 0302 	bic.w	r3, r3, #2
 8007c7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a20      	ldr	r2, [pc, #128]	; (8007d0c <TIM_OC1_SetConfig+0xd8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC1_SetConfig+0x64>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <TIM_OC1_SetConfig+0xdc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d10c      	bne.n	8007cb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f023 0308 	bic.w	r3, r3, #8
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f023 0304 	bic.w	r3, r3, #4
 8007cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a15      	ldr	r2, [pc, #84]	; (8007d0c <TIM_OC1_SetConfig+0xd8>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_OC1_SetConfig+0x8e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <TIM_OC1_SetConfig+0xdc>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d111      	bne.n	8007ce6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	621a      	str	r2, [r3, #32]
}
 8007d00:	bf00      	nop
 8007d02:	371c      	adds	r7, #28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40010400 	.word	0x40010400

08007d14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f023 0210 	bic.w	r2, r3, #16
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f023 0320 	bic.w	r3, r3, #32
 8007d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a22      	ldr	r2, [pc, #136]	; (8007df8 <TIM_OC2_SetConfig+0xe4>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_OC2_SetConfig+0x68>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a21      	ldr	r2, [pc, #132]	; (8007dfc <TIM_OC2_SetConfig+0xe8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d10d      	bne.n	8007d98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <TIM_OC2_SetConfig+0xe4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d003      	beq.n	8007da8 <TIM_OC2_SetConfig+0x94>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <TIM_OC2_SetConfig+0xe8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d113      	bne.n	8007dd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	621a      	str	r2, [r3, #32]
}
 8007dea:	bf00      	nop
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40010400 	.word	0x40010400

08007e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <TIM_OC3_SetConfig+0xe0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_OC3_SetConfig+0x66>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a20      	ldr	r2, [pc, #128]	; (8007ee4 <TIM_OC3_SetConfig+0xe4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d10d      	bne.n	8007e82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <TIM_OC3_SetConfig+0xe0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d003      	beq.n	8007e92 <TIM_OC3_SetConfig+0x92>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a15      	ldr	r2, [pc, #84]	; (8007ee4 <TIM_OC3_SetConfig+0xe4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d113      	bne.n	8007eba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	621a      	str	r2, [r3, #32]
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40010400 	.word	0x40010400

08007ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	031b      	lsls	r3, r3, #12
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a12      	ldr	r2, [pc, #72]	; (8007f8c <TIM_OC4_SetConfig+0xa4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d003      	beq.n	8007f50 <TIM_OC4_SetConfig+0x68>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a11      	ldr	r2, [pc, #68]	; (8007f90 <TIM_OC4_SetConfig+0xa8>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d109      	bne.n	8007f64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	019b      	lsls	r3, r3, #6
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	697a      	ldr	r2, [r7, #20]
 8007f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40010400 	.word	0x40010400

08007f94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	f023 0201 	bic.w	r2, r3, #1
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4a28      	ldr	r2, [pc, #160]	; (8008060 <TIM_TI1_SetConfig+0xcc>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01b      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc8:	d017      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a25      	ldr	r2, [pc, #148]	; (8008064 <TIM_TI1_SetConfig+0xd0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a24      	ldr	r2, [pc, #144]	; (8008068 <TIM_TI1_SetConfig+0xd4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00f      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4a23      	ldr	r2, [pc, #140]	; (800806c <TIM_TI1_SetConfig+0xd8>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00b      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a22      	ldr	r2, [pc, #136]	; (8008070 <TIM_TI1_SetConfig+0xdc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d007      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4a21      	ldr	r2, [pc, #132]	; (8008074 <TIM_TI1_SetConfig+0xe0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d003      	beq.n	8007ffa <TIM_TI1_SetConfig+0x66>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4a20      	ldr	r2, [pc, #128]	; (8008078 <TIM_TI1_SetConfig+0xe4>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d101      	bne.n	8007ffe <TIM_TI1_SetConfig+0x6a>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <TIM_TI1_SetConfig+0x6c>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	e003      	b.n	800801e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f043 0301 	orr.w	r3, r3, #1
 800801c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	b2db      	uxtb	r3, r3
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f023 030a 	bic.w	r3, r3, #10
 8008038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f003 030a 	and.w	r3, r3, #10
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	bf00      	nop
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	40010000 	.word	0x40010000
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	40000c00 	.word	0x40000c00
 8008070:	40010400 	.word	0x40010400
 8008074:	40014000 	.word	0x40014000
 8008078:	40001800 	.word	0x40001800

0800807c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f023 0201 	bic.w	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f023 030a 	bic.w	r3, r3, #10
 80080b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4313      	orrs	r3, r2
 80080c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	f023 0210 	bic.w	r2, r3, #16
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	031b      	lsls	r3, r3, #12
 800811e:	b29b      	uxth	r3, r3
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800812c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	011b      	lsls	r3, r3, #4
 8008132:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	621a      	str	r2, [r3, #32]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	f023 0210 	bic.w	r2, r3, #16
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800817e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	031b      	lsls	r3, r3, #12
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008190:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4313      	orrs	r3, r2
 800819a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	621a      	str	r2, [r3, #32]
}
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f023 0303 	bic.w	r3, r3, #3
 80081e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	011b      	lsls	r3, r3, #4
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008204:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	621a      	str	r2, [r3, #32]
}
 8008220:	bf00      	nop
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008258:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4313      	orrs	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800826a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	031b      	lsls	r3, r3, #12
 8008270:	b29b      	uxth	r3, r3
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800827e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	031b      	lsls	r3, r3, #12
 8008284:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4313      	orrs	r3, r2
 800828c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	621a      	str	r2, [r3, #32]
}
 800829a:	bf00      	nop
 800829c:	371c      	adds	r7, #28
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f043 0307 	orr.w	r3, r3, #7
 80082c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	609a      	str	r2, [r3, #8]
}
 80082d0:	bf00      	nop
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	021a      	lsls	r2, r3, #8
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	431a      	orrs	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4313      	orrs	r3, r2
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	609a      	str	r2, [r3, #8]
}
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2201      	movs	r2, #1
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	43db      	mvns	r3, r3
 800833e:	401a      	ands	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	fa01 f303 	lsl.w	r3, r1, r3
 8008354:	431a      	orrs	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800837c:	2302      	movs	r3, #2
 800837e:	e05a      	b.n	8008436 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a21      	ldr	r2, [pc, #132]	; (8008444 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d022      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083cc:	d01d      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a1d      	ldr	r2, [pc, #116]	; (8008448 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d018      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a1b      	ldr	r2, [pc, #108]	; (800844c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a1a      	ldr	r2, [pc, #104]	; (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d00e      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a18      	ldr	r2, [pc, #96]	; (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d009      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a17      	ldr	r2, [pc, #92]	; (8008458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d10c      	bne.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4313      	orrs	r3, r2
 800841a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	40010000 	.word	0x40010000
 8008448:	40000400 	.word	0x40000400
 800844c:	40000800 	.word	0x40000800
 8008450:	40000c00 	.word	0x40000c00
 8008454:	40010400 	.word	0x40010400
 8008458:	40014000 	.word	0x40014000
 800845c:	40001800 	.word	0x40001800

08008460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008478:	2302      	movs	r3, #2
 800847a:	e03d      	b.n	80084f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e03f      	b.n	80085be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fb ff46 	bl	80043e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2224      	movs	r2, #36	; 0x24
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800856e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 ff6f 	bl	8009454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b08a      	sub	sp, #40	; 0x28
 80085ca:	af02      	add	r7, sp, #8
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	4613      	mov	r3, r2
 80085d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d17c      	bne.n	80086e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <HAL_UART_Transmit+0x2c>
 80085ec:	88fb      	ldrh	r3, [r7, #6]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e075      	b.n	80086e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_UART_Transmit+0x3e>
 8008600:	2302      	movs	r3, #2
 8008602:	e06e      	b.n	80086e2 <HAL_UART_Transmit+0x11c>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2221      	movs	r2, #33	; 0x21
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800861a:	f7fc f881 	bl	8004720 <HAL_GetTick>
 800861e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008634:	d108      	bne.n	8008648 <HAL_UART_Transmit+0x82>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d104      	bne.n	8008648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61bb      	str	r3, [r7, #24]
 8008646:	e003      	b.n	8008650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800864c:	2300      	movs	r3, #0
 800864e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008658:	e02a      	b.n	80086b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	2180      	movs	r1, #128	; 0x80
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fc2b 	bl	8008ec0 <UART_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e036      	b.n	80086e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	3302      	adds	r3, #2
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	e007      	b.n	80086a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1cf      	bne.n	800865a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2140      	movs	r1, #64	; 0x40
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 fbfb 	bl	8008ec0 <UART_WaitOnFlagUntilTimeout>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e000      	b.n	80086e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80086e0:	2302      	movs	r3, #2
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3720      	adds	r7, #32
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	60b9      	str	r1, [r7, #8]
 80086f4:	4613      	mov	r3, r2
 80086f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b20      	cmp	r3, #32
 8008702:	d11d      	bne.n	8008740 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_UART_Receive_DMA+0x26>
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e016      	b.n	8008742 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_UART_Receive_DMA+0x38>
 800871e:	2302      	movs	r3, #2
 8008720:	e00f      	b.n	8008742 <HAL_UART_Receive_DMA+0x58>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	461a      	mov	r2, r3
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fc30 	bl	8008f9c <UART_Start_Receive_DMA>
 800873c:	4603      	mov	r3, r0
 800873e:	e000      	b.n	8008742 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
  }
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b0ba      	sub	sp, #232	; 0xe8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008772:	2300      	movs	r3, #0
 8008774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008778:	2300      	movs	r3, #0
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008782:	f003 030f 	and.w	r3, r3, #15
 8008786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800878a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10f      	bne.n	80087b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fd97 	bl	80092de <UART_Receive_IT>
      return;
 80087b0:	e256      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80de 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80d1 	beq.w	8008978 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00b      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
 80087e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f043 0201 	orr.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00b      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
 8008806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	f043 0202 	orr.w	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800881e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0204 	orr.w	r2, r3, #4
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d105      	bne.n	8008866 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800885a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 81ed 	beq.w	8008c56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d008      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fd22 	bl	80092de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	bf0c      	ite	eq
 80088a8:	2301      	moveq	r3, #1
 80088aa:	2300      	movne	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <HAL_UART_IRQHandler+0x17a>
 80088be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d04f      	beq.n	8008966 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc2a 	bl	8009120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d141      	bne.n	800895e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3314      	adds	r3, #20
 80088e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3314      	adds	r3, #20
 8008902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800890a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800891e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1d9      	bne.n	80088da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d013      	beq.n	8008956 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	4a7d      	ldr	r2, [pc, #500]	; (8008b28 <HAL_UART_IRQHandler+0x3dc>)
 8008934:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	4618      	mov	r0, r3
 800893c:	f7fc f9a8 	bl	8004c90 <HAL_DMA_Abort_IT>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008950:	4610      	mov	r0, r2
 8008952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008954:	e00e      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9a4 	bl	8008ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800895c:	e00a      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9a0 	bl	8008ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e006      	b.n	8008974 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f99c 	bl	8008ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008972:	e170      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	bf00      	nop
    return;
 8008976:	e16e      	b.n	8008c56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	f040 814a 	bne.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 8143 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 813c 	beq.w	8008c16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089be:	2b40      	cmp	r3, #64	; 0x40
 80089c0:	f040 80b4 	bne.w	8008b2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8140 	beq.w	8008c5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089e2:	429a      	cmp	r2, r3
 80089e4:	f080 8139 	bcs.w	8008c5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fa:	f000 8088 	beq.w	8008b0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	330c      	adds	r3, #12
 8008a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	330c      	adds	r3, #12
 8008a26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1d9      	bne.n	80089fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3314      	adds	r3, #20
 8008a50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a54:	e853 3f00 	ldrex	r3, [r3]
 8008a58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a5c:	f023 0301 	bic.w	r3, r3, #1
 8008a60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3314      	adds	r3, #20
 8008a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e1      	bne.n	8008a4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3314      	adds	r3, #20
 8008aa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ab0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e3      	bne.n	8008a86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	330c      	adds	r3, #12
 8008ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad6:	e853 3f00 	ldrex	r3, [r3]
 8008ada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ade:	f023 0310 	bic.w	r3, r3, #16
 8008ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	330c      	adds	r3, #12
 8008aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008af0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008af2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e3      	bne.n	8008acc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7fc f851 	bl	8004bb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8ca 	bl	8008cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b24:	e099      	b.n	8008c5a <HAL_UART_IRQHandler+0x50e>
 8008b26:	bf00      	nop
 8008b28:	080091e7 	.word	0x080091e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 808b 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8086 	beq.w	8008c5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b76:	647a      	str	r2, [r7, #68]	; 0x44
 8008b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e3      	bne.n	8008b52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	f023 0301 	bic.w	r3, r3, #1
 8008ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bae:	633a      	str	r2, [r7, #48]	; 0x30
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e3      	bne.n	8008b8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0310 	bic.w	r3, r3, #16
 8008be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bf4:	61fa      	str	r2, [r7, #28]
 8008bf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	617b      	str	r3, [r7, #20]
   return(result);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e3      	bne.n	8008bd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f852 	bl	8008cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c14:	e023      	b.n	8008c5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 faed 	bl	800920e <UART_Transmit_IT>
    return;
 8008c34:	e014      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
 8008c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb2d 	bl	80092ae <UART_EndTransmit_IT>
    return;
 8008c54:	e004      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
    return;
 8008c56:	bf00      	nop
 8008c58:	e002      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5a:	bf00      	nop
 8008c5c:	e000      	b.n	8008c60 <HAL_UART_IRQHandler+0x514>
      return;
 8008c5e:	bf00      	nop
  }
}
 8008c60:	37e8      	adds	r7, #232	; 0xe8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop

08008c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b09c      	sub	sp, #112	; 0x70
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d172      	bne.n	8008dd2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cee:	2200      	movs	r2, #0
 8008cf0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d12:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3314      	adds	r3, #20
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8008d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3314      	adds	r3, #20
 8008d44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d46:	647a      	str	r2, [r7, #68]	; 0x44
 8008d48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e5      	bne.n	8008d26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	623b      	str	r3, [r7, #32]
   return(result);
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d70:	663b      	str	r3, [r7, #96]	; 0x60
 8008d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3314      	adds	r3, #20
 8008d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e5      	bne.n	8008d5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d119      	bne.n	8008dd2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	330c      	adds	r3, #12
 8008da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f023 0310 	bic.w	r3, r3, #16
 8008db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dbe:	61fa      	str	r2, [r7, #28]
 8008dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	69b9      	ldr	r1, [r7, #24]
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	617b      	str	r3, [r7, #20]
   return(result);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e5      	bne.n	8008d9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d106      	bne.n	8008de8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dde:	4619      	mov	r1, r3
 8008de0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008de2:	f7ff ff69 	bl	8008cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008de6:	e002      	b.n	8008dee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008de8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008dea:	f7ff ff47 	bl	8008c7c <HAL_UART_RxCpltCallback>
}
 8008dee:	bf00      	nop
 8008df0:	3770      	adds	r7, #112	; 0x70
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d108      	bne.n	8008e1e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e10:	085b      	lsrs	r3, r3, #1
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff ff4e 	bl	8008cb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e1c:	e002      	b.n	8008e24 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7ff ff36 	bl	8008c90 <HAL_UART_RxHalfCpltCallback>
}
 8008e24:	bf00      	nop
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e48:	2b80      	cmp	r3, #128	; 0x80
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2301      	moveq	r3, #1
 8008e4e:	2300      	movne	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b21      	cmp	r3, #33	; 0x21
 8008e5e:	d108      	bne.n	8008e72 <UART_DMAError+0x46>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e6c:	68b8      	ldr	r0, [r7, #8]
 8008e6e:	f000 f92f 	bl	80090d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	bf0c      	ite	eq
 8008e80:	2301      	moveq	r3, #1
 8008e82:	2300      	movne	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b22      	cmp	r3, #34	; 0x22
 8008e92:	d108      	bne.n	8008ea6 <UART_DMAError+0x7a>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ea0:	68b8      	ldr	r0, [r7, #8]
 8008ea2:	f000 f93d 	bl	8009120 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	f043 0210 	orr.w	r2, r3, #16
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb2:	68b8      	ldr	r0, [r7, #8]
 8008eb4:	f7ff fef6 	bl	8008ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b090      	sub	sp, #64	; 0x40
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ed0:	e050      	b.n	8008f74 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d04c      	beq.n	8008f74 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ee0:	f7fb fc1e 	bl	8004720 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d241      	bcs.n	8008f74 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	330c      	adds	r3, #12
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f10:	637a      	str	r2, [r7, #52]	; 0x34
 8008f12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e5      	bne.n	8008ef0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3314      	adds	r3, #20
 8008f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	613b      	str	r3, [r7, #16]
   return(result);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3314      	adds	r3, #20
 8008f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f44:	623a      	str	r2, [r7, #32]
 8008f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	69f9      	ldr	r1, [r7, #28]
 8008f4a:	6a3a      	ldr	r2, [r7, #32]
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e00f      	b.n	8008f94 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d09f      	beq.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3740      	adds	r7, #64	; 0x40
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b098      	sub	sp, #96	; 0x60
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2222      	movs	r2, #34	; 0x22
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc8:	4a3e      	ldr	r2, [pc, #248]	; (80090c4 <UART_Start_Receive_DMA+0x128>)
 8008fca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	4a3d      	ldr	r2, [pc, #244]	; (80090c8 <UART_Start_Receive_DMA+0x12c>)
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	4a3c      	ldr	r2, [pc, #240]	; (80090cc <UART_Start_Receive_DMA+0x130>)
 8008fda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008fe4:	f107 0308 	add.w	r3, r7, #8
 8008fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	f7fb fd80 	bl	8004b00 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	330c      	adds	r3, #12
 8009024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800902e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009034:	65bb      	str	r3, [r7, #88]	; 0x58
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	330c      	adds	r3, #12
 800903c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800903e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009040:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800904c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3314      	adds	r3, #20
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	f043 0301 	orr.w	r3, r3, #1
 8009068:	657b      	str	r3, [r7, #84]	; 0x54
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3314      	adds	r3, #20
 8009070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009072:	63ba      	str	r2, [r7, #56]	; 0x38
 8009074:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3314      	adds	r3, #20
 800908c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	617b      	str	r3, [r7, #20]
   return(result);
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800909c:	653b      	str	r3, [r7, #80]	; 0x50
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3314      	adds	r3, #20
 80090a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090a6:	627a      	str	r2, [r7, #36]	; 0x24
 80090a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6a39      	ldr	r1, [r7, #32]
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e5      	bne.n	8009086 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3760      	adds	r7, #96	; 0x60
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	08008cd1 	.word	0x08008cd1
 80090c8:	08008df7 	.word	0x08008df7
 80090cc:	08008e2d 	.word	0x08008e2d

080090d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b089      	sub	sp, #36	; 0x24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	330c      	adds	r3, #12
 80090de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	61ba      	str	r2, [r7, #24]
 80090fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6979      	ldr	r1, [r7, #20]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	613b      	str	r3, [r7, #16]
   return(result);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e5      	bne.n	80090d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009114:	bf00      	nop
 8009116:	3724      	adds	r7, #36	; 0x24
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b095      	sub	sp, #84	; 0x54
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	330c      	adds	r3, #12
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800913e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	330c      	adds	r3, #12
 8009146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009148:	643a      	str	r2, [r7, #64]	; 0x40
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800914e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e5      	bne.n	8009128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3314      	adds	r3, #20
 8009162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6a3b      	ldr	r3, [r7, #32]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	61fb      	str	r3, [r7, #28]
   return(result);
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f023 0301 	bic.w	r3, r3, #1
 8009172:	64bb      	str	r3, [r7, #72]	; 0x48
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3314      	adds	r3, #20
 800917a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800917c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800917e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e5      	bne.n	800915c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	2b01      	cmp	r3, #1
 8009196:	d119      	bne.n	80091cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	330c      	adds	r3, #12
 800919e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f023 0310 	bic.w	r3, r3, #16
 80091ae:	647b      	str	r3, [r7, #68]	; 0x44
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	330c      	adds	r3, #12
 80091b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091b8:	61ba      	str	r2, [r7, #24]
 80091ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	6979      	ldr	r1, [r7, #20]
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	613b      	str	r3, [r7, #16]
   return(result);
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e5      	bne.n	8009198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80091da:	bf00      	nop
 80091dc:	3754      	adds	r7, #84	; 0x54
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f7ff fd4f 	bl	8008ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800920e:	b480      	push	{r7}
 8009210:	b085      	sub	sp, #20
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b21      	cmp	r3, #33	; 0x21
 8009220:	d13e      	bne.n	80092a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922a:	d114      	bne.n	8009256 <UART_Transmit_IT+0x48>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d110      	bne.n	8009256 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009248:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	1c9a      	adds	r2, r3, #2
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	621a      	str	r2, [r3, #32]
 8009254:	e008      	b.n	8009268 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	1c59      	adds	r1, r3, #1
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6211      	str	r1, [r2, #32]
 8009260:	781a      	ldrb	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	b29b      	uxth	r3, r3
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4619      	mov	r1, r3
 8009276:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10f      	bne.n	800929c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800928a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800929a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	e000      	b.n	80092a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092a0:	2302      	movs	r3, #2
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fcca 	bl	8008c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b08c      	sub	sp, #48	; 0x30
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b22      	cmp	r3, #34	; 0x22
 80092f0:	f040 80ab 	bne.w	800944a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fc:	d117      	bne.n	800932e <UART_Receive_IT+0x50>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d113      	bne.n	800932e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	b29b      	uxth	r3, r3
 8009318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931c:	b29a      	uxth	r2, r3
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	1c9a      	adds	r2, r3, #2
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	629a      	str	r2, [r3, #40]	; 0x28
 800932c:	e026      	b.n	800937c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009340:	d007      	beq.n	8009352 <UART_Receive_IT+0x74>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10a      	bne.n	8009360 <UART_Receive_IT+0x82>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	b2da      	uxtb	r2, r3
 800935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	e008      	b.n	8009372 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936c:	b2da      	uxtb	r2, r3
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29b      	uxth	r3, r3
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	4619      	mov	r1, r3
 800938a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800938c:	2b00      	cmp	r3, #0
 800938e:	d15a      	bne.n	8009446 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0220 	bic.w	r2, r2, #32
 800939e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0201 	bic.w	r2, r2, #1
 80093be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d135      	bne.n	800943c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	330c      	adds	r3, #12
 80093dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	613b      	str	r3, [r7, #16]
   return(result);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f023 0310 	bic.w	r3, r3, #16
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f6:	623a      	str	r2, [r7, #32]
 80093f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	69f9      	ldr	r1, [r7, #28]
 80093fc:	6a3a      	ldr	r2, [r7, #32]
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	61bb      	str	r3, [r7, #24]
   return(result);
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e5      	bne.n	80093d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b10      	cmp	r3, #16
 8009416:	d10a      	bne.n	800942e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fc3f 	bl	8008cb8 <HAL_UARTEx_RxEventCallback>
 800943a:	e002      	b.n	8009442 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff fc1d 	bl	8008c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e002      	b.n	800944c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	e000      	b.n	800944c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800944a:	2302      	movs	r3, #2
  }
}
 800944c:	4618      	mov	r0, r3
 800944e:	3730      	adds	r7, #48	; 0x30
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009458:	b09f      	sub	sp, #124	; 0x7c
 800945a:	af00      	add	r7, sp, #0
 800945c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800945e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946a:	68d9      	ldr	r1, [r3, #12]
 800946c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	ea40 0301 	orr.w	r3, r0, r1
 8009474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	431a      	orrs	r2, r3
 8009480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	431a      	orrs	r2, r3
 8009486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	4313      	orrs	r3, r2
 800948c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800948e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009498:	f021 010c 	bic.w	r1, r1, #12
 800949c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094a2:	430b      	orrs	r3, r1
 80094a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80094b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b2:	6999      	ldr	r1, [r3, #24]
 80094b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	ea40 0301 	orr.w	r3, r0, r1
 80094bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4bc5      	ldr	r3, [pc, #788]	; (80097d8 <UART_SetConfig+0x384>)
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d004      	beq.n	80094d2 <UART_SetConfig+0x7e>
 80094c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	4bc3      	ldr	r3, [pc, #780]	; (80097dc <UART_SetConfig+0x388>)
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d103      	bne.n	80094da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094d2:	f7fd fc6d 	bl	8006db0 <HAL_RCC_GetPCLK2Freq>
 80094d6:	6778      	str	r0, [r7, #116]	; 0x74
 80094d8:	e002      	b.n	80094e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094da:	f7fd fc55 	bl	8006d88 <HAL_RCC_GetPCLK1Freq>
 80094de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e8:	f040 80b6 	bne.w	8009658 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ee:	461c      	mov	r4, r3
 80094f0:	f04f 0500 	mov.w	r5, #0
 80094f4:	4622      	mov	r2, r4
 80094f6:	462b      	mov	r3, r5
 80094f8:	1891      	adds	r1, r2, r2
 80094fa:	6439      	str	r1, [r7, #64]	; 0x40
 80094fc:	415b      	adcs	r3, r3
 80094fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009500:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009504:	1912      	adds	r2, r2, r4
 8009506:	eb45 0303 	adc.w	r3, r5, r3
 800950a:	f04f 0000 	mov.w	r0, #0
 800950e:	f04f 0100 	mov.w	r1, #0
 8009512:	00d9      	lsls	r1, r3, #3
 8009514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009518:	00d0      	lsls	r0, r2, #3
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	1911      	adds	r1, r2, r4
 8009520:	6639      	str	r1, [r7, #96]	; 0x60
 8009522:	416b      	adcs	r3, r5
 8009524:	667b      	str	r3, [r7, #100]	; 0x64
 8009526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	461a      	mov	r2, r3
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	1891      	adds	r1, r2, r2
 8009532:	63b9      	str	r1, [r7, #56]	; 0x38
 8009534:	415b      	adcs	r3, r3
 8009536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800953c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009540:	f7f7 fb8c 	bl	8000c5c <__aeabi_uldivmod>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4ba5      	ldr	r3, [pc, #660]	; (80097e0 <UART_SetConfig+0x38c>)
 800954a:	fba3 2302 	umull	r2, r3, r3, r2
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	011e      	lsls	r6, r3, #4
 8009552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009554:	461c      	mov	r4, r3
 8009556:	f04f 0500 	mov.w	r5, #0
 800955a:	4622      	mov	r2, r4
 800955c:	462b      	mov	r3, r5
 800955e:	1891      	adds	r1, r2, r2
 8009560:	6339      	str	r1, [r7, #48]	; 0x30
 8009562:	415b      	adcs	r3, r3
 8009564:	637b      	str	r3, [r7, #52]	; 0x34
 8009566:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800956a:	1912      	adds	r2, r2, r4
 800956c:	eb45 0303 	adc.w	r3, r5, r3
 8009570:	f04f 0000 	mov.w	r0, #0
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	00d9      	lsls	r1, r3, #3
 800957a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800957e:	00d0      	lsls	r0, r2, #3
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	1911      	adds	r1, r2, r4
 8009586:	65b9      	str	r1, [r7, #88]	; 0x58
 8009588:	416b      	adcs	r3, r5
 800958a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	461a      	mov	r2, r3
 8009592:	f04f 0300 	mov.w	r3, #0
 8009596:	1891      	adds	r1, r2, r2
 8009598:	62b9      	str	r1, [r7, #40]	; 0x28
 800959a:	415b      	adcs	r3, r3
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800959e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80095a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80095a6:	f7f7 fb59 	bl	8000c5c <__aeabi_uldivmod>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4b8c      	ldr	r3, [pc, #560]	; (80097e0 <UART_SetConfig+0x38c>)
 80095b0:	fba3 1302 	umull	r1, r3, r3, r2
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	2164      	movs	r1, #100	; 0x64
 80095b8:	fb01 f303 	mul.w	r3, r1, r3
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	3332      	adds	r3, #50	; 0x32
 80095c2:	4a87      	ldr	r2, [pc, #540]	; (80097e0 <UART_SetConfig+0x38c>)
 80095c4:	fba2 2303 	umull	r2, r3, r2, r3
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095d0:	441e      	add	r6, r3
 80095d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095d4:	4618      	mov	r0, r3
 80095d6:	f04f 0100 	mov.w	r1, #0
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	1894      	adds	r4, r2, r2
 80095e0:	623c      	str	r4, [r7, #32]
 80095e2:	415b      	adcs	r3, r3
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
 80095e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095ea:	1812      	adds	r2, r2, r0
 80095ec:	eb41 0303 	adc.w	r3, r1, r3
 80095f0:	f04f 0400 	mov.w	r4, #0
 80095f4:	f04f 0500 	mov.w	r5, #0
 80095f8:	00dd      	lsls	r5, r3, #3
 80095fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095fe:	00d4      	lsls	r4, r2, #3
 8009600:	4622      	mov	r2, r4
 8009602:	462b      	mov	r3, r5
 8009604:	1814      	adds	r4, r2, r0
 8009606:	653c      	str	r4, [r7, #80]	; 0x50
 8009608:	414b      	adcs	r3, r1
 800960a:	657b      	str	r3, [r7, #84]	; 0x54
 800960c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	461a      	mov	r2, r3
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	1891      	adds	r1, r2, r2
 8009618:	61b9      	str	r1, [r7, #24]
 800961a:	415b      	adcs	r3, r3
 800961c:	61fb      	str	r3, [r7, #28]
 800961e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009622:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009626:	f7f7 fb19 	bl	8000c5c <__aeabi_uldivmod>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4b6c      	ldr	r3, [pc, #432]	; (80097e0 <UART_SetConfig+0x38c>)
 8009630:	fba3 1302 	umull	r1, r3, r3, r2
 8009634:	095b      	lsrs	r3, r3, #5
 8009636:	2164      	movs	r1, #100	; 0x64
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	3332      	adds	r3, #50	; 0x32
 8009642:	4a67      	ldr	r2, [pc, #412]	; (80097e0 <UART_SetConfig+0x38c>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	095b      	lsrs	r3, r3, #5
 800964a:	f003 0207 	and.w	r2, r3, #7
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4432      	add	r2, r6
 8009654:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009656:	e0b9      	b.n	80097cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800965a:	461c      	mov	r4, r3
 800965c:	f04f 0500 	mov.w	r5, #0
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	1891      	adds	r1, r2, r2
 8009666:	6139      	str	r1, [r7, #16]
 8009668:	415b      	adcs	r3, r3
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009670:	1912      	adds	r2, r2, r4
 8009672:	eb45 0303 	adc.w	r3, r5, r3
 8009676:	f04f 0000 	mov.w	r0, #0
 800967a:	f04f 0100 	mov.w	r1, #0
 800967e:	00d9      	lsls	r1, r3, #3
 8009680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009684:	00d0      	lsls	r0, r2, #3
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	eb12 0804 	adds.w	r8, r2, r4
 800968e:	eb43 0905 	adc.w	r9, r3, r5
 8009692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	4618      	mov	r0, r3
 8009698:	f04f 0100 	mov.w	r1, #0
 800969c:	f04f 0200 	mov.w	r2, #0
 80096a0:	f04f 0300 	mov.w	r3, #0
 80096a4:	008b      	lsls	r3, r1, #2
 80096a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096aa:	0082      	lsls	r2, r0, #2
 80096ac:	4640      	mov	r0, r8
 80096ae:	4649      	mov	r1, r9
 80096b0:	f7f7 fad4 	bl	8000c5c <__aeabi_uldivmod>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4b49      	ldr	r3, [pc, #292]	; (80097e0 <UART_SetConfig+0x38c>)
 80096ba:	fba3 2302 	umull	r2, r3, r3, r2
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	011e      	lsls	r6, r3, #4
 80096c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096c4:	4618      	mov	r0, r3
 80096c6:	f04f 0100 	mov.w	r1, #0
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	1894      	adds	r4, r2, r2
 80096d0:	60bc      	str	r4, [r7, #8]
 80096d2:	415b      	adcs	r3, r3
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096da:	1812      	adds	r2, r2, r0
 80096dc:	eb41 0303 	adc.w	r3, r1, r3
 80096e0:	f04f 0400 	mov.w	r4, #0
 80096e4:	f04f 0500 	mov.w	r5, #0
 80096e8:	00dd      	lsls	r5, r3, #3
 80096ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ee:	00d4      	lsls	r4, r2, #3
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	1814      	adds	r4, r2, r0
 80096f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80096f8:	414b      	adcs	r3, r1
 80096fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4618      	mov	r0, r3
 8009702:	f04f 0100 	mov.w	r1, #0
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	f04f 0300 	mov.w	r3, #0
 800970e:	008b      	lsls	r3, r1, #2
 8009710:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009714:	0082      	lsls	r2, r0, #2
 8009716:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800971a:	f7f7 fa9f 	bl	8000c5c <__aeabi_uldivmod>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <UART_SetConfig+0x38c>)
 8009724:	fba3 1302 	umull	r1, r3, r3, r2
 8009728:	095b      	lsrs	r3, r3, #5
 800972a:	2164      	movs	r1, #100	; 0x64
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	3332      	adds	r3, #50	; 0x32
 8009736:	4a2a      	ldr	r2, [pc, #168]	; (80097e0 <UART_SetConfig+0x38c>)
 8009738:	fba2 2303 	umull	r2, r3, r2, r3
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009742:	441e      	add	r6, r3
 8009744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009746:	4618      	mov	r0, r3
 8009748:	f04f 0100 	mov.w	r1, #0
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	1894      	adds	r4, r2, r2
 8009752:	603c      	str	r4, [r7, #0]
 8009754:	415b      	adcs	r3, r3
 8009756:	607b      	str	r3, [r7, #4]
 8009758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800975c:	1812      	adds	r2, r2, r0
 800975e:	eb41 0303 	adc.w	r3, r1, r3
 8009762:	f04f 0400 	mov.w	r4, #0
 8009766:	f04f 0500 	mov.w	r5, #0
 800976a:	00dd      	lsls	r5, r3, #3
 800976c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009770:	00d4      	lsls	r4, r2, #3
 8009772:	4622      	mov	r2, r4
 8009774:	462b      	mov	r3, r5
 8009776:	eb12 0a00 	adds.w	sl, r2, r0
 800977a:	eb43 0b01 	adc.w	fp, r3, r1
 800977e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	4618      	mov	r0, r3
 8009784:	f04f 0100 	mov.w	r1, #0
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	008b      	lsls	r3, r1, #2
 8009792:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009796:	0082      	lsls	r2, r0, #2
 8009798:	4650      	mov	r0, sl
 800979a:	4659      	mov	r1, fp
 800979c:	f7f7 fa5e 	bl	8000c5c <__aeabi_uldivmod>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <UART_SetConfig+0x38c>)
 80097a6:	fba3 1302 	umull	r1, r3, r3, r2
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	2164      	movs	r1, #100	; 0x64
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	3332      	adds	r3, #50	; 0x32
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <UART_SetConfig+0x38c>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4432      	add	r2, r6
 80097ca:	609a      	str	r2, [r3, #8]
}
 80097cc:	bf00      	nop
 80097ce:	377c      	adds	r7, #124	; 0x7c
 80097d0:	46bd      	mov	sp, r7
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	bf00      	nop
 80097d8:	40011000 	.word	0x40011000
 80097dc:	40011400 	.word	0x40011400
 80097e0:	51eb851f 	.word	0x51eb851f

080097e4 <__NVIC_SetPriority>:
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	db0a      	blt.n	800980e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	490c      	ldr	r1, [pc, #48]	; (8009830 <__NVIC_SetPriority+0x4c>)
 80097fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009802:	0112      	lsls	r2, r2, #4
 8009804:	b2d2      	uxtb	r2, r2
 8009806:	440b      	add	r3, r1
 8009808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800980c:	e00a      	b.n	8009824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	4908      	ldr	r1, [pc, #32]	; (8009834 <__NVIC_SetPriority+0x50>)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	3b04      	subs	r3, #4
 800981c:	0112      	lsls	r2, r2, #4
 800981e:	b2d2      	uxtb	r2, r2
 8009820:	440b      	add	r3, r1
 8009822:	761a      	strb	r2, [r3, #24]
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	e000e100 	.word	0xe000e100
 8009834:	e000ed00 	.word	0xe000ed00

08009838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800983c:	2100      	movs	r1, #0
 800983e:	f06f 0004 	mvn.w	r0, #4
 8009842:	f7ff ffcf 	bl	80097e4 <__NVIC_SetPriority>
#endif
}
 8009846:	bf00      	nop
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009852:	f3ef 8305 	mrs	r3, IPSR
 8009856:	603b      	str	r3, [r7, #0]
  return(result);
 8009858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800985e:	f06f 0305 	mvn.w	r3, #5
 8009862:	607b      	str	r3, [r7, #4]
 8009864:	e00c      	b.n	8009880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009866:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <osKernelInitialize+0x44>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <osKernelInitialize+0x44>)
 8009870:	2201      	movs	r2, #1
 8009872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009874:	2300      	movs	r3, #0
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	e002      	b.n	8009880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800987a:	f04f 33ff 	mov.w	r3, #4294967295
 800987e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009880:	687b      	ldr	r3, [r7, #4]
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000114 	.word	0x20000114

08009894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989a:	f3ef 8305 	mrs	r3, IPSR
 800989e:	603b      	str	r3, [r7, #0]
  return(result);
 80098a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80098a6:	f06f 0305 	mvn.w	r3, #5
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	e010      	b.n	80098d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <osKernelStart+0x48>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d109      	bne.n	80098ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098b6:	f7ff ffbf 	bl	8009838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ba:	4b08      	ldr	r3, [pc, #32]	; (80098dc <osKernelStart+0x48>)
 80098bc:	2202      	movs	r2, #2
 80098be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098c0:	f001 f910 	bl	800aae4 <vTaskStartScheduler>
      stat = osOK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e002      	b.n	80098d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098d0:	687b      	ldr	r3, [r7, #4]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000114 	.word	0x20000114

080098e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08e      	sub	sp, #56	; 0x38
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f0:	f3ef 8305 	mrs	r3, IPSR
 80098f4:	617b      	str	r3, [r7, #20]
  return(result);
 80098f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d17e      	bne.n	80099fa <osThreadNew+0x11a>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d07b      	beq.n	80099fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009902:	2380      	movs	r3, #128	; 0x80
 8009904:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009906:	2318      	movs	r3, #24
 8009908:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d045      	beq.n	80099a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <osThreadNew+0x48>
        name = attr->name;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d008      	beq.n	800994e <osThreadNew+0x6e>
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b38      	cmp	r3, #56	; 0x38
 8009940:	d805      	bhi.n	800994e <osThreadNew+0x6e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <osThreadNew+0x72>
        return (NULL);
 800994e:	2300      	movs	r3, #0
 8009950:	e054      	b.n	80099fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	089b      	lsrs	r3, r3, #2
 8009960:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <osThreadNew+0xa8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b5b      	cmp	r3, #91	; 0x5b
 8009970:	d90a      	bls.n	8009988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009976:	2b00      	cmp	r3, #0
 8009978:	d006      	beq.n	8009988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <osThreadNew+0xa8>
        mem = 1;
 8009982:	2301      	movs	r3, #1
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	e010      	b.n	80099aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10c      	bne.n	80099aa <osThreadNew+0xca>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d108      	bne.n	80099aa <osThreadNew+0xca>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <osThreadNew+0xca>
          mem = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	e001      	b.n	80099aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d110      	bne.n	80099d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099b8:	9202      	str	r2, [sp, #8]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6a3a      	ldr	r2, [r7, #32]
 80099c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fe38 	bl	800a63c <xTaskCreateStatic>
 80099cc:	4603      	mov	r3, r0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e013      	b.n	80099fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d110      	bne.n	80099fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f107 0310 	add.w	r3, r7, #16
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fe83 	bl	800a6f6 <xTaskCreate>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d001      	beq.n	80099fa <osThreadNew+0x11a>
            hTask = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099fa:	693b      	ldr	r3, [r7, #16]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3728      	adds	r7, #40	; 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a0c:	f3ef 8305 	mrs	r3, IPSR
 8009a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <osDelay+0x1c>
    stat = osErrorISR;
 8009a18:	f06f 0305 	mvn.w	r3, #5
 8009a1c:	60fb      	str	r3, [r7, #12]
 8009a1e:	e007      	b.n	8009a30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 f826 	bl	800aa7c <vTaskDelay>
    }
  }

  return (stat);
 8009a30:	68fb      	ldr	r3, [r7, #12]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a42:	f3ef 8305 	mrs	r3, IPSR
 8009a46:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a48:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009a4e:	f06f 0305 	mvn.w	r3, #5
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e019      	b.n	8009a8a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009a5a:	f001 f955 	bl	800ad08 <xTaskGetTickCount>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d009      	beq.n	8009a84 <osDelayUntil+0x4a>
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db06      	blt.n	8009a84 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009a76:	f107 0308 	add.w	r3, r7, #8
 8009a7a:	6939      	ldr	r1, [r7, #16]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 ff7f 	bl	800a980 <vTaskDelayUntil>
 8009a82:	e002      	b.n	8009a8a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009a84:	f06f 0303 	mvn.w	r3, #3
 8009a88:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009a8a:	697b      	ldr	r3, [r7, #20]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3718      	adds	r7, #24
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4a07      	ldr	r2, [pc, #28]	; (8009ac0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009aa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	4a06      	ldr	r2, [pc, #24]	; (8009ac4 <vApplicationGetIdleTaskMemory+0x30>)
 8009aaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2280      	movs	r2, #128	; 0x80
 8009ab0:	601a      	str	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	3714      	adds	r7, #20
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000118 	.word	0x20000118
 8009ac4:	20000174 	.word	0x20000174

08009ac8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4a07      	ldr	r2, [pc, #28]	; (8009af4 <vApplicationGetTimerTaskMemory+0x2c>)
 8009ad8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4a06      	ldr	r2, [pc, #24]	; (8009af8 <vApplicationGetTimerTaskMemory+0x30>)
 8009ade:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ae6:	601a      	str	r2, [r3, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	20000374 	.word	0x20000374
 8009af8:	200003d0 	.word	0x200003d0

08009afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f103 0208 	add.w	r2, r3, #8
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f04f 32ff 	mov.w	r2, #4294967295
 8009b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f103 0208 	add.w	r2, r3, #8
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f103 0208 	add.w	r2, r3, #8
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb4:	d103      	bne.n	8009bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e00c      	b.n	8009bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e002      	b.n	8009bcc <vListInsert+0x2e>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d2f6      	bcs.n	8009bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	1c5a      	adds	r2, r3, #1
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6892      	ldr	r2, [r2, #8]
 8009c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	6852      	ldr	r2, [r2, #4]
 8009c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d103      	bne.n	8009c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	1e5a      	subs	r2, r3, #1
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7c:	f383 8811 	msr	BASEPRI, r3
 8009c80:	f3bf 8f6f 	isb	sy
 8009c84:	f3bf 8f4f 	dsb	sy
 8009c88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c8a:	bf00      	nop
 8009c8c:	e7fe      	b.n	8009c8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c8e:	f002 f8c9 	bl	800be24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c9e:	fb01 f303 	mul.w	r3, r1, r3
 8009ca2:	441a      	add	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	68f9      	ldr	r1, [r7, #12]
 8009cc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009cc4:	fb01 f303 	mul.w	r3, r1, r3
 8009cc8:	441a      	add	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	22ff      	movs	r2, #255	; 0xff
 8009cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	22ff      	movs	r2, #255	; 0xff
 8009cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d114      	bne.n	8009d0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01a      	beq.n	8009d22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3310      	adds	r3, #16
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f001 f981 	bl	800aff8 <xTaskRemoveFromEventList>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d012      	beq.n	8009d22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cfc:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <xQueueGenericReset+0xcc>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e009      	b.n	8009d22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3310      	adds	r3, #16
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff fef2 	bl	8009afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3324      	adds	r3, #36	; 0x24
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff feed 	bl	8009afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d22:	f002 f8af 	bl	800be84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d26:	2301      	movs	r3, #1
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08e      	sub	sp, #56	; 0x38
 8009d38:	af02      	add	r7, sp, #8
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10a      	bne.n	8009d5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d5a:	bf00      	nop
 8009d5c:	e7fe      	b.n	8009d5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <xQueueGenericCreateStatic+0x52>
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <xQueueGenericCreateStatic+0x56>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <xQueueGenericCreateStatic+0x58>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	623b      	str	r3, [r7, #32]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <xQueueGenericCreateStatic+0x7e>
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <xQueueGenericCreateStatic+0x82>
 8009db2:	2301      	movs	r3, #1
 8009db4:	e000      	b.n	8009db8 <xQueueGenericCreateStatic+0x84>
 8009db6:	2300      	movs	r3, #0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10a      	bne.n	8009dd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	61fb      	str	r3, [r7, #28]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009dd2:	2350      	movs	r3, #80	; 0x50
 8009dd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2b50      	cmp	r3, #80	; 0x50
 8009dda:	d00a      	beq.n	8009df2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	61bb      	str	r3, [r7, #24]
}
 8009dee:	bf00      	nop
 8009df0:	e7fe      	b.n	8009df0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009df2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00d      	beq.n	8009e1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	68b9      	ldr	r1, [r7, #8]
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f805 	bl	8009e24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3730      	adds	r7, #48	; 0x30
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d103      	bne.n	8009e40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e002      	b.n	8009e46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e52:	2101      	movs	r1, #1
 8009e54:	69b8      	ldr	r0, [r7, #24]
 8009e56:	f7ff ff05 	bl	8009c64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08e      	sub	sp, #56	; 0x38
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xQueueGenericSend+0x32>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <xQueueGenericSend+0x40>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <xQueueGenericSend+0x44>
 8009eac:	2301      	movs	r3, #1
 8009eae:	e000      	b.n	8009eb2 <xQueueGenericSend+0x46>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10a      	bne.n	8009ecc <xQueueGenericSend+0x60>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ec8:	bf00      	nop
 8009eca:	e7fe      	b.n	8009eca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d103      	bne.n	8009eda <xQueueGenericSend+0x6e>
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <xQueueGenericSend+0x72>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e000      	b.n	8009ee0 <xQueueGenericSend+0x74>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <xQueueGenericSend+0x8e>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	623b      	str	r3, [r7, #32]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009efa:	f001 fa3b 	bl	800b374 <xTaskGetSchedulerState>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d102      	bne.n	8009f0a <xQueueGenericSend+0x9e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <xQueueGenericSend+0xa2>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <xQueueGenericSend+0xa4>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueGenericSend+0xbe>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	61fb      	str	r3, [r7, #28]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f2a:	f001 ff7b 	bl	800be24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d302      	bcc.n	8009f40 <xQueueGenericSend+0xd4>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d129      	bne.n	8009f94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	68b9      	ldr	r1, [r7, #8]
 8009f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f46:	f000 fa0b 	bl	800a360 <prvCopyDataToQueue>
 8009f4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d010      	beq.n	8009f76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 f84d 	bl	800aff8 <xTaskRemoveFromEventList>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d013      	beq.n	8009f8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f64:	4b3f      	ldr	r3, [pc, #252]	; (800a064 <xQueueGenericSend+0x1f8>)
 8009f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	f3bf 8f6f 	isb	sy
 8009f74:	e00a      	b.n	8009f8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d007      	beq.n	8009f8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f7c:	4b39      	ldr	r3, [pc, #228]	; (800a064 <xQueueGenericSend+0x1f8>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f8c:	f001 ff7a 	bl	800be84 <vPortExitCritical>
				return pdPASS;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e063      	b.n	800a05c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d103      	bne.n	8009fa2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f9a:	f001 ff73 	bl	800be84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	e05c      	b.n	800a05c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fa8:	f107 0314 	add.w	r3, r7, #20
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 f887 	bl	800b0c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fb6:	f001 ff65 	bl	800be84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fba:	f000 fdf9 	bl	800abb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fbe:	f001 ff31 	bl	800be24 <vPortEnterCritical>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d103      	bne.n	8009fd8 <xQueueGenericSend+0x16c>
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fde:	b25b      	sxtb	r3, r3
 8009fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe4:	d103      	bne.n	8009fee <xQueueGenericSend+0x182>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fee:	f001 ff49 	bl	800be84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ff2:	1d3a      	adds	r2, r7, #4
 8009ff4:	f107 0314 	add.w	r3, r7, #20
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 f876 	bl	800b0ec <xTaskCheckForTimeOut>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d124      	bne.n	800a050 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a008:	f000 faa2 	bl	800a550 <prvIsQueueFull>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d018      	beq.n	800a044 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	3310      	adds	r3, #16
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 ff9c 	bl	800af58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a022:	f000 fa2d 	bl	800a480 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a026:	f000 fdd1 	bl	800abcc <xTaskResumeAll>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f47f af7c 	bne.w	8009f2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <xQueueGenericSend+0x1f8>)
 800a034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	e772      	b.n	8009f2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a046:	f000 fa1b 	bl	800a480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a04a:	f000 fdbf 	bl	800abcc <xTaskResumeAll>
 800a04e:	e76c      	b.n	8009f2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a052:	f000 fa15 	bl	800a480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a056:	f000 fdb9 	bl	800abcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a05a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3738      	adds	r7, #56	; 0x38
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b090      	sub	sp, #64	; 0x40
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d103      	bne.n	800a0a4 <xQueueGenericSendFromISR+0x3c>
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <xQueueGenericSendFromISR+0x40>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e000      	b.n	800a0aa <xQueueGenericSendFromISR+0x42>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d103      	bne.n	800a0d2 <xQueueGenericSendFromISR+0x6a>
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <xQueueGenericSendFromISR+0x6e>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <xQueueGenericSendFromISR+0x70>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	623b      	str	r3, [r7, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0f2:	f001 ff79 	bl	800bfe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0f6:	f3ef 8211 	mrs	r2, BASEPRI
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	61fa      	str	r2, [r7, #28]
 800a10c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a10e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d302      	bcc.n	800a124 <xQueueGenericSendFromISR+0xbc>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d12f      	bne.n	800a184 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a13a:	f000 f911 	bl	800a360 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a13e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a146:	d112      	bne.n	800a16e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d016      	beq.n	800a17e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	3324      	adds	r3, #36	; 0x24
 800a154:	4618      	mov	r0, r3
 800a156:	f000 ff4f 	bl	800aff8 <xTaskRemoveFromEventList>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00e      	beq.n	800a17e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00b      	beq.n	800a17e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	e007      	b.n	800a17e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a16e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a172:	3301      	adds	r3, #1
 800a174:	b2db      	uxtb	r3, r3
 800a176:	b25a      	sxtb	r2, r3
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a17e:	2301      	movs	r3, #1
 800a180:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a182:	e001      	b.n	800a188 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a184:	2300      	movs	r3, #0
 800a186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a192:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a196:	4618      	mov	r0, r3
 800a198:	3740      	adds	r7, #64	; 0x40
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08c      	sub	sp, #48	; 0x30
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d10a      	bne.n	800a1d0 <xQueueReceive+0x30>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	623b      	str	r3, [r7, #32]
}
 800a1cc:	bf00      	nop
 800a1ce:	e7fe      	b.n	800a1ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d103      	bne.n	800a1de <xQueueReceive+0x3e>
 800a1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <xQueueReceive+0x42>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <xQueueReceive+0x44>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <xQueueReceive+0x5e>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	61fb      	str	r3, [r7, #28]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1fe:	f001 f8b9 	bl	800b374 <xTaskGetSchedulerState>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d102      	bne.n	800a20e <xQueueReceive+0x6e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <xQueueReceive+0x72>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueReceive+0x74>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueReceive+0x8e>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	61bb      	str	r3, [r7, #24]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a22e:	f001 fdf9 	bl	800be24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01f      	beq.n	800a27e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a242:	f000 f8f7 	bl	800a434 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	1e5a      	subs	r2, r3, #1
 800a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00f      	beq.n	800a276 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	3310      	adds	r3, #16
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fecc 	bl	800aff8 <xTaskRemoveFromEventList>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d007      	beq.n	800a276 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a266:	4b3d      	ldr	r3, [pc, #244]	; (800a35c <xQueueReceive+0x1bc>)
 800a268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a276:	f001 fe05 	bl	800be84 <vPortExitCritical>
				return pdPASS;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e069      	b.n	800a352 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a284:	f001 fdfe 	bl	800be84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a288:	2300      	movs	r3, #0
 800a28a:	e062      	b.n	800a352 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d106      	bne.n	800a2a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a292:	f107 0310 	add.w	r3, r7, #16
 800a296:	4618      	mov	r0, r3
 800a298:	f000 ff12 	bl	800b0c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a29c:	2301      	movs	r3, #1
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2a0:	f001 fdf0 	bl	800be84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2a4:	f000 fc84 	bl	800abb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2a8:	f001 fdbc 	bl	800be24 <vPortEnterCritical>
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b8:	d103      	bne.n	800a2c2 <xQueueReceive+0x122>
 800a2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ce:	d103      	bne.n	800a2d8 <xQueueReceive+0x138>
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2d8:	f001 fdd4 	bl	800be84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2dc:	1d3a      	adds	r2, r7, #4
 800a2de:	f107 0310 	add.w	r3, r7, #16
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 ff01 	bl	800b0ec <xTaskCheckForTimeOut>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d123      	bne.n	800a338 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f2:	f000 f917 	bl	800a524 <prvIsQueueEmpty>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d017      	beq.n	800a32c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	3324      	adds	r3, #36	; 0x24
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fe27 	bl	800af58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a30c:	f000 f8b8 	bl	800a480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a310:	f000 fc5c 	bl	800abcc <xTaskResumeAll>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d189      	bne.n	800a22e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a31a:	4b10      	ldr	r3, [pc, #64]	; (800a35c <xQueueReceive+0x1bc>)
 800a31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	e780      	b.n	800a22e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a32c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a32e:	f000 f8a7 	bl	800a480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a332:	f000 fc4b 	bl	800abcc <xTaskResumeAll>
 800a336:	e77a      	b.n	800a22e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33a:	f000 f8a1 	bl	800a480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a33e:	f000 fc45 	bl	800abcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a344:	f000 f8ee 	bl	800a524 <prvIsQueueEmpty>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f43f af6f 	beq.w	800a22e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a352:	4618      	mov	r0, r3
 800a354:	3730      	adds	r7, #48	; 0x30
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	e000ed04 	.word	0xe000ed04

0800a360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10d      	bne.n	800a39a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d14d      	bne.n	800a422 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 f810 	bl	800b3b0 <xTaskPriorityDisinherit>
 800a390:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	609a      	str	r2, [r3, #8]
 800a398:	e043      	b.n	800a422 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d119      	bne.n	800a3d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6858      	ldr	r0, [r3, #4]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	68b9      	ldr	r1, [r7, #8]
 800a3ac:	f002 f870 	bl	800c490 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	441a      	add	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d32b      	bcc.n	800a422 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	605a      	str	r2, [r3, #4]
 800a3d2:	e026      	b.n	800a422 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68d8      	ldr	r0, [r3, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	f002 f856 	bl	800c490 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ec:	425b      	negs	r3, r3
 800a3ee:	441a      	add	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d207      	bcs.n	800a410 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	425b      	negs	r3, r3
 800a40a:	441a      	add	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d105      	bne.n	800a422 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	3b01      	subs	r3, #1
 800a420:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a42a:	697b      	ldr	r3, [r7, #20]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d018      	beq.n	800a478 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44e:	441a      	add	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68da      	ldr	r2, [r3, #12]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d303      	bcc.n	800a468 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68d9      	ldr	r1, [r3, #12]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	461a      	mov	r2, r3
 800a472:	6838      	ldr	r0, [r7, #0]
 800a474:	f002 f80c 	bl	800c490 <memcpy>
	}
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b084      	sub	sp, #16
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a488:	f001 fccc 	bl	800be24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a492:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a494:	e011      	b.n	800a4ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d012      	beq.n	800a4c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	3324      	adds	r3, #36	; 0x24
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fda8 	bl	800aff8 <xTaskRemoveFromEventList>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4ae:	f000 fe7f 	bl	800b1b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dce9      	bgt.n	800a496 <prvUnlockQueue+0x16>
 800a4c2:	e000      	b.n	800a4c6 <prvUnlockQueue+0x46>
					break;
 800a4c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	22ff      	movs	r2, #255	; 0xff
 800a4ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4ce:	f001 fcd9 	bl	800be84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4d2:	f001 fca7 	bl	800be24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4de:	e011      	b.n	800a504 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d012      	beq.n	800a50e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3310      	adds	r3, #16
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f000 fd83 	bl	800aff8 <xTaskRemoveFromEventList>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4f8:	f000 fe5a 	bl	800b1b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	b2db      	uxtb	r3, r3
 800a502:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dce9      	bgt.n	800a4e0 <prvUnlockQueue+0x60>
 800a50c:	e000      	b.n	800a510 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a50e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	22ff      	movs	r2, #255	; 0xff
 800a514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a518:	f001 fcb4 	bl	800be84 <vPortExitCritical>
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a52c:	f001 fc7a 	bl	800be24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a534:	2b00      	cmp	r3, #0
 800a536:	d102      	bne.n	800a53e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e001      	b.n	800a542 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a53e:	2300      	movs	r3, #0
 800a540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a542:	f001 fc9f 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800a546:	68fb      	ldr	r3, [r7, #12]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a558:	f001 fc64 	bl	800be24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a564:	429a      	cmp	r2, r3
 800a566:	d102      	bne.n	800a56e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a568:	2301      	movs	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	e001      	b.n	800a572 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a572:	f001 fc87 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800a576:	68fb      	ldr	r3, [r7, #12]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	e014      	b.n	800a5ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a590:	4a0f      	ldr	r2, [pc, #60]	; (800a5d0 <vQueueAddToRegistry+0x50>)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a59c:	490c      	ldr	r1, [pc, #48]	; (800a5d0 <vQueueAddToRegistry+0x50>)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5a6:	4a0a      	ldr	r2, [pc, #40]	; (800a5d0 <vQueueAddToRegistry+0x50>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4413      	add	r3, r2
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5b2:	e006      	b.n	800a5c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b07      	cmp	r3, #7
 800a5be:	d9e7      	bls.n	800a590 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5c0:	bf00      	nop
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	20005254 	.word	0x20005254

0800a5d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5e4:	f001 fc1e 	bl	800be24 <vPortEnterCritical>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5ee:	b25b      	sxtb	r3, r3
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f4:	d103      	bne.n	800a5fe <vQueueWaitForMessageRestricted+0x2a>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a604:	b25b      	sxtb	r3, r3
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60a:	d103      	bne.n	800a614 <vQueueWaitForMessageRestricted+0x40>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a614:	f001 fc36 	bl	800be84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	3324      	adds	r3, #36	; 0x24
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	4618      	mov	r0, r3
 800a62a:	f000 fcb9 	bl	800afa0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a62e:	6978      	ldr	r0, [r7, #20]
 800a630:	f7ff ff26 	bl	800a480 <prvUnlockQueue>
	}
 800a634:	bf00      	nop
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	; 0x38
 800a640:	af04      	add	r7, sp, #16
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	623b      	str	r3, [r7, #32]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <xTaskCreateStatic+0x46>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	61fb      	str	r3, [r7, #28]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a682:	235c      	movs	r3, #92	; 0x5c
 800a684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	2b5c      	cmp	r3, #92	; 0x5c
 800a68a:	d00a      	beq.n	800a6a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	61bb      	str	r3, [r7, #24]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d01e      	beq.n	800a6e8 <xTaskCreateStatic+0xac>
 800a6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01b      	beq.n	800a6e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	2202      	movs	r2, #2
 800a6be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	f107 0314 	add.w	r3, r7, #20
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f850 	bl	800a780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6e2:	f000 f8dd 	bl	800a8a0 <prvAddNewTaskToReadyList>
 800a6e6:	e001      	b.n	800a6ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6ec:	697b      	ldr	r3, [r7, #20]
	}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3728      	adds	r7, #40	; 0x28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b08c      	sub	sp, #48	; 0x30
 800a6fa:	af04      	add	r7, sp, #16
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	603b      	str	r3, [r7, #0]
 800a702:	4613      	mov	r3, r2
 800a704:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 fcac 	bl	800c068 <pvPortMalloc>
 800a710:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00e      	beq.n	800a736 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a718:	205c      	movs	r0, #92	; 0x5c
 800a71a:	f001 fca5 	bl	800c068 <pvPortMalloc>
 800a71e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	631a      	str	r2, [r3, #48]	; 0x30
 800a72c:	e005      	b.n	800a73a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a72e:	6978      	ldr	r0, [r7, #20]
 800a730:	f001 fd66 	bl	800c200 <vPortFree>
 800a734:	e001      	b.n	800a73a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d017      	beq.n	800a770 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a748:	88fa      	ldrh	r2, [r7, #6]
 800a74a:	2300      	movs	r3, #0
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	9302      	str	r3, [sp, #8]
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 f80e 	bl	800a780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a764:	69f8      	ldr	r0, [r7, #28]
 800a766:	f000 f89b 	bl	800a8a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a76a:	2301      	movs	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	e002      	b.n	800a776 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a776:	69bb      	ldr	r3, [r7, #24]
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	3720      	adds	r7, #32
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	461a      	mov	r2, r3
 800a798:	21a5      	movs	r1, #165	; 0xa5
 800a79a:	f001 fe87 	bl	800c4ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7a8:	3b01      	subs	r3, #1
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f023 0307 	bic.w	r3, r3, #7
 800a7b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	617b      	str	r3, [r7, #20]
}
 800a7d4:	bf00      	nop
 800a7d6:	e7fe      	b.n	800a7d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d01f      	beq.n	800a81e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61fb      	str	r3, [r7, #28]
 800a7e2:	e012      	b.n	800a80a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	7819      	ldrb	r1, [r3, #0]
 800a7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	3334      	adds	r3, #52	; 0x34
 800a7f4:	460a      	mov	r2, r1
 800a7f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	3301      	adds	r3, #1
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b0f      	cmp	r3, #15
 800a80e:	d9e9      	bls.n	800a7e4 <prvInitialiseNewTask+0x64>
 800a810:	e000      	b.n	800a814 <prvInitialiseNewTask+0x94>
			{
				break;
 800a812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a81c:	e003      	b.n	800a826 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a828:	2b37      	cmp	r3, #55	; 0x37
 800a82a:	d901      	bls.n	800a830 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a82c:	2337      	movs	r3, #55	; 0x37
 800a82e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	2200      	movs	r2, #0
 800a840:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff f978 	bl	8009b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	3318      	adds	r3, #24
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff f973 	bl	8009b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a85a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a86a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	2200      	movs	r2, #0
 800a870:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	68f9      	ldr	r1, [r7, #12]
 800a87e:	69b8      	ldr	r0, [r7, #24]
 800a880:	f001 f9a6 	bl	800bbd0 <pxPortInitialiseStack>
 800a884:	4602      	mov	r2, r0
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a896:	bf00      	nop
 800a898:	3720      	adds	r7, #32
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
	...

0800a8a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8a8:	f001 fabc 	bl	800be24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8ac:	4b2d      	ldr	r3, [pc, #180]	; (800a964 <prvAddNewTaskToReadyList+0xc4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	4a2c      	ldr	r2, [pc, #176]	; (800a964 <prvAddNewTaskToReadyList+0xc4>)
 800a8b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8b6:	4b2c      	ldr	r3, [pc, #176]	; (800a968 <prvAddNewTaskToReadyList+0xc8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8be:	4a2a      	ldr	r2, [pc, #168]	; (800a968 <prvAddNewTaskToReadyList+0xc8>)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8c4:	4b27      	ldr	r3, [pc, #156]	; (800a964 <prvAddNewTaskToReadyList+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d110      	bne.n	800a8ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8cc:	f000 fc94 	bl	800b1f8 <prvInitialiseTaskLists>
 800a8d0:	e00d      	b.n	800a8ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <prvAddNewTaskToReadyList+0xcc>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d109      	bne.n	800a8ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8da:	4b23      	ldr	r3, [pc, #140]	; (800a968 <prvAddNewTaskToReadyList+0xc8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d802      	bhi.n	800a8ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8e8:	4a1f      	ldr	r2, [pc, #124]	; (800a968 <prvAddNewTaskToReadyList+0xc8>)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8ee:	4b20      	ldr	r3, [pc, #128]	; (800a970 <prvAddNewTaskToReadyList+0xd0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <prvAddNewTaskToReadyList+0xd0>)
 800a8f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8f8:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <prvAddNewTaskToReadyList+0xd0>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4b1b      	ldr	r3, [pc, #108]	; (800a974 <prvAddNewTaskToReadyList+0xd4>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	429a      	cmp	r2, r3
 800a90a:	d903      	bls.n	800a914 <prvAddNewTaskToReadyList+0x74>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a910:	4a18      	ldr	r2, [pc, #96]	; (800a974 <prvAddNewTaskToReadyList+0xd4>)
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4a15      	ldr	r2, [pc, #84]	; (800a978 <prvAddNewTaskToReadyList+0xd8>)
 800a922:	441a      	add	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3304      	adds	r3, #4
 800a928:	4619      	mov	r1, r3
 800a92a:	4610      	mov	r0, r2
 800a92c:	f7ff f913 	bl	8009b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a930:	f001 faa8 	bl	800be84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a934:	4b0d      	ldr	r3, [pc, #52]	; (800a96c <prvAddNewTaskToReadyList+0xcc>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00e      	beq.n	800a95a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <prvAddNewTaskToReadyList+0xc8>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	429a      	cmp	r2, r3
 800a948:	d207      	bcs.n	800a95a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a94a:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <prvAddNewTaskToReadyList+0xdc>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	20000ca4 	.word	0x20000ca4
 800a968:	200007d0 	.word	0x200007d0
 800a96c:	20000cb0 	.word	0x20000cb0
 800a970:	20000cc0 	.word	0x20000cc0
 800a974:	20000cac 	.word	0x20000cac
 800a978:	200007d4 	.word	0x200007d4
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08a      	sub	sp, #40	; 0x28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <vTaskDelayUntil+0x2a>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	617b      	str	r3, [r7, #20]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	613b      	str	r3, [r7, #16]
}
 800a9c2:	bf00      	nop
 800a9c4:	e7fe      	b.n	800a9c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a9c6:	4b2a      	ldr	r3, [pc, #168]	; (800aa70 <vTaskDelayUntil+0xf0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <vTaskDelayUntil+0x64>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60fb      	str	r3, [r7, #12]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a9e4:	f000 f8e4 	bl	800abb0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a9e8:	4b22      	ldr	r3, [pc, #136]	; (800aa74 <vTaskDelayUntil+0xf4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6a3a      	ldr	r2, [r7, #32]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d20b      	bcs.n	800aa1a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d211      	bcs.n	800aa30 <vTaskDelayUntil+0xb0>
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d90d      	bls.n	800aa30 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800aa14:	2301      	movs	r3, #1
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24
 800aa18:	e00a      	b.n	800aa30 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d303      	bcc.n	800aa2c <vTaskDelayUntil+0xac>
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d901      	bls.n	800aa30 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d006      	beq.n	800aa4a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800aa3c:	69fa      	ldr	r2, [r7, #28]
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2100      	movs	r1, #0
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 fd21 	bl	800b48c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800aa4a:	f000 f8bf 	bl	800abcc <xTaskResumeAll>
 800aa4e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d107      	bne.n	800aa66 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800aa56:	4b08      	ldr	r3, [pc, #32]	; (800aa78 <vTaskDelayUntil+0xf8>)
 800aa58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa66:	bf00      	nop
 800aa68:	3728      	adds	r7, #40	; 0x28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000ccc 	.word	0x20000ccc
 800aa74:	20000ca8 	.word	0x20000ca8
 800aa78:	e000ed04 	.word	0xe000ed04

0800aa7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d017      	beq.n	800aabe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aa8e:	4b13      	ldr	r3, [pc, #76]	; (800aadc <vTaskDelay+0x60>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00a      	beq.n	800aaac <vTaskDelay+0x30>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60bb      	str	r3, [r7, #8]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aaac:	f000 f880 	bl	800abb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aab0:	2100      	movs	r1, #0
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fcea 	bl	800b48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aab8:	f000 f888 	bl	800abcc <xTaskResumeAll>
 800aabc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d107      	bne.n	800aad4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <vTaskDelay+0x64>)
 800aac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20000ccc 	.word	0x20000ccc
 800aae0:	e000ed04 	.word	0xe000ed04

0800aae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aaf2:	463a      	mov	r2, r7
 800aaf4:	1d39      	adds	r1, r7, #4
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe ffca 	bl	8009a94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	9202      	str	r2, [sp, #8]
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	2300      	movs	r3, #0
 800ab10:	460a      	mov	r2, r1
 800ab12:	4921      	ldr	r1, [pc, #132]	; (800ab98 <vTaskStartScheduler+0xb4>)
 800ab14:	4821      	ldr	r0, [pc, #132]	; (800ab9c <vTaskStartScheduler+0xb8>)
 800ab16:	f7ff fd91 	bl	800a63c <xTaskCreateStatic>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4a20      	ldr	r2, [pc, #128]	; (800aba0 <vTaskStartScheduler+0xbc>)
 800ab1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab20:	4b1f      	ldr	r3, [pc, #124]	; (800aba0 <vTaskStartScheduler+0xbc>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	e001      	b.n	800ab32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d102      	bne.n	800ab3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab38:	f000 fcfc 	bl	800b534 <xTimerCreateTimerTask>
 800ab3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d116      	bne.n	800ab72 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	613b      	str	r3, [r7, #16]
}
 800ab56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab58:	4b12      	ldr	r3, [pc, #72]	; (800aba4 <vTaskStartScheduler+0xc0>)
 800ab5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab60:	4b11      	ldr	r3, [pc, #68]	; (800aba8 <vTaskStartScheduler+0xc4>)
 800ab62:	2201      	movs	r2, #1
 800ab64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab66:	4b11      	ldr	r3, [pc, #68]	; (800abac <vTaskStartScheduler+0xc8>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab6c:	f001 f8b8 	bl	800bce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab70:	e00e      	b.n	800ab90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab78:	d10a      	bne.n	800ab90 <vTaskStartScheduler+0xac>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60fb      	str	r3, [r7, #12]
}
 800ab8c:	bf00      	nop
 800ab8e:	e7fe      	b.n	800ab8e <vTaskStartScheduler+0xaa>
}
 800ab90:	bf00      	nop
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	0800ce68 	.word	0x0800ce68
 800ab9c:	0800b1c9 	.word	0x0800b1c9
 800aba0:	20000cc8 	.word	0x20000cc8
 800aba4:	20000cc4 	.word	0x20000cc4
 800aba8:	20000cb0 	.word	0x20000cb0
 800abac:	20000ca8 	.word	0x20000ca8

0800abb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800abb4:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <vTaskSuspendAll+0x18>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3301      	adds	r3, #1
 800abba:	4a03      	ldr	r2, [pc, #12]	; (800abc8 <vTaskSuspendAll+0x18>)
 800abbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800abbe:	bf00      	nop
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	20000ccc 	.word	0x20000ccc

0800abcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abd6:	2300      	movs	r3, #0
 800abd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abda:	4b42      	ldr	r3, [pc, #264]	; (800ace4 <xTaskResumeAll+0x118>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <xTaskResumeAll+0x2c>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	603b      	str	r3, [r7, #0]
}
 800abf4:	bf00      	nop
 800abf6:	e7fe      	b.n	800abf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abf8:	f001 f914 	bl	800be24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abfc:	4b39      	ldr	r3, [pc, #228]	; (800ace4 <xTaskResumeAll+0x118>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4a38      	ldr	r2, [pc, #224]	; (800ace4 <xTaskResumeAll+0x118>)
 800ac04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac06:	4b37      	ldr	r3, [pc, #220]	; (800ace4 <xTaskResumeAll+0x118>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d162      	bne.n	800acd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac0e:	4b36      	ldr	r3, [pc, #216]	; (800ace8 <xTaskResumeAll+0x11c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d05e      	beq.n	800acd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac16:	e02f      	b.n	800ac78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac18:	4b34      	ldr	r3, [pc, #208]	; (800acec <xTaskResumeAll+0x120>)
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3318      	adds	r3, #24
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe fff3 	bl	8009c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe ffee 	bl	8009c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac38:	4b2d      	ldr	r3, [pc, #180]	; (800acf0 <xTaskResumeAll+0x124>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d903      	bls.n	800ac48 <xTaskResumeAll+0x7c>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac44:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <xTaskResumeAll+0x124>)
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4a27      	ldr	r2, [pc, #156]	; (800acf4 <xTaskResumeAll+0x128>)
 800ac56:	441a      	add	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	f7fe ff79 	bl	8009b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac68:	4b23      	ldr	r3, [pc, #140]	; (800acf8 <xTaskResumeAll+0x12c>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d302      	bcc.n	800ac78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ac72:	4b22      	ldr	r3, [pc, #136]	; (800acfc <xTaskResumeAll+0x130>)
 800ac74:	2201      	movs	r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac78:	4b1c      	ldr	r3, [pc, #112]	; (800acec <xTaskResumeAll+0x120>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1cb      	bne.n	800ac18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac86:	f000 fb55 	bl	800b334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	; (800ad00 <xTaskResumeAll+0x134>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d010      	beq.n	800acb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac96:	f000 f847 	bl	800ad28 <xTaskIncrementTick>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aca0:	4b16      	ldr	r3, [pc, #88]	; (800acfc <xTaskResumeAll+0x130>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3b01      	subs	r3, #1
 800acaa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1f1      	bne.n	800ac96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800acb2:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <xTaskResumeAll+0x134>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acb8:	4b10      	ldr	r3, [pc, #64]	; (800acfc <xTaskResumeAll+0x130>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d009      	beq.n	800acd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acc0:	2301      	movs	r3, #1
 800acc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800acc4:	4b0f      	ldr	r3, [pc, #60]	; (800ad04 <xTaskResumeAll+0x138>)
 800acc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acd4:	f001 f8d6 	bl	800be84 <vPortExitCritical>

	return xAlreadyYielded;
 800acd8:	68bb      	ldr	r3, [r7, #8]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20000ccc 	.word	0x20000ccc
 800ace8:	20000ca4 	.word	0x20000ca4
 800acec:	20000c64 	.word	0x20000c64
 800acf0:	20000cac 	.word	0x20000cac
 800acf4:	200007d4 	.word	0x200007d4
 800acf8:	200007d0 	.word	0x200007d0
 800acfc:	20000cb8 	.word	0x20000cb8
 800ad00:	20000cb4 	.word	0x20000cb4
 800ad04:	e000ed04 	.word	0xe000ed04

0800ad08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad0e:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <xTaskGetTickCount+0x1c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad14:	687b      	ldr	r3, [r7, #4]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	20000ca8 	.word	0x20000ca8

0800ad28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad32:	4b4f      	ldr	r3, [pc, #316]	; (800ae70 <xTaskIncrementTick+0x148>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f040 808f 	bne.w	800ae5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad3c:	4b4d      	ldr	r3, [pc, #308]	; (800ae74 <xTaskIncrementTick+0x14c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3301      	adds	r3, #1
 800ad42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad44:	4a4b      	ldr	r2, [pc, #300]	; (800ae74 <xTaskIncrementTick+0x14c>)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d120      	bne.n	800ad92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad50:	4b49      	ldr	r3, [pc, #292]	; (800ae78 <xTaskIncrementTick+0x150>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <xTaskIncrementTick+0x48>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	603b      	str	r3, [r7, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <xTaskIncrementTick+0x46>
 800ad70:	4b41      	ldr	r3, [pc, #260]	; (800ae78 <xTaskIncrementTick+0x150>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	4b41      	ldr	r3, [pc, #260]	; (800ae7c <xTaskIncrementTick+0x154>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a3f      	ldr	r2, [pc, #252]	; (800ae78 <xTaskIncrementTick+0x150>)
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	4a3f      	ldr	r2, [pc, #252]	; (800ae7c <xTaskIncrementTick+0x154>)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6013      	str	r3, [r2, #0]
 800ad84:	4b3e      	ldr	r3, [pc, #248]	; (800ae80 <xTaskIncrementTick+0x158>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <xTaskIncrementTick+0x158>)
 800ad8c:	6013      	str	r3, [r2, #0]
 800ad8e:	f000 fad1 	bl	800b334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad92:	4b3c      	ldr	r3, [pc, #240]	; (800ae84 <xTaskIncrementTick+0x15c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d349      	bcc.n	800ae30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad9c:	4b36      	ldr	r3, [pc, #216]	; (800ae78 <xTaskIncrementTick+0x150>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d104      	bne.n	800adb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada6:	4b37      	ldr	r3, [pc, #220]	; (800ae84 <xTaskIncrementTick+0x15c>)
 800ada8:	f04f 32ff 	mov.w	r2, #4294967295
 800adac:	601a      	str	r2, [r3, #0]
					break;
 800adae:	e03f      	b.n	800ae30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb0:	4b31      	ldr	r3, [pc, #196]	; (800ae78 <xTaskIncrementTick+0x150>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d203      	bcs.n	800add0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800adc8:	4a2e      	ldr	r2, [pc, #184]	; (800ae84 <xTaskIncrementTick+0x15c>)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800adce:	e02f      	b.n	800ae30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	3304      	adds	r3, #4
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe ff1b 	bl	8009c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d004      	beq.n	800adec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	3318      	adds	r3, #24
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe ff12 	bl	8009c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4b25      	ldr	r3, [pc, #148]	; (800ae88 <xTaskIncrementTick+0x160>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d903      	bls.n	800ae00 <xTaskIncrementTick+0xd8>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	4a22      	ldr	r2, [pc, #136]	; (800ae88 <xTaskIncrementTick+0x160>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4a1f      	ldr	r2, [pc, #124]	; (800ae8c <xTaskIncrementTick+0x164>)
 800ae0e:	441a      	add	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7fe fe9d 	bl	8009b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae20:	4b1b      	ldr	r3, [pc, #108]	; (800ae90 <xTaskIncrementTick+0x168>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d3b8      	bcc.n	800ad9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae2e:	e7b5      	b.n	800ad9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae30:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <xTaskIncrementTick+0x168>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	4915      	ldr	r1, [pc, #84]	; (800ae8c <xTaskIncrementTick+0x164>)
 800ae38:	4613      	mov	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4413      	add	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	440b      	add	r3, r1
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d901      	bls.n	800ae4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <xTaskIncrementTick+0x16c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d007      	beq.n	800ae64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	e004      	b.n	800ae64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <xTaskIncrementTick+0x170>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	4a0d      	ldr	r2, [pc, #52]	; (800ae98 <xTaskIncrementTick+0x170>)
 800ae62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ae64:	697b      	ldr	r3, [r7, #20]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000ccc 	.word	0x20000ccc
 800ae74:	20000ca8 	.word	0x20000ca8
 800ae78:	20000c5c 	.word	0x20000c5c
 800ae7c:	20000c60 	.word	0x20000c60
 800ae80:	20000cbc 	.word	0x20000cbc
 800ae84:	20000cc4 	.word	0x20000cc4
 800ae88:	20000cac 	.word	0x20000cac
 800ae8c:	200007d4 	.word	0x200007d4
 800ae90:	200007d0 	.word	0x200007d0
 800ae94:	20000cb8 	.word	0x20000cb8
 800ae98:	20000cb4 	.word	0x20000cb4

0800ae9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aea2:	4b28      	ldr	r3, [pc, #160]	; (800af44 <vTaskSwitchContext+0xa8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aeaa:	4b27      	ldr	r3, [pc, #156]	; (800af48 <vTaskSwitchContext+0xac>)
 800aeac:	2201      	movs	r2, #1
 800aeae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aeb0:	e041      	b.n	800af36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800aeb2:	4b25      	ldr	r3, [pc, #148]	; (800af48 <vTaskSwitchContext+0xac>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb8:	4b24      	ldr	r3, [pc, #144]	; (800af4c <vTaskSwitchContext+0xb0>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e010      	b.n	800aee2 <vTaskSwitchContext+0x46>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <vTaskSwitchContext+0x40>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	607b      	str	r3, [r7, #4]
}
 800aed8:	bf00      	nop
 800aeda:	e7fe      	b.n	800aeda <vTaskSwitchContext+0x3e>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	491b      	ldr	r1, [pc, #108]	; (800af50 <vTaskSwitchContext+0xb4>)
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4613      	mov	r3, r2
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d0e4      	beq.n	800aec0 <vTaskSwitchContext+0x24>
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	4613      	mov	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <vTaskSwitchContext+0xb4>)
 800af02:	4413      	add	r3, r2
 800af04:	60bb      	str	r3, [r7, #8]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	605a      	str	r2, [r3, #4]
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	3308      	adds	r3, #8
 800af18:	429a      	cmp	r2, r3
 800af1a:	d104      	bne.n	800af26 <vTaskSwitchContext+0x8a>
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	4a09      	ldr	r2, [pc, #36]	; (800af54 <vTaskSwitchContext+0xb8>)
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	4a06      	ldr	r2, [pc, #24]	; (800af4c <vTaskSwitchContext+0xb0>)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6013      	str	r3, [r2, #0]
}
 800af36:	bf00      	nop
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	20000ccc 	.word	0x20000ccc
 800af48:	20000cb8 	.word	0x20000cb8
 800af4c:	20000cac 	.word	0x20000cac
 800af50:	200007d4 	.word	0x200007d4
 800af54:	200007d0 	.word	0x200007d0

0800af58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	60fb      	str	r3, [r7, #12]
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af7e:	4b07      	ldr	r3, [pc, #28]	; (800af9c <vTaskPlaceOnEventList+0x44>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3318      	adds	r3, #24
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7fe fe09 	bl	8009b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af8c:	2101      	movs	r1, #1
 800af8e:	6838      	ldr	r0, [r7, #0]
 800af90:	f000 fa7c 	bl	800b48c <prvAddCurrentTaskToDelayedList>
}
 800af94:	bf00      	nop
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200007d0 	.word	0x200007d0

0800afa0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10a      	bne.n	800afc8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800afb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb6:	f383 8811 	msr	BASEPRI, r3
 800afba:	f3bf 8f6f 	isb	sy
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	617b      	str	r3, [r7, #20]
}
 800afc4:	bf00      	nop
 800afc6:	e7fe      	b.n	800afc6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afc8:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <vTaskPlaceOnEventListRestricted+0x54>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3318      	adds	r3, #24
 800afce:	4619      	mov	r1, r3
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f7fe fdc0 	bl	8009b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295
 800afe0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	68b8      	ldr	r0, [r7, #8]
 800afe6:	f000 fa51 	bl	800b48c <prvAddCurrentTaskToDelayedList>
	}
 800afea:	bf00      	nop
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	200007d0 	.word	0x200007d0

0800aff8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10a      	bne.n	800b024 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	60fb      	str	r3, [r7, #12]
}
 800b020:	bf00      	nop
 800b022:	e7fe      	b.n	800b022 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	3318      	adds	r3, #24
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe fdf1 	bl	8009c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b02e:	4b1e      	ldr	r3, [pc, #120]	; (800b0a8 <xTaskRemoveFromEventList+0xb0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d11d      	bne.n	800b072 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	3304      	adds	r3, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe fde8 	bl	8009c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b044:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <xTaskRemoveFromEventList+0xb4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d903      	bls.n	800b054 <xTaskRemoveFromEventList+0x5c>
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b050:	4a16      	ldr	r2, [pc, #88]	; (800b0ac <xTaskRemoveFromEventList+0xb4>)
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4a13      	ldr	r2, [pc, #76]	; (800b0b0 <xTaskRemoveFromEventList+0xb8>)
 800b062:	441a      	add	r2, r3
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	3304      	adds	r3, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f7fe fd73 	bl	8009b56 <vListInsertEnd>
 800b070:	e005      	b.n	800b07e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	3318      	adds	r3, #24
 800b076:	4619      	mov	r1, r3
 800b078:	480e      	ldr	r0, [pc, #56]	; (800b0b4 <xTaskRemoveFromEventList+0xbc>)
 800b07a:	f7fe fd6c 	bl	8009b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <xTaskRemoveFromEventList+0xc0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	429a      	cmp	r2, r3
 800b08a:	d905      	bls.n	800b098 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <xTaskRemoveFromEventList+0xc4>)
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	e001      	b.n	800b09c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b09c:	697b      	ldr	r3, [r7, #20]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20000ccc 	.word	0x20000ccc
 800b0ac:	20000cac 	.word	0x20000cac
 800b0b0:	200007d4 	.word	0x200007d4
 800b0b4:	20000c64 	.word	0x20000c64
 800b0b8:	200007d0 	.word	0x200007d0
 800b0bc:	20000cb8 	.word	0x20000cb8

0800b0c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <vTaskInternalSetTimeOutState+0x24>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <vTaskInternalSetTimeOutState+0x28>)
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	605a      	str	r2, [r3, #4]
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	20000cbc 	.word	0x20000cbc
 800b0e8:	20000ca8 	.word	0x20000ca8

0800b0ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	613b      	str	r3, [r7, #16]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	60fb      	str	r3, [r7, #12]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b12e:	f000 fe79 	bl	800be24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b132:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <xTaskCheckForTimeOut+0xbc>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d102      	bne.n	800b152 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61fb      	str	r3, [r7, #28]
 800b150:	e023      	b.n	800b19a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <xTaskCheckForTimeOut+0xc0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d007      	beq.n	800b16e <xTaskCheckForTimeOut+0x82>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	429a      	cmp	r2, r3
 800b166:	d302      	bcc.n	800b16e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b168:	2301      	movs	r3, #1
 800b16a:	61fb      	str	r3, [r7, #28]
 800b16c:	e015      	b.n	800b19a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	429a      	cmp	r2, r3
 800b176:	d20b      	bcs.n	800b190 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	1ad2      	subs	r2, r2, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff ff9b 	bl	800b0c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	e004      	b.n	800b19a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2200      	movs	r2, #0
 800b194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b196:	2301      	movs	r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b19a:	f000 fe73 	bl	800be84 <vPortExitCritical>

	return xReturn;
 800b19e:	69fb      	ldr	r3, [r7, #28]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20000ca8 	.word	0x20000ca8
 800b1ac:	20000cbc 	.word	0x20000cbc

0800b1b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1b4:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <vTaskMissedYield+0x14>)
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
}
 800b1ba:	bf00      	nop
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	20000cb8 	.word	0x20000cb8

0800b1c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1d0:	f000 f852 	bl	800b278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1d4:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <prvIdleTask+0x28>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d9f9      	bls.n	800b1d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <prvIdleTask+0x2c>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1ec:	e7f0      	b.n	800b1d0 <prvIdleTask+0x8>
 800b1ee:	bf00      	nop
 800b1f0:	200007d4 	.word	0x200007d4
 800b1f4:	e000ed04 	.word	0xe000ed04

0800b1f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1fe:	2300      	movs	r3, #0
 800b200:	607b      	str	r3, [r7, #4]
 800b202:	e00c      	b.n	800b21e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4a12      	ldr	r2, [pc, #72]	; (800b258 <prvInitialiseTaskLists+0x60>)
 800b210:	4413      	add	r3, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fc72 	bl	8009afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3301      	adds	r3, #1
 800b21c:	607b      	str	r3, [r7, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b37      	cmp	r3, #55	; 0x37
 800b222:	d9ef      	bls.n	800b204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b224:	480d      	ldr	r0, [pc, #52]	; (800b25c <prvInitialiseTaskLists+0x64>)
 800b226:	f7fe fc69 	bl	8009afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b22a:	480d      	ldr	r0, [pc, #52]	; (800b260 <prvInitialiseTaskLists+0x68>)
 800b22c:	f7fe fc66 	bl	8009afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b230:	480c      	ldr	r0, [pc, #48]	; (800b264 <prvInitialiseTaskLists+0x6c>)
 800b232:	f7fe fc63 	bl	8009afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b236:	480c      	ldr	r0, [pc, #48]	; (800b268 <prvInitialiseTaskLists+0x70>)
 800b238:	f7fe fc60 	bl	8009afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b23c:	480b      	ldr	r0, [pc, #44]	; (800b26c <prvInitialiseTaskLists+0x74>)
 800b23e:	f7fe fc5d 	bl	8009afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b242:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <prvInitialiseTaskLists+0x78>)
 800b244:	4a05      	ldr	r2, [pc, #20]	; (800b25c <prvInitialiseTaskLists+0x64>)
 800b246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <prvInitialiseTaskLists+0x7c>)
 800b24a:	4a05      	ldr	r2, [pc, #20]	; (800b260 <prvInitialiseTaskLists+0x68>)
 800b24c:	601a      	str	r2, [r3, #0]
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	200007d4 	.word	0x200007d4
 800b25c:	20000c34 	.word	0x20000c34
 800b260:	20000c48 	.word	0x20000c48
 800b264:	20000c64 	.word	0x20000c64
 800b268:	20000c78 	.word	0x20000c78
 800b26c:	20000c90 	.word	0x20000c90
 800b270:	20000c5c 	.word	0x20000c5c
 800b274:	20000c60 	.word	0x20000c60

0800b278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b27e:	e019      	b.n	800b2b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b280:	f000 fdd0 	bl	800be24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b284:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <prvCheckTasksWaitingTermination+0x50>)
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3304      	adds	r3, #4
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fcbd 	bl	8009c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b296:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <prvCheckTasksWaitingTermination+0x54>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	4a0b      	ldr	r2, [pc, #44]	; (800b2cc <prvCheckTasksWaitingTermination+0x54>)
 800b29e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2a0:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <prvCheckTasksWaitingTermination+0x58>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <prvCheckTasksWaitingTermination+0x58>)
 800b2a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2aa:	f000 fdeb 	bl	800be84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f810 	bl	800b2d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2b4:	4b06      	ldr	r3, [pc, #24]	; (800b2d0 <prvCheckTasksWaitingTermination+0x58>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1e1      	bne.n	800b280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000c78 	.word	0x20000c78
 800b2cc:	20000ca4 	.word	0x20000ca4
 800b2d0:	20000c8c 	.word	0x20000c8c

0800b2d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d108      	bne.n	800b2f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 ff88 	bl	800c200 <vPortFree>
				vPortFree( pxTCB );
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 ff85 	bl	800c200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2f6:	e018      	b.n	800b32a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d103      	bne.n	800b30a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 ff7c 	bl	800c200 <vPortFree>
	}
 800b308:	e00f      	b.n	800b32a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b310:	2b02      	cmp	r3, #2
 800b312:	d00a      	beq.n	800b32a <prvDeleteTCB+0x56>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <prvDeleteTCB+0x54>
	}
 800b32a:	bf00      	nop
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
	...

0800b334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b33a:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <prvResetNextTaskUnblockTime+0x38>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d104      	bne.n	800b34e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <prvResetNextTaskUnblockTime+0x3c>)
 800b346:	f04f 32ff 	mov.w	r2, #4294967295
 800b34a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b34c:	e008      	b.n	800b360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34e:	4b07      	ldr	r3, [pc, #28]	; (800b36c <prvResetNextTaskUnblockTime+0x38>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	4a04      	ldr	r2, [pc, #16]	; (800b370 <prvResetNextTaskUnblockTime+0x3c>)
 800b35e:	6013      	str	r3, [r2, #0]
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	20000c5c 	.word	0x20000c5c
 800b370:	20000cc4 	.word	0x20000cc4

0800b374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b37a:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <xTaskGetSchedulerState+0x34>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b382:	2301      	movs	r3, #1
 800b384:	607b      	str	r3, [r7, #4]
 800b386:	e008      	b.n	800b39a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <xTaskGetSchedulerState+0x38>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b390:	2302      	movs	r3, #2
 800b392:	607b      	str	r3, [r7, #4]
 800b394:	e001      	b.n	800b39a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b396:	2300      	movs	r3, #0
 800b398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b39a:	687b      	ldr	r3, [r7, #4]
	}
 800b39c:	4618      	mov	r0, r3
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20000cb0 	.word	0x20000cb0
 800b3ac:	20000ccc 	.word	0x20000ccc

0800b3b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d056      	beq.n	800b474 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3c6:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <xTaskPriorityDisinherit+0xd0>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d00a      	beq.n	800b3e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d10a      	bne.n	800b404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	60bb      	str	r3, [r7, #8]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	1e5a      	subs	r2, r3, #1
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b416:	429a      	cmp	r2, r3
 800b418:	d02c      	beq.n	800b474 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d128      	bne.n	800b474 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3304      	adds	r3, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fbf2 	bl	8009c10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <xTaskPriorityDisinherit+0xd4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d903      	bls.n	800b454 <xTaskPriorityDisinherit+0xa4>
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <xTaskPriorityDisinherit+0xd4>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <xTaskPriorityDisinherit+0xd8>)
 800b462:	441a      	add	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fe fb73 	bl	8009b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b474:	697b      	ldr	r3, [r7, #20]
	}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	200007d0 	.word	0x200007d0
 800b484:	20000cac 	.word	0x20000cac
 800b488:	200007d4 	.word	0x200007d4

0800b48c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b496:	4b21      	ldr	r3, [pc, #132]	; (800b51c <prvAddCurrentTaskToDelayedList+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b49c:	4b20      	ldr	r3, [pc, #128]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fbb4 	bl	8009c10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ae:	d10a      	bne.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4819      	ldr	r0, [pc, #100]	; (800b524 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4c0:	f7fe fb49 	bl	8009b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4c4:	e026      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4ce:	4b14      	ldr	r3, [pc, #80]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d209      	bcs.n	800b4f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f7fe fb57 	bl	8009b9e <vListInsert>
}
 800b4f0:	e010      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe fb4d 	bl	8009b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d202      	bcs.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b50e:	4a08      	ldr	r2, [pc, #32]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6013      	str	r3, [r2, #0]
}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	20000ca8 	.word	0x20000ca8
 800b520:	200007d0 	.word	0x200007d0
 800b524:	20000c90 	.word	0x20000c90
 800b528:	20000c60 	.word	0x20000c60
 800b52c:	20000c5c 	.word	0x20000c5c
 800b530:	20000cc4 	.word	0x20000cc4

0800b534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b53e:	f000 fb07 	bl	800bb50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b542:	4b1c      	ldr	r3, [pc, #112]	; (800b5b4 <xTimerCreateTimerTask+0x80>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d021      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b552:	1d3a      	adds	r2, r7, #4
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fab3 	bl	8009ac8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	9202      	str	r2, [sp, #8]
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	2302      	movs	r3, #2
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	2300      	movs	r3, #0
 800b572:	460a      	mov	r2, r1
 800b574:	4910      	ldr	r1, [pc, #64]	; (800b5b8 <xTimerCreateTimerTask+0x84>)
 800b576:	4811      	ldr	r0, [pc, #68]	; (800b5bc <xTimerCreateTimerTask+0x88>)
 800b578:	f7ff f860 	bl	800a63c <xTaskCreateStatic>
 800b57c:	4603      	mov	r3, r0
 800b57e:	4a10      	ldr	r2, [pc, #64]	; (800b5c0 <xTimerCreateTimerTask+0x8c>)
 800b580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <xTimerCreateTimerTask+0x8c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b58a:	2301      	movs	r3, #1
 800b58c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	613b      	str	r3, [r7, #16]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5aa:	697b      	ldr	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20000d00 	.word	0x20000d00
 800b5b8:	0800ce70 	.word	0x0800ce70
 800b5bc:	0800b6f9 	.word	0x0800b6f9
 800b5c0:	20000d04 	.word	0x20000d04

0800b5c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08a      	sub	sp, #40	; 0x28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	623b      	str	r3, [r7, #32]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5f2:	4b1a      	ldr	r3, [pc, #104]	; (800b65c <xTimerGenericCommand+0x98>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d02a      	beq.n	800b650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	dc18      	bgt.n	800b63e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b60c:	f7ff feb2 	bl	800b374 <xTaskGetSchedulerState>
 800b610:	4603      	mov	r3, r0
 800b612:	2b02      	cmp	r3, #2
 800b614:	d109      	bne.n	800b62a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b616:	4b11      	ldr	r3, [pc, #68]	; (800b65c <xTimerGenericCommand+0x98>)
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	f107 0110 	add.w	r1, r7, #16
 800b61e:	2300      	movs	r3, #0
 800b620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b622:	f7fe fc23 	bl	8009e6c <xQueueGenericSend>
 800b626:	6278      	str	r0, [r7, #36]	; 0x24
 800b628:	e012      	b.n	800b650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b62a:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <xTimerGenericCommand+0x98>)
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f107 0110 	add.w	r1, r7, #16
 800b632:	2300      	movs	r3, #0
 800b634:	2200      	movs	r2, #0
 800b636:	f7fe fc19 	bl	8009e6c <xQueueGenericSend>
 800b63a:	6278      	str	r0, [r7, #36]	; 0x24
 800b63c:	e008      	b.n	800b650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b63e:	4b07      	ldr	r3, [pc, #28]	; (800b65c <xTimerGenericCommand+0x98>)
 800b640:	6818      	ldr	r0, [r3, #0]
 800b642:	f107 0110 	add.w	r1, r7, #16
 800b646:	2300      	movs	r3, #0
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	f7fe fd0d 	bl	800a068 <xQueueGenericSendFromISR>
 800b64e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b652:	4618      	mov	r0, r3
 800b654:	3728      	adds	r7, #40	; 0x28
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000d00 	.word	0x20000d00

0800b660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b66a:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <prvProcessExpiredTimer+0x94>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	3304      	adds	r3, #4
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fe fac9 	bl	8009c10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d022      	beq.n	800b6d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	18d1      	adds	r1, r2, r3
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	683a      	ldr	r2, [r7, #0]
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	f000 f8d1 	bl	800b840 <prvInsertTimerInActiveList>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d01f      	beq.n	800b6e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	f7ff ff88 	bl	800b5c4 <xTimerGenericCommand>
 800b6b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d113      	bne.n	800b6e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	60fb      	str	r3, [r7, #12]
}
 800b6ce:	bf00      	nop
 800b6d0:	e7fe      	b.n	800b6d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d8:	f023 0301 	bic.w	r3, r3, #1
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	6a1b      	ldr	r3, [r3, #32]
 800b6e8:	6978      	ldr	r0, [r7, #20]
 800b6ea:	4798      	blx	r3
}
 800b6ec:	bf00      	nop
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20000cf8 	.word	0x20000cf8

0800b6f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b700:	f107 0308 	add.w	r3, r7, #8
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f857 	bl	800b7b8 <prvGetNextExpireTime>
 800b70a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	4619      	mov	r1, r3
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 f803 	bl	800b71c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b716:	f000 f8d5 	bl	800b8c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b71a:	e7f1      	b.n	800b700 <prvTimerTask+0x8>

0800b71c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b726:	f7ff fa43 	bl	800abb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b72a:	f107 0308 	add.w	r3, r7, #8
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f866 	bl	800b800 <prvSampleTimeNow>
 800b734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d130      	bne.n	800b79e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <prvProcessTimerOrBlockTask+0x3c>
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	429a      	cmp	r2, r3
 800b748:	d806      	bhi.n	800b758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b74a:	f7ff fa3f 	bl	800abcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b74e:	68f9      	ldr	r1, [r7, #12]
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff ff85 	bl	800b660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b756:	e024      	b.n	800b7a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b75e:	4b13      	ldr	r3, [pc, #76]	; (800b7ac <prvProcessTimerOrBlockTask+0x90>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <prvProcessTimerOrBlockTask+0x50>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <prvProcessTimerOrBlockTask+0x52>
 800b76c:	2300      	movs	r3, #0
 800b76e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b770:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <prvProcessTimerOrBlockTask+0x94>)
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	4619      	mov	r1, r3
 800b77e:	f7fe ff29 	bl	800a5d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b782:	f7ff fa23 	bl	800abcc <xTaskResumeAll>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <prvProcessTimerOrBlockTask+0x98>)
 800b78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	f3bf 8f6f 	isb	sy
}
 800b79c:	e001      	b.n	800b7a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b79e:	f7ff fa15 	bl	800abcc <xTaskResumeAll>
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000cfc 	.word	0x20000cfc
 800b7b0:	20000d00 	.word	0x20000d00
 800b7b4:	e000ed04 	.word	0xe000ed04

0800b7b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7c0:	4b0e      	ldr	r3, [pc, #56]	; (800b7fc <prvGetNextExpireTime+0x44>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <prvGetNextExpireTime+0x16>
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	e000      	b.n	800b7d0 <prvGetNextExpireTime+0x18>
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d105      	bne.n	800b7e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7dc:	4b07      	ldr	r3, [pc, #28]	; (800b7fc <prvGetNextExpireTime+0x44>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	e001      	b.n	800b7ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	20000cf8 	.word	0x20000cf8

0800b800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b808:	f7ff fa7e 	bl	800ad08 <xTaskGetTickCount>
 800b80c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b80e:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <prvSampleTimeNow+0x3c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	429a      	cmp	r2, r3
 800b816:	d205      	bcs.n	800b824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b818:	f000 f936 	bl	800ba88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	601a      	str	r2, [r3, #0]
 800b822:	e002      	b.n	800b82a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b82a:	4a04      	ldr	r2, [pc, #16]	; (800b83c <prvSampleTimeNow+0x3c>)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b830:	68fb      	ldr	r3, [r7, #12]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000d08 	.word	0x20000d08

0800b840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b84e:	2300      	movs	r3, #0
 800b850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	429a      	cmp	r2, r3
 800b864:	d812      	bhi.n	800b88c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	e01b      	b.n	800b8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b87a:	4b10      	ldr	r3, [pc, #64]	; (800b8bc <prvInsertTimerInActiveList+0x7c>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3304      	adds	r3, #4
 800b882:	4619      	mov	r1, r3
 800b884:	4610      	mov	r0, r2
 800b886:	f7fe f98a 	bl	8009b9e <vListInsert>
 800b88a:	e012      	b.n	800b8b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	429a      	cmp	r2, r3
 800b892:	d206      	bcs.n	800b8a2 <prvInsertTimerInActiveList+0x62>
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d302      	bcc.n	800b8a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b89c:	2301      	movs	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
 800b8a0:	e007      	b.n	800b8b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8a2:	4b07      	ldr	r3, [pc, #28]	; (800b8c0 <prvInsertTimerInActiveList+0x80>)
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7fe f976 	bl	8009b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8b2:	697b      	ldr	r3, [r7, #20]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	20000cfc 	.word	0x20000cfc
 800b8c0:	20000cf8 	.word	0x20000cf8

0800b8c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08e      	sub	sp, #56	; 0x38
 800b8c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ca:	e0ca      	b.n	800ba62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	da18      	bge.n	800b904 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8d2:	1d3b      	adds	r3, r7, #4
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10a      	bne.n	800b8f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	61fb      	str	r3, [r7, #28]
}
 800b8f0:	bf00      	nop
 800b8f2:	e7fe      	b.n	800b8f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fa:	6850      	ldr	r0, [r2, #4]
 800b8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fe:	6892      	ldr	r2, [r2, #8]
 800b900:	4611      	mov	r1, r2
 800b902:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	f2c0 80aa 	blt.w	800ba60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d004      	beq.n	800b922 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	3304      	adds	r3, #4
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe f977 	bl	8009c10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b922:	463b      	mov	r3, r7
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff ff6b 	bl	800b800 <prvSampleTimeNow>
 800b92a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b09      	cmp	r3, #9
 800b930:	f200 8097 	bhi.w	800ba62 <prvProcessReceivedCommands+0x19e>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <prvProcessReceivedCommands+0x78>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b965 	.word	0x0800b965
 800b948:	0800b9d9 	.word	0x0800b9d9
 800b94c:	0800b9ed 	.word	0x0800b9ed
 800b950:	0800ba37 	.word	0x0800ba37
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b965 	.word	0x0800b965
 800b95c:	0800b9d9 	.word	0x0800b9d9
 800b960:	0800b9ed 	.word	0x0800b9ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	18d1      	adds	r1, r2, r3
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b984:	f7ff ff5c 	bl	800b840 <prvInsertTimerInActiveList>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d069      	beq.n	800ba62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b99c:	f003 0304 	and.w	r3, r3, #4
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d05e      	beq.n	800ba62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	441a      	add	r2, r3
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9b6:	f7ff fe05 	bl	800b5c4 <xTimerGenericCommand>
 800b9ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9bc:	6a3b      	ldr	r3, [r7, #32]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d14f      	bne.n	800ba62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	61bb      	str	r3, [r7, #24]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9de:	f023 0301 	bic.w	r3, r3, #1
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9ea:	e03a      	b.n	800ba62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f2:	f043 0301 	orr.w	r3, r3, #1
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10a      	bne.n	800ba22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	617b      	str	r3, [r7, #20]
}
 800ba1e:	bf00      	nop
 800ba20:	e7fe      	b.n	800ba20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	699a      	ldr	r2, [r3, #24]
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	18d1      	adds	r1, r2, r3
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba30:	f7ff ff06 	bl	800b840 <prvInsertTimerInActiveList>
					break;
 800ba34:	e015      	b.n	800ba62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ba44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba46:	f000 fbdb 	bl	800c200 <vPortFree>
 800ba4a:	e00a      	b.n	800ba62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba52:	f023 0301 	bic.w	r3, r3, #1
 800ba56:	b2da      	uxtb	r2, r3
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba5e:	e000      	b.n	800ba62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba62:	4b08      	ldr	r3, [pc, #32]	; (800ba84 <prvProcessReceivedCommands+0x1c0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	1d39      	adds	r1, r7, #4
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fb98 	bl	800a1a0 <xQueueReceive>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f47f af2a 	bne.w	800b8cc <prvProcessReceivedCommands+0x8>
	}
}
 800ba78:	bf00      	nop
 800ba7a:	bf00      	nop
 800ba7c:	3730      	adds	r7, #48	; 0x30
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20000d00 	.word	0x20000d00

0800ba88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba8e:	e048      	b.n	800bb22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba90:	4b2d      	ldr	r3, [pc, #180]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba9a:	4b2b      	ldr	r3, [pc, #172]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe f8b1 	bl	8009c10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d02e      	beq.n	800bb22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	4413      	add	r3, r2
 800bacc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d90e      	bls.n	800baf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bae2:	4b19      	ldr	r3, [pc, #100]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3304      	adds	r3, #4
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f7fe f856 	bl	8009b9e <vListInsert>
 800baf2:	e016      	b.n	800bb22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baf4:	2300      	movs	r3, #0
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	2300      	movs	r3, #0
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	2100      	movs	r1, #0
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fd60 	bl	800b5c4 <xTimerGenericCommand>
 800bb04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	603b      	str	r3, [r7, #0]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb22:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1b1      	bne.n	800ba90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb32:	4b06      	ldr	r3, [pc, #24]	; (800bb4c <prvSwitchTimerLists+0xc4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a04      	ldr	r2, [pc, #16]	; (800bb48 <prvSwitchTimerLists+0xc0>)
 800bb38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb3a:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <prvSwitchTimerLists+0xc4>)
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	6013      	str	r3, [r2, #0]
}
 800bb40:	bf00      	nop
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000cf8 	.word	0x20000cf8
 800bb4c:	20000cfc 	.word	0x20000cfc

0800bb50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb56:	f000 f965 	bl	800be24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb5a:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <prvCheckForValidListAndQueue+0x60>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d120      	bne.n	800bba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb62:	4814      	ldr	r0, [pc, #80]	; (800bbb4 <prvCheckForValidListAndQueue+0x64>)
 800bb64:	f7fd ffca 	bl	8009afc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb68:	4813      	ldr	r0, [pc, #76]	; (800bbb8 <prvCheckForValidListAndQueue+0x68>)
 800bb6a:	f7fd ffc7 	bl	8009afc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb6e:	4b13      	ldr	r3, [pc, #76]	; (800bbbc <prvCheckForValidListAndQueue+0x6c>)
 800bb70:	4a10      	ldr	r2, [pc, #64]	; (800bbb4 <prvCheckForValidListAndQueue+0x64>)
 800bb72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb74:	4b12      	ldr	r3, [pc, #72]	; (800bbc0 <prvCheckForValidListAndQueue+0x70>)
 800bb76:	4a10      	ldr	r2, [pc, #64]	; (800bbb8 <prvCheckForValidListAndQueue+0x68>)
 800bb78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	4b11      	ldr	r3, [pc, #68]	; (800bbc4 <prvCheckForValidListAndQueue+0x74>)
 800bb80:	4a11      	ldr	r2, [pc, #68]	; (800bbc8 <prvCheckForValidListAndQueue+0x78>)
 800bb82:	2110      	movs	r1, #16
 800bb84:	200a      	movs	r0, #10
 800bb86:	f7fe f8d5 	bl	8009d34 <xQueueGenericCreateStatic>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4a08      	ldr	r2, [pc, #32]	; (800bbb0 <prvCheckForValidListAndQueue+0x60>)
 800bb8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb90:	4b07      	ldr	r3, [pc, #28]	; (800bbb0 <prvCheckForValidListAndQueue+0x60>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <prvCheckForValidListAndQueue+0x60>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	490b      	ldr	r1, [pc, #44]	; (800bbcc <prvCheckForValidListAndQueue+0x7c>)
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fcee 	bl	800a580 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bba4:	f000 f96e 	bl	800be84 <vPortExitCritical>
}
 800bba8:	bf00      	nop
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	20000d00 	.word	0x20000d00
 800bbb4:	20000cd0 	.word	0x20000cd0
 800bbb8:	20000ce4 	.word	0x20000ce4
 800bbbc:	20000cf8 	.word	0x20000cf8
 800bbc0:	20000cfc 	.word	0x20000cfc
 800bbc4:	20000dac 	.word	0x20000dac
 800bbc8:	20000d0c 	.word	0x20000d0c
 800bbcc:	0800ce78 	.word	0x0800ce78

0800bbd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3b04      	subs	r3, #4
 800bbe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3b04      	subs	r3, #4
 800bbee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f023 0201 	bic.w	r2, r3, #1
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3b04      	subs	r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc00:	4a0c      	ldr	r2, [pc, #48]	; (800bc34 <pxPortInitialiseStack+0x64>)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3b14      	subs	r3, #20
 800bc0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3b04      	subs	r3, #4
 800bc16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f06f 0202 	mvn.w	r2, #2
 800bc1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3b20      	subs	r3, #32
 800bc24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc26:	68fb      	ldr	r3, [r7, #12]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr
 800bc34:	0800bc39 	.word	0x0800bc39

0800bc38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <prvTaskExitError+0x54>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc4a:	d00a      	beq.n	800bc62 <prvTaskExitError+0x2a>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	60fb      	str	r3, [r7, #12]
}
 800bc5e:	bf00      	nop
 800bc60:	e7fe      	b.n	800bc60 <prvTaskExitError+0x28>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	60bb      	str	r3, [r7, #8]
}
 800bc74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc76:	bf00      	nop
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0fc      	beq.n	800bc78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc7e:	bf00      	nop
 800bc80:	bf00      	nop
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	2000003c 	.word	0x2000003c

0800bc90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc90:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <pxCurrentTCBConst2>)
 800bc92:	6819      	ldr	r1, [r3, #0]
 800bc94:	6808      	ldr	r0, [r1, #0]
 800bc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9a:	f380 8809 	msr	PSP, r0
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f380 8811 	msr	BASEPRI, r0
 800bcaa:	4770      	bx	lr
 800bcac:	f3af 8000 	nop.w

0800bcb0 <pxCurrentTCBConst2>:
 800bcb0:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bcb4:	bf00      	nop
 800bcb6:	bf00      	nop

0800bcb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bcb8:	4808      	ldr	r0, [pc, #32]	; (800bcdc <prvPortStartFirstTask+0x24>)
 800bcba:	6800      	ldr	r0, [r0, #0]
 800bcbc:	6800      	ldr	r0, [r0, #0]
 800bcbe:	f380 8808 	msr	MSP, r0
 800bcc2:	f04f 0000 	mov.w	r0, #0
 800bcc6:	f380 8814 	msr	CONTROL, r0
 800bcca:	b662      	cpsie	i
 800bccc:	b661      	cpsie	f
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	df00      	svc	0
 800bcd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcda:	bf00      	nop
 800bcdc:	e000ed08 	.word	0xe000ed08

0800bce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bce6:	4b46      	ldr	r3, [pc, #280]	; (800be00 <xPortStartScheduler+0x120>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a46      	ldr	r2, [pc, #280]	; (800be04 <xPortStartScheduler+0x124>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d10a      	bne.n	800bd06 <xPortStartScheduler+0x26>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	613b      	str	r3, [r7, #16]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bd06:	4b3e      	ldr	r3, [pc, #248]	; (800be00 <xPortStartScheduler+0x120>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a3f      	ldr	r2, [pc, #252]	; (800be08 <xPortStartScheduler+0x128>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d10a      	bne.n	800bd26 <xPortStartScheduler+0x46>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	60fb      	str	r3, [r7, #12]
}
 800bd22:	bf00      	nop
 800bd24:	e7fe      	b.n	800bd24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd26:	4b39      	ldr	r3, [pc, #228]	; (800be0c <xPortStartScheduler+0x12c>)
 800bd28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd40:	78fb      	ldrb	r3, [r7, #3]
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b31      	ldr	r3, [pc, #196]	; (800be10 <xPortStartScheduler+0x130>)
 800bd4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd4e:	4b31      	ldr	r3, [pc, #196]	; (800be14 <xPortStartScheduler+0x134>)
 800bd50:	2207      	movs	r2, #7
 800bd52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd54:	e009      	b.n	800bd6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd56:	4b2f      	ldr	r3, [pc, #188]	; (800be14 <xPortStartScheduler+0x134>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4a2d      	ldr	r2, [pc, #180]	; (800be14 <xPortStartScheduler+0x134>)
 800bd5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd6a:	78fb      	ldrb	r3, [r7, #3]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd72:	2b80      	cmp	r3, #128	; 0x80
 800bd74:	d0ef      	beq.n	800bd56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd76:	4b27      	ldr	r3, [pc, #156]	; (800be14 <xPortStartScheduler+0x134>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f1c3 0307 	rsb	r3, r3, #7
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d00a      	beq.n	800bd98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	60bb      	str	r3, [r7, #8]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd98:	4b1e      	ldr	r3, [pc, #120]	; (800be14 <xPortStartScheduler+0x134>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	4a1d      	ldr	r2, [pc, #116]	; (800be14 <xPortStartScheduler+0x134>)
 800bda0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bda2:	4b1c      	ldr	r3, [pc, #112]	; (800be14 <xPortStartScheduler+0x134>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdaa:	4a1a      	ldr	r2, [pc, #104]	; (800be14 <xPortStartScheduler+0x134>)
 800bdac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdb6:	4b18      	ldr	r3, [pc, #96]	; (800be18 <xPortStartScheduler+0x138>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a17      	ldr	r2, [pc, #92]	; (800be18 <xPortStartScheduler+0x138>)
 800bdbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <xPortStartScheduler+0x138>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a14      	ldr	r2, [pc, #80]	; (800be18 <xPortStartScheduler+0x138>)
 800bdc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdce:	f000 f8dd 	bl	800bf8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdd2:	4b12      	ldr	r3, [pc, #72]	; (800be1c <xPortStartScheduler+0x13c>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdd8:	f000 f8fc 	bl	800bfd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bddc:	4b10      	ldr	r3, [pc, #64]	; (800be20 <xPortStartScheduler+0x140>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a0f      	ldr	r2, [pc, #60]	; (800be20 <xPortStartScheduler+0x140>)
 800bde2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bde6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bde8:	f7ff ff66 	bl	800bcb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdec:	f7ff f856 	bl	800ae9c <vTaskSwitchContext>
	prvTaskExitError();
 800bdf0:	f7ff ff22 	bl	800bc38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	e000ed00 	.word	0xe000ed00
 800be04:	410fc271 	.word	0x410fc271
 800be08:	410fc270 	.word	0x410fc270
 800be0c:	e000e400 	.word	0xe000e400
 800be10:	20000dfc 	.word	0x20000dfc
 800be14:	20000e00 	.word	0x20000e00
 800be18:	e000ed20 	.word	0xe000ed20
 800be1c:	2000003c 	.word	0x2000003c
 800be20:	e000ef34 	.word	0xe000ef34

0800be24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
	__asm volatile
 800be2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	607b      	str	r3, [r7, #4]
}
 800be3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be3e:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <vPortEnterCritical+0x58>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3301      	adds	r3, #1
 800be44:	4a0d      	ldr	r2, [pc, #52]	; (800be7c <vPortEnterCritical+0x58>)
 800be46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be48:	4b0c      	ldr	r3, [pc, #48]	; (800be7c <vPortEnterCritical+0x58>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d10f      	bne.n	800be70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <vPortEnterCritical+0x5c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00a      	beq.n	800be70 <vPortEnterCritical+0x4c>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	603b      	str	r3, [r7, #0]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <vPortEnterCritical+0x4a>
	}
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	2000003c 	.word	0x2000003c
 800be80:	e000ed04 	.word	0xe000ed04

0800be84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be8a:	4b12      	ldr	r3, [pc, #72]	; (800bed4 <vPortExitCritical+0x50>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10a      	bne.n	800bea8 <vPortExitCritical+0x24>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	607b      	str	r3, [r7, #4]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bea8:	4b0a      	ldr	r3, [pc, #40]	; (800bed4 <vPortExitCritical+0x50>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	3b01      	subs	r3, #1
 800beae:	4a09      	ldr	r2, [pc, #36]	; (800bed4 <vPortExitCritical+0x50>)
 800beb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800beb2:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <vPortExitCritical+0x50>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <vPortExitCritical+0x42>
 800beba:	2300      	movs	r3, #0
 800bebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	f383 8811 	msr	BASEPRI, r3
}
 800bec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	2000003c 	.word	0x2000003c
	...

0800bee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bee0:	f3ef 8009 	mrs	r0, PSP
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <pxCurrentTCBConst>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	f01e 0f10 	tst.w	lr, #16
 800bef0:	bf08      	it	eq
 800bef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befa:	6010      	str	r0, [r2, #0]
 800befc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf04:	f380 8811 	msr	BASEPRI, r0
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f7fe ffc4 	bl	800ae9c <vTaskSwitchContext>
 800bf14:	f04f 0000 	mov.w	r0, #0
 800bf18:	f380 8811 	msr	BASEPRI, r0
 800bf1c:	bc09      	pop	{r0, r3}
 800bf1e:	6819      	ldr	r1, [r3, #0]
 800bf20:	6808      	ldr	r0, [r1, #0]
 800bf22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf26:	f01e 0f10 	tst.w	lr, #16
 800bf2a:	bf08      	it	eq
 800bf2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf30:	f380 8809 	msr	PSP, r0
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	f3af 8000 	nop.w

0800bf40 <pxCurrentTCBConst>:
 800bf40:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf44:	bf00      	nop
 800bf46:	bf00      	nop

0800bf48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	607b      	str	r3, [r7, #4]
}
 800bf60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf62:	f7fe fee1 	bl	800ad28 <xTaskIncrementTick>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf6c:	4b06      	ldr	r3, [pc, #24]	; (800bf88 <xPortSysTickHandler+0x40>)
 800bf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	2300      	movs	r3, #0
 800bf76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	f383 8811 	msr	BASEPRI, r3
}
 800bf7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	e000ed04 	.word	0xe000ed04

0800bf8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf90:	4b0b      	ldr	r3, [pc, #44]	; (800bfc0 <vPortSetupTimerInterrupt+0x34>)
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf96:	4b0b      	ldr	r3, [pc, #44]	; (800bfc4 <vPortSetupTimerInterrupt+0x38>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <vPortSetupTimerInterrupt+0x3c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a0a      	ldr	r2, [pc, #40]	; (800bfcc <vPortSetupTimerInterrupt+0x40>)
 800bfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa6:	099b      	lsrs	r3, r3, #6
 800bfa8:	4a09      	ldr	r2, [pc, #36]	; (800bfd0 <vPortSetupTimerInterrupt+0x44>)
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <vPortSetupTimerInterrupt+0x34>)
 800bfb0:	2207      	movs	r2, #7
 800bfb2:	601a      	str	r2, [r3, #0]
}
 800bfb4:	bf00      	nop
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	e000e010 	.word	0xe000e010
 800bfc4:	e000e018 	.word	0xe000e018
 800bfc8:	20000030 	.word	0x20000030
 800bfcc:	10624dd3 	.word	0x10624dd3
 800bfd0:	e000e014 	.word	0xe000e014

0800bfd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfe4 <vPortEnableVFP+0x10>
 800bfd8:	6801      	ldr	r1, [r0, #0]
 800bfda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfde:	6001      	str	r1, [r0, #0]
 800bfe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfe2:	bf00      	nop
 800bfe4:	e000ed88 	.word	0xe000ed88

0800bfe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfee:	f3ef 8305 	mrs	r3, IPSR
 800bff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b0f      	cmp	r3, #15
 800bff8:	d914      	bls.n	800c024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bffa:	4a17      	ldr	r2, [pc, #92]	; (800c058 <vPortValidateInterruptPriority+0x70>)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4413      	add	r3, r2
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c004:	4b15      	ldr	r3, [pc, #84]	; (800c05c <vPortValidateInterruptPriority+0x74>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	7afa      	ldrb	r2, [r7, #11]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d20a      	bcs.n	800c024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	607b      	str	r3, [r7, #4]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <vPortValidateInterruptPriority+0x78>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c02c:	4b0d      	ldr	r3, [pc, #52]	; (800c064 <vPortValidateInterruptPriority+0x7c>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d90a      	bls.n	800c04a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	603b      	str	r3, [r7, #0]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <vPortValidateInterruptPriority+0x60>
	}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	e000e3f0 	.word	0xe000e3f0
 800c05c:	20000dfc 	.word	0x20000dfc
 800c060:	e000ed0c 	.word	0xe000ed0c
 800c064:	20000e00 	.word	0x20000e00

0800c068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08a      	sub	sp, #40	; 0x28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c070:	2300      	movs	r3, #0
 800c072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c074:	f7fe fd9c 	bl	800abb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c078:	4b5b      	ldr	r3, [pc, #364]	; (800c1e8 <pvPortMalloc+0x180>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c080:	f000 f920 	bl	800c2c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c084:	4b59      	ldr	r3, [pc, #356]	; (800c1ec <pvPortMalloc+0x184>)
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4013      	ands	r3, r2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f040 8093 	bne.w	800c1b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01d      	beq.n	800c0d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c098:	2208      	movs	r2, #8
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4413      	add	r3, r2
 800c09e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d014      	beq.n	800c0d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f023 0307 	bic.w	r3, r3, #7
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00a      	beq.n	800c0d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	617b      	str	r3, [r7, #20]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d06e      	beq.n	800c1b8 <pvPortMalloc+0x150>
 800c0da:	4b45      	ldr	r3, [pc, #276]	; (800c1f0 <pvPortMalloc+0x188>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d869      	bhi.n	800c1b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0e4:	4b43      	ldr	r3, [pc, #268]	; (800c1f4 <pvPortMalloc+0x18c>)
 800c0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0e8:	4b42      	ldr	r3, [pc, #264]	; (800c1f4 <pvPortMalloc+0x18c>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ee:	e004      	b.n	800c0fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d903      	bls.n	800c10c <pvPortMalloc+0xa4>
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1f1      	bne.n	800c0f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c10c:	4b36      	ldr	r3, [pc, #216]	; (800c1e8 <pvPortMalloc+0x180>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	429a      	cmp	r2, r3
 800c114:	d050      	beq.n	800c1b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2208      	movs	r2, #8
 800c11c:	4413      	add	r3, r2
 800c11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	2308      	movs	r3, #8
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	429a      	cmp	r2, r3
 800c136:	d91f      	bls.n	800c178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <pvPortMalloc+0xf8>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	613b      	str	r3, [r7, #16]
}
 800c15c:	bf00      	nop
 800c15e:	e7fe      	b.n	800c15e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	1ad2      	subs	r2, r2, r3
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c172:	69b8      	ldr	r0, [r7, #24]
 800c174:	f000 f908 	bl	800c388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c178:	4b1d      	ldr	r3, [pc, #116]	; (800c1f0 <pvPortMalloc+0x188>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	4a1b      	ldr	r2, [pc, #108]	; (800c1f0 <pvPortMalloc+0x188>)
 800c184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c186:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <pvPortMalloc+0x188>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <pvPortMalloc+0x190>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d203      	bcs.n	800c19a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c192:	4b17      	ldr	r3, [pc, #92]	; (800c1f0 <pvPortMalloc+0x188>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a18      	ldr	r2, [pc, #96]	; (800c1f8 <pvPortMalloc+0x190>)
 800c198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	4b13      	ldr	r3, [pc, #76]	; (800c1ec <pvPortMalloc+0x184>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	431a      	orrs	r2, r3
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c1ae:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <pvPortMalloc+0x194>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	4a11      	ldr	r2, [pc, #68]	; (800c1fc <pvPortMalloc+0x194>)
 800c1b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1b8:	f7fe fd08 	bl	800abcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00a      	beq.n	800c1dc <pvPortMalloc+0x174>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	60fb      	str	r3, [r7, #12]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <pvPortMalloc+0x172>
	return pvReturn;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3728      	adds	r7, #40	; 0x28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20004a0c 	.word	0x20004a0c
 800c1ec:	20004a20 	.word	0x20004a20
 800c1f0:	20004a10 	.word	0x20004a10
 800c1f4:	20004a04 	.word	0x20004a04
 800c1f8:	20004a14 	.word	0x20004a14
 800c1fc:	20004a18 	.word	0x20004a18

0800c200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d04d      	beq.n	800c2ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c212:	2308      	movs	r3, #8
 800c214:	425b      	negs	r3, r3
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	4413      	add	r3, r2
 800c21a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <vPortFree+0xb8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4013      	ands	r3, r2
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10a      	bne.n	800c244 <vPortFree+0x44>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	60fb      	str	r3, [r7, #12]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00a      	beq.n	800c262 <vPortFree+0x62>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	60bb      	str	r3, [r7, #8]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <vPortFree+0xb8>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4013      	ands	r3, r2
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01e      	beq.n	800c2ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d11a      	bne.n	800c2ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <vPortFree+0xb8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	43db      	mvns	r3, r3
 800c282:	401a      	ands	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c288:	f7fe fc92 	bl	800abb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <vPortFree+0xbc>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4413      	add	r3, r2
 800c296:	4a09      	ldr	r2, [pc, #36]	; (800c2bc <vPortFree+0xbc>)
 800c298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c29a:	6938      	ldr	r0, [r7, #16]
 800c29c:	f000 f874 	bl	800c388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2a0:	4b07      	ldr	r3, [pc, #28]	; (800c2c0 <vPortFree+0xc0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4a06      	ldr	r2, [pc, #24]	; (800c2c0 <vPortFree+0xc0>)
 800c2a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c2aa:	f7fe fc8f 	bl	800abcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2ae:	bf00      	nop
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	20004a20 	.word	0x20004a20
 800c2bc:	20004a10 	.word	0x20004a10
 800c2c0:	20004a1c 	.word	0x20004a1c

0800c2c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2d0:	4b27      	ldr	r3, [pc, #156]	; (800c370 <prvHeapInit+0xac>)
 800c2d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00c      	beq.n	800c2f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3307      	adds	r3, #7
 800c2e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f023 0307 	bic.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	4a1f      	ldr	r2, [pc, #124]	; (800c370 <prvHeapInit+0xac>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2fc:	4a1d      	ldr	r2, [pc, #116]	; (800c374 <prvHeapInit+0xb0>)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c302:	4b1c      	ldr	r3, [pc, #112]	; (800c374 <prvHeapInit+0xb0>)
 800c304:	2200      	movs	r2, #0
 800c306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	4413      	add	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c310:	2208      	movs	r2, #8
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 0307 	bic.w	r3, r3, #7
 800c31e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4a15      	ldr	r2, [pc, #84]	; (800c378 <prvHeapInit+0xb4>)
 800c324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <prvHeapInit+0xb4>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2200      	movs	r2, #0
 800c32c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c32e:	4b12      	ldr	r3, [pc, #72]	; (800c378 <prvHeapInit+0xb4>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2200      	movs	r2, #0
 800c334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c344:	4b0c      	ldr	r3, [pc, #48]	; (800c378 <prvHeapInit+0xb4>)
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <prvHeapInit+0xb8>)
 800c352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <prvHeapInit+0xbc>)
 800c35a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c35c:	4b09      	ldr	r3, [pc, #36]	; (800c384 <prvHeapInit+0xc0>)
 800c35e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c362:	601a      	str	r2, [r3, #0]
}
 800c364:	bf00      	nop
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr
 800c370:	20000e04 	.word	0x20000e04
 800c374:	20004a04 	.word	0x20004a04
 800c378:	20004a0c 	.word	0x20004a0c
 800c37c:	20004a14 	.word	0x20004a14
 800c380:	20004a10 	.word	0x20004a10
 800c384:	20004a20 	.word	0x20004a20

0800c388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c390:	4b28      	ldr	r3, [pc, #160]	; (800c434 <prvInsertBlockIntoFreeList+0xac>)
 800c392:	60fb      	str	r3, [r7, #12]
 800c394:	e002      	b.n	800c39c <prvInsertBlockIntoFreeList+0x14>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d8f7      	bhi.n	800c396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d108      	bne.n	800c3ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	441a      	add	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	441a      	add	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d118      	bne.n	800c410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b15      	ldr	r3, [pc, #84]	; (800c438 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d00d      	beq.n	800c406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	441a      	add	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681a      	ldr	r2, [r3, #0]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e008      	b.n	800c418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c406:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <prvInsertBlockIntoFreeList+0xb0>)
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	e003      	b.n	800c418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d002      	beq.n	800c426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c426:	bf00      	nop
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20004a04 	.word	0x20004a04
 800c438:	20004a0c 	.word	0x20004a0c

0800c43c <__errno>:
 800c43c:	4b01      	ldr	r3, [pc, #4]	; (800c444 <__errno+0x8>)
 800c43e:	6818      	ldr	r0, [r3, #0]
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	20000040 	.word	0x20000040

0800c448 <__libc_init_array>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4d0d      	ldr	r5, [pc, #52]	; (800c480 <__libc_init_array+0x38>)
 800c44c:	4c0d      	ldr	r4, [pc, #52]	; (800c484 <__libc_init_array+0x3c>)
 800c44e:	1b64      	subs	r4, r4, r5
 800c450:	10a4      	asrs	r4, r4, #2
 800c452:	2600      	movs	r6, #0
 800c454:	42a6      	cmp	r6, r4
 800c456:	d109      	bne.n	800c46c <__libc_init_array+0x24>
 800c458:	4d0b      	ldr	r5, [pc, #44]	; (800c488 <__libc_init_array+0x40>)
 800c45a:	4c0c      	ldr	r4, [pc, #48]	; (800c48c <__libc_init_array+0x44>)
 800c45c:	f000 fc56 	bl	800cd0c <_init>
 800c460:	1b64      	subs	r4, r4, r5
 800c462:	10a4      	asrs	r4, r4, #2
 800c464:	2600      	movs	r6, #0
 800c466:	42a6      	cmp	r6, r4
 800c468:	d105      	bne.n	800c476 <__libc_init_array+0x2e>
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c470:	4798      	blx	r3
 800c472:	3601      	adds	r6, #1
 800c474:	e7ee      	b.n	800c454 <__libc_init_array+0xc>
 800c476:	f855 3b04 	ldr.w	r3, [r5], #4
 800c47a:	4798      	blx	r3
 800c47c:	3601      	adds	r6, #1
 800c47e:	e7f2      	b.n	800c466 <__libc_init_array+0x1e>
 800c480:	0800d9f4 	.word	0x0800d9f4
 800c484:	0800d9f4 	.word	0x0800d9f4
 800c488:	0800d9f4 	.word	0x0800d9f4
 800c48c:	0800d9f8 	.word	0x0800d9f8

0800c490 <memcpy>:
 800c490:	440a      	add	r2, r1
 800c492:	4291      	cmp	r1, r2
 800c494:	f100 33ff 	add.w	r3, r0, #4294967295
 800c498:	d100      	bne.n	800c49c <memcpy+0xc>
 800c49a:	4770      	bx	lr
 800c49c:	b510      	push	{r4, lr}
 800c49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a6:	4291      	cmp	r1, r2
 800c4a8:	d1f9      	bne.n	800c49e <memcpy+0xe>
 800c4aa:	bd10      	pop	{r4, pc}

0800c4ac <memset>:
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d100      	bne.n	800c4b6 <memset+0xa>
 800c4b4:	4770      	bx	lr
 800c4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ba:	e7f9      	b.n	800c4b0 <memset+0x4>

0800c4bc <siprintf>:
 800c4bc:	b40e      	push	{r1, r2, r3}
 800c4be:	b500      	push	{lr}
 800c4c0:	b09c      	sub	sp, #112	; 0x70
 800c4c2:	ab1d      	add	r3, sp, #116	; 0x74
 800c4c4:	9002      	str	r0, [sp, #8]
 800c4c6:	9006      	str	r0, [sp, #24]
 800c4c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4cc:	4809      	ldr	r0, [pc, #36]	; (800c4f4 <siprintf+0x38>)
 800c4ce:	9107      	str	r1, [sp, #28]
 800c4d0:	9104      	str	r1, [sp, #16]
 800c4d2:	4909      	ldr	r1, [pc, #36]	; (800c4f8 <siprintf+0x3c>)
 800c4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d8:	9105      	str	r1, [sp, #20]
 800c4da:	6800      	ldr	r0, [r0, #0]
 800c4dc:	9301      	str	r3, [sp, #4]
 800c4de:	a902      	add	r1, sp, #8
 800c4e0:	f000 f870 	bl	800c5c4 <_svfiprintf_r>
 800c4e4:	9b02      	ldr	r3, [sp, #8]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	b01c      	add	sp, #112	; 0x70
 800c4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f0:	b003      	add	sp, #12
 800c4f2:	4770      	bx	lr
 800c4f4:	20000040 	.word	0x20000040
 800c4f8:	ffff0208 	.word	0xffff0208

0800c4fc <strcpy>:
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c502:	f803 2b01 	strb.w	r2, [r3], #1
 800c506:	2a00      	cmp	r2, #0
 800c508:	d1f9      	bne.n	800c4fe <strcpy+0x2>
 800c50a:	4770      	bx	lr

0800c50c <__ssputs_r>:
 800c50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c510:	688e      	ldr	r6, [r1, #8]
 800c512:	429e      	cmp	r6, r3
 800c514:	4682      	mov	sl, r0
 800c516:	460c      	mov	r4, r1
 800c518:	4690      	mov	r8, r2
 800c51a:	461f      	mov	r7, r3
 800c51c:	d838      	bhi.n	800c590 <__ssputs_r+0x84>
 800c51e:	898a      	ldrh	r2, [r1, #12]
 800c520:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c524:	d032      	beq.n	800c58c <__ssputs_r+0x80>
 800c526:	6825      	ldr	r5, [r4, #0]
 800c528:	6909      	ldr	r1, [r1, #16]
 800c52a:	eba5 0901 	sub.w	r9, r5, r1
 800c52e:	6965      	ldr	r5, [r4, #20]
 800c530:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c534:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c538:	3301      	adds	r3, #1
 800c53a:	444b      	add	r3, r9
 800c53c:	106d      	asrs	r5, r5, #1
 800c53e:	429d      	cmp	r5, r3
 800c540:	bf38      	it	cc
 800c542:	461d      	movcc	r5, r3
 800c544:	0553      	lsls	r3, r2, #21
 800c546:	d531      	bpl.n	800c5ac <__ssputs_r+0xa0>
 800c548:	4629      	mov	r1, r5
 800c54a:	f000 fb39 	bl	800cbc0 <_malloc_r>
 800c54e:	4606      	mov	r6, r0
 800c550:	b950      	cbnz	r0, 800c568 <__ssputs_r+0x5c>
 800c552:	230c      	movs	r3, #12
 800c554:	f8ca 3000 	str.w	r3, [sl]
 800c558:	89a3      	ldrh	r3, [r4, #12]
 800c55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55e:	81a3      	strh	r3, [r4, #12]
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c568:	6921      	ldr	r1, [r4, #16]
 800c56a:	464a      	mov	r2, r9
 800c56c:	f7ff ff90 	bl	800c490 <memcpy>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	6126      	str	r6, [r4, #16]
 800c57e:	6165      	str	r5, [r4, #20]
 800c580:	444e      	add	r6, r9
 800c582:	eba5 0509 	sub.w	r5, r5, r9
 800c586:	6026      	str	r6, [r4, #0]
 800c588:	60a5      	str	r5, [r4, #8]
 800c58a:	463e      	mov	r6, r7
 800c58c:	42be      	cmp	r6, r7
 800c58e:	d900      	bls.n	800c592 <__ssputs_r+0x86>
 800c590:	463e      	mov	r6, r7
 800c592:	4632      	mov	r2, r6
 800c594:	6820      	ldr	r0, [r4, #0]
 800c596:	4641      	mov	r1, r8
 800c598:	f000 faa8 	bl	800caec <memmove>
 800c59c:	68a3      	ldr	r3, [r4, #8]
 800c59e:	6822      	ldr	r2, [r4, #0]
 800c5a0:	1b9b      	subs	r3, r3, r6
 800c5a2:	4432      	add	r2, r6
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	6022      	str	r2, [r4, #0]
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7db      	b.n	800c564 <__ssputs_r+0x58>
 800c5ac:	462a      	mov	r2, r5
 800c5ae:	f000 fb61 	bl	800cc74 <_realloc_r>
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d1e1      	bne.n	800c57c <__ssputs_r+0x70>
 800c5b8:	6921      	ldr	r1, [r4, #16]
 800c5ba:	4650      	mov	r0, sl
 800c5bc:	f000 fab0 	bl	800cb20 <_free_r>
 800c5c0:	e7c7      	b.n	800c552 <__ssputs_r+0x46>
	...

0800c5c4 <_svfiprintf_r>:
 800c5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c8:	4698      	mov	r8, r3
 800c5ca:	898b      	ldrh	r3, [r1, #12]
 800c5cc:	061b      	lsls	r3, r3, #24
 800c5ce:	b09d      	sub	sp, #116	; 0x74
 800c5d0:	4607      	mov	r7, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	4614      	mov	r4, r2
 800c5d6:	d50e      	bpl.n	800c5f6 <_svfiprintf_r+0x32>
 800c5d8:	690b      	ldr	r3, [r1, #16]
 800c5da:	b963      	cbnz	r3, 800c5f6 <_svfiprintf_r+0x32>
 800c5dc:	2140      	movs	r1, #64	; 0x40
 800c5de:	f000 faef 	bl	800cbc0 <_malloc_r>
 800c5e2:	6028      	str	r0, [r5, #0]
 800c5e4:	6128      	str	r0, [r5, #16]
 800c5e6:	b920      	cbnz	r0, 800c5f2 <_svfiprintf_r+0x2e>
 800c5e8:	230c      	movs	r3, #12
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f0:	e0d1      	b.n	800c796 <_svfiprintf_r+0x1d2>
 800c5f2:	2340      	movs	r3, #64	; 0x40
 800c5f4:	616b      	str	r3, [r5, #20]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5fa:	2320      	movs	r3, #32
 800c5fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c600:	f8cd 800c 	str.w	r8, [sp, #12]
 800c604:	2330      	movs	r3, #48	; 0x30
 800c606:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7b0 <_svfiprintf_r+0x1ec>
 800c60a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c60e:	f04f 0901 	mov.w	r9, #1
 800c612:	4623      	mov	r3, r4
 800c614:	469a      	mov	sl, r3
 800c616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c61a:	b10a      	cbz	r2, 800c620 <_svfiprintf_r+0x5c>
 800c61c:	2a25      	cmp	r2, #37	; 0x25
 800c61e:	d1f9      	bne.n	800c614 <_svfiprintf_r+0x50>
 800c620:	ebba 0b04 	subs.w	fp, sl, r4
 800c624:	d00b      	beq.n	800c63e <_svfiprintf_r+0x7a>
 800c626:	465b      	mov	r3, fp
 800c628:	4622      	mov	r2, r4
 800c62a:	4629      	mov	r1, r5
 800c62c:	4638      	mov	r0, r7
 800c62e:	f7ff ff6d 	bl	800c50c <__ssputs_r>
 800c632:	3001      	adds	r0, #1
 800c634:	f000 80aa 	beq.w	800c78c <_svfiprintf_r+0x1c8>
 800c638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c63a:	445a      	add	r2, fp
 800c63c:	9209      	str	r2, [sp, #36]	; 0x24
 800c63e:	f89a 3000 	ldrb.w	r3, [sl]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80a2 	beq.w	800c78c <_svfiprintf_r+0x1c8>
 800c648:	2300      	movs	r3, #0
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c652:	f10a 0a01 	add.w	sl, sl, #1
 800c656:	9304      	str	r3, [sp, #16]
 800c658:	9307      	str	r3, [sp, #28]
 800c65a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c65e:	931a      	str	r3, [sp, #104]	; 0x68
 800c660:	4654      	mov	r4, sl
 800c662:	2205      	movs	r2, #5
 800c664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c668:	4851      	ldr	r0, [pc, #324]	; (800c7b0 <_svfiprintf_r+0x1ec>)
 800c66a:	f7f3 fdb9 	bl	80001e0 <memchr>
 800c66e:	9a04      	ldr	r2, [sp, #16]
 800c670:	b9d8      	cbnz	r0, 800c6aa <_svfiprintf_r+0xe6>
 800c672:	06d0      	lsls	r0, r2, #27
 800c674:	bf44      	itt	mi
 800c676:	2320      	movmi	r3, #32
 800c678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67c:	0711      	lsls	r1, r2, #28
 800c67e:	bf44      	itt	mi
 800c680:	232b      	movmi	r3, #43	; 0x2b
 800c682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c686:	f89a 3000 	ldrb.w	r3, [sl]
 800c68a:	2b2a      	cmp	r3, #42	; 0x2a
 800c68c:	d015      	beq.n	800c6ba <_svfiprintf_r+0xf6>
 800c68e:	9a07      	ldr	r2, [sp, #28]
 800c690:	4654      	mov	r4, sl
 800c692:	2000      	movs	r0, #0
 800c694:	f04f 0c0a 	mov.w	ip, #10
 800c698:	4621      	mov	r1, r4
 800c69a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69e:	3b30      	subs	r3, #48	; 0x30
 800c6a0:	2b09      	cmp	r3, #9
 800c6a2:	d94e      	bls.n	800c742 <_svfiprintf_r+0x17e>
 800c6a4:	b1b0      	cbz	r0, 800c6d4 <_svfiprintf_r+0x110>
 800c6a6:	9207      	str	r2, [sp, #28]
 800c6a8:	e014      	b.n	800c6d4 <_svfiprintf_r+0x110>
 800c6aa:	eba0 0308 	sub.w	r3, r0, r8
 800c6ae:	fa09 f303 	lsl.w	r3, r9, r3
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	9304      	str	r3, [sp, #16]
 800c6b6:	46a2      	mov	sl, r4
 800c6b8:	e7d2      	b.n	800c660 <_svfiprintf_r+0x9c>
 800c6ba:	9b03      	ldr	r3, [sp, #12]
 800c6bc:	1d19      	adds	r1, r3, #4
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	9103      	str	r1, [sp, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	bfbb      	ittet	lt
 800c6c6:	425b      	neglt	r3, r3
 800c6c8:	f042 0202 	orrlt.w	r2, r2, #2
 800c6cc:	9307      	strge	r3, [sp, #28]
 800c6ce:	9307      	strlt	r3, [sp, #28]
 800c6d0:	bfb8      	it	lt
 800c6d2:	9204      	strlt	r2, [sp, #16]
 800c6d4:	7823      	ldrb	r3, [r4, #0]
 800c6d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d8:	d10c      	bne.n	800c6f4 <_svfiprintf_r+0x130>
 800c6da:	7863      	ldrb	r3, [r4, #1]
 800c6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6de:	d135      	bne.n	800c74c <_svfiprintf_r+0x188>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	1d1a      	adds	r2, r3, #4
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	9203      	str	r2, [sp, #12]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bfb8      	it	lt
 800c6ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6f0:	3402      	adds	r4, #2
 800c6f2:	9305      	str	r3, [sp, #20]
 800c6f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7c0 <_svfiprintf_r+0x1fc>
 800c6f8:	7821      	ldrb	r1, [r4, #0]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	4650      	mov	r0, sl
 800c6fe:	f7f3 fd6f 	bl	80001e0 <memchr>
 800c702:	b140      	cbz	r0, 800c716 <_svfiprintf_r+0x152>
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	eba0 000a 	sub.w	r0, r0, sl
 800c70a:	fa03 f000 	lsl.w	r0, r3, r0
 800c70e:	9b04      	ldr	r3, [sp, #16]
 800c710:	4303      	orrs	r3, r0
 800c712:	3401      	adds	r4, #1
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71a:	4826      	ldr	r0, [pc, #152]	; (800c7b4 <_svfiprintf_r+0x1f0>)
 800c71c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c720:	2206      	movs	r2, #6
 800c722:	f7f3 fd5d 	bl	80001e0 <memchr>
 800c726:	2800      	cmp	r0, #0
 800c728:	d038      	beq.n	800c79c <_svfiprintf_r+0x1d8>
 800c72a:	4b23      	ldr	r3, [pc, #140]	; (800c7b8 <_svfiprintf_r+0x1f4>)
 800c72c:	bb1b      	cbnz	r3, 800c776 <_svfiprintf_r+0x1b2>
 800c72e:	9b03      	ldr	r3, [sp, #12]
 800c730:	3307      	adds	r3, #7
 800c732:	f023 0307 	bic.w	r3, r3, #7
 800c736:	3308      	adds	r3, #8
 800c738:	9303      	str	r3, [sp, #12]
 800c73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c73c:	4433      	add	r3, r6
 800c73e:	9309      	str	r3, [sp, #36]	; 0x24
 800c740:	e767      	b.n	800c612 <_svfiprintf_r+0x4e>
 800c742:	fb0c 3202 	mla	r2, ip, r2, r3
 800c746:	460c      	mov	r4, r1
 800c748:	2001      	movs	r0, #1
 800c74a:	e7a5      	b.n	800c698 <_svfiprintf_r+0xd4>
 800c74c:	2300      	movs	r3, #0
 800c74e:	3401      	adds	r4, #1
 800c750:	9305      	str	r3, [sp, #20]
 800c752:	4619      	mov	r1, r3
 800c754:	f04f 0c0a 	mov.w	ip, #10
 800c758:	4620      	mov	r0, r4
 800c75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c75e:	3a30      	subs	r2, #48	; 0x30
 800c760:	2a09      	cmp	r2, #9
 800c762:	d903      	bls.n	800c76c <_svfiprintf_r+0x1a8>
 800c764:	2b00      	cmp	r3, #0
 800c766:	d0c5      	beq.n	800c6f4 <_svfiprintf_r+0x130>
 800c768:	9105      	str	r1, [sp, #20]
 800c76a:	e7c3      	b.n	800c6f4 <_svfiprintf_r+0x130>
 800c76c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c770:	4604      	mov	r4, r0
 800c772:	2301      	movs	r3, #1
 800c774:	e7f0      	b.n	800c758 <_svfiprintf_r+0x194>
 800c776:	ab03      	add	r3, sp, #12
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	462a      	mov	r2, r5
 800c77c:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <_svfiprintf_r+0x1f8>)
 800c77e:	a904      	add	r1, sp, #16
 800c780:	4638      	mov	r0, r7
 800c782:	f3af 8000 	nop.w
 800c786:	1c42      	adds	r2, r0, #1
 800c788:	4606      	mov	r6, r0
 800c78a:	d1d6      	bne.n	800c73a <_svfiprintf_r+0x176>
 800c78c:	89ab      	ldrh	r3, [r5, #12]
 800c78e:	065b      	lsls	r3, r3, #25
 800c790:	f53f af2c 	bmi.w	800c5ec <_svfiprintf_r+0x28>
 800c794:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c796:	b01d      	add	sp, #116	; 0x74
 800c798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79c:	ab03      	add	r3, sp, #12
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	4b06      	ldr	r3, [pc, #24]	; (800c7bc <_svfiprintf_r+0x1f8>)
 800c7a4:	a904      	add	r1, sp, #16
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f000 f87a 	bl	800c8a0 <_printf_i>
 800c7ac:	e7eb      	b.n	800c786 <_svfiprintf_r+0x1c2>
 800c7ae:	bf00      	nop
 800c7b0:	0800d9b8 	.word	0x0800d9b8
 800c7b4:	0800d9c2 	.word	0x0800d9c2
 800c7b8:	00000000 	.word	0x00000000
 800c7bc:	0800c50d 	.word	0x0800c50d
 800c7c0:	0800d9be 	.word	0x0800d9be

0800c7c4 <_printf_common>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	4616      	mov	r6, r2
 800c7ca:	4699      	mov	r9, r3
 800c7cc:	688a      	ldr	r2, [r1, #8]
 800c7ce:	690b      	ldr	r3, [r1, #16]
 800c7d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	bfb8      	it	lt
 800c7d8:	4613      	movlt	r3, r2
 800c7da:	6033      	str	r3, [r6, #0]
 800c7dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7e0:	4607      	mov	r7, r0
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	b10a      	cbz	r2, 800c7ea <_printf_common+0x26>
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	6033      	str	r3, [r6, #0]
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	0699      	lsls	r1, r3, #26
 800c7ee:	bf42      	ittt	mi
 800c7f0:	6833      	ldrmi	r3, [r6, #0]
 800c7f2:	3302      	addmi	r3, #2
 800c7f4:	6033      	strmi	r3, [r6, #0]
 800c7f6:	6825      	ldr	r5, [r4, #0]
 800c7f8:	f015 0506 	ands.w	r5, r5, #6
 800c7fc:	d106      	bne.n	800c80c <_printf_common+0x48>
 800c7fe:	f104 0a19 	add.w	sl, r4, #25
 800c802:	68e3      	ldr	r3, [r4, #12]
 800c804:	6832      	ldr	r2, [r6, #0]
 800c806:	1a9b      	subs	r3, r3, r2
 800c808:	42ab      	cmp	r3, r5
 800c80a:	dc26      	bgt.n	800c85a <_printf_common+0x96>
 800c80c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c810:	1e13      	subs	r3, r2, #0
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	bf18      	it	ne
 800c816:	2301      	movne	r3, #1
 800c818:	0692      	lsls	r2, r2, #26
 800c81a:	d42b      	bmi.n	800c874 <_printf_common+0xb0>
 800c81c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c820:	4649      	mov	r1, r9
 800c822:	4638      	mov	r0, r7
 800c824:	47c0      	blx	r8
 800c826:	3001      	adds	r0, #1
 800c828:	d01e      	beq.n	800c868 <_printf_common+0xa4>
 800c82a:	6823      	ldr	r3, [r4, #0]
 800c82c:	68e5      	ldr	r5, [r4, #12]
 800c82e:	6832      	ldr	r2, [r6, #0]
 800c830:	f003 0306 	and.w	r3, r3, #6
 800c834:	2b04      	cmp	r3, #4
 800c836:	bf08      	it	eq
 800c838:	1aad      	subeq	r5, r5, r2
 800c83a:	68a3      	ldr	r3, [r4, #8]
 800c83c:	6922      	ldr	r2, [r4, #16]
 800c83e:	bf0c      	ite	eq
 800c840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c844:	2500      	movne	r5, #0
 800c846:	4293      	cmp	r3, r2
 800c848:	bfc4      	itt	gt
 800c84a:	1a9b      	subgt	r3, r3, r2
 800c84c:	18ed      	addgt	r5, r5, r3
 800c84e:	2600      	movs	r6, #0
 800c850:	341a      	adds	r4, #26
 800c852:	42b5      	cmp	r5, r6
 800c854:	d11a      	bne.n	800c88c <_printf_common+0xc8>
 800c856:	2000      	movs	r0, #0
 800c858:	e008      	b.n	800c86c <_printf_common+0xa8>
 800c85a:	2301      	movs	r3, #1
 800c85c:	4652      	mov	r2, sl
 800c85e:	4649      	mov	r1, r9
 800c860:	4638      	mov	r0, r7
 800c862:	47c0      	blx	r8
 800c864:	3001      	adds	r0, #1
 800c866:	d103      	bne.n	800c870 <_printf_common+0xac>
 800c868:	f04f 30ff 	mov.w	r0, #4294967295
 800c86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c870:	3501      	adds	r5, #1
 800c872:	e7c6      	b.n	800c802 <_printf_common+0x3e>
 800c874:	18e1      	adds	r1, r4, r3
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	2030      	movs	r0, #48	; 0x30
 800c87a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c87e:	4422      	add	r2, r4
 800c880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c888:	3302      	adds	r3, #2
 800c88a:	e7c7      	b.n	800c81c <_printf_common+0x58>
 800c88c:	2301      	movs	r3, #1
 800c88e:	4622      	mov	r2, r4
 800c890:	4649      	mov	r1, r9
 800c892:	4638      	mov	r0, r7
 800c894:	47c0      	blx	r8
 800c896:	3001      	adds	r0, #1
 800c898:	d0e6      	beq.n	800c868 <_printf_common+0xa4>
 800c89a:	3601      	adds	r6, #1
 800c89c:	e7d9      	b.n	800c852 <_printf_common+0x8e>
	...

0800c8a0 <_printf_i>:
 800c8a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	4691      	mov	r9, r2
 800c8a8:	7e27      	ldrb	r7, [r4, #24]
 800c8aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c8ac:	2f78      	cmp	r7, #120	; 0x78
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	469a      	mov	sl, r3
 800c8b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8b6:	d807      	bhi.n	800c8c8 <_printf_i+0x28>
 800c8b8:	2f62      	cmp	r7, #98	; 0x62
 800c8ba:	d80a      	bhi.n	800c8d2 <_printf_i+0x32>
 800c8bc:	2f00      	cmp	r7, #0
 800c8be:	f000 80d8 	beq.w	800ca72 <_printf_i+0x1d2>
 800c8c2:	2f58      	cmp	r7, #88	; 0x58
 800c8c4:	f000 80a3 	beq.w	800ca0e <_printf_i+0x16e>
 800c8c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8d0:	e03a      	b.n	800c948 <_printf_i+0xa8>
 800c8d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8d6:	2b15      	cmp	r3, #21
 800c8d8:	d8f6      	bhi.n	800c8c8 <_printf_i+0x28>
 800c8da:	a001      	add	r0, pc, #4	; (adr r0, 800c8e0 <_printf_i+0x40>)
 800c8dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c8e0:	0800c939 	.word	0x0800c939
 800c8e4:	0800c94d 	.word	0x0800c94d
 800c8e8:	0800c8c9 	.word	0x0800c8c9
 800c8ec:	0800c8c9 	.word	0x0800c8c9
 800c8f0:	0800c8c9 	.word	0x0800c8c9
 800c8f4:	0800c8c9 	.word	0x0800c8c9
 800c8f8:	0800c94d 	.word	0x0800c94d
 800c8fc:	0800c8c9 	.word	0x0800c8c9
 800c900:	0800c8c9 	.word	0x0800c8c9
 800c904:	0800c8c9 	.word	0x0800c8c9
 800c908:	0800c8c9 	.word	0x0800c8c9
 800c90c:	0800ca59 	.word	0x0800ca59
 800c910:	0800c97d 	.word	0x0800c97d
 800c914:	0800ca3b 	.word	0x0800ca3b
 800c918:	0800c8c9 	.word	0x0800c8c9
 800c91c:	0800c8c9 	.word	0x0800c8c9
 800c920:	0800ca7b 	.word	0x0800ca7b
 800c924:	0800c8c9 	.word	0x0800c8c9
 800c928:	0800c97d 	.word	0x0800c97d
 800c92c:	0800c8c9 	.word	0x0800c8c9
 800c930:	0800c8c9 	.word	0x0800c8c9
 800c934:	0800ca43 	.word	0x0800ca43
 800c938:	680b      	ldr	r3, [r1, #0]
 800c93a:	1d1a      	adds	r2, r3, #4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	600a      	str	r2, [r1, #0]
 800c940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c948:	2301      	movs	r3, #1
 800c94a:	e0a3      	b.n	800ca94 <_printf_i+0x1f4>
 800c94c:	6825      	ldr	r5, [r4, #0]
 800c94e:	6808      	ldr	r0, [r1, #0]
 800c950:	062e      	lsls	r6, r5, #24
 800c952:	f100 0304 	add.w	r3, r0, #4
 800c956:	d50a      	bpl.n	800c96e <_printf_i+0xce>
 800c958:	6805      	ldr	r5, [r0, #0]
 800c95a:	600b      	str	r3, [r1, #0]
 800c95c:	2d00      	cmp	r5, #0
 800c95e:	da03      	bge.n	800c968 <_printf_i+0xc8>
 800c960:	232d      	movs	r3, #45	; 0x2d
 800c962:	426d      	negs	r5, r5
 800c964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c968:	485e      	ldr	r0, [pc, #376]	; (800cae4 <_printf_i+0x244>)
 800c96a:	230a      	movs	r3, #10
 800c96c:	e019      	b.n	800c9a2 <_printf_i+0x102>
 800c96e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c972:	6805      	ldr	r5, [r0, #0]
 800c974:	600b      	str	r3, [r1, #0]
 800c976:	bf18      	it	ne
 800c978:	b22d      	sxthne	r5, r5
 800c97a:	e7ef      	b.n	800c95c <_printf_i+0xbc>
 800c97c:	680b      	ldr	r3, [r1, #0]
 800c97e:	6825      	ldr	r5, [r4, #0]
 800c980:	1d18      	adds	r0, r3, #4
 800c982:	6008      	str	r0, [r1, #0]
 800c984:	0628      	lsls	r0, r5, #24
 800c986:	d501      	bpl.n	800c98c <_printf_i+0xec>
 800c988:	681d      	ldr	r5, [r3, #0]
 800c98a:	e002      	b.n	800c992 <_printf_i+0xf2>
 800c98c:	0669      	lsls	r1, r5, #25
 800c98e:	d5fb      	bpl.n	800c988 <_printf_i+0xe8>
 800c990:	881d      	ldrh	r5, [r3, #0]
 800c992:	4854      	ldr	r0, [pc, #336]	; (800cae4 <_printf_i+0x244>)
 800c994:	2f6f      	cmp	r7, #111	; 0x6f
 800c996:	bf0c      	ite	eq
 800c998:	2308      	moveq	r3, #8
 800c99a:	230a      	movne	r3, #10
 800c99c:	2100      	movs	r1, #0
 800c99e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9a2:	6866      	ldr	r6, [r4, #4]
 800c9a4:	60a6      	str	r6, [r4, #8]
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	bfa2      	ittt	ge
 800c9aa:	6821      	ldrge	r1, [r4, #0]
 800c9ac:	f021 0104 	bicge.w	r1, r1, #4
 800c9b0:	6021      	strge	r1, [r4, #0]
 800c9b2:	b90d      	cbnz	r5, 800c9b8 <_printf_i+0x118>
 800c9b4:	2e00      	cmp	r6, #0
 800c9b6:	d04d      	beq.n	800ca54 <_printf_i+0x1b4>
 800c9b8:	4616      	mov	r6, r2
 800c9ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9be:	fb03 5711 	mls	r7, r3, r1, r5
 800c9c2:	5dc7      	ldrb	r7, [r0, r7]
 800c9c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9c8:	462f      	mov	r7, r5
 800c9ca:	42bb      	cmp	r3, r7
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	d9f4      	bls.n	800c9ba <_printf_i+0x11a>
 800c9d0:	2b08      	cmp	r3, #8
 800c9d2:	d10b      	bne.n	800c9ec <_printf_i+0x14c>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	07df      	lsls	r7, r3, #31
 800c9d8:	d508      	bpl.n	800c9ec <_printf_i+0x14c>
 800c9da:	6923      	ldr	r3, [r4, #16]
 800c9dc:	6861      	ldr	r1, [r4, #4]
 800c9de:	4299      	cmp	r1, r3
 800c9e0:	bfde      	ittt	le
 800c9e2:	2330      	movle	r3, #48	; 0x30
 800c9e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9ec:	1b92      	subs	r2, r2, r6
 800c9ee:	6122      	str	r2, [r4, #16]
 800c9f0:	f8cd a000 	str.w	sl, [sp]
 800c9f4:	464b      	mov	r3, r9
 800c9f6:	aa03      	add	r2, sp, #12
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	f7ff fee2 	bl	800c7c4 <_printf_common>
 800ca00:	3001      	adds	r0, #1
 800ca02:	d14c      	bne.n	800ca9e <_printf_i+0x1fe>
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	b004      	add	sp, #16
 800ca0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0e:	4835      	ldr	r0, [pc, #212]	; (800cae4 <_printf_i+0x244>)
 800ca10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	680e      	ldr	r6, [r1, #0]
 800ca18:	061f      	lsls	r7, r3, #24
 800ca1a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ca1e:	600e      	str	r6, [r1, #0]
 800ca20:	d514      	bpl.n	800ca4c <_printf_i+0x1ac>
 800ca22:	07d9      	lsls	r1, r3, #31
 800ca24:	bf44      	itt	mi
 800ca26:	f043 0320 	orrmi.w	r3, r3, #32
 800ca2a:	6023      	strmi	r3, [r4, #0]
 800ca2c:	b91d      	cbnz	r5, 800ca36 <_printf_i+0x196>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	f023 0320 	bic.w	r3, r3, #32
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	2310      	movs	r3, #16
 800ca38:	e7b0      	b.n	800c99c <_printf_i+0xfc>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	f043 0320 	orr.w	r3, r3, #32
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	2378      	movs	r3, #120	; 0x78
 800ca44:	4828      	ldr	r0, [pc, #160]	; (800cae8 <_printf_i+0x248>)
 800ca46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca4a:	e7e3      	b.n	800ca14 <_printf_i+0x174>
 800ca4c:	065e      	lsls	r6, r3, #25
 800ca4e:	bf48      	it	mi
 800ca50:	b2ad      	uxthmi	r5, r5
 800ca52:	e7e6      	b.n	800ca22 <_printf_i+0x182>
 800ca54:	4616      	mov	r6, r2
 800ca56:	e7bb      	b.n	800c9d0 <_printf_i+0x130>
 800ca58:	680b      	ldr	r3, [r1, #0]
 800ca5a:	6826      	ldr	r6, [r4, #0]
 800ca5c:	6960      	ldr	r0, [r4, #20]
 800ca5e:	1d1d      	adds	r5, r3, #4
 800ca60:	600d      	str	r5, [r1, #0]
 800ca62:	0635      	lsls	r5, r6, #24
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	d501      	bpl.n	800ca6c <_printf_i+0x1cc>
 800ca68:	6018      	str	r0, [r3, #0]
 800ca6a:	e002      	b.n	800ca72 <_printf_i+0x1d2>
 800ca6c:	0671      	lsls	r1, r6, #25
 800ca6e:	d5fb      	bpl.n	800ca68 <_printf_i+0x1c8>
 800ca70:	8018      	strh	r0, [r3, #0]
 800ca72:	2300      	movs	r3, #0
 800ca74:	6123      	str	r3, [r4, #16]
 800ca76:	4616      	mov	r6, r2
 800ca78:	e7ba      	b.n	800c9f0 <_printf_i+0x150>
 800ca7a:	680b      	ldr	r3, [r1, #0]
 800ca7c:	1d1a      	adds	r2, r3, #4
 800ca7e:	600a      	str	r2, [r1, #0]
 800ca80:	681e      	ldr	r6, [r3, #0]
 800ca82:	6862      	ldr	r2, [r4, #4]
 800ca84:	2100      	movs	r1, #0
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7f3 fbaa 	bl	80001e0 <memchr>
 800ca8c:	b108      	cbz	r0, 800ca92 <_printf_i+0x1f2>
 800ca8e:	1b80      	subs	r0, r0, r6
 800ca90:	6060      	str	r0, [r4, #4]
 800ca92:	6863      	ldr	r3, [r4, #4]
 800ca94:	6123      	str	r3, [r4, #16]
 800ca96:	2300      	movs	r3, #0
 800ca98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca9c:	e7a8      	b.n	800c9f0 <_printf_i+0x150>
 800ca9e:	6923      	ldr	r3, [r4, #16]
 800caa0:	4632      	mov	r2, r6
 800caa2:	4649      	mov	r1, r9
 800caa4:	4640      	mov	r0, r8
 800caa6:	47d0      	blx	sl
 800caa8:	3001      	adds	r0, #1
 800caaa:	d0ab      	beq.n	800ca04 <_printf_i+0x164>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	079b      	lsls	r3, r3, #30
 800cab0:	d413      	bmi.n	800cada <_printf_i+0x23a>
 800cab2:	68e0      	ldr	r0, [r4, #12]
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	4298      	cmp	r0, r3
 800cab8:	bfb8      	it	lt
 800caba:	4618      	movlt	r0, r3
 800cabc:	e7a4      	b.n	800ca08 <_printf_i+0x168>
 800cabe:	2301      	movs	r3, #1
 800cac0:	4632      	mov	r2, r6
 800cac2:	4649      	mov	r1, r9
 800cac4:	4640      	mov	r0, r8
 800cac6:	47d0      	blx	sl
 800cac8:	3001      	adds	r0, #1
 800caca:	d09b      	beq.n	800ca04 <_printf_i+0x164>
 800cacc:	3501      	adds	r5, #1
 800cace:	68e3      	ldr	r3, [r4, #12]
 800cad0:	9903      	ldr	r1, [sp, #12]
 800cad2:	1a5b      	subs	r3, r3, r1
 800cad4:	42ab      	cmp	r3, r5
 800cad6:	dcf2      	bgt.n	800cabe <_printf_i+0x21e>
 800cad8:	e7eb      	b.n	800cab2 <_printf_i+0x212>
 800cada:	2500      	movs	r5, #0
 800cadc:	f104 0619 	add.w	r6, r4, #25
 800cae0:	e7f5      	b.n	800cace <_printf_i+0x22e>
 800cae2:	bf00      	nop
 800cae4:	0800d9c9 	.word	0x0800d9c9
 800cae8:	0800d9da 	.word	0x0800d9da

0800caec <memmove>:
 800caec:	4288      	cmp	r0, r1
 800caee:	b510      	push	{r4, lr}
 800caf0:	eb01 0402 	add.w	r4, r1, r2
 800caf4:	d902      	bls.n	800cafc <memmove+0x10>
 800caf6:	4284      	cmp	r4, r0
 800caf8:	4623      	mov	r3, r4
 800cafa:	d807      	bhi.n	800cb0c <memmove+0x20>
 800cafc:	1e43      	subs	r3, r0, #1
 800cafe:	42a1      	cmp	r1, r4
 800cb00:	d008      	beq.n	800cb14 <memmove+0x28>
 800cb02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb0a:	e7f8      	b.n	800cafe <memmove+0x12>
 800cb0c:	4402      	add	r2, r0
 800cb0e:	4601      	mov	r1, r0
 800cb10:	428a      	cmp	r2, r1
 800cb12:	d100      	bne.n	800cb16 <memmove+0x2a>
 800cb14:	bd10      	pop	{r4, pc}
 800cb16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb1e:	e7f7      	b.n	800cb10 <memmove+0x24>

0800cb20 <_free_r>:
 800cb20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb22:	2900      	cmp	r1, #0
 800cb24:	d048      	beq.n	800cbb8 <_free_r+0x98>
 800cb26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb2a:	9001      	str	r0, [sp, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb32:	bfb8      	it	lt
 800cb34:	18e4      	addlt	r4, r4, r3
 800cb36:	f000 f8d3 	bl	800cce0 <__malloc_lock>
 800cb3a:	4a20      	ldr	r2, [pc, #128]	; (800cbbc <_free_r+0x9c>)
 800cb3c:	9801      	ldr	r0, [sp, #4]
 800cb3e:	6813      	ldr	r3, [r2, #0]
 800cb40:	4615      	mov	r5, r2
 800cb42:	b933      	cbnz	r3, 800cb52 <_free_r+0x32>
 800cb44:	6063      	str	r3, [r4, #4]
 800cb46:	6014      	str	r4, [r2, #0]
 800cb48:	b003      	add	sp, #12
 800cb4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb4e:	f000 b8cd 	b.w	800ccec <__malloc_unlock>
 800cb52:	42a3      	cmp	r3, r4
 800cb54:	d90b      	bls.n	800cb6e <_free_r+0x4e>
 800cb56:	6821      	ldr	r1, [r4, #0]
 800cb58:	1862      	adds	r2, r4, r1
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	bf04      	itt	eq
 800cb5e:	681a      	ldreq	r2, [r3, #0]
 800cb60:	685b      	ldreq	r3, [r3, #4]
 800cb62:	6063      	str	r3, [r4, #4]
 800cb64:	bf04      	itt	eq
 800cb66:	1852      	addeq	r2, r2, r1
 800cb68:	6022      	streq	r2, [r4, #0]
 800cb6a:	602c      	str	r4, [r5, #0]
 800cb6c:	e7ec      	b.n	800cb48 <_free_r+0x28>
 800cb6e:	461a      	mov	r2, r3
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	b10b      	cbz	r3, 800cb78 <_free_r+0x58>
 800cb74:	42a3      	cmp	r3, r4
 800cb76:	d9fa      	bls.n	800cb6e <_free_r+0x4e>
 800cb78:	6811      	ldr	r1, [r2, #0]
 800cb7a:	1855      	adds	r5, r2, r1
 800cb7c:	42a5      	cmp	r5, r4
 800cb7e:	d10b      	bne.n	800cb98 <_free_r+0x78>
 800cb80:	6824      	ldr	r4, [r4, #0]
 800cb82:	4421      	add	r1, r4
 800cb84:	1854      	adds	r4, r2, r1
 800cb86:	42a3      	cmp	r3, r4
 800cb88:	6011      	str	r1, [r2, #0]
 800cb8a:	d1dd      	bne.n	800cb48 <_free_r+0x28>
 800cb8c:	681c      	ldr	r4, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	6053      	str	r3, [r2, #4]
 800cb92:	4421      	add	r1, r4
 800cb94:	6011      	str	r1, [r2, #0]
 800cb96:	e7d7      	b.n	800cb48 <_free_r+0x28>
 800cb98:	d902      	bls.n	800cba0 <_free_r+0x80>
 800cb9a:	230c      	movs	r3, #12
 800cb9c:	6003      	str	r3, [r0, #0]
 800cb9e:	e7d3      	b.n	800cb48 <_free_r+0x28>
 800cba0:	6825      	ldr	r5, [r4, #0]
 800cba2:	1961      	adds	r1, r4, r5
 800cba4:	428b      	cmp	r3, r1
 800cba6:	bf04      	itt	eq
 800cba8:	6819      	ldreq	r1, [r3, #0]
 800cbaa:	685b      	ldreq	r3, [r3, #4]
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	bf04      	itt	eq
 800cbb0:	1949      	addeq	r1, r1, r5
 800cbb2:	6021      	streq	r1, [r4, #0]
 800cbb4:	6054      	str	r4, [r2, #4]
 800cbb6:	e7c7      	b.n	800cb48 <_free_r+0x28>
 800cbb8:	b003      	add	sp, #12
 800cbba:	bd30      	pop	{r4, r5, pc}
 800cbbc:	20004a24 	.word	0x20004a24

0800cbc0 <_malloc_r>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	1ccd      	adds	r5, r1, #3
 800cbc4:	f025 0503 	bic.w	r5, r5, #3
 800cbc8:	3508      	adds	r5, #8
 800cbca:	2d0c      	cmp	r5, #12
 800cbcc:	bf38      	it	cc
 800cbce:	250c      	movcc	r5, #12
 800cbd0:	2d00      	cmp	r5, #0
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	db01      	blt.n	800cbda <_malloc_r+0x1a>
 800cbd6:	42a9      	cmp	r1, r5
 800cbd8:	d903      	bls.n	800cbe2 <_malloc_r+0x22>
 800cbda:	230c      	movs	r3, #12
 800cbdc:	6033      	str	r3, [r6, #0]
 800cbde:	2000      	movs	r0, #0
 800cbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe2:	f000 f87d 	bl	800cce0 <__malloc_lock>
 800cbe6:	4921      	ldr	r1, [pc, #132]	; (800cc6c <_malloc_r+0xac>)
 800cbe8:	680a      	ldr	r2, [r1, #0]
 800cbea:	4614      	mov	r4, r2
 800cbec:	b99c      	cbnz	r4, 800cc16 <_malloc_r+0x56>
 800cbee:	4f20      	ldr	r7, [pc, #128]	; (800cc70 <_malloc_r+0xb0>)
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	b923      	cbnz	r3, 800cbfe <_malloc_r+0x3e>
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f000 f862 	bl	800ccc0 <_sbrk_r>
 800cbfc:	6038      	str	r0, [r7, #0]
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4630      	mov	r0, r6
 800cc02:	f000 f85d 	bl	800ccc0 <_sbrk_r>
 800cc06:	1c43      	adds	r3, r0, #1
 800cc08:	d123      	bne.n	800cc52 <_malloc_r+0x92>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	6033      	str	r3, [r6, #0]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 f86c 	bl	800ccec <__malloc_unlock>
 800cc14:	e7e3      	b.n	800cbde <_malloc_r+0x1e>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	1b5b      	subs	r3, r3, r5
 800cc1a:	d417      	bmi.n	800cc4c <_malloc_r+0x8c>
 800cc1c:	2b0b      	cmp	r3, #11
 800cc1e:	d903      	bls.n	800cc28 <_malloc_r+0x68>
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	441c      	add	r4, r3
 800cc24:	6025      	str	r5, [r4, #0]
 800cc26:	e004      	b.n	800cc32 <_malloc_r+0x72>
 800cc28:	6863      	ldr	r3, [r4, #4]
 800cc2a:	42a2      	cmp	r2, r4
 800cc2c:	bf0c      	ite	eq
 800cc2e:	600b      	streq	r3, [r1, #0]
 800cc30:	6053      	strne	r3, [r2, #4]
 800cc32:	4630      	mov	r0, r6
 800cc34:	f000 f85a 	bl	800ccec <__malloc_unlock>
 800cc38:	f104 000b 	add.w	r0, r4, #11
 800cc3c:	1d23      	adds	r3, r4, #4
 800cc3e:	f020 0007 	bic.w	r0, r0, #7
 800cc42:	1ac2      	subs	r2, r0, r3
 800cc44:	d0cc      	beq.n	800cbe0 <_malloc_r+0x20>
 800cc46:	1a1b      	subs	r3, r3, r0
 800cc48:	50a3      	str	r3, [r4, r2]
 800cc4a:	e7c9      	b.n	800cbe0 <_malloc_r+0x20>
 800cc4c:	4622      	mov	r2, r4
 800cc4e:	6864      	ldr	r4, [r4, #4]
 800cc50:	e7cc      	b.n	800cbec <_malloc_r+0x2c>
 800cc52:	1cc4      	adds	r4, r0, #3
 800cc54:	f024 0403 	bic.w	r4, r4, #3
 800cc58:	42a0      	cmp	r0, r4
 800cc5a:	d0e3      	beq.n	800cc24 <_malloc_r+0x64>
 800cc5c:	1a21      	subs	r1, r4, r0
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f000 f82e 	bl	800ccc0 <_sbrk_r>
 800cc64:	3001      	adds	r0, #1
 800cc66:	d1dd      	bne.n	800cc24 <_malloc_r+0x64>
 800cc68:	e7cf      	b.n	800cc0a <_malloc_r+0x4a>
 800cc6a:	bf00      	nop
 800cc6c:	20004a24 	.word	0x20004a24
 800cc70:	20004a28 	.word	0x20004a28

0800cc74 <_realloc_r>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	4607      	mov	r7, r0
 800cc78:	4614      	mov	r4, r2
 800cc7a:	460e      	mov	r6, r1
 800cc7c:	b921      	cbnz	r1, 800cc88 <_realloc_r+0x14>
 800cc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc82:	4611      	mov	r1, r2
 800cc84:	f7ff bf9c 	b.w	800cbc0 <_malloc_r>
 800cc88:	b922      	cbnz	r2, 800cc94 <_realloc_r+0x20>
 800cc8a:	f7ff ff49 	bl	800cb20 <_free_r>
 800cc8e:	4625      	mov	r5, r4
 800cc90:	4628      	mov	r0, r5
 800cc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc94:	f000 f830 	bl	800ccf8 <_malloc_usable_size_r>
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d20f      	bcs.n	800ccbc <_realloc_r+0x48>
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4638      	mov	r0, r7
 800cca0:	f7ff ff8e 	bl	800cbc0 <_malloc_r>
 800cca4:	4605      	mov	r5, r0
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d0f2      	beq.n	800cc90 <_realloc_r+0x1c>
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4622      	mov	r2, r4
 800ccae:	f7ff fbef 	bl	800c490 <memcpy>
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	f7ff ff33 	bl	800cb20 <_free_r>
 800ccba:	e7e9      	b.n	800cc90 <_realloc_r+0x1c>
 800ccbc:	4635      	mov	r5, r6
 800ccbe:	e7e7      	b.n	800cc90 <_realloc_r+0x1c>

0800ccc0 <_sbrk_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	; (800ccdc <_sbrk_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f7 fc50 	bl	8004570 <_sbrk>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_sbrk_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_sbrk_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	20005294 	.word	0x20005294

0800cce0 <__malloc_lock>:
 800cce0:	4801      	ldr	r0, [pc, #4]	; (800cce8 <__malloc_lock+0x8>)
 800cce2:	f000 b811 	b.w	800cd08 <__retarget_lock_acquire_recursive>
 800cce6:	bf00      	nop
 800cce8:	2000529c 	.word	0x2000529c

0800ccec <__malloc_unlock>:
 800ccec:	4801      	ldr	r0, [pc, #4]	; (800ccf4 <__malloc_unlock+0x8>)
 800ccee:	f000 b80c 	b.w	800cd0a <__retarget_lock_release_recursive>
 800ccf2:	bf00      	nop
 800ccf4:	2000529c 	.word	0x2000529c

0800ccf8 <_malloc_usable_size_r>:
 800ccf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccfc:	1f18      	subs	r0, r3, #4
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bfbc      	itt	lt
 800cd02:	580b      	ldrlt	r3, [r1, r0]
 800cd04:	18c0      	addlt	r0, r0, r3
 800cd06:	4770      	bx	lr

0800cd08 <__retarget_lock_acquire_recursive>:
 800cd08:	4770      	bx	lr

0800cd0a <__retarget_lock_release_recursive>:
 800cd0a:	4770      	bx	lr

0800cd0c <_init>:
 800cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0e:	bf00      	nop
 800cd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd12:	bc08      	pop	{r3}
 800cd14:	469e      	mov	lr, r3
 800cd16:	4770      	bx	lr

0800cd18 <_fini>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr
