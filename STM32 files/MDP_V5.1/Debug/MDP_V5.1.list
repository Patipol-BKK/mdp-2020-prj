
MDP_V5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d464  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0800d5f8  0800d5f8  0001d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e458  0800e458  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e458  0800e458  0001e458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e460  0800e460  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e460  0800e460  0001e460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e464  0800e464  0001e464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e468  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00005190  20000098  20000098  00020098  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005228  20005228  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d7f8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be9  00000000  00000000  0003d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  000414a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  00042dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024135  00000000  00000000  000445c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d169  00000000  00000000  000686fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9f1d  00000000  00000000  00085866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f783  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007388  00000000  00000000  0015f7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5dc 	.word	0x0800d5dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d5dc 	.word	0x0800d5dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b974 	b.w	8000f5c <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468e      	mov	lr, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14d      	bne.n	8000d36 <__udivmoddi4+0xaa>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4694      	mov	ip, r2
 8000c9e:	d969      	bls.n	8000d74 <__udivmoddi4+0xe8>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b152      	cbz	r2, 8000cbc <__udivmoddi4+0x30>
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	f1c2 0120 	rsb	r1, r2, #32
 8000cae:	fa20 f101 	lsr.w	r1, r0, r1
 8000cb2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cba:	4094      	lsls	r4, r2
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	0c21      	lsrs	r1, r4, #16
 8000cc2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc6:	fa1f f78c 	uxth.w	r7, ip
 8000cca:	fb08 e316 	mls	r3, r8, r6, lr
 8000cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cd2:	fb06 f107 	mul.w	r1, r6, r7
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	d90a      	bls.n	8000cf0 <__udivmoddi4+0x64>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce2:	f080 811f 	bcs.w	8000f24 <__udivmoddi4+0x298>
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	f240 811c 	bls.w	8000f24 <__udivmoddi4+0x298>
 8000cec:	3e02      	subs	r6, #2
 8000cee:	4463      	add	r3, ip
 8000cf0:	1a5b      	subs	r3, r3, r1
 8000cf2:	b2a4      	uxth	r4, r4
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d00:	fb00 f707 	mul.w	r7, r0, r7
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	d90a      	bls.n	8000d1e <__udivmoddi4+0x92>
 8000d08:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	f080 810a 	bcs.w	8000f28 <__udivmoddi4+0x29c>
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	f240 8107 	bls.w	8000f28 <__udivmoddi4+0x29c>
 8000d1a:	4464      	add	r4, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	1be4      	subs	r4, r4, r7
 8000d24:	2600      	movs	r6, #0
 8000d26:	b11d      	cbz	r5, 8000d30 <__udivmoddi4+0xa4>
 8000d28:	40d4      	lsrs	r4, r2
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d909      	bls.n	8000d4e <__udivmoddi4+0xc2>
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	f000 80ef 	beq.w	8000f1e <__udivmoddi4+0x292>
 8000d40:	2600      	movs	r6, #0
 8000d42:	e9c5 0100 	strd	r0, r1, [r5]
 8000d46:	4630      	mov	r0, r6
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	fab3 f683 	clz	r6, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d14a      	bne.n	8000dec <__udivmoddi4+0x160>
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xd4>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 80f9 	bhi.w	8000f52 <__udivmoddi4+0x2c6>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb61 0303 	sbc.w	r3, r1, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	469e      	mov	lr, r3
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e0      	beq.n	8000d30 <__udivmoddi4+0xa4>
 8000d6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d72:	e7dd      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000d74:	b902      	cbnz	r2, 8000d78 <__udivmoddi4+0xec>
 8000d76:	deff      	udf	#255	; 0xff
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	f040 8092 	bne.w	8000ea6 <__udivmoddi4+0x21a>
 8000d82:	eba1 010c 	sub.w	r1, r1, ip
 8000d86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8a:	fa1f fe8c 	uxth.w	lr, ip
 8000d8e:	2601      	movs	r6, #1
 8000d90:	0c20      	lsrs	r0, r4, #16
 8000d92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d96:	fb07 1113 	mls	r1, r7, r3, r1
 8000d9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9e:	fb0e f003 	mul.w	r0, lr, r3
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x12c>
 8000da6:	eb1c 0101 	adds.w	r1, ip, r1
 8000daa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x12a>
 8000db0:	4288      	cmp	r0, r1
 8000db2:	f200 80cb 	bhi.w	8000f4c <__udivmoddi4+0x2c0>
 8000db6:	4643      	mov	r3, r8
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x156>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd8:	d202      	bcs.n	8000de0 <__udivmoddi4+0x154>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	f200 80bb 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de0:	4608      	mov	r0, r1
 8000de2:	eba4 040e 	sub.w	r4, r4, lr
 8000de6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dea:	e79c      	b.n	8000d26 <__udivmoddi4+0x9a>
 8000dec:	f1c6 0720 	rsb	r7, r6, #32
 8000df0:	40b3      	lsls	r3, r6
 8000df2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000e02:	431c      	orrs	r4, r3
 8000e04:	40f9      	lsrs	r1, r7
 8000e06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e12:	0c20      	lsrs	r0, r4, #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fb09 1118 	mls	r1, r9, r8, r1
 8000e1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e20:	fb08 f00e 	mul.w	r0, r8, lr
 8000e24:	4288      	cmp	r0, r1
 8000e26:	fa02 f206 	lsl.w	r2, r2, r6
 8000e2a:	d90b      	bls.n	8000e44 <__udivmoddi4+0x1b8>
 8000e2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e34:	f080 8088 	bcs.w	8000f48 <__udivmoddi4+0x2bc>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f240 8085 	bls.w	8000f48 <__udivmoddi4+0x2bc>
 8000e3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x1e2>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e64:	d26c      	bcs.n	8000f40 <__udivmoddi4+0x2b4>
 8000e66:	458e      	cmp	lr, r1
 8000e68:	d96a      	bls.n	8000f40 <__udivmoddi4+0x2b4>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e72:	fba0 9402 	umull	r9, r4, r0, r2
 8000e76:	eba1 010e 	sub.w	r1, r1, lr
 8000e7a:	42a1      	cmp	r1, r4
 8000e7c:	46c8      	mov	r8, r9
 8000e7e:	46a6      	mov	lr, r4
 8000e80:	d356      	bcc.n	8000f30 <__udivmoddi4+0x2a4>
 8000e82:	d053      	beq.n	8000f2c <__udivmoddi4+0x2a0>
 8000e84:	b15d      	cbz	r5, 8000e9e <__udivmoddi4+0x212>
 8000e86:	ebb3 0208 	subs.w	r2, r3, r8
 8000e8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e92:	fa22 f306 	lsr.w	r3, r2, r6
 8000e96:	40f1      	lsrs	r1, r6
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	2600      	movs	r6, #0
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	f1c2 0320 	rsb	r3, r2, #32
 8000eaa:	40d8      	lsrs	r0, r3
 8000eac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	4301      	orrs	r1, r0
 8000eb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec8:	0c0b      	lsrs	r3, r1, #16
 8000eca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ece:	fb00 f60e 	mul.w	r6, r0, lr
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x260>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ee2:	d22f      	bcs.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee4:	429e      	cmp	r6, r3
 8000ee6:	d92d      	bls.n	8000f44 <__udivmoddi4+0x2b8>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	4463      	add	r3, ip
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	b289      	uxth	r1, r1
 8000ef0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000efc:	fb06 f30e 	mul.w	r3, r6, lr
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x28a>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f0c:	d216      	bcs.n	8000f3c <__udivmoddi4+0x2b0>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d914      	bls.n	8000f3c <__udivmoddi4+0x2b0>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	1ac9      	subs	r1, r1, r3
 8000f18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f1c:	e738      	b.n	8000d90 <__udivmoddi4+0x104>
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e705      	b.n	8000d30 <__udivmoddi4+0xa4>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e3      	b.n	8000cf0 <__udivmoddi4+0x64>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6f8      	b.n	8000d1e <__udivmoddi4+0x92>
 8000f2c:	454b      	cmp	r3, r9
 8000f2e:	d2a9      	bcs.n	8000e84 <__udivmoddi4+0x1f8>
 8000f30:	ebb9 0802 	subs.w	r8, r9, r2
 8000f34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7a3      	b.n	8000e84 <__udivmoddi4+0x1f8>
 8000f3c:	4646      	mov	r6, r8
 8000f3e:	e7ea      	b.n	8000f16 <__udivmoddi4+0x28a>
 8000f40:	4620      	mov	r0, r4
 8000f42:	e794      	b.n	8000e6e <__udivmoddi4+0x1e2>
 8000f44:	4640      	mov	r0, r8
 8000f46:	e7d1      	b.n	8000eec <__udivmoddi4+0x260>
 8000f48:	46d0      	mov	r8, sl
 8000f4a:	e77b      	b.n	8000e44 <__udivmoddi4+0x1b8>
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	e732      	b.n	8000db8 <__udivmoddi4+0x12c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	e709      	b.n	8000d6a <__udivmoddi4+0xde>
 8000f56:	4464      	add	r4, ip
 8000f58:	3802      	subs	r0, #2
 8000f5a:	e742      	b.n	8000de2 <__udivmoddi4+0x156>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <IMU_Initialise>:
//uint32_t gyroPrev[3];
/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8000f6c:	4bad      	ldr	r3, [pc, #692]	; (8001224 <IMU_Initialise+0x2c4>)
 8000f6e:	f107 0418 	add.w	r4, r7, #24
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	7023      	strb	r3, [r4, #0]
 8000f7c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]
 8000f84:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]
	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

*/
	  ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	217f      	movs	r1, #127	; 0x7f
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f9ba 	bl	8001310 <IMU_WriteOneByte>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fa2:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK ){
 8000fa4:	4ba0      	ldr	r3, [pc, #640]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d007      	beq.n	8000fbc <IMU_Initialise+0x5c>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4a9e      	ldr	r2, [pc, #632]	; (800122c <IMU_Initialise+0x2cc>)
 8000fb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb4:	c303      	stmia	r3!, {r0, r1}
 8000fb6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e19a      	b.n	80012f2 <IMU_Initialise+0x392>
	  	   }

	  //check ID
/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f107 0317 	add.w	r3, r7, #23
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f000 f9c3 	bl	8001350 <IMU_ReadOneByte>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fd0:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <IMU_Initialise+0x2c8>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <IMU_Initialise+0x8a>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <IMU_Initialise+0x2d0>)
 8000fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe2:	c303      	stmia	r3!, {r0, r1}
 8000fe4:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e183      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
	  else{
		  //sprintf(hex, "%x", buf[0]); // change to hexidecimal
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	461a      	mov	r2, r3
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4990      	ldr	r1, [pc, #576]	; (8001234 <IMU_Initialise+0x2d4>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00a fde9 	bl	800bbcc <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8000ffa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f00a fe01 	bl	800bc0c <strcpy>
	      uartbuf[12] = uartbuf[0]-32; // change to upper case
 800100a:	7e3b      	ldrb	r3, [r7, #24]
 800100c:	3b20      	subs	r3, #32
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1]-32;
 8001014:	7e7b      	ldrb	r3, [r7, #25]
 8001016:	3b20      	subs	r3, #32
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 800101e:	230d      	movs	r3, #13
 8001020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 8001024:	230a      	movs	r3, #10
 8001026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 8001030:	230d      	movs	r3, #13
 8001032:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 8001034:	230a      	movs	r3, #10
 8001036:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 8001038:	2349      	movs	r3, #73	; 0x49
 800103a:	76bb      	strb	r3, [r7, #26]
	      }


      // for debuggiing - send to uart and return to main to display on OLED and UART
	  HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685c      	ldr	r4, [r3, #4]
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f8c3 	bl	80001d0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	f107 0118 	add.w	r1, r7, #24
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	4620      	mov	r0, r4
 8001058:	f006 fd91 	bl	8007b7e <HAL_UART_Transmit>
	  //return &buf[0];

	  // Initialize
	  // Bank 0 - Reset the device and then auto selects the best available clock source
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800105c:	2200      	movs	r2, #0
 800105e:	217f      	movs	r1, #127	; 0x7f
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f000 f955 	bl	8001310 <IMU_WriteOneByte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <IMU_Initialise+0x2c8>)
 800106c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800106e:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <IMU_Initialise+0x2c8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <IMU_Initialise+0x126>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4a6f      	ldr	r2, [pc, #444]	; (8001238 <IMU_Initialise+0x2d8>)
 800107c:	ca07      	ldmia	r2, {r0, r1, r2}
 800107e:	c303      	stmia	r3!, {r0, r1}
 8001080:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001082:	2300      	movs	r3, #0
 8001084:	e135      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 8001086:	22f1      	movs	r2, #241	; 0xf1
 8001088:	2106      	movs	r1, #6
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f940 	bl	8001310 <IMU_WriteOneByte>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b64      	ldr	r3, [pc, #400]	; (8001228 <IMU_Initialise+0x2c8>)
 8001096:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <IMU_Initialise+0x2c8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00a      	beq.n	80010b6 <IMU_Initialise+0x156>
	       strcpy((char*)uartbuf, "Error 4a\r\n");
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4a65      	ldr	r2, [pc, #404]	; (800123c <IMU_Initialise+0x2dc>)
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	c303      	stmia	r3!, {r0, r1}
 80010aa:	801a      	strh	r2, [r3, #0]
 80010ac:	3302      	adds	r3, #2
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010b2:	2300      	movs	r3, #0
 80010b4:	e11d      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f003 f9a8 	bl	800440c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 80010bc:	2201      	movs	r2, #1
 80010be:	2106      	movs	r1, #6
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f000 f925 	bl	8001310 <IMU_WriteOneByte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <IMU_Initialise+0x2c8>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80010ce:	4b56      	ldr	r3, [pc, #344]	; (8001228 <IMU_Initialise+0x2c8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00a      	beq.n	80010ec <IMU_Initialise+0x18c>
	       strcpy((char*)uartbuf, "Error 4b\r\n");
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4a59      	ldr	r2, [pc, #356]	; (8001240 <IMU_Initialise+0x2e0>)
 80010dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010de:	c303      	stmia	r3!, {r0, r1}
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c12      	lsrs	r2, r2, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80010e8:	2300      	movs	r3, #0
 80010ea:	e102      	b.n	80012f2 <IMU_Initialise+0x392>
	       }


	  // Turn off and on Accelator and Gyro - page 28
      HAL_Delay(10);
 80010ec:	200a      	movs	r0, #10
 80010ee:	f003 f98d 	bl	800440c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 80010f2:	223f      	movs	r2, #63	; 0x3f
 80010f4:	2107      	movs	r1, #7
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f90a 	bl	8001310 <IMU_WriteOneByte>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <IMU_Initialise+0x2c8>)
 8001102:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001104:	4b48      	ldr	r3, [pc, #288]	; (8001228 <IMU_Initialise+0x2c8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00a      	beq.n	8001122 <IMU_Initialise+0x1c2>
	       strcpy((char*)uartbuf, "Error 5a\r\n");
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	4a4c      	ldr	r2, [pc, #304]	; (8001244 <IMU_Initialise+0x2e4>)
 8001112:	ca07      	ldmia	r2, {r0, r1, r2}
 8001114:	c303      	stmia	r3!, {r0, r1}
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	3302      	adds	r3, #2
 800111a:	0c12      	lsrs	r2, r2, #16
 800111c:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 800111e:	2300      	movs	r3, #0
 8001120:	e0e7      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      HAL_Delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f003 f972 	bl	800440c <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 8001128:	2200      	movs	r2, #0
 800112a:	2107      	movs	r1, #7
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f8ef 	bl	8001310 <IMU_WriteOneByte>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <IMU_Initialise+0x2c8>)
 8001138:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <IMU_Initialise+0x2c8>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <IMU_Initialise+0x1f8>
	       strcpy((char*)uartbuf, "Error 5b\r\n");
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4a40      	ldr	r2, [pc, #256]	; (8001248 <IMU_Initialise+0x2e8>)
 8001148:	ca07      	ldmia	r2, {r0, r1, r2}
 800114a:	c303      	stmia	r3!, {r0, r1}
 800114c:	801a      	strh	r2, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	0c12      	lsrs	r2, r2, #16
 8001152:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001154:	2300      	movs	r3, #0
 8001156:	e0cc      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 f8d7 	bl	8001310 <IMU_WriteOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <IMU_Initialise+0x2c8>)
 8001168:	701a      	strb	r2, [r3, #0]


      // Bank 2 - Gyro and Acce and start running
      /* user bank 2 register */
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 800116a:	2220      	movs	r2, #32
 800116c:	217f      	movs	r1, #127	; 0x7f
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f8ce 	bl	8001310 <IMU_WriteOneByte>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <IMU_Initialise+0x2c8>)
 800117a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <IMU_Initialise+0x2c8>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <IMU_Initialise+0x234>
	       strcpy((char*)uartbuf, "Error 6\r\n");
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4a30      	ldr	r2, [pc, #192]	; (800124c <IMU_Initialise+0x2ec>)
 800118a:	ca07      	ldmia	r2, {r0, r1, r2}
 800118c:	c303      	stmia	r3!, {r0, r1}
 800118e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001190:	2300      	movs	r3, #0
 8001192:	e0ae      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x04);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 8001194:	2204      	movs	r2, #4
 8001196:	2100      	movs	r1, #0
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f8b9 	bl	8001310 <IMU_WriteOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <IMU_Initialise+0x2c8>)
 80011a4:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <IMU_Initialise+0x2c8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <IMU_Initialise+0x25e>
	       strcpy((char*)uartbuf, "Error 7\r\n");
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <IMU_Initialise+0x2f0>)
 80011b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b6:	c303      	stmia	r3!, {r0, r1}
 80011b8:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011ba:	2300      	movs	r3, #0
 80011bc:	e099      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 80011be:	2233      	movs	r2, #51	; 0x33
 80011c0:	2101      	movs	r1, #1
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f000 f8a4 	bl	8001310 <IMU_WriteOneByte>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <IMU_Initialise+0x2c8>)
 80011ce:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <IMU_Initialise+0x2c8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <IMU_Initialise+0x288>
	       strcpy((char*)uartbuf, "Error 8\r\n");
 80011d8:	f107 0318 	add.w	r3, r7, #24
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <IMU_Initialise+0x2f4>)
 80011de:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e0:	c303      	stmia	r3!, {r0, r1}
 80011e2:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80011e4:	2300      	movs	r3, #0
 80011e6:	e084      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 80011e8:	2207      	movs	r2, #7
 80011ea:	2111      	movs	r1, #17
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f88f 	bl	8001310 <IMU_WriteOneByte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <IMU_Initialise+0x2c8>)
 80011f8:	701a      	strb	r2, [r3, #0]
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2110      	movs	r1, #16
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f886 	bl	8001310 <IMU_WriteOneByte>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <IMU_Initialise+0x2c8>)
 800120a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <IMU_Initialise+0x2c8>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d023      	beq.n	800125c <IMU_Initialise+0x2fc>
	       strcpy((char*)uartbuf, "Error 9\r\n");
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <IMU_Initialise+0x2f8>)
 800121a:	ca07      	ldmia	r2, {r0, r1, r2}
 800121c:	c303      	stmia	r3!, {r0, r1}
 800121e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001220:	2300      	movs	r3, #0
 8001222:	e066      	b.n	80012f2 <IMU_Initialise+0x392>
 8001224:	0800d698 	.word	0x0800d698
 8001228:	200000b4 	.word	0x200000b4
 800122c:	0800d5f8 	.word	0x0800d5f8
 8001230:	0800d604 	.word	0x0800d604
 8001234:	0800d610 	.word	0x0800d610
 8001238:	0800d614 	.word	0x0800d614
 800123c:	0800d620 	.word	0x0800d620
 8001240:	0800d62c 	.word	0x0800d62c
 8001244:	0800d638 	.word	0x0800d638
 8001248:	0800d644 	.word	0x0800d644
 800124c:	0800d650 	.word	0x0800d650
 8001250:	0800d65c 	.word	0x0800d65c
 8001254:	0800d668 	.word	0x0800d668
 8001258:	0800d674 	.word	0x0800d674
	       }

	  // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 800125c:	2231      	movs	r2, #49	; 0x31
 800125e:	2114      	movs	r1, #20
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f855 	bl	8001310 <IMU_WriteOneByte>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <IMU_Initialise+0x39c>)
 800126c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <IMU_Initialise+0x39c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <IMU_Initialise+0x32c>
	       strcpy((char*)uartbuf, "Error 10\r\n");
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <IMU_Initialise+0x3a0>)
 800127c:	ca07      	ldmia	r2, {r0, r1, r2}
 800127e:	c303      	stmia	r3!, {r0, r1}
 8001280:	801a      	strh	r2, [r3, #0]
 8001282:	3302      	adds	r3, #2
 8001284:	0c12      	lsrs	r2, r2, #16
 8001286:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001288:	2300      	movs	r3, #0
 800128a:	e032      	b.n	80012f2 <IMU_Initialise+0x392>
	       }

	  IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 800128c:	2200      	movs	r2, #0
 800128e:	2153      	movs	r1, #83	; 0x53
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f83d 	bl	8001310 <IMU_WriteOneByte>



      // back to bank 0
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001296:	2200      	movs	r2, #0
 8001298:	217f      	movs	r1, #127	; 0x7f
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f838 	bl	8001310 <IMU_WriteOneByte>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <IMU_Initialise+0x39c>)
 80012a6:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <IMU_Initialise+0x39c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <IMU_Initialise+0x366>
	       strcpy((char*)uartbuf, "Error 11\r\n");
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <IMU_Initialise+0x3a4>)
 80012b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b8:	c303      	stmia	r3!, {r0, r1}
 80012ba:	801a      	strh	r2, [r3, #0]
 80012bc:	3302      	adds	r3, #2
 80012be:	0c12      	lsrs	r2, r2, #16
 80012c0:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80012c2:	2300      	movs	r3, #0
 80012c4:	e015      	b.n	80012f2 <IMU_Initialise+0x392>
	       }
      HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f003 f8a0 	bl	800440c <HAL_Delay>

      /* offset */
//      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
      gyroPosOld[0] = 0;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <IMU_Initialise+0x3a8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
      gyroPosOld[1] = 0;
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <IMU_Initialise+0x3a8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
      gyroPosOld[2] = 0;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <IMU_Initialise+0x3a8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]

      gyroNegOld[0] = 0;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <IMU_Initialise+0x3ac>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
	  gyroNegOld[1] = 0;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <IMU_Initialise+0x3ac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
	  gyroNegOld[2] = 0;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <IMU_Initialise+0x3ac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
      // everthing OK
      //strcpy((char*)buf, "Initialize OK\r\n");
      //return &buf;
      return 0; // 0 means 0 error
 80012f0:	2300      	movs	r3, #0

}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000b4 	.word	0x200000b4
 8001300:	0800d680 	.word	0x0800d680
 8001304:	0800d68c 	.word	0x0800d68c
 8001308:	200000bc 	.word	0x200000bc
 800130c:	200000c8 	.word	0x200000c8

08001310 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	70fb      	strb	r3, [r7, #3]
 800131c:	4613      	mov	r3, r2
 800131e:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	23d0      	movs	r3, #208	; 0xd0
 800132a:	b299      	uxth	r1, r3
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	b29a      	uxth	r2, r3
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2301      	movs	r3, #1
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f107 030f 	add.w	r3, r7, #15
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	f004 f8c7 	bl	80054d4 <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	460b      	mov	r3, r1
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	23d0      	movs	r3, #208	; 0xd0
 8001364:	b299      	uxth	r1, r3
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	b29a      	uxth	r2, r3
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	f004 f9a5 	bl	80056c8 <HAL_I2C_Mem_Read>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <IMU_ReadOneByte+0x44>)
 8001384:	701a      	strb	r2, [r3, #0]
	return ret;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <IMU_ReadOneByte+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000b4 	.word	0x200000b4

08001398 <IMU_GyroReadHeading>:
//int32_t cmpfunc (const void * a, const void * b) {
//   return ( *(int32_t*)a - *(int32_t*)b );
//}

int32_t IMU_GyroReadHeading(ICM20948 *dev)
{   // return the change in value instead of current value
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    uint8_t i, u8Buf[2] = {0}; // reset to zero
 80013a0:	2300      	movs	r3, #0
 80013a2:	81bb      	strh	r3, [r7, #12]
    int32_t gyroRaw = {0};  // reset to zero
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    uint32_t gyroPos, gyroNeg;
    uint32_t valPos, valNeg;
    uint32_t elapsedMs, tick;
    int32_t gyroSum = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	461a      	mov	r2, r3
 80013b2:	2138      	movs	r1, #56	; 0x38
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffcb 	bl	8001350 <IMU_ReadOneByte>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <IMU_GyroReadHeading+0x218>)
 80013c0:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	3301      	adds	r3, #1
 80013c8:	461a      	mov	r2, r3
 80013ca:	2137      	movs	r1, #55	; 0x37
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ffbf 	bl	8001350 <IMU_ReadOneByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <IMU_GyroReadHeading+0x218>)
 80013d8:	701a      	strb	r2, [r3, #0]
    if (prevTick == 0){
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <IMU_GyroReadHeading+0x5a>
    	prevTick = xTaskGetTickCount();
 80013e2:	f009 f819 	bl	800a418 <xTaskGetTickCount>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013ec:	601a      	str	r2, [r3, #0]
    	return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e11b      	b.n	800162a <IMU_GyroReadHeading+0x292>
    }
    tick = xTaskGetTickCount();
 80013f2:	f009 f811 	bl	800a418 <xTaskGetTickCount>
 80013f6:	4603      	mov	r3, r0
 80013f8:	617b      	str	r3, [r7, #20]
    elapsedMs = tick-prevTick;
 80013fa:	4b6e      	ldr	r3, [pc, #440]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	613b      	str	r3, [r7, #16]
    prevTick = tick;
 8001404:	4a6b      	ldr	r2, [pc, #428]	; (80015b4 <IMU_GyroReadHeading+0x21c>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	6013      	str	r3, [r2, #0]

    gyroRaw = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	021a      	lsls	r2, r3, #8
 800140e:	7b3b      	ldrb	r3, [r7, #12]
 8001410:	4619      	mov	r1, r3
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <IMU_GyroReadHeading+0x220>)
 8001414:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	61fb      	str	r3, [r7, #28]
    if(gyroRaw < 0x8000){
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001424:	da04      	bge.n	8001430 <IMU_GyroReadHeading+0x98>
//    	gyroRaw = gyroRaw*0.01525878906*elapsedMs/10*2.546257;
    	gyroNeg = gyroRaw;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142e:	e006      	b.n	800143e <IMU_GyroReadHeading+0xa6>

    }
    else{
//    	gyroRaw = (65535 - gyroRaw)*0.01525878906*elapsedMs/10*2.546257;
		gyroNeg = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroPos = 65535 - gyroRaw;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800143a:	33ff      	adds	r3, #255	; 0xff
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    // Median Filtering
    gyroNegOld[2] = gyroNegOld[1];
 800143e:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a5e      	ldr	r2, [pc, #376]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001444:	6093      	str	r3, [r2, #8]
	gyroPosOld[2] = gyroPosOld[1];
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800144c:	6093      	str	r3, [r2, #8]

	gyroNegOld[1] = gyroNegOld[0];
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001454:	6053      	str	r3, [r2, #4]
	gyroPosOld[1] = gyroPosOld[0];
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800145c:	6053      	str	r3, [r2, #4]

	gyroNegOld[0] = gyroNeg;
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	4a56      	ldr	r2, [pc, #344]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001462:	6013      	str	r3, [r2, #0]
	gyroPosOld[0] = gyroPos;
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	4a56      	ldr	r2, [pc, #344]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001468:	6013      	str	r3, [r2, #0]

	if(gyroNegOld[1] <= gyroNegOld[0] && gyroNegOld[1] >= gyroNegOld[2])valNeg = gyroNegOld[1];
 800146a:	4b54      	ldr	r3, [pc, #336]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	dc09      	bgt.n	800148a <IMU_GyroReadHeading+0xf2>
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	429a      	cmp	r2, r3
 8001480:	db03      	blt.n	800148a <IMU_GyroReadHeading+0xf2>
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	e042      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[1] <= gyroNegOld[2] && gyroNegOld[1] >= gyroNegOld[0])valNeg = gyroNegOld[1];
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	dc09      	bgt.n	80014aa <IMU_GyroReadHeading+0x112>
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4b48      	ldr	r3, [pc, #288]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	db03      	blt.n	80014aa <IMU_GyroReadHeading+0x112>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	e032      	b.n	8001510 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dc09      	bgt.n	80014ca <IMU_GyroReadHeading+0x132>
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b40      	ldr	r3, [pc, #256]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	db03      	blt.n	80014ca <IMU_GyroReadHeading+0x132>
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	e022      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else if(gyroNegOld[0] <= gyroNegOld[2] && gyroNegOld[0] >= gyroNegOld[1])valNeg = gyroNegOld[0];
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dc09      	bgt.n	80014ea <IMU_GyroReadHeading+0x152>
 80014d6:	4b39      	ldr	r3, [pc, #228]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	db03      	blt.n	80014ea <IMU_GyroReadHeading+0x152>
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	e012      	b.n	8001510 <IMU_GyroReadHeading+0x178>

	else if(gyroNegOld[2] <= gyroNegOld[0] && gyroNegOld[2] >= gyroNegOld[1])valNeg = gyroNegOld[2];
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dc09      	bgt.n	800150a <IMU_GyroReadHeading+0x172>
 80014f6:	4b31      	ldr	r3, [pc, #196]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b30      	ldr	r3, [pc, #192]	; (80015bc <IMU_GyroReadHeading+0x224>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	db03      	blt.n	800150a <IMU_GyroReadHeading+0x172>
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <IMU_GyroReadHeading+0x224>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	e002      	b.n	8001510 <IMU_GyroReadHeading+0x178>
	else valNeg = gyroNegOld[2];
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <IMU_GyroReadHeading+0x224>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	623b      	str	r3, [r7, #32]

	if(gyroPosOld[1] <= gyroPosOld[0] && gyroPosOld[1] >= gyroPosOld[2])valPos = gyroPosOld[1];
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	dc09      	bgt.n	8001530 <IMU_GyroReadHeading+0x198>
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	db03      	blt.n	8001530 <IMU_GyroReadHeading+0x198>
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e04c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[1] <= gyroPosOld[2] && gyroPosOld[1] >= gyroPosOld[0])valPos = gyroPosOld[1];
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	dc09      	bgt.n	8001550 <IMU_GyroReadHeading+0x1b8>
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	db03      	blt.n	8001550 <IMU_GyroReadHeading+0x1b8>
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
 800154e:	e03c      	b.n	80015ca <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	dc09      	bgt.n	8001570 <IMU_GyroReadHeading+0x1d8>
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	db03      	blt.n	8001570 <IMU_GyroReadHeading+0x1d8>
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e02c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
	else if(gyroPosOld[0] <= gyroPosOld[2] && gyroPosOld[0] >= gyroPosOld[1])valPos = gyroPosOld[0];
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	dc09      	bgt.n	8001590 <IMU_GyroReadHeading+0x1f8>
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	db03      	blt.n	8001590 <IMU_GyroReadHeading+0x1f8>
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e01c      	b.n	80015ca <IMU_GyroReadHeading+0x232>

	else if(gyroPosOld[2] <= gyroPosOld[0] && gyroPosOld[2] >= gyroPosOld[1])valPos = gyroPosOld[2];
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	dc13      	bgt.n	80015c4 <IMU_GyroReadHeading+0x22c>
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	db0d      	blt.n	80015c4 <IMU_GyroReadHeading+0x22c>
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <IMU_GyroReadHeading+0x228>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <IMU_GyroReadHeading+0x232>
 80015b0:	200000b4 	.word	0x200000b4
 80015b4:	200000b8 	.word	0x200000b8
 80015b8:	200000d4 	.word	0x200000d4
 80015bc:	200000c8 	.word	0x200000c8
 80015c0:	200000bc 	.word	0x200000bc
	else valPos = gyroPosOld[2];
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <IMU_GyroReadHeading+0x29c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
//    			valPos = gyroNegOld - gyroNeg;
//    			valNeg = 0;
//    		}
//    	}
//    }
	dev->gyro[2] = ((double)((int32_t)valPos - (int32_t)valNeg - (int32_t)gyro_offset_f)*0.01525878906f*elapsedMs/1000);
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <IMU_GyroReadHeading+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffa4 	bl	8000524 <__aeabi_i2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <IMU_GyroReadHeading+0x2a4>)
 80015e2:	f7ff f809 	bl	80005f8 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4614      	mov	r4, r2
 80015ec:	461d      	mov	r5, r3
 80015ee:	6938      	ldr	r0, [r7, #16]
 80015f0:	f7fe ff88 	bl	8000504 <__aeabi_ui2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4620      	mov	r0, r4
 80015fa:	4629      	mov	r1, r5
 80015fc:	f7fe fffc 	bl	80005f8 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <IMU_GyroReadHeading+0x2a8>)
 800160e:	f7ff f91d 	bl	800084c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff facf 	bl	8000bbc <__aeabi_d2f>
 800161e:	4602      	mov	r2, r0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	61da      	str	r2, [r3, #28]
//		heading_f = heading_f - 360;
//	}
//	while(heading_f < 0){
//		heading_f = heading_f + 360;
//	}
	return (int32_t)valPos - (int32_t)valNeg;
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	1ad3      	subs	r3, r2, r3
//    if(heading >= 122850) heading = heading - 122850;
//
////    heading %= 360;
//	return heading*0.29304029304;

}
 800162a:	4618      	mov	r0, r3
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bdb0      	pop	{r4, r5, r7, pc}
 8001632:	bf00      	nop
 8001634:	200000bc 	.word	0x200000bc
 8001638:	200000dc 	.word	0x200000dc
 800163c:	3f8f4000 	.word	0x3f8f4000
 8001640:	408f4000 	.word	0x408f4000

08001644 <Gyro_calibrateHeading>:

void Gyro_calibrateHeading(ICM20948 *dev, double ticks)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	ed87 0b00 	vstr	d0, [r7]
    int32_t offset_local = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
    int16_t i;
    for (i=0; i< 512; i++){
 8001654:	2300      	movs	r3, #0
 8001656:	827b      	strh	r3, [r7, #18]
 8001658:	e00c      	b.n	8001674 <Gyro_calibrateHeading+0x30>
		IMU_GyroReadHeading(dev);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fe9c 	bl	8001398 <IMU_GyroReadHeading>
		osDelayUntil(ticks); // wait for 10msec
 8001660:	ed97 0b00 	vldr	d0, [r7]
 8001664:	f007 fd71 	bl	800914a <osDelayUntil>
    for (i=0; i< 512; i++){
 8001668:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800166c:	b29b      	uxth	r3, r3
 800166e:	3301      	adds	r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	827b      	strh	r3, [r7, #18]
 8001674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167c:	dbed      	blt.n	800165a <Gyro_calibrateHeading+0x16>
	}

    for (i=0; i< 2048; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	827b      	strh	r3, [r7, #18]
 8001682:	e010      	b.n	80016a6 <Gyro_calibrateHeading+0x62>
    	offset_local = offset_local + IMU_GyroReadHeading(dev);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fe87 	bl	8001398 <IMU_GyroReadHeading>
 800168a:	4602      	mov	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
//		offset_local = offset_local + (double)dev->gyro[2]/64.0;
    	osDelayUntil(ticks); // wait for 10msec
 8001692:	ed97 0b00 	vldr	d0, [r7]
 8001696:	f007 fd58 	bl	800914a <osDelayUntil>
    for (i=0; i< 2048; i++){
 800169a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	827b      	strh	r3, [r7, #18]
 80016a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ae:	dbe9      	blt.n	8001684 <Gyro_calibrateHeading+0x40>
    }

    gyro_offset_f = offset_local>>11;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	12db      	asrs	r3, r3, #11
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <Gyro_calibrateHeading+0x7c>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000dc 	.word	0x200000dc

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c8:	f002 fe2e 	bl	8004328 <HAL_Init>

  /* USER CODE BEGIN Init */

  Buffer[0] = 'd';
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0xb8>)
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	701a      	strb	r2, [r3, #0]
  Buffer[1] = 'W';
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <main+0xb8>)
 80016d4:	2257      	movs	r2, #87	; 0x57
 80016d6:	705a      	strb	r2, [r3, #1]
  Buffer[2] = '0';
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <main+0xb8>)
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	709a      	strb	r2, [r3, #2]
  Buffer[3] = '9';
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <main+0xb8>)
 80016e0:	2239      	movs	r2, #57	; 0x39
 80016e2:	70da      	strb	r2, [r3, #3]
  Buffer[4] = '0';
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <main+0xb8>)
 80016e6:	2230      	movs	r2, #48	; 0x30
 80016e8:	711a      	strb	r2, [r3, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ea:	f000 f865 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ee:	f000 fb27 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 80016f2:	f000 fb05 	bl	8001d00 <MX_DMA_Init>
  MX_TIM8_Init();
 80016f6:	f000 fa2f 	bl	8001b58 <MX_TIM8_Init>
  MX_TIM2_Init();
 80016fa:	f000 f985 	bl	8001a08 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016fe:	f000 f8e7 	bl	80018d0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001702:	f000 fad3 	bl	8001cac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001706:	f000 f9d3 	bl	8001ab0 <MX_TIM3_Init>
  MX_I2C1_Init();
 800170a:	f000 f8b3 	bl	8001874 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800170e:	f001 ffa3 	bl	8003658 <OLED_Init>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <main+0xbc>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4a1a      	ldr	r2, [pc, #104]	; (8001780 <main+0xbc>)
 8001718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <main+0xc0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <main+0xc0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <main+0xc0>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001730:	f007 fc14 	bl	8008f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <main+0xc4>)
 8001736:	2100      	movs	r1, #0
 8001738:	4814      	ldr	r0, [pc, #80]	; (800178c <main+0xc8>)
 800173a:	f007 fc59 	bl	8008ff0 <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <main+0xcc>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 8001744:	4a13      	ldr	r2, [pc, #76]	; (8001794 <main+0xd0>)
 8001746:	2100      	movs	r1, #0
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <main+0xd4>)
 800174a:	f007 fc51 	bl	8008ff0 <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <main+0xd8>)
 8001752:	6013      	str	r3, [r2, #0]

  /* creation of Motor_L */
  Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <main+0xdc>)
 8001756:	2100      	movs	r1, #0
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <main+0xe0>)
 800175a:	f007 fc49 	bl	8008ff0 <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <main+0xe4>)
 8001762:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(GyroFunc, NULL, &GyroTask_attributes);
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <main+0xe8>)
 8001766:	2100      	movs	r1, #0
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <main+0xec>)
 800176a:	f007 fc41 	bl	8008ff0 <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <main+0xf0>)
 8001772:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001774:	f007 fc16 	bl	8008fa4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001778:	e7fe      	b.n	8001778 <main+0xb4>
 800177a:	bf00      	nop
 800177c:	20000308 	.word	0x20000308
 8001780:	e000edf0 	.word	0xe000edf0
 8001784:	e0001000 	.word	0xe0001000
 8001788:	0800d734 	.word	0x0800d734
 800178c:	08001e65 	.word	0x08001e65
 8001790:	200002f8 	.word	0x200002f8
 8001794:	0800d758 	.word	0x0800d758
 8001798:	08001ea9 	.word	0x08001ea9
 800179c:	200002fc 	.word	0x200002fc
 80017a0:	0800d77c 	.word	0x0800d77c
 80017a4:	08001ef9 	.word	0x08001ef9
 80017a8:	20000300 	.word	0x20000300
 80017ac:	0800d7a0 	.word	0x0800d7a0
 80017b0:	08002fa1 	.word	0x08002fa1
 80017b4:	20000304 	.word	0x20000304

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00a f9f8 	bl	800bbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <SystemClock_Config+0xb4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <SystemClock_Config+0xb4>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <SystemClock_Config+0xb4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <SystemClock_Config+0xb8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <SystemClock_Config+0xb8>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <SystemClock_Config+0xb8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001820:	2300      	movs	r3, #0
 8001822:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fcf7 	bl	800621c <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001834:	f001 fd64 	bl	8003300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f004 ff5a 	bl	800670c <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800185e:	f001 fd4f 	bl	8003300 <Error_Handler>
  }
}
 8001862:	bf00      	nop
 8001864:	3750      	adds	r7, #80	; 0x50
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000

08001874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C1_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_I2C1_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_I2C1_Init+0x58>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_I2C1_Init+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_I2C1_Init+0x50>)
 8001892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_I2C1_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C1_Init+0x50>)
 80018b2:	f003 fccb 	bl	800524c <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f001 fd20 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000e0 	.word	0x200000e0
 80018c8:	40005400 	.word	0x40005400
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b096      	sub	sp, #88	; 0x58
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2220      	movs	r2, #32
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00a f957 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001910:	4a3c      	ldr	r2, [pc, #240]	; (8001a04 <MX_TIM1_Init+0x134>)
 8001912:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001916:	22a0      	movs	r2, #160	; 0xa0
 8001918:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <MX_TIM1_Init+0x130>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001926:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <MX_TIM1_Init+0x130>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192e:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800193a:	4831      	ldr	r0, [pc, #196]	; (8001a00 <MX_TIM1_Init+0x130>)
 800193c:	f005 f8c6 	bl	8006acc <HAL_TIM_Base_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001946:	f001 fcdb 	bl	8003300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001950:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001954:	4619      	mov	r1, r3
 8001956:	482a      	ldr	r0, [pc, #168]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001958:	f005 fc1e 	bl	8007198 <HAL_TIM_ConfigClockSource>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001962:	f001 fccd 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001968:	f005 f8ff 	bl	8006b6a <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001972:	f001 fcc5 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	4619      	mov	r1, r3
 8001984:	481e      	ldr	r0, [pc, #120]	; (8001a00 <MX_TIM1_Init+0x130>)
 8001986:	f005 ffdf 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001990:	f001 fcb6 	bl	8003300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	220c      	movs	r2, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4812      	ldr	r0, [pc, #72]	; (8001a00 <MX_TIM1_Init+0x130>)
 80019b6:	f005 fb2d 	bl	8007014 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80019c0:	f001 fc9e 	bl	8003300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <MX_TIM1_Init+0x130>)
 80019e8:	f006 f82a 	bl	8007a40 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80019f2:	f001 fc85 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3758      	adds	r7, #88	; 0x58
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000134 	.word	0x20000134
 8001a04:	40010000 	.word	0x40010000

08001a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f00a f8d0 	bl	800bbbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a5c:	230a      	movs	r3, #10
 8001a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a64:	2301      	movs	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4619      	mov	r1, r3
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a78:	f005 f998 	bl	8006dac <HAL_TIM_Encoder_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a82:	f001 fc3d 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM2_Init+0xa4>)
 8001a94:	f005 ff58 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a9e:	f001 fc2f 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000017c 	.word	0x2000017c

08001ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a f87c 	bl	800bbbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ace:	4a21      	ldr	r2, [pc, #132]	; (8001b54 <MX_TIM3_Init+0xa4>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001af2:	2303      	movs	r3, #3
 8001af4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b02:	230a      	movs	r3, #10
 8001b04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b12:	230a      	movs	r3, #10
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001b1e:	f005 f945 	bl	8006dac <HAL_TIM_Encoder_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b28:	f001 fbea 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_TIM3_Init+0xa0>)
 8001b3a:	f005 ff05 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b44:	f001 fbdc 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200001c4 	.word	0x200001c4
 8001b54:	40000400 	.word	0x40000400

08001b58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b096      	sub	sp, #88	; 0x58
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
 8001b86:	615a      	str	r2, [r3, #20]
 8001b88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00a f813 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001b98:	4a43      	ldr	r2, [pc, #268]	; (8001ca8 <MX_TIM8_Init+0x150>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001baa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001bae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001bc2:	4838      	ldr	r0, [pc, #224]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bc4:	f004 ff82 	bl	8006acc <HAL_TIM_Base_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001bce:	f001 fb97 	bl	8003300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4831      	ldr	r0, [pc, #196]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001be0:	f005 fada 	bl	8007198 <HAL_TIM_ConfigClockSource>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bea:	f001 fb89 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bee:	482d      	ldr	r0, [pc, #180]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001bf0:	f004 ffbb 	bl	8006b6a <HAL_TIM_PWM_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bfa:	f001 fb81 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4825      	ldr	r0, [pc, #148]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c0e:	f005 fe9b 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001c18:	f001 fb72 	bl	8003300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c1c:	2360      	movs	r3, #96	; 0x60
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c42:	f005 f9e7 	bl	8007014 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c4c:	f001 fb58 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c54:	2204      	movs	r2, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c5a:	f005 f9db 	bl	8007014 <HAL_TIM_PWM_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c64:	f001 fb4c 	bl	8003300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_TIM8_Init+0x14c>)
 8001c8c:	f005 fed8 	bl	8007a40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c96:	f001 fb33 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3758      	adds	r7, #88	; 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000020c 	.word	0x2000020c
 8001ca8:	40010400 	.word	0x40010400

08001cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_USART3_UART_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART3_UART_Init+0x4c>)
 8001ce4:	f005 fefe 	bl	8007ae4 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cee:	f001 fb07 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000254 	.word	0x20000254
 8001cfc:	40004800 	.word	0x40004800

08001d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_DMA_Init+0x3c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	200c      	movs	r0, #12
 8001d28:	f002 fc6f 	bl	800460a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d2c:	200c      	movs	r0, #12
 8001d2e:	f002 fc88 	bl	8004642 <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a3d      	ldr	r2, [pc, #244]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a2f      	ldr	r2, [pc, #188]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_GPIO_Init+0x114>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001de8:	481b      	ldr	r0, [pc, #108]	; (8001e58 <MX_GPIO_Init+0x118>)
 8001dea:	f003 f9fb 	bl	80051e4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001dee:	2200      	movs	r2, #0
 8001df0:	213c      	movs	r1, #60	; 0x3c
 8001df2:	481a      	ldr	r0, [pc, #104]	; (8001e5c <MX_GPIO_Init+0x11c>)
 8001df4:	f003 f9f6 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001df8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001dfc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4811      	ldr	r0, [pc, #68]	; (8001e58 <MX_GPIO_Init+0x118>)
 8001e12:	f003 f833 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001e16:	233c      	movs	r3, #60	; 0x3c
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0x11c>)
 8001e2e:	f003 f825 	bl	8004e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_GPIO_Init+0x120>)
 8001e48:	f003 f818 	bl	8004e7c <HAL_GPIO_Init>

}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//  HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
  for(;;)
  {

	sprintf(hello, "buff:%s", Buffer);
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <StartDefaultTask+0x38>)
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <StartDefaultTask+0x3c>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f009 fea9 	bl	800bbcc <siprintf>
	OLED_ShowString(10,20,hello);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2114      	movs	r1, #20
 8001e82:	200a      	movs	r0, #10
 8001e84:	f001 fbb6 	bl	80035f4 <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <StartDefaultTask+0x40>)
 8001e8e:	f003 f9c2 	bl	8005216 <HAL_GPIO_TogglePin>
    osDelay(1);
 8001e92:	2001      	movs	r0, #1
 8001e94:	f007 f93e 	bl	8009114 <osDelay>
	sprintf(hello, "buff:%s", Buffer);
 8001e98:	e7e8      	b.n	8001e6c <StartDefaultTask+0x8>
 8001e9a:	bf00      	nop
 8001e9c:	20000308 	.word	0x20000308
 8001ea0:	0800d6d8 	.word	0x0800d6d8
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "testV5!\0";
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <Display+0x48>)
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb8:	c303      	stmia	r3!, {r0, r1}
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	f107 0315 	add.w	r3, r7, #21
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	f8c3 2007 	str.w	r2, [r3, #7]
  /* Infinite loop */
  for(;;)
  {
	sprintf(hello, "V5.1");
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <Display+0x4c>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f009 fe7b 	bl	800bbcc <siprintf>
	OLED_ShowString(10,10,hello);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	461a      	mov	r2, r3
 8001edc:	210a      	movs	r1, #10
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f001 fb88 	bl	80035f4 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001ee4:	f001 fa5c 	bl	80033a0 <OLED_Refresh_Gram>
    osDelay(1);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f007 f913 	bl	8009114 <osDelay>
	sprintf(hello, "V5.1");
 8001eee:	e7ec      	b.n	8001eca <Display+0x22>
 8001ef0:	0800d6e8 	.word	0x0800d6e8
 8001ef4:	0800d6e0 	.word	0x0800d6e0

08001ef8 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 8001ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	ed2d 8b02 	vpush	{d8}
 8001f00:	b09f      	sub	sp, #124	; 0x7c
 8001f02:	af02      	add	r7, sp, #8
 8001f04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001f06:	2100      	movs	r1, #0
 8001f08:	4897      	ldr	r0, [pc, #604]	; (8002168 <LeftMotor+0x270>)
 8001f0a:	f004 fe87 	bl	8006c1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4895      	ldr	r0, [pc, #596]	; (8002168 <LeftMotor+0x270>)
 8001f12:	f004 fe83 	bl	8006c1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001f16:	210c      	movs	r1, #12
 8001f18:	4894      	ldr	r0, [pc, #592]	; (800216c <LeftMotor+0x274>)
 8001f1a:	f004 fe7f 	bl	8006c1c <HAL_TIM_PWM_Start>


  int16_t value;


  while(!is_calibrated){
 8001f1e:	e002      	b.n	8001f26 <LeftMotor+0x2e>
	  osDelay(100);
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f007 f8f7 	bl	8009114 <osDelay>
  while(!is_calibrated){
 8001f26:	4b92      	ldr	r3, [pc, #584]	; (8002170 <LeftMotor+0x278>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f8      	beq.n	8001f20 <LeftMotor+0x28>
  }
  htim1.Instance ->CCR4 = 148.4;
 8001f2e:	4b8f      	ldr	r3, [pc, #572]	; (800216c <LeftMotor+0x274>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2294      	movs	r2, #148	; 0x94
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40




  uint8_t target_is_before = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  double left_pwm = 0, right_pwm = 0;
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  double PID_dist;

  double target_dist = 0;
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double slip_x = 0, slip_y = 0;
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

  char sbuf[10];
  t_heading = current_angle;
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <LeftMotor+0x27c>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fdd3 	bl	8000b2c <__aeabi_d2iz>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4a7b      	ldr	r2, [pc, #492]	; (8002178 <LeftMotor+0x280>)
 8001f8a:	6013      	str	r3, [r2, #0]
  HAL_UART_Receive_DMA (&huart3, Buffer, 5);
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	497b      	ldr	r1, [pc, #492]	; (800217c <LeftMotor+0x284>)
 8001f90:	487b      	ldr	r0, [pc, #492]	; (8002180 <LeftMotor+0x288>)
 8001f92:	f005 fe86 	bl	8007ca2 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;){
	  // Loop until next command is received
	  do{
		  osDelay(100);
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	f007 f8bc 	bl	8009114 <osDelay>
	  }while(Buffer[0] == 'd');
 8001f9c:	4b77      	ldr	r3, [pc, #476]	; (800217c <LeftMotor+0x284>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b64      	cmp	r3, #100	; 0x64
 8001fa2:	d0f8      	beq.n	8001f96 <LeftMotor+0x9e>
	  // Convert instruction value to int
	  value = (Buffer[2] - '0')*100 + (Buffer[3] - '0')*10 + Buffer[4] - '0';
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <LeftMotor+0x284>)
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	3b30      	subs	r3, #48	; 0x30
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	0091      	lsls	r1, r2, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b6e      	ldr	r3, [pc, #440]	; (800217c <LeftMotor+0x284>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	3b30      	subs	r3, #48	; 0x30
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	0089      	lsls	r1, r1, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <LeftMotor+0x284>)
 8001fd8:	791b      	ldrb	r3, [r3, #4]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b30      	subs	r3, #48	; 0x30
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
//	  dist = value;

	  // For counter-clockwise turning
	  if((Buffer[0]=='F' && Buffer[1]=='L')||(Buffer[0]=='B' && Buffer[1]=='R')){
 8001fe8:	4b64      	ldr	r3, [pc, #400]	; (800217c <LeftMotor+0x284>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b46      	cmp	r3, #70	; 0x46
 8001fee:	d103      	bne.n	8001ff8 <LeftMotor+0x100>
 8001ff0:	4b62      	ldr	r3, [pc, #392]	; (800217c <LeftMotor+0x284>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ff6:	d007      	beq.n	8002008 <LeftMotor+0x110>
 8001ff8:	4b60      	ldr	r3, [pc, #384]	; (800217c <LeftMotor+0x284>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b42      	cmp	r3, #66	; 0x42
 8001ffe:	d118      	bne.n	8002032 <LeftMotor+0x13a>
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <LeftMotor+0x284>)
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	2b52      	cmp	r3, #82	; 0x52
 8002006:	d114      	bne.n	8002032 <LeftMotor+0x13a>
		  t_heading = t_heading - value;	// Set target heading
 8002008:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <LeftMotor+0x280>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a59      	ldr	r2, [pc, #356]	; (8002178 <LeftMotor+0x280>)
 8002014:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 8002016:	4b58      	ldr	r3, [pc, #352]	; (8002178 <LeftMotor+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa82 	bl	8000524 <__aeabi_i2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4957      	ldr	r1, [pc, #348]	; (8002184 <LeftMotor+0x28c>)
 8002026:	e9c1 2300 	strd	r2, r3, [r1]
		  target_is_before = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002030:	e032      	b.n	8002098 <LeftMotor+0x1a0>
	  }
	  // For clockwise turning
	  else if ((Buffer[0]=='F' && Buffer[1]=='R')||(Buffer[0]=='B' && Buffer[1]=='L')){
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <LeftMotor+0x284>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b46      	cmp	r3, #70	; 0x46
 8002038:	d103      	bne.n	8002042 <LeftMotor+0x14a>
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <LeftMotor+0x284>)
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	2b52      	cmp	r3, #82	; 0x52
 8002040:	d007      	beq.n	8002052 <LeftMotor+0x15a>
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <LeftMotor+0x284>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b42      	cmp	r3, #66	; 0x42
 8002048:	d118      	bne.n	800207c <LeftMotor+0x184>
 800204a:	4b4c      	ldr	r3, [pc, #304]	; (800217c <LeftMotor+0x284>)
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b4c      	cmp	r3, #76	; 0x4c
 8002050:	d114      	bne.n	800207c <LeftMotor+0x184>
		  t_heading = t_heading + value;
 8002052:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <LeftMotor+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a46      	ldr	r2, [pc, #280]	; (8002178 <LeftMotor+0x280>)
 800205e:	6013      	str	r3, [r2, #0]
		  target_angle = (double)t_heading;
 8002060:	4b45      	ldr	r3, [pc, #276]	; (8002178 <LeftMotor+0x280>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa5d 	bl	8000524 <__aeabi_i2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4945      	ldr	r1, [pc, #276]	; (8002184 <LeftMotor+0x28c>)
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
		  target_is_before = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800207a:	e00d      	b.n	8002098 <LeftMotor+0x1a0>
	  }
	  else if(Buffer[1] == 'W'){
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <LeftMotor+0x284>)
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b57      	cmp	r3, #87	; 0x57
 8002082:	d109      	bne.n	8002098 <LeftMotor+0x1a0>
		  target_angle = (double)t_heading;
 8002084:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <LeftMotor+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa4b 	bl	8000524 <__aeabi_i2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	493c      	ldr	r1, [pc, #240]	; (8002184 <LeftMotor+0x28c>)
 8002094:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  // Set servo values
	  if(Buffer[1] == 'L'){
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <LeftMotor+0x284>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b4c      	cmp	r3, #76	; 0x4c
 800209e:	d104      	bne.n	80020aa <LeftMotor+0x1b2>
		  htim1.Instance ->CCR4 = 91;
 80020a0:	4b32      	ldr	r3, [pc, #200]	; (800216c <LeftMotor+0x274>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	225b      	movs	r2, #91	; 0x5b
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
 80020a8:	e00c      	b.n	80020c4 <LeftMotor+0x1cc>
	  }
	  else if(Buffer[1] == 'R'){
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <LeftMotor+0x284>)
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	2b52      	cmp	r3, #82	; 0x52
 80020b0:	d104      	bne.n	80020bc <LeftMotor+0x1c4>
		  htim1.Instance ->CCR4 = 240;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <LeftMotor+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22f0      	movs	r2, #240	; 0xf0
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ba:	e003      	b.n	80020c4 <LeftMotor+0x1cc>
	  }
	  else{
		  htim1.Instance ->CCR4 = 148.4;
 80020bc:	4b2b      	ldr	r3, [pc, #172]	; (800216c <LeftMotor+0x274>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2294      	movs	r2, #148	; 0x94
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40
	  }
	  // Wait for servo to turn
	  osDelay(550);
 80020c4:	f240 2026 	movw	r0, #550	; 0x226
 80020c8:	f007 f824 	bl	8009114 <osDelay>
	  // If currently running turning instruction
	  if(Buffer[1] != 'W'){
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <LeftMotor+0x284>)
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	2b57      	cmp	r3, #87	; 0x57
 80020d2:	f000 83bd 	beq.w	8002850 <LeftMotor+0x958>
		  // Set PID Controller (constants are Kp,Ki,Kd)
		  PID(&Turning_PID, &current_angle, &PID_out, &target_angle, 0.021, 0.1, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80020d6:	2300      	movs	r3, #0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8002150 <LeftMotor+0x258>
 80020e2:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8002158 <LeftMotor+0x260>
 80020e6:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002160 <LeftMotor+0x268>
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <LeftMotor+0x28c>)
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <LeftMotor+0x290>)
 80020ee:	4921      	ldr	r1, [pc, #132]	; (8002174 <LeftMotor+0x27c>)
 80020f0:	4826      	ldr	r0, [pc, #152]	; (800218c <LeftMotor+0x294>)
 80020f2:	f001 fb79 	bl	80037e8 <PID>

		  PID_SetMode(&Turning_PID, _PID_MODE_AUTOMATIC);
 80020f6:	2101      	movs	r1, #1
 80020f8:	4824      	ldr	r0, [pc, #144]	; (800218c <LeftMotor+0x294>)
 80020fa:	f001 fcab 	bl	8003a54 <PID_SetMode>
		  PID_SetSampleTime(&Turning_PID, 10);
 80020fe:	210a      	movs	r1, #10
 8002100:	4822      	ldr	r0, [pc, #136]	; (800218c <LeftMotor+0x294>)
 8002102:	f001 fe1b 	bl	8003d3c <PID_SetSampleTime>
		  PID_SetOutputLimits(&Turning_PID, -1.0f+min_pwm_ratio, 1.0f-min_pwm_ratio);
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <LeftMotor+0x298>)
 8002108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4b20      	ldr	r3, [pc, #128]	; (8002194 <LeftMotor+0x29c>)
 8002112:	f7fe f8b9 	bl	8000288 <__aeabi_dsub>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	ec43 2b18 	vmov	d8, r2, r3
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <LeftMotor+0x298>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	491a      	ldr	r1, [pc, #104]	; (8002194 <LeftMotor+0x29c>)
 800212a:	f7fe f8ad 	bl	8000288 <__aeabi_dsub>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	ec43 2b17 	vmov	d7, r2, r3
 8002136:	eeb0 1a47 	vmov.f32	s2, s14
 800213a:	eef0 1a67 	vmov.f32	s3, s15
 800213e:	eeb0 0a48 	vmov.f32	s0, s16
 8002142:	eef0 0a68 	vmov.f32	s1, s17
 8002146:	4811      	ldr	r0, [pc, #68]	; (800218c <LeftMotor+0x294>)
 8002148:	f001 fca2 	bl	8003a90 <PID_SetOutputLimits>
	  //	  sprintf(sbuf, "%d", (int)(-1.0f*(double)target_is_before)*(target_angle - current_angle));
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, sizeof(sbuf), HAL_MAX_DELAY);
	  //	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

		  // Loop until robot's heading passes target heading
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 800214c:	e33f      	b.n	80027ce <LeftMotor+0x8d6>
 800214e:	bf00      	nop
	...
 8002158:	9999999a 	.word	0x9999999a
 800215c:	3fb99999 	.word	0x3fb99999
 8002160:	24dd2f1b 	.word	0x24dd2f1b
 8002164:	3f958106 	.word	0x3f958106
 8002168:	2000020c 	.word	0x2000020c
 800216c:	20000134 	.word	0x20000134
 8002170:	20000328 	.word	0x20000328
 8002174:	20000318 	.word	0x20000318
 8002178:	20000310 	.word	0x20000310
 800217c:	20000308 	.word	0x20000308
 8002180:	20000254 	.word	0x20000254
 8002184:	20000018 	.word	0x20000018
 8002188:	200004b8 	.word	0x200004b8
 800218c:	20000368 	.word	0x20000368
 8002190:	20000008 	.word	0x20000008
 8002194:	3ff00000 	.word	0x3ff00000
			  // Blinking LED for checking program crashes
			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	48ba      	ldr	r0, [pc, #744]	; (8002488 <LeftMotor+0x590>)
 800219e:	f003 f83a 	bl	8005216 <HAL_GPIO_TogglePin>

			  // Compute next pwm val
			  PID_Compute(&Turning_PID);
 80021a2:	48ba      	ldr	r0, [pc, #744]	; (800248c <LeftMotor+0x594>)
 80021a4:	f001 fb6c 	bl	8003880 <PID_Compute>

			  taskENTER_CRITICAL();
 80021a8:	f009 f9c4 	bl	800b534 <vPortEnterCritical>
			  // If steering left
			  if(Buffer[1] == 'L')
 80021ac:	4bb8      	ldr	r3, [pc, #736]	; (8002490 <LeftMotor+0x598>)
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	2b4c      	cmp	r3, #76	; 0x4c
 80021b2:	f040 8183 	bne.w	80024bc <LeftMotor+0x5c4>
			  {
				  // Forward
				  if(PID_out < 0){
 80021b6:	4bb7      	ldr	r3, [pc, #732]	; (8002494 <LeftMotor+0x59c>)
 80021b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	f7fe fc8a 	bl	8000adc <__aeabi_dcmplt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80ae 	beq.w	800232c <LeftMotor+0x434>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	48b0      	ldr	r0, [pc, #704]	; (8002498 <LeftMotor+0x5a0>)
 80021d6:	f003 f805 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	2108      	movs	r1, #8
 80021de:	48ae      	ldr	r0, [pc, #696]	; (8002498 <LeftMotor+0x5a0>)
 80021e0:	f003 f800 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2120      	movs	r1, #32
 80021e8:	48ab      	ldr	r0, [pc, #684]	; (8002498 <LeftMotor+0x5a0>)
 80021ea:	f002 fffb 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2110      	movs	r1, #16
 80021f2:	48a9      	ldr	r0, [pc, #676]	; (8002498 <LeftMotor+0x5a0>)
 80021f4:	f002 fff6 	bl	80051e4 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 80021f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f981 	bl	8000504 <__aeabi_ui2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	f04f 0000 	mov.w	r0, #0
 800220a:	49a4      	ldr	r1, [pc, #656]	; (800249c <LeftMotor+0x5a4>)
 800220c:	f7fe f83c 	bl	8000288 <__aeabi_dsub>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	f7fe f836 	bl	800028c <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4690      	mov	r8, r2
 8002226:	4699      	mov	r9, r3
 8002228:	4b9d      	ldr	r3, [pc, #628]	; (80024a0 <LeftMotor+0x5a8>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	4b9d      	ldr	r3, [pc, #628]	; (80024a4 <LeftMotor+0x5ac>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe f828 	bl	8000288 <__aeabi_dsub>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4640      	mov	r0, r8
 800223e:	4649      	mov	r1, r9
 8002240:	f7fe f9da 	bl	80005f8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b95      	ldr	r3, [pc, #596]	; (80024a8 <LeftMotor+0x5b0>)
 8002252:	f7fe fc43 	bl	8000adc <__aeabi_dcmplt>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d028      	beq.n	80022ae <LeftMotor+0x3b6>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_S*min_pwm_ratio);
 800225c:	4b93      	ldr	r3, [pc, #588]	; (80024ac <LeftMotor+0x5b4>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f94f 	bl	8000504 <__aeabi_ui2d>
 8002266:	4b92      	ldr	r3, [pc, #584]	; (80024b0 <LeftMotor+0x5b8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f9c4 	bl	80005f8 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	498f      	ldr	r1, [pc, #572]	; (80024b4 <LeftMotor+0x5bc>)
 8002276:	680e      	ldr	r6, [r1, #0]
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc7e 	bl	8000b7c <__aeabi_d2uiz>
 8002280:	4603      	mov	r3, r0
 8002282:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_L*min_pwm_ratio);
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <LeftMotor+0x5c0>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f93b 	bl	8000504 <__aeabi_ui2d>
 800228e:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <LeftMotor+0x5b8>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4985      	ldr	r1, [pc, #532]	; (80024b4 <LeftMotor+0x5bc>)
 800229e:	680e      	ldr	r6, [r1, #0]
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc6a 	bl	8000b7c <__aeabi_d2uiz>
 80022a8:	4603      	mov	r3, r0
 80022aa:	63b3      	str	r3, [r6, #56]	; 0x38
 80022ac:	e28a      	b.n	80027c4 <LeftMotor+0x8cc>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_S*(-PID_out+min_pwm_ratio));
 80022ae:	4b7f      	ldr	r3, [pc, #508]	; (80024ac <LeftMotor+0x5b4>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f926 	bl	8000504 <__aeabi_ui2d>
 80022b8:	4680      	mov	r8, r0
 80022ba:	4689      	mov	r9, r1
 80022bc:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <LeftMotor+0x5b8>)
 80022be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c2:	4b74      	ldr	r3, [pc, #464]	; (8002494 <LeftMotor+0x59c>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fd ffde 	bl	8000288 <__aeabi_dsub>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4640      	mov	r0, r8
 80022d2:	4649      	mov	r1, r9
 80022d4:	f7fe f990 	bl	80005f8 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4975      	ldr	r1, [pc, #468]	; (80024b4 <LeftMotor+0x5bc>)
 80022de:	680e      	ldr	r6, [r1, #0]
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc4a 	bl	8000b7c <__aeabi_d2uiz>
 80022e8:	4603      	mov	r3, r0
 80022ea:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_L*(-PID_out+min_pwm_ratio));
 80022ec:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <LeftMotor+0x5c0>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f907 	bl	8000504 <__aeabi_ui2d>
 80022f6:	4680      	mov	r8, r0
 80022f8:	4689      	mov	r9, r1
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <LeftMotor+0x5b8>)
 80022fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <LeftMotor+0x59c>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffbf 	bl	8000288 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4640      	mov	r0, r8
 8002310:	4649      	mov	r1, r9
 8002312:	f7fe f971 	bl	80005f8 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4966      	ldr	r1, [pc, #408]	; (80024b4 <LeftMotor+0x5bc>)
 800231c:	680e      	ldr	r6, [r1, #0]
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc2b 	bl	8000b7c <__aeabi_d2uiz>
 8002326:	4603      	mov	r3, r0
 8002328:	63b3      	str	r3, [r6, #56]	; 0x38
 800232a:	e24b      	b.n	80027c4 <LeftMotor+0x8cc>
					  }
				  }
				  // Backwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800232c:	2200      	movs	r2, #0
 800232e:	2108      	movs	r1, #8
 8002330:	4859      	ldr	r0, [pc, #356]	; (8002498 <LeftMotor+0x5a0>)
 8002332:	f002 ff57 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2104      	movs	r1, #4
 800233a:	4857      	ldr	r0, [pc, #348]	; (8002498 <LeftMotor+0x5a0>)
 800233c:	f002 ff52 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2110      	movs	r1, #16
 8002344:	4854      	ldr	r0, [pc, #336]	; (8002498 <LeftMotor+0x5a0>)
 8002346:	f002 ff4d 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2120      	movs	r1, #32
 800234e:	4852      	ldr	r0, [pc, #328]	; (8002498 <LeftMotor+0x5a0>)
 8002350:	f002 ff48 	bl	80051e4 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002354:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8d3 	bl	8000504 <__aeabi_ui2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	494d      	ldr	r1, [pc, #308]	; (800249c <LeftMotor+0x5a4>)
 8002368:	f7fd ff8e 	bl	8000288 <__aeabi_dsub>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	f7fd ff88 	bl	800028c <__adddf3>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4690      	mov	r8, r2
 8002382:	4699      	mov	r9, r3
 8002384:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <LeftMotor+0x5a8>)
 8002386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <LeftMotor+0x5ac>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fd ff7a 	bl	8000288 <__aeabi_dsub>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4640      	mov	r0, r8
 800239a:	4649      	mov	r1, r9
 800239c:	f7fe f92c 	bl	80005f8 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <LeftMotor+0x5b0>)
 80023ae:	f7fe fb95 	bl	8000adc <__aeabi_dcmplt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d028      	beq.n	800240a <LeftMotor+0x512>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_S*min_pwm_ratio);
 80023b8:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <LeftMotor+0x5b4>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe f8a1 	bl	8000504 <__aeabi_ui2d>
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <LeftMotor+0x5b8>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	f7fe f916 	bl	80005f8 <__aeabi_dmul>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4938      	ldr	r1, [pc, #224]	; (80024b4 <LeftMotor+0x5bc>)
 80023d2:	680e      	ldr	r6, [r1, #0]
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbd0 	bl	8000b7c <__aeabi_d2uiz>
 80023dc:	4603      	mov	r3, r0
 80023de:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_L*min_pwm_ratio);
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <LeftMotor+0x5c0>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f88d 	bl	8000504 <__aeabi_ui2d>
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <LeftMotor+0x5b8>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f902 	bl	80005f8 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	492e      	ldr	r1, [pc, #184]	; (80024b4 <LeftMotor+0x5bc>)
 80023fa:	680e      	ldr	r6, [r1, #0]
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f7fe fbbc 	bl	8000b7c <__aeabi_d2uiz>
 8002404:	4603      	mov	r3, r0
 8002406:	63b3      	str	r3, [r6, #56]	; 0x38
 8002408:	e1dc      	b.n	80027c4 <LeftMotor+0x8cc>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_S*(PID_out+min_pwm_ratio));
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <LeftMotor+0x5b4>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f878 	bl	8000504 <__aeabi_ui2d>
 8002414:	4680      	mov	r8, r0
 8002416:	4689      	mov	r9, r1
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <LeftMotor+0x59c>)
 800241a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241e:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <LeftMotor+0x5b8>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fd ff32 	bl	800028c <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4640      	mov	r0, r8
 800242e:	4649      	mov	r1, r9
 8002430:	f7fe f8e2 	bl	80005f8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	491e      	ldr	r1, [pc, #120]	; (80024b4 <LeftMotor+0x5bc>)
 800243a:	680e      	ldr	r6, [r1, #0]
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fb9c 	bl	8000b7c <__aeabi_d2uiz>
 8002444:	4603      	mov	r3, r0
 8002446:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_L*(PID_out+min_pwm_ratio));
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <LeftMotor+0x5c0>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f859 	bl	8000504 <__aeabi_ui2d>
 8002452:	4680      	mov	r8, r0
 8002454:	4689      	mov	r9, r1
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <LeftMotor+0x59c>)
 8002458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <LeftMotor+0x5b8>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fd ff13 	bl	800028c <__adddf3>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4640      	mov	r0, r8
 800246c:	4649      	mov	r1, r9
 800246e:	f7fe f8c3 	bl	80005f8 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	490f      	ldr	r1, [pc, #60]	; (80024b4 <LeftMotor+0x5bc>)
 8002478:	680e      	ldr	r6, [r1, #0]
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe fb7d 	bl	8000b7c <__aeabi_d2uiz>
 8002482:	4603      	mov	r3, r0
 8002484:	63b3      	str	r3, [r6, #56]	; 0x38
 8002486:	e19d      	b.n	80027c4 <LeftMotor+0x8cc>
 8002488:	40021000 	.word	0x40021000
 800248c:	20000368 	.word	0x20000368
 8002490:	20000308 	.word	0x20000308
 8002494:	200004b8 	.word	0x200004b8
 8002498:	40020000 	.word	0x40020000
 800249c:	3fe00000 	.word	0x3fe00000
 80024a0:	20000018 	.word	0x20000018
 80024a4:	20000318 	.word	0x20000318
 80024a8:	40240000 	.word	0x40240000
 80024ac:	20000002 	.word	0x20000002
 80024b0:	20000008 	.word	0x20000008
 80024b4:	2000020c 	.word	0x2000020c
 80024b8:	20000004 	.word	0x20000004
					  }
				  }
			  }
			  // If steering right
			  else if(Buffer[1] == 'R')
 80024bc:	4b97      	ldr	r3, [pc, #604]	; (800271c <LeftMotor+0x824>)
 80024be:	785b      	ldrb	r3, [r3, #1]
 80024c0:	2b52      	cmp	r3, #82	; 0x52
 80024c2:	f040 817f 	bne.w	80027c4 <LeftMotor+0x8cc>
			  {
				  // Backwards
				  if(PID_out < 0){
 80024c6:	4b96      	ldr	r3, [pc, #600]	; (8002720 <LeftMotor+0x828>)
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	f7fe fb02 	bl	8000adc <__aeabi_dcmplt>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80ae 	beq.w	800263c <LeftMotor+0x744>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2108      	movs	r1, #8
 80024e4:	488f      	ldr	r0, [pc, #572]	; (8002724 <LeftMotor+0x82c>)
 80024e6:	f002 fe7d 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	2104      	movs	r1, #4
 80024ee:	488d      	ldr	r0, [pc, #564]	; (8002724 <LeftMotor+0x82c>)
 80024f0:	f002 fe78 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2110      	movs	r1, #16
 80024f8:	488a      	ldr	r0, [pc, #552]	; (8002724 <LeftMotor+0x82c>)
 80024fa:	f002 fe73 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	2120      	movs	r1, #32
 8002502:	4888      	ldr	r0, [pc, #544]	; (8002724 <LeftMotor+0x82c>)
 8002504:	f002 fe6e 	bl	80051e4 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002508:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd fff9 	bl	8000504 <__aeabi_ui2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	4983      	ldr	r1, [pc, #524]	; (8002728 <LeftMotor+0x830>)
 800251c:	f7fd feb4 	bl	8000288 <__aeabi_dsub>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	f7fd feae 	bl	800028c <__adddf3>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4690      	mov	r8, r2
 8002536:	4699      	mov	r9, r3
 8002538:	4b7c      	ldr	r3, [pc, #496]	; (800272c <LeftMotor+0x834>)
 800253a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800253e:	4b7c      	ldr	r3, [pc, #496]	; (8002730 <LeftMotor+0x838>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fd fea0 	bl	8000288 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4640      	mov	r0, r8
 800254e:	4649      	mov	r1, r9
 8002550:	f7fe f852 	bl	80005f8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	4b74      	ldr	r3, [pc, #464]	; (8002734 <LeftMotor+0x83c>)
 8002562:	f7fe fabb 	bl	8000adc <__aeabi_dcmplt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d028      	beq.n	80025be <LeftMotor+0x6c6>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_L*min_pwm_ratio);
 800256c:	4b72      	ldr	r3, [pc, #456]	; (8002738 <LeftMotor+0x840>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffc7 	bl	8000504 <__aeabi_ui2d>
 8002576:	4b71      	ldr	r3, [pc, #452]	; (800273c <LeftMotor+0x844>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe f83c 	bl	80005f8 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	496e      	ldr	r1, [pc, #440]	; (8002740 <LeftMotor+0x848>)
 8002586:	680e      	ldr	r6, [r1, #0]
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f7fe faf6 	bl	8000b7c <__aeabi_d2uiz>
 8002590:	4603      	mov	r3, r0
 8002592:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_S*min_pwm_ratio);
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <LeftMotor+0x84c>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd ffb3 	bl	8000504 <__aeabi_ui2d>
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <LeftMotor+0x844>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe f828 	bl	80005f8 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4964      	ldr	r1, [pc, #400]	; (8002740 <LeftMotor+0x848>)
 80025ae:	680e      	ldr	r6, [r1, #0]
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fae2 	bl	8000b7c <__aeabi_d2uiz>
 80025b8:	4603      	mov	r3, r0
 80025ba:	63b3      	str	r3, [r6, #56]	; 0x38
 80025bc:	e102      	b.n	80027c4 <LeftMotor+0x8cc>
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_L*(-PID_out+min_pwm_ratio));
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <LeftMotor+0x840>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ff9e 	bl	8000504 <__aeabi_ui2d>
 80025c8:	4680      	mov	r8, r0
 80025ca:	4689      	mov	r9, r1
 80025cc:	4b5b      	ldr	r3, [pc, #364]	; (800273c <LeftMotor+0x844>)
 80025ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <LeftMotor+0x828>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fd fe56 	bl	8000288 <__aeabi_dsub>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4640      	mov	r0, r8
 80025e2:	4649      	mov	r1, r9
 80025e4:	f7fe f808 	bl	80005f8 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4954      	ldr	r1, [pc, #336]	; (8002740 <LeftMotor+0x848>)
 80025ee:	680e      	ldr	r6, [r1, #0]
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fac2 	bl	8000b7c <__aeabi_d2uiz>
 80025f8:	4603      	mov	r3, r0
 80025fa:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_S*(-PID_out+min_pwm_ratio));
 80025fc:	4b51      	ldr	r3, [pc, #324]	; (8002744 <LeftMotor+0x84c>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ff7f 	bl	8000504 <__aeabi_ui2d>
 8002606:	4680      	mov	r8, r0
 8002608:	4689      	mov	r9, r1
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <LeftMotor+0x844>)
 800260c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002610:	4b43      	ldr	r3, [pc, #268]	; (8002720 <LeftMotor+0x828>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fe37 	bl	8000288 <__aeabi_dsub>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4640      	mov	r0, r8
 8002620:	4649      	mov	r1, r9
 8002622:	f7fd ffe9 	bl	80005f8 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4945      	ldr	r1, [pc, #276]	; (8002740 <LeftMotor+0x848>)
 800262c:	680e      	ldr	r6, [r1, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe faa3 	bl	8000b7c <__aeabi_d2uiz>
 8002636:	4603      	mov	r3, r0
 8002638:	63b3      	str	r3, [r6, #56]	; 0x38
 800263a:	e0c3      	b.n	80027c4 <LeftMotor+0x8cc>
					  }
				  }
				  // Forwards
				  else{
					  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	2104      	movs	r1, #4
 8002640:	4838      	ldr	r0, [pc, #224]	; (8002724 <LeftMotor+0x82c>)
 8002642:	f002 fdcf 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2108      	movs	r1, #8
 800264a:	4836      	ldr	r0, [pc, #216]	; (8002724 <LeftMotor+0x82c>)
 800264c:	f002 fdca 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	2120      	movs	r1, #32
 8002654:	4833      	ldr	r0, [pc, #204]	; (8002724 <LeftMotor+0x82c>)
 8002656:	f002 fdc5 	bl	80051e4 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2110      	movs	r1, #16
 800265e:	4831      	ldr	r0, [pc, #196]	; (8002724 <LeftMotor+0x82c>)
 8002660:	f002 fdc0 	bl	80051e4 <HAL_GPIO_WritePin>

					  // Set motor speed to minimum power +/- PID output
					  if(2*(0.5f - (double)target_is_before)*(target_angle - current_angle) < 10){
 8002664:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff4b 	bl	8000504 <__aeabi_ui2d>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	492c      	ldr	r1, [pc, #176]	; (8002728 <LeftMotor+0x830>)
 8002678:	f7fd fe06 	bl	8000288 <__aeabi_dsub>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	f7fd fe00 	bl	800028c <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4690      	mov	r8, r2
 8002692:	4699      	mov	r9, r3
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <LeftMotor+0x834>)
 8002696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <LeftMotor+0x838>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd fdf2 	bl	8000288 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4640      	mov	r0, r8
 80026aa:	4649      	mov	r1, r9
 80026ac:	f7fd ffa4 	bl	80005f8 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <LeftMotor+0x83c>)
 80026be:	f7fe fa0d 	bl	8000adc <__aeabi_dcmplt>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d03f      	beq.n	8002748 <LeftMotor+0x850>
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_L*min_pwm_ratio);
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <LeftMotor+0x840>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff19 	bl	8000504 <__aeabi_ui2d>
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <LeftMotor+0x844>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd ff8e 	bl	80005f8 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4917      	ldr	r1, [pc, #92]	; (8002740 <LeftMotor+0x848>)
 80026e2:	680e      	ldr	r6, [r1, #0]
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa48 	bl	8000b7c <__aeabi_d2uiz>
 80026ec:	4603      	mov	r3, r0
 80026ee:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_S*min_pwm_ratio);
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <LeftMotor+0x84c>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff05 	bl	8000504 <__aeabi_ui2d>
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <LeftMotor+0x844>)
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fd ff7a 	bl	80005f8 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	490d      	ldr	r1, [pc, #52]	; (8002740 <LeftMotor+0x848>)
 800270a:	680e      	ldr	r6, [r1, #0]
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe fa34 	bl	8000b7c <__aeabi_d2uiz>
 8002714:	4603      	mov	r3, r0
 8002716:	63b3      	str	r3, [r6, #56]	; 0x38
 8002718:	e054      	b.n	80027c4 <LeftMotor+0x8cc>
 800271a:	bf00      	nop
 800271c:	20000308 	.word	0x20000308
 8002720:	200004b8 	.word	0x200004b8
 8002724:	40020000 	.word	0x40020000
 8002728:	3fe00000 	.word	0x3fe00000
 800272c:	20000018 	.word	0x20000018
 8002730:	20000318 	.word	0x20000318
 8002734:	40240000 	.word	0x40240000
 8002738:	20000004 	.word	0x20000004
 800273c:	20000008 	.word	0x20000008
 8002740:	2000020c 	.word	0x2000020c
 8002744:	20000002 	.word	0x20000002
					  }
					  else{
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal_L*(PID_out+min_pwm_ratio));
 8002748:	4bc5      	ldr	r3, [pc, #788]	; (8002a60 <LeftMotor+0xb68>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fed9 	bl	8000504 <__aeabi_ui2d>
 8002752:	4680      	mov	r8, r0
 8002754:	4689      	mov	r9, r1
 8002756:	4bc3      	ldr	r3, [pc, #780]	; (8002a64 <LeftMotor+0xb6c>)
 8002758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275c:	4bc2      	ldr	r3, [pc, #776]	; (8002a68 <LeftMotor+0xb70>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f7fd fd93 	bl	800028c <__adddf3>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4640      	mov	r0, r8
 800276c:	4649      	mov	r1, r9
 800276e:	f7fd ff43 	bl	80005f8 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	49bd      	ldr	r1, [pc, #756]	; (8002a6c <LeftMotor+0xb74>)
 8002778:	680e      	ldr	r6, [r1, #0]
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe f9fd 	bl	8000b7c <__aeabi_d2uiz>
 8002782:	4603      	mov	r3, r0
 8002784:	6373      	str	r3, [r6, #52]	; 0x34
						  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal_S*(PID_out+min_pwm_ratio));
 8002786:	4bba      	ldr	r3, [pc, #744]	; (8002a70 <LeftMotor+0xb78>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd feba 	bl	8000504 <__aeabi_ui2d>
 8002790:	4680      	mov	r8, r0
 8002792:	4689      	mov	r9, r1
 8002794:	4bb3      	ldr	r3, [pc, #716]	; (8002a64 <LeftMotor+0xb6c>)
 8002796:	e9d3 0100 	ldrd	r0, r1, [r3]
 800279a:	4bb3      	ldr	r3, [pc, #716]	; (8002a68 <LeftMotor+0xb70>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fd74 	bl	800028c <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4640      	mov	r0, r8
 80027aa:	4649      	mov	r1, r9
 80027ac:	f7fd ff24 	bl	80005f8 <__aeabi_dmul>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	49ad      	ldr	r1, [pc, #692]	; (8002a6c <LeftMotor+0xb74>)
 80027b6:	680e      	ldr	r6, [r1, #0]
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f9de 	bl	8000b7c <__aeabi_d2uiz>
 80027c0:	4603      	mov	r3, r0
 80027c2:	63b3      	str	r3, [r6, #56]	; 0x38
					  }
				  }
			  }
			  taskEXIT_CRITICAL();
 80027c4:	f008 fee6 	bl	800b594 <vPortExitCritical>

			  // Loops every 10ms
			  osDelayUntil(pdMS_TO_TICKS(10));
 80027c8:	200a      	movs	r0, #10
 80027ca:	f006 fcbe 	bl	800914a <osDelayUntil>
		  while(2*(0.5f - (double)target_is_before)*(target_angle - current_angle)>0){
 80027ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd fe96 	bl	8000504 <__aeabi_ui2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	49a4      	ldr	r1, [pc, #656]	; (8002a74 <LeftMotor+0xb7c>)
 80027e2:	f7fd fd51 	bl	8000288 <__aeabi_dsub>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	f7fd fd4b 	bl	800028c <__adddf3>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4690      	mov	r8, r2
 80027fc:	4699      	mov	r9, r3
 80027fe:	4b9e      	ldr	r3, [pc, #632]	; (8002a78 <LeftMotor+0xb80>)
 8002800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002804:	4b9d      	ldr	r3, [pc, #628]	; (8002a7c <LeftMotor+0xb84>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f7fd fd3d 	bl	8000288 <__aeabi_dsub>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4640      	mov	r0, r8
 8002814:	4649      	mov	r1, r9
 8002816:	f7fd feef 	bl	80005f8 <__aeabi_dmul>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	f7fe f975 	bl	8000b18 <__aeabi_dcmpgt>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f acb1 	bne.w	8002198 <LeftMotor+0x2a0>
		  }
		  // Set both motor's speed to 0
		  taskENTER_CRITICAL();
 8002836:	f008 fe7d 	bl	800b534 <vPortEnterCritical>
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 800283a:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <LeftMotor+0xb74>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8002842:	4b8a      	ldr	r3, [pc, #552]	; (8002a6c <LeftMotor+0xb74>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2200      	movs	r2, #0
 8002848:	639a      	str	r2, [r3, #56]	; 0x38
		  taskEXIT_CRITICAL();
 800284a:	f008 fea3 	bl	800b594 <vPortExitCritical>
 800284e:	e381      	b.n	8002f54 <LeftMotor+0x105c>
	  }
	  // If currently running straight line instruction
	  else{
		  // Reset traveled distance to 0
		  travel_dist = 0;
 8002850:	498b      	ldr	r1, [pc, #556]	; (8002a80 <LeftMotor+0xb88>)
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_position = 0;
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <LeftMotor+0xb8c>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		  if(Buffer[0] == 'F'){
 8002864:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <LeftMotor+0xb90>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b46      	cmp	r3, #70	; 0x46
 800286a:	d12e      	bne.n	80028ca <LeftMotor+0x9d2>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800286c:	2200      	movs	r2, #0
 800286e:	2104      	movs	r1, #4
 8002870:	4886      	ldr	r0, [pc, #536]	; (8002a8c <LeftMotor+0xb94>)
 8002872:	f002 fcb7 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002876:	2201      	movs	r2, #1
 8002878:	2108      	movs	r1, #8
 800287a:	4884      	ldr	r0, [pc, #528]	; (8002a8c <LeftMotor+0xb94>)
 800287c:	f002 fcb2 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002880:	2200      	movs	r2, #0
 8002882:	2120      	movs	r1, #32
 8002884:	4881      	ldr	r0, [pc, #516]	; (8002a8c <LeftMotor+0xb94>)
 8002886:	f002 fcad 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	2110      	movs	r1, #16
 800288e:	487f      	ldr	r0, [pc, #508]	; (8002a8c <LeftMotor+0xb94>)
 8002890:	f002 fca8 	bl	80051e4 <HAL_GPIO_WritePin>
			  target_is_before = 1;
 8002894:	2301      	movs	r3, #1
 8002896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = (double)value * 100.0/102.5;
			  target_dist = (double)value * 100.0/102.5;
 800289a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe40 	bl	8000524 <__aeabi_i2d>
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	4b79      	ldr	r3, [pc, #484]	; (8002a90 <LeftMotor+0xb98>)
 80028aa:	f7fd fea5 	bl	80005f8 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	a360      	add	r3, pc, #384	; (adr r3, 8002a38 <LeftMotor+0xb40>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd ffc6 	bl	800084c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80028c8:	e038      	b.n	800293c <LeftMotor+0xa44>
//			  }
//			  else{
//				  target_dist = (double)value * 100.0/105.0;
//			  }
		  }
		  else if(Buffer[0] == 'B'){
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <LeftMotor+0xb90>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b42      	cmp	r3, #66	; 0x42
 80028d0:	d134      	bne.n	800293c <LeftMotor+0xa44>
			  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2108      	movs	r1, #8
 80028d6:	486d      	ldr	r0, [pc, #436]	; (8002a8c <LeftMotor+0xb94>)
 80028d8:	f002 fc84 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80028dc:	2201      	movs	r2, #1
 80028de:	2104      	movs	r1, #4
 80028e0:	486a      	ldr	r0, [pc, #424]	; (8002a8c <LeftMotor+0xb94>)
 80028e2:	f002 fc7f 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2110      	movs	r1, #16
 80028ea:	4868      	ldr	r0, [pc, #416]	; (8002a8c <LeftMotor+0xb94>)
 80028ec:	f002 fc7a 	bl	80051e4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80028f0:	2201      	movs	r2, #1
 80028f2:	2120      	movs	r1, #32
 80028f4:	4865      	ldr	r0, [pc, #404]	; (8002a8c <LeftMotor+0xb94>)
 80028f6:	f002 fc75 	bl	80051e4 <HAL_GPIO_WritePin>
			  target_is_before = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
//			  target_dist = -(double)value * 100.0/102.5;
			  target_dist = -(double)value * 100.0/102.5;
 8002900:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe0d 	bl	8000524 <__aeabi_i2d>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4614      	mov	r4, r2
 8002910:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <LeftMotor+0xb98>)
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fe6b 	bl	80005f8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	a343      	add	r3, pc, #268	; (adr r3, 8002a38 <LeftMotor+0xb40>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd ff8c 	bl	800084c <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	e9c7 2308 	strd	r2, r3, [r7, #32]
//			  else{
//				  target_dist = -(double)value * 100.0/105.0;
//			  }
		  }
		  // Set straight distance PID controller (constants are Kp,Ki,Kd)
		  PID(&Straight_PID, &travel_dist, &PID_dist, &target_dist, 0.02, 0.07, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 800293c:	f107 0320 	add.w	r3, r7, #32
 8002940:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002944:	2100      	movs	r1, #0
 8002946:	9101      	str	r1, [sp, #4]
 8002948:	2101      	movs	r1, #1
 800294a:	9100      	str	r1, [sp, #0]
 800294c:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8002a40 <LeftMotor+0xb48>
 8002950:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002a48 <LeftMotor+0xb50>
 8002954:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8002a50 <LeftMotor+0xb58>
 8002958:	4949      	ldr	r1, [pc, #292]	; (8002a80 <LeftMotor+0xb88>)
 800295a:	484e      	ldr	r0, [pc, #312]	; (8002a94 <LeftMotor+0xb9c>)
 800295c:	f000 ff44 	bl	80037e8 <PID>

		  PID_SetMode(&Straight_PID, _PID_MODE_AUTOMATIC);
 8002960:	2101      	movs	r1, #1
 8002962:	484c      	ldr	r0, [pc, #304]	; (8002a94 <LeftMotor+0xb9c>)
 8002964:	f001 f876 	bl	8003a54 <PID_SetMode>
		  PID_SetSampleTime(&Straight_PID, 10);
 8002968:	210a      	movs	r1, #10
 800296a:	484a      	ldr	r0, [pc, #296]	; (8002a94 <LeftMotor+0xb9c>)
 800296c:	f001 f9e6 	bl	8003d3c <PID_SetSampleTime>
		  PID_SetOutputLimits(&Straight_PID, -1.0f+min_pwm_ratio, 1.0f-min_pwm_ratio);
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <LeftMotor+0xb70>)
 8002972:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <LeftMotor+0xba0>)
 800297c:	f7fd fc84 	bl	8000288 <__aeabi_dsub>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	ec43 2b18 	vmov	d8, r2, r3
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <LeftMotor+0xb70>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	4941      	ldr	r1, [pc, #260]	; (8002a98 <LeftMotor+0xba0>)
 8002994:	f7fd fc78 	bl	8000288 <__aeabi_dsub>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	ec43 2b17 	vmov	d7, r2, r3
 80029a0:	eeb0 1a47 	vmov.f32	s2, s14
 80029a4:	eef0 1a67 	vmov.f32	s3, s15
 80029a8:	eeb0 0a48 	vmov.f32	s0, s16
 80029ac:	eef0 0a68 	vmov.f32	s1, s17
 80029b0:	4838      	ldr	r0, [pc, #224]	; (8002a94 <LeftMotor+0xb9c>)
 80029b2:	f001 f86d 	bl	8003a90 <PID_SetOutputLimits>

		  // Set straight line error correction PID controller (constants are Kp,Ki,Kd)
		  straight_error = 0.0;
 80029b6:	4939      	ldr	r1, [pc, #228]	; (8002a9c <LeftMotor+0xba4>)
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	e9c1 2300 	strd	r2, r3, [r1]
		  double ref_zero = 0.0;
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  PID(&StraightErr_PID, &straight_error, &PID_out, &ref_zero, 0.05, 0.02, 0.0, _PID_P_ON_E, _PID_CD_DIRECT);
 80029d0:	f107 0308 	add.w	r3, r7, #8
 80029d4:	2200      	movs	r2, #0
 80029d6:	9201      	str	r2, [sp, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	9200      	str	r2, [sp, #0]
 80029dc:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8002a40 <LeftMotor+0xb48>
 80029e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002a50 <LeftMotor+0xb58>
 80029e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002a58 <LeftMotor+0xb60>
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <LeftMotor+0xb6c>)
 80029ea:	492c      	ldr	r1, [pc, #176]	; (8002a9c <LeftMotor+0xba4>)
 80029ec:	482c      	ldr	r0, [pc, #176]	; (8002aa0 <LeftMotor+0xba8>)
 80029ee:	f000 fefb 	bl	80037e8 <PID>

		  PID_SetMode(&StraightErr_PID, _PID_MODE_AUTOMATIC);
 80029f2:	2101      	movs	r1, #1
 80029f4:	482a      	ldr	r0, [pc, #168]	; (8002aa0 <LeftMotor+0xba8>)
 80029f6:	f001 f82d 	bl	8003a54 <PID_SetMode>
		  PID_SetSampleTime(&StraightErr_PID, 10);
 80029fa:	210a      	movs	r1, #10
 80029fc:	4828      	ldr	r0, [pc, #160]	; (8002aa0 <LeftMotor+0xba8>)
 80029fe:	f001 f99d 	bl	8003d3c <PID_SetSampleTime>
		  PID_SetOutputLimits(&StraightErr_PID, -max_pwm_dif, max_pwm_dif);
 8002a02:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <LeftMotor+0xbac>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	4692      	mov	sl, r2
 8002a0a:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002a0e:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <LeftMotor+0xbac>)
 8002a10:	ed93 7b00 	vldr	d7, [r3]
 8002a14:	eeb0 1a47 	vmov.f32	s2, s14
 8002a18:	eef0 1a67 	vmov.f32	s3, s15
 8002a1c:	ec4b ab10 	vmov	d0, sl, fp
 8002a20:	481f      	ldr	r0, [pc, #124]	; (8002aa0 <LeftMotor+0xba8>)
 8002a22:	f001 f835 	bl	8003a90 <PID_SetOutputLimits>

		  // Start motor speed to 0
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)0);
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <LeftMotor+0xb74>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)0);
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <LeftMotor+0xb74>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38

		  // Loop until traveled distance exceeds target distance (target_is_before is to account for backward movements)
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 8002a36:	e25c      	b.n	8002ef2 <LeftMotor+0xffa>
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	4059a000 	.word	0x4059a000
	...
 8002a48:	1eb851ec 	.word	0x1eb851ec
 8002a4c:	3fb1eb85 	.word	0x3fb1eb85
 8002a50:	47ae147b 	.word	0x47ae147b
 8002a54:	3f947ae1 	.word	0x3f947ae1
 8002a58:	9999999a 	.word	0x9999999a
 8002a5c:	3fa99999 	.word	0x3fa99999
 8002a60:	20000004 	.word	0x20000004
 8002a64:	200004b8 	.word	0x200004b8
 8002a68:	20000008 	.word	0x20000008
 8002a6c:	2000020c 	.word	0x2000020c
 8002a70:	20000002 	.word	0x20000002
 8002a74:	3fe00000 	.word	0x3fe00000
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	20000318 	.word	0x20000318
 8002a80:	20000330 	.word	0x20000330
 8002a84:	20000340 	.word	0x20000340
 8002a88:	20000308 	.word	0x20000308
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40590000 	.word	0x40590000
 8002a94:	200003d8 	.word	0x200003d8
 8002a98:	3ff00000 	.word	0x3ff00000
 8002a9c:	20000338 	.word	0x20000338
 8002aa0:	20000448 	.word	0x20000448
 8002aa4:	20000010 	.word	0x20000010
//			  sprintf(sbuf, "%7d", (int)target_pulse);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 8, HAL_MAX_DELAY);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);

			  // Comput PID values
			  PID_Compute(&Straight_PID);
 8002aa8:	48b3      	ldr	r0, [pc, #716]	; (8002d78 <LeftMotor+0xe80>)
 8002aaa:	f000 fee9 	bl	8003880 <PID_Compute>
			  PID_Compute(&StraightErr_PID);
 8002aae:	48b3      	ldr	r0, [pc, #716]	; (8002d7c <LeftMotor+0xe84>)
 8002ab0:	f000 fee6 	bl	8003880 <PID_Compute>
			  if(Buffer[0] == 'F')
 8002ab4:	4bb2      	ldr	r3, [pc, #712]	; (8002d80 <LeftMotor+0xe88>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b46      	cmp	r3, #70	; 0x46
 8002aba:	d156      	bne.n	8002b6a <LeftMotor+0xc72>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (target_angle - current_angle)*3;
 8002abc:	4bb1      	ldr	r3, [pc, #708]	; (8002d84 <LeftMotor+0xe8c>)
 8002abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac2:	4bb1      	ldr	r3, [pc, #708]	; (8002d88 <LeftMotor+0xe90>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fbde 	bl	8000288 <__aeabi_dsub>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4bac      	ldr	r3, [pc, #688]	; (8002d8c <LeftMotor+0xe94>)
 8002ada:	f7fd fd8d 	bl	80005f8 <__aeabi_dmul>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	a3a2      	add	r3, pc, #648	; (adr r3, 8002d70 <LeftMotor+0xe78>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fbce 	bl	800028c <__adddf3>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	49a6      	ldr	r1, [pc, #664]	; (8002d90 <LeftMotor+0xe98>)
 8002af6:	680e      	ldr	r6, [r1, #0]
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f7fe f83e 	bl	8000b7c <__aeabi_d2uiz>
 8002b00:	4603      	mov	r3, r0
 8002b02:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1+PID_out);
 8002b04:	4ba3      	ldr	r3, [pc, #652]	; (8002d94 <LeftMotor+0xe9c>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fcfb 	bl	8000504 <__aeabi_ui2d>
 8002b0e:	4680      	mov	r8, r0
 8002b10:	4689      	mov	r9, r1
 8002b12:	4ba1      	ldr	r3, [pc, #644]	; (8002d98 <LeftMotor+0xea0>)
 8002b14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	4b9f      	ldr	r3, [pc, #636]	; (8002d9c <LeftMotor+0xea4>)
 8002b1e:	f7fd fbb5 	bl	800028c <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4640      	mov	r0, r8
 8002b28:	4649      	mov	r1, r9
 8002b2a:	f7fd fd65 	bl	80005f8 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1-PID_out);
 8002b36:	4b97      	ldr	r3, [pc, #604]	; (8002d94 <LeftMotor+0xe9c>)
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fce2 	bl	8000504 <__aeabi_ui2d>
 8002b40:	4680      	mov	r8, r0
 8002b42:	4689      	mov	r9, r1
 8002b44:	4b94      	ldr	r3, [pc, #592]	; (8002d98 <LeftMotor+0xea0>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	4993      	ldr	r1, [pc, #588]	; (8002d9c <LeftMotor+0xea4>)
 8002b50:	f7fd fb9a 	bl	8000288 <__aeabi_dsub>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4640      	mov	r0, r8
 8002b5a:	4649      	mov	r1, r9
 8002b5c:	f7fd fd4c 	bl	80005f8 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002b68:	e059      	b.n	8002c1e <LeftMotor+0xd26>
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1+PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1-PID_out));
			  }
			  else if(Buffer[0] == 'B')
 8002b6a:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <LeftMotor+0xe88>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b42      	cmp	r3, #66	; 0x42
 8002b70:	d155      	bne.n	8002c1e <LeftMotor+0xd26>
			  {
				  // Change pwm ratio for both motors to correct if heading deviates from straight line
				  htim1.Instance ->CCR4 = 148.4 + (current_angle - target_angle)*3;
 8002b72:	4b85      	ldr	r3, [pc, #532]	; (8002d88 <LeftMotor+0xe90>)
 8002b74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b78:	4b82      	ldr	r3, [pc, #520]	; (8002d84 <LeftMotor+0xe8c>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fb83 	bl	8000288 <__aeabi_dsub>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <LeftMotor+0xe94>)
 8002b90:	f7fd fd32 	bl	80005f8 <__aeabi_dmul>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	a374      	add	r3, pc, #464	; (adr r3, 8002d70 <LeftMotor+0xe78>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fb73 	bl	800028c <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4979      	ldr	r1, [pc, #484]	; (8002d90 <LeftMotor+0xe98>)
 8002bac:	680e      	ldr	r6, [r1, #0]
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd ffe3 	bl	8000b7c <__aeabi_d2uiz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6433      	str	r3, [r6, #64]	; 0x40
				  left_pwm = (double)pwmVal*(1-PID_out);
 8002bba:	4b76      	ldr	r3, [pc, #472]	; (8002d94 <LeftMotor+0xe9c>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fca0 	bl	8000504 <__aeabi_ui2d>
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	4689      	mov	r9, r1
 8002bc8:	4b73      	ldr	r3, [pc, #460]	; (8002d98 <LeftMotor+0xea0>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	4972      	ldr	r1, [pc, #456]	; (8002d9c <LeftMotor+0xea4>)
 8002bd4:	f7fd fb58 	bl	8000288 <__aeabi_dsub>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4640      	mov	r0, r8
 8002bde:	4649      	mov	r1, r9
 8002be0:	f7fd fd0a 	bl	80005f8 <__aeabi_dmul>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  right_pwm = (double)pwmVal*(1+PID_out);
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <LeftMotor+0xe9c>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fd fc87 	bl	8000504 <__aeabi_ui2d>
 8002bf6:	4680      	mov	r8, r0
 8002bf8:	4689      	mov	r9, r1
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <LeftMotor+0xea0>)
 8002bfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	4b65      	ldr	r3, [pc, #404]	; (8002d9c <LeftMotor+0xea4>)
 8002c06:	f7fd fb41 	bl	800028c <__adddf3>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4640      	mov	r0, r8
 8002c10:	4649      	mov	r1, r9
 8002c12:	f7fd fcf1 	bl	80005f8 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,(double)pwmVal*(1-PID_out));
//				  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,(double)pwmVal*(1+PID_out));
			  }

			  taskENTER_CRITICAL();
 8002c1e:	f008 fc89 	bl	800b534 <vPortEnterCritical>
			  if(PID_dist < 0){
 8002c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f7fd ff55 	bl	8000adc <__aeabi_dcmplt>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80bf 	beq.w	8002db8 <LeftMotor+0xec0>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	4858      	ldr	r0, [pc, #352]	; (8002da0 <LeftMotor+0xea8>)
 8002c40:	f002 fad0 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002c44:	2201      	movs	r2, #1
 8002c46:	2104      	movs	r1, #4
 8002c48:	4855      	ldr	r0, [pc, #340]	; (8002da0 <LeftMotor+0xea8>)
 8002c4a:	f002 facb 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2110      	movs	r1, #16
 8002c52:	4853      	ldr	r0, [pc, #332]	; (8002da0 <LeftMotor+0xea8>)
 8002c54:	f002 fac6 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	4850      	ldr	r0, [pc, #320]	; (8002da0 <LeftMotor+0xea8>)
 8002c5e:	f002 fac1 	bl	80051e4 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<10){
 8002c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fc4c 	bl	8000504 <__aeabi_ui2d>
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <LeftMotor+0xeac>)
 8002c72:	f7fd fb09 	bl	8000288 <__aeabi_dsub>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	f7fd fb03 	bl	800028c <__adddf3>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	4699      	mov	r9, r3
 8002c8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c92:	4b45      	ldr	r3, [pc, #276]	; (8002da8 <LeftMotor+0xeb0>)
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	f7fd faf6 	bl	8000288 <__aeabi_dsub>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	f7fd fca8 	bl	80005f8 <__aeabi_dmul>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <LeftMotor+0xeb4>)
 8002cb6:	f7fd ff11 	bl	8000adc <__aeabi_dcmplt>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <LeftMotor+0xe0e>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <LeftMotor+0xeb8>)
 8002cc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002cca:	f7fd fc95 	bl	80005f8 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4938      	ldr	r1, [pc, #224]	; (8002db4 <LeftMotor+0xebc>)
 8002cd4:	680e      	ldr	r6, [r1, #0]
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff4f 	bl	8000b7c <__aeabi_d2uiz>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <LeftMotor+0xeb8>)
 8002ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cec:	f7fd fc84 	bl	80005f8 <__aeabi_dmul>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	492f      	ldr	r1, [pc, #188]	; (8002db4 <LeftMotor+0xebc>)
 8002cf6:	680e      	ldr	r6, [r1, #0]
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7fd ff3e 	bl	8000b7c <__aeabi_d2uiz>
 8002d00:	4603      	mov	r3, r0
 8002d02:	63b3      	str	r3, [r6, #56]	; 0x38
 8002d04:	e0f0      	b.n	8002ee8 <LeftMotor+0xff0>
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio-PID_dist));
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <LeftMotor+0xeb8>)
 8002d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d10:	f7fd faba 	bl	8000288 <__aeabi_dsub>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002d20:	f7fd fc6a 	bl	80005f8 <__aeabi_dmul>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4922      	ldr	r1, [pc, #136]	; (8002db4 <LeftMotor+0xebc>)
 8002d2a:	680e      	ldr	r6, [r1, #0]
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fd ff24 	bl	8000b7c <__aeabi_d2uiz>
 8002d34:	4603      	mov	r3, r0
 8002d36:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio-PID_dist));
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <LeftMotor+0xeb8>)
 8002d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d42:	f7fd faa1 	bl	8000288 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d52:	f7fd fc51 	bl	80005f8 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4916      	ldr	r1, [pc, #88]	; (8002db4 <LeftMotor+0xebc>)
 8002d5c:	680e      	ldr	r6, [r1, #0]
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7fd ff0b 	bl	8000b7c <__aeabi_d2uiz>
 8002d66:	4603      	mov	r3, r0
 8002d68:	63b3      	str	r3, [r6, #56]	; 0x38
 8002d6a:	e0bd      	b.n	8002ee8 <LeftMotor+0xff0>
 8002d6c:	f3af 8000 	nop.w
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	40628ccc 	.word	0x40628ccc
 8002d78:	200003d8 	.word	0x200003d8
 8002d7c:	20000448 	.word	0x20000448
 8002d80:	20000308 	.word	0x20000308
 8002d84:	20000018 	.word	0x20000018
 8002d88:	20000318 	.word	0x20000318
 8002d8c:	40080000 	.word	0x40080000
 8002d90:	20000134 	.word	0x20000134
 8002d94:	20000000 	.word	0x20000000
 8002d98:	200004b8 	.word	0x200004b8
 8002d9c:	3ff00000 	.word	0x3ff00000
 8002da0:	40020000 	.word	0x40020000
 8002da4:	3fe00000 	.word	0x3fe00000
 8002da8:	20000330 	.word	0x20000330
 8002dac:	40240000 	.word	0x40240000
 8002db0:	20000008 	.word	0x20000008
 8002db4:	2000020c 	.word	0x2000020c
				  }

			  }
			  else{
				  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2104      	movs	r1, #4
 8002dbc:	486f      	ldr	r0, [pc, #444]	; (8002f7c <LeftMotor+0x1084>)
 8002dbe:	f002 fa11 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2108      	movs	r1, #8
 8002dc6:	486d      	ldr	r0, [pc, #436]	; (8002f7c <LeftMotor+0x1084>)
 8002dc8:	f002 fa0c 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2120      	movs	r1, #32
 8002dd0:	486a      	ldr	r0, [pc, #424]	; (8002f7c <LeftMotor+0x1084>)
 8002dd2:	f002 fa07 	bl	80051e4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	2110      	movs	r1, #16
 8002dda:	4868      	ldr	r0, [pc, #416]	; (8002f7c <LeftMotor+0x1084>)
 8002ddc:	f002 fa02 	bl	80051e4 <HAL_GPIO_WritePin>

				  if(2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)<10){
 8002de0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fd fb8d 	bl	8000504 <__aeabi_ui2d>
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	4b64      	ldr	r3, [pc, #400]	; (8002f80 <LeftMotor+0x1088>)
 8002df0:	f7fd fa4a 	bl	8000288 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	f7fd fa44 	bl	800028c <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4690      	mov	r8, r2
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e10:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <LeftMotor+0x108c>)
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f7fd fa37 	bl	8000288 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fbe9 	bl	80005f8 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	4b55      	ldr	r3, [pc, #340]	; (8002f88 <LeftMotor+0x1090>)
 8002e34:	f7fd fe52 	bl	8000adc <__aeabi_dcmplt>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d022      	beq.n	8002e84 <LeftMotor+0xf8c>
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*min_pwm_ratio);
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <LeftMotor+0x1094>)
 8002e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e44:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e48:	f7fd fbd6 	bl	80005f8 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	494f      	ldr	r1, [pc, #316]	; (8002f90 <LeftMotor+0x1098>)
 8002e52:	680e      	ldr	r6, [r1, #0]
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7fd fe90 	bl	8000b7c <__aeabi_d2uiz>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*min_pwm_ratio);
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <LeftMotor+0x1094>)
 8002e62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e6a:	f7fd fbc5 	bl	80005f8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4947      	ldr	r1, [pc, #284]	; (8002f90 <LeftMotor+0x1098>)
 8002e74:	680e      	ldr	r6, [r1, #0]
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fe7f 	bl	8000b7c <__aeabi_d2uiz>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	63b3      	str	r3, [r6, #56]	; 0x38
 8002e82:	e031      	b.n	8002ee8 <LeftMotor+0xff0>
				  }
				  else{
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, left_pwm*(min_pwm_ratio+PID_dist));
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <LeftMotor+0x1094>)
 8002e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e8e:	f7fd f9fd 	bl	800028c <__adddf3>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e9e:	f7fd fbab 	bl	80005f8 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	493a      	ldr	r1, [pc, #232]	; (8002f90 <LeftMotor+0x1098>)
 8002ea8:	680e      	ldr	r6, [r1, #0]
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fe65 	bl	8000b7c <__aeabi_d2uiz>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6373      	str	r3, [r6, #52]	; 0x34
					  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, right_pwm*(min_pwm_ratio+PID_dist));
 8002eb6:	4b35      	ldr	r3, [pc, #212]	; (8002f8c <LeftMotor+0x1094>)
 8002eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ebc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec0:	f7fd f9e4 	bl	800028c <__adddf3>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ed0:	f7fd fb92 	bl	80005f8 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	492d      	ldr	r1, [pc, #180]	; (8002f90 <LeftMotor+0x1098>)
 8002eda:	680e      	ldr	r6, [r1, #0]
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd fe4c 	bl	8000b7c <__aeabi_d2uiz>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	63b3      	str	r3, [r6, #56]	; 0x38
				  }
			  }
			  taskEXIT_CRITICAL();
 8002ee8:	f008 fb54 	bl	800b594 <vPortExitCritical>
			  osDelayUntil(pdMS_TO_TICKS(10));
 8002eec:	200a      	movs	r0, #10
 8002eee:	f006 f92c 	bl	800914a <osDelayUntil>
		  while((2*((double)target_is_before - 0.5f)*(target_dist - travel_dist)>0)){
 8002ef2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fb04 	bl	8000504 <__aeabi_ui2d>
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <LeftMotor+0x1088>)
 8002f02:	f7fd f9c1 	bl	8000288 <__aeabi_dsub>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	f7fd f9bb 	bl	800028c <__adddf3>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4690      	mov	r8, r2
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <LeftMotor+0x108c>)
 8002f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f28:	f7fd f9ae 	bl	8000288 <__aeabi_dsub>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4640      	mov	r0, r8
 8002f32:	4649      	mov	r1, r9
 8002f34:	f7fd fb60 	bl	80005f8 <__aeabi_dmul>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f7fd fde6 	bl	8000b18 <__aeabi_dcmpgt>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f47f adaa 	bne.w	8002aa8 <LeftMotor+0xbb0>
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_S*0.5);
////			  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*0.5);
////			  HAL_Delay(1);
////		  }
//	  }
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);		// Sets both wheel to 0 speed
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <LeftMotor+0x1098>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <LeftMotor+0x1098>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2200      	movs	r2, #0
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38
	  Buffer[0] = 'd';		// Sets start of instruction buffer to invalid command so the stm doesn't repeat itself
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <LeftMotor+0x109c>)
 8002f66:	2264      	movs	r2, #100	; 0x64
 8002f68:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3,"R", sizeof("R"), HAL_MAX_DELAY);	// Sends ready signal to RPi
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	2202      	movs	r2, #2
 8002f70:	4909      	ldr	r1, [pc, #36]	; (8002f98 <LeftMotor+0x10a0>)
 8002f72:	480a      	ldr	r0, [pc, #40]	; (8002f9c <LeftMotor+0x10a4>)
 8002f74:	f004 fe03 	bl	8007b7e <HAL_UART_Transmit>
  for(;;){
 8002f78:	f7ff b80d 	b.w	8001f96 <LeftMotor+0x9e>
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	3fe00000 	.word	0x3fe00000
 8002f84:	20000330 	.word	0x20000330
 8002f88:	40240000 	.word	0x40240000
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	2000020c 	.word	0x2000020c
 8002f94:	20000308 	.word	0x20000308
 8002f98:	0800d6fc 	.word	0x0800d6fc
 8002f9c:	20000254 	.word	0x20000254

08002fa0 <GyroFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GyroFunc */
void GyroFunc(void *argument)
{
 8002fa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fa4:	b08e      	sub	sp, #56	; 0x38
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroFunc */
  uint8_t* status = IMU_Initialise(&imu, &hi2c1, &huart3);	// Initialize gyro
 8002faa:	4a45      	ldr	r2, [pc, #276]	; (80030c0 <GyroFunc+0x120>)
 8002fac:	4945      	ldr	r1, [pc, #276]	; (80030c4 <GyroFunc+0x124>)
 8002fae:	4846      	ldr	r0, [pc, #280]	; (80030c8 <GyroFunc+0x128>)
 8002fb0:	f7fd ffd6 	bl	8000f60 <IMU_Initialise>
 8002fb4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint8_t dispBuff[20];

  // Calibrate gyroscope
  taskENTER_CRITICAL();
 8002fb6:	f008 fabd 	bl	800b534 <vPortEnterCritical>
  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 8002fba:	f107 0314 	add.w	r3, r7, #20
 8002fbe:	4943      	ldr	r1, [pc, #268]	; (80030cc <GyroFunc+0x12c>)
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f008 fe03 	bl	800bbcc <siprintf>
  OLED_ShowString(10,30,dispBuff);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	461a      	mov	r2, r3
 8002fcc:	211e      	movs	r1, #30
 8002fce:	200a      	movs	r0, #10
 8002fd0:	f000 fb10 	bl	80035f4 <OLED_ShowString>
//  OLED_Refresh_Gram();
  osDelay(2000);
 8002fd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fd8:	f006 f89c 	bl	8009114 <osDelay>
  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 8002fdc:	ed9f 0b36 	vldr	d0, [pc, #216]	; 80030b8 <GyroFunc+0x118>
 8002fe0:	4839      	ldr	r0, [pc, #228]	; (80030c8 <GyroFunc+0x128>)
 8002fe2:	f7fe fb2f 	bl	8001644 <Gyro_calibrateHeading>
  osDelay(2000);
 8002fe6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002fea:	f006 f893 	bl	8009114 <osDelay>
  taskEXIT_CRITICAL();
 8002fee:	f008 fad1 	bl	800b594 <vPortExitCritical>
  is_calibrated = 1;	// Set finish calibration flag to start running other task
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <GyroFunc+0x130>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
  char sbuf[10];

  int32_t encoder_prev = -1, encoder_cur = -1, dif = 0;
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003008:	213c      	movs	r1, #60	; 0x3c
 800300a:	4832      	ldr	r0, [pc, #200]	; (80030d4 <GyroFunc+0x134>)
 800300c:	f003 ff74 	bl	8006ef8 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  for(;;)
  {
	  // Read gyro value
	  taskENTER_CRITICAL();
 8003010:	f008 fa90 	bl	800b534 <vPortEnterCritical>
	  IMU_GyroReadHeading(&imu);
 8003014:	482c      	ldr	r0, [pc, #176]	; (80030c8 <GyroFunc+0x128>)
 8003016:	f7fe f9bf 	bl	8001398 <IMU_GyroReadHeading>
	  taskEXIT_CRITICAL();
 800301a:	f008 fabb 	bl	800b594 <vPortExitCritical>

	  // Update heading values
	  current_gyro = current_gyro + imu.gyro[2];		// Manual gyro offset
 800301e:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <GyroFunc+0x128>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa90 	bl	8000548 <__aeabi_f2d>
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <GyroFunc+0x138>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd f92d 	bl	800028c <__adddf3>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4928      	ldr	r1, [pc, #160]	; (80030d8 <GyroFunc+0x138>)
 8003038:	e9c1 2300 	strd	r2, r3, [r1]
	  current_angle = current_gyro*1.0f;		// Increase if robot turns too much
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <GyroFunc+0x138>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	4926      	ldr	r1, [pc, #152]	; (80030dc <GyroFunc+0x13c>)
 8003044:	e9c1 2300 	strd	r2, r3, [r1]

	  // Check if it's the first time running
	  if(encoder_prev == -1 || encoder_cur == -1){
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d003      	beq.n	8003058 <GyroFunc+0xb8>
 8003050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d106      	bne.n	8003066 <GyroFunc+0xc6>
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <GyroFunc+0x134>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
		  encoder_prev = encoder_cur;
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
 8003064:	e0b3      	b.n	80031ce <GyroFunc+0x22e>
	  }
	  else{
		  encoder_prev = encoder_cur;
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = __HAL_TIM_GET_COUNTER(&htim2);
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <GyroFunc+0x134>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	633b      	str	r3, [r7, #48]	; 0x30
		  // Deal with the encoder value wrapping around at 65535
		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <GyroFunc+0x134>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b10      	cmp	r3, #16
 800307e:	d110      	bne.n	80030a2 <GyroFunc+0x102>
			  if(encoder_cur <= encoder_prev){
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	429a      	cmp	r2, r3
 8003086:	dc04      	bgt.n	8003092 <GyroFunc+0xf2>
				  dif = encoder_prev - encoder_cur;
 8003088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	e02d      	b.n	80030ee <GyroFunc+0x14e>
			  }
			  else{
				  dif = encoder_prev + (65535 - encoder_cur);
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003098:	33ff      	adds	r3, #255	; 0xff
 800309a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800309c:	4413      	add	r3, r2
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a0:	e025      	b.n	80030ee <GyroFunc+0x14e>
			  }
		  }
		  else{
			  if(encoder_cur >= encoder_prev){
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	429a      	cmp	r2, r3
 80030a8:	db1a      	blt.n	80030e0 <GyroFunc+0x140>
				  dif = encoder_prev - encoder_cur;
 80030aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b2:	e01c      	b.n	80030ee <GyroFunc+0x14e>
 80030b4:	f3af 8000 	nop.w
 80030b8:	00000000 	.word	0x00000000
 80030bc:	40350000 	.word	0x40350000
 80030c0:	20000254 	.word	0x20000254
 80030c4:	200000e0 	.word	0x200000e0
 80030c8:	20000344 	.word	0x20000344
 80030cc:	0800d700 	.word	0x0800d700
 80030d0:	20000328 	.word	0x20000328
 80030d4:	2000017c 	.word	0x2000017c
 80030d8:	20000320 	.word	0x20000320
 80030dc:	20000318 	.word	0x20000318
			  }
			  else{
				  dif = encoder_prev - (65535 + encoder_cur);
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80030e6:	33ff      	adds	r3, #255	; 0xff
 80030e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
			  }
		  }
		  encoder_position = encoder_position + dif*cos((current_angle - target_angle)*(M_PI / 180.0));
 80030ee:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <GyroFunc+0x330>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa16 	bl	8000524 <__aeabi_i2d>
 80030f8:	4604      	mov	r4, r0
 80030fa:	460d      	mov	r5, r1
 80030fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fe:	f7fd fa11 	bl	8000524 <__aeabi_i2d>
 8003102:	4680      	mov	r8, r0
 8003104:	4689      	mov	r9, r1
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <GyroFunc+0x334>)
 8003108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310c:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <GyroFunc+0x338>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd f8b9 	bl	8000288 <__aeabi_dsub>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	a366      	add	r3, pc, #408	; (adr r3, 80032b8 <GyroFunc+0x318>)
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f7fd fa68 	bl	80005f8 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b17 	vmov	d7, r2, r3
 8003130:	eeb0 0a47 	vmov.f32	s0, s14
 8003134:	eef0 0a67 	vmov.f32	s1, s15
 8003138:	f009 f9b2 	bl	800c4a0 <cos>
 800313c:	ec53 2b10 	vmov	r2, r3, d0
 8003140:	4640      	mov	r0, r8
 8003142:	4649      	mov	r1, r9
 8003144:	f7fd fa58 	bl	80005f8 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4620      	mov	r0, r4
 800314e:	4629      	mov	r1, r5
 8003150:	f7fd f89c 	bl	800028c <__adddf3>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	f7fd fce6 	bl	8000b2c <__aeabi_d2iz>
 8003160:	4603      	mov	r3, r0
 8003162:	4a5b      	ldr	r2, [pc, #364]	; (80032d0 <GyroFunc+0x330>)
 8003164:	6013      	str	r3, [r2, #0]
		  straight_error = straight_error + dif*sin((current_angle - target_angle)*(M_PI / 180.0));
 8003166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003168:	f7fd f9dc 	bl	8000524 <__aeabi_i2d>
 800316c:	4604      	mov	r4, r0
 800316e:	460d      	mov	r5, r1
 8003170:	4b58      	ldr	r3, [pc, #352]	; (80032d4 <GyroFunc+0x334>)
 8003172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003176:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <GyroFunc+0x338>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd f884 	bl	8000288 <__aeabi_dsub>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	a34b      	add	r3, pc, #300	; (adr r3, 80032b8 <GyroFunc+0x318>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd fa33 	bl	80005f8 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	ec43 2b17 	vmov	d7, r2, r3
 800319a:	eeb0 0a47 	vmov.f32	s0, s14
 800319e:	eef0 0a67 	vmov.f32	s1, s15
 80031a2:	f009 f9d1 	bl	800c548 <sin>
 80031a6:	ec53 2b10 	vmov	r2, r3, d0
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f7fd fa23 	bl	80005f8 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	4b48      	ldr	r3, [pc, #288]	; (80032dc <GyroFunc+0x33c>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f7fd f864 	bl	800028c <__adddf3>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4944      	ldr	r1, [pc, #272]	; (80032dc <GyroFunc+0x33c>)
 80031ca:	e9c1 2300 	strd	r2, r3, [r1]
	  }
//	  travel_dist = (double)encoder_position * 0.01310615989;		// Edit constant to calibrate straight line distance
	  travel_dist = (double)encoder_position * 0.01308996939;
 80031ce:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <GyroFunc+0x330>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9a6 	bl	8000524 <__aeabi_i2d>
 80031d8:	a339      	add	r3, pc, #228	; (adr r3, 80032c0 <GyroFunc+0x320>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd fa0b 	bl	80005f8 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	493e      	ldr	r1, [pc, #248]	; (80032e0 <GyroFunc+0x340>)
 80031e8:	e9c1 2300 	strd	r2, r3, [r1]
	  sprintf(dispBuff, "%5d        ", current_angle*1000);	// Prints current heading angle (x1000)
 80031ec:	4b39      	ldr	r3, [pc, #228]	; (80032d4 <GyroFunc+0x334>)
 80031ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <GyroFunc+0x344>)
 80031f8:	f7fd f9fe 	bl	80005f8 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	f107 0014 	add.w	r0, r7, #20
 8003204:	4938      	ldr	r1, [pc, #224]	; (80032e8 <GyroFunc+0x348>)
 8003206:	f008 fce1 	bl	800bbcc <siprintf>
	  OLED_ShowString(10,30,dispBuff);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	461a      	mov	r2, r3
 8003210:	211e      	movs	r1, #30
 8003212:	200a      	movs	r0, #10
 8003214:	f000 f9ee 	bl	80035f4 <OLED_ShowString>

	  if(!HAL_GPIO_ReadPin(SW_GPIO_Port,SW_Pin)){
 8003218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321c:	4833      	ldr	r0, [pc, #204]	; (80032ec <GyroFunc+0x34c>)
 800321e:	f001 ffc9 	bl	80051b4 <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d140      	bne.n	80032aa <GyroFunc+0x30a>
		  encoder_position = 0;
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <GyroFunc+0x330>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
		  travel_dist = 0;
 800322e:	492c      	ldr	r1, [pc, #176]	; (80032e0 <GyroFunc+0x340>)
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9c1 2300 	strd	r2, r3, [r1]
		  encoder_prev = -1;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295
 8003240:	637b      	str	r3, [r7, #52]	; 0x34
		  encoder_cur = -1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
		  dif = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  current_gyro = 0;
 800324c:	4928      	ldr	r1, [pc, #160]	; (80032f0 <GyroFunc+0x350>)
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9c1 2300 	strd	r2, r3, [r1]
		  current_angle = 0;
 800325a:	491e      	ldr	r1, [pc, #120]	; (80032d4 <GyroFunc+0x334>)
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
		  t_heading = 0;
 8003268:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <GyroFunc+0x354>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
		  taskENTER_CRITICAL();
 800326e:	f008 f961 	bl	800b534 <vPortEnterCritical>
		  sprintf(dispBuff, "Calibr Gyro..");	// Prints current heading angle (x1000)
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4920      	ldr	r1, [pc, #128]	; (80032f8 <GyroFunc+0x358>)
 8003278:	4618      	mov	r0, r3
 800327a:	f008 fca7 	bl	800bbcc <siprintf>
		  OLED_ShowString(10,30,dispBuff);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	461a      	mov	r2, r3
 8003284:	211e      	movs	r1, #30
 8003286:	200a      	movs	r0, #10
 8003288:	f000 f9b4 	bl	80035f4 <OLED_ShowString>
		  osDelay(2000);
 800328c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003290:	f005 ff40 	bl	8009114 <osDelay>
		  Gyro_calibrateHeading(&imu, pdMS_TO_TICKS(21));	// Sample gyro data every 21ms for 1024 samples and use as offset
 8003294:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80032c8 <GyroFunc+0x328>
 8003298:	4818      	ldr	r0, [pc, #96]	; (80032fc <GyroFunc+0x35c>)
 800329a:	f7fe f9d3 	bl	8001644 <Gyro_calibrateHeading>
		  osDelay(2000);
 800329e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032a2:	f005 ff37 	bl	8009114 <osDelay>
		  taskEXIT_CRITICAL();
 80032a6:	f008 f975 	bl	800b594 <vPortExitCritical>
////	  sprintf(sbuf, "%9ul", (DWT->CYCCNT));
////	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 9, HAL_MAX_DELAY);
//	  sprintf(sbuf, "\r\n");
//	  HAL_UART_Transmit(&huart3, (uint8_t *)sbuf, 2, HAL_MAX_DELAY);

      osDelayUntil(pdMS_TO_TICKS(10));
 80032aa:	200a      	movs	r0, #10
 80032ac:	f005 ff4d 	bl	800914a <osDelayUntil>
	  taskENTER_CRITICAL();
 80032b0:	e6ae      	b.n	8003010 <GyroFunc+0x70>
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	a2529d39 	.word	0xa2529d39
 80032bc:	3f91df46 	.word	0x3f91df46
 80032c0:	f37c4b99 	.word	0xf37c4b99
 80032c4:	3f8acee9 	.word	0x3f8acee9
 80032c8:	00000000 	.word	0x00000000
 80032cc:	40350000 	.word	0x40350000
 80032d0:	20000340 	.word	0x20000340
 80032d4:	20000318 	.word	0x20000318
 80032d8:	20000018 	.word	0x20000018
 80032dc:	20000338 	.word	0x20000338
 80032e0:	20000330 	.word	0x20000330
 80032e4:	408f4000 	.word	0x408f4000
 80032e8:	0800d710 	.word	0x0800d710
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	20000320 	.word	0x20000320
 80032f4:	20000310 	.word	0x20000310
 80032f8:	0800d700 	.word	0x0800d700
 80032fc:	20000344 	.word	0x20000344

08003300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003304:	b672      	cpsid	i
}
 8003306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003308:	e7fe      	b.n	8003308 <Error_Handler+0x8>
	...

0800330c <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	460a      	mov	r2, r1
 8003316:	71fb      	strb	r3, [r7, #7]
 8003318:	4613      	mov	r3, r2
 800331a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 800331c:	79bb      	ldrb	r3, [r7, #6]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8003322:	2201      	movs	r2, #1
 8003324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003328:	481c      	ldr	r0, [pc, #112]	; (800339c <OLED_WR_Byte+0x90>)
 800332a:	f001 ff5b 	bl	80051e4 <HAL_GPIO_WritePin>
 800332e:	e005      	b.n	800333c <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003336:	4819      	ldr	r0, [pc, #100]	; (800339c <OLED_WR_Byte+0x90>)
 8003338:	f001 ff54 	bl	80051e4 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 800333c:	2300      	movs	r3, #0
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e01e      	b.n	8003380 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 8003342:	2200      	movs	r2, #0
 8003344:	2120      	movs	r1, #32
 8003346:	4815      	ldr	r0, [pc, #84]	; (800339c <OLED_WR_Byte+0x90>)
 8003348:	f001 ff4c 	bl	80051e4 <HAL_GPIO_WritePin>
		if(dat & 0x80)
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da05      	bge.n	8003360 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003354:	2201      	movs	r2, #1
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	4810      	ldr	r0, [pc, #64]	; (800339c <OLED_WR_Byte+0x90>)
 800335a:	f001 ff43 	bl	80051e4 <HAL_GPIO_WritePin>
 800335e:	e004      	b.n	800336a <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 8003360:	2200      	movs	r2, #0
 8003362:	2140      	movs	r1, #64	; 0x40
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <OLED_WR_Byte+0x90>)
 8003366:	f001 ff3d 	bl	80051e4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800336a:	2201      	movs	r2, #1
 800336c:	2120      	movs	r1, #32
 800336e:	480b      	ldr	r0, [pc, #44]	; (800339c <OLED_WR_Byte+0x90>)
 8003370:	f001 ff38 	bl	80051e4 <HAL_GPIO_WritePin>
		dat <<= 1;
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	3301      	adds	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b07      	cmp	r3, #7
 8003384:	d9dd      	bls.n	8003342 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8003386:	2201      	movs	r2, #1
 8003388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <OLED_WR_Byte+0x90>)
 800338e:	f001 ff29 	bl	80051e4 <HAL_GPIO_WritePin>
} 
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000

080033a0 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	71fb      	strb	r3, [r7, #7]
 80033aa:	e026      	b.n	80033fa <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	3b50      	subs	r3, #80	; 0x50
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2100      	movs	r1, #0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ffa9 	bl	800330c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 80033ba:	2100      	movs	r1, #0
 80033bc:	2000      	movs	r0, #0
 80033be:	f7ff ffa5 	bl	800330c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 80033c2:	2100      	movs	r1, #0
 80033c4:	2010      	movs	r0, #16
 80033c6:	f7ff ffa1 	bl	800330c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80033ca:	2300      	movs	r3, #0
 80033cc:	71bb      	strb	r3, [r7, #6]
 80033ce:	e00d      	b.n	80033ec <OLED_Refresh_Gram+0x4c>
 80033d0:	79ba      	ldrb	r2, [r7, #6]
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	490d      	ldr	r1, [pc, #52]	; (800340c <OLED_Refresh_Gram+0x6c>)
 80033d6:	00d2      	lsls	r2, r2, #3
 80033d8:	440a      	add	r2, r1
 80033da:	4413      	add	r3, r2
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff93 	bl	800330c <OLED_WR_Byte>
 80033e6:	79bb      	ldrb	r3, [r7, #6]
 80033e8:	3301      	adds	r3, #1
 80033ea:	71bb      	strb	r3, [r7, #6]
 80033ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	daed      	bge.n	80033d0 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	3301      	adds	r3, #1
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	d9d5      	bls.n	80033ac <OLED_Refresh_Gram+0xc>
	}
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200004c0 	.word	0x200004c0

08003410 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003416:	2300      	movs	r3, #0
 8003418:	71fb      	strb	r3, [r7, #7]
 800341a:	e014      	b.n	8003446 <OLED_Clear+0x36>
 800341c:	2300      	movs	r3, #0
 800341e:	71bb      	strb	r3, [r7, #6]
 8003420:	e00a      	b.n	8003438 <OLED_Clear+0x28>
 8003422:	79ba      	ldrb	r2, [r7, #6]
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	490c      	ldr	r1, [pc, #48]	; (8003458 <OLED_Clear+0x48>)
 8003428:	00d2      	lsls	r2, r2, #3
 800342a:	440a      	add	r2, r1
 800342c:	4413      	add	r3, r2
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	79bb      	ldrb	r3, [r7, #6]
 8003434:	3301      	adds	r3, #1
 8003436:	71bb      	strb	r3, [r7, #6]
 8003438:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	daf0      	bge.n	8003422 <OLED_Clear+0x12>
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	3301      	adds	r3, #1
 8003444:	71fb      	strb	r3, [r7, #7]
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	2b07      	cmp	r3, #7
 800344a:	d9e7      	bls.n	800341c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800344c:	f7ff ffa8 	bl	80033a0 <OLED_Refresh_Gram>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200004c0 	.word	0x200004c0

0800345c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
 8003466:	460b      	mov	r3, r1
 8003468:	71bb      	strb	r3, [r7, #6]
 800346a:	4613      	mov	r3, r2
 800346c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db41      	blt.n	80034fe <OLED_DrawPoint+0xa2>
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	2b3f      	cmp	r3, #63	; 0x3f
 800347e:	d83e      	bhi.n	80034fe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003480:	79bb      	ldrb	r3, [r7, #6]
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f1c3 0307 	rsb	r3, r3, #7
 800348a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800348c:	79bb      	ldrb	r3, [r7, #6]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003494:	7b7b      	ldrb	r3, [r7, #13]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2201      	movs	r2, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80034a2:	797b      	ldrb	r3, [r7, #5]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <OLED_DrawPoint+0x72>
 80034a8:	79fa      	ldrb	r2, [r7, #7]
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	4917      	ldr	r1, [pc, #92]	; (800350c <OLED_DrawPoint+0xb0>)
 80034ae:	00d2      	lsls	r2, r2, #3
 80034b0:	440a      	add	r2, r1
 80034b2:	4413      	add	r3, r2
 80034b4:	7818      	ldrb	r0, [r3, #0]
 80034b6:	79fa      	ldrb	r2, [r7, #7]
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	7bf9      	ldrb	r1, [r7, #15]
 80034bc:	4301      	orrs	r1, r0
 80034be:	b2c8      	uxtb	r0, r1
 80034c0:	4912      	ldr	r1, [pc, #72]	; (800350c <OLED_DrawPoint+0xb0>)
 80034c2:	00d2      	lsls	r2, r2, #3
 80034c4:	440a      	add	r2, r1
 80034c6:	4413      	add	r3, r2
 80034c8:	4602      	mov	r2, r0
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e018      	b.n	8003500 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80034ce:	79fa      	ldrb	r2, [r7, #7]
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	490e      	ldr	r1, [pc, #56]	; (800350c <OLED_DrawPoint+0xb0>)
 80034d4:	00d2      	lsls	r2, r2, #3
 80034d6:	440a      	add	r2, r1
 80034d8:	4413      	add	r3, r2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25a      	sxtb	r2, r3
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	4013      	ands	r3, r2
 80034e8:	b259      	sxtb	r1, r3
 80034ea:	79fa      	ldrb	r2, [r7, #7]
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	b2c8      	uxtb	r0, r1
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <OLED_DrawPoint+0xb0>)
 80034f2:	00d2      	lsls	r2, r2, #3
 80034f4:	440a      	add	r2, r1
 80034f6:	4413      	add	r3, r2
 80034f8:	4602      	mov	r2, r0
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	e000      	b.n	8003500 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80034fe:	bf00      	nop
}
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	200004c0 	.word	0x200004c0

08003510 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	4604      	mov	r4, r0
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	71fb      	strb	r3, [r7, #7]
 8003522:	4603      	mov	r3, r0
 8003524:	71bb      	strb	r3, [r7, #6]
 8003526:	460b      	mov	r3, r1
 8003528:	717b      	strb	r3, [r7, #5]
 800352a:	4613      	mov	r3, r2
 800352c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003532:	797b      	ldrb	r3, [r7, #5]
 8003534:	3b20      	subs	r3, #32
 8003536:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003538:	2300      	movs	r3, #0
 800353a:	73bb      	strb	r3, [r7, #14]
 800353c:	e04d      	b.n	80035da <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800353e:	793b      	ldrb	r3, [r7, #4]
 8003540:	2b0c      	cmp	r3, #12
 8003542:	d10b      	bne.n	800355c <OLED_ShowChar+0x4c>
 8003544:	797a      	ldrb	r2, [r7, #5]
 8003546:	7bb9      	ldrb	r1, [r7, #14]
 8003548:	4828      	ldr	r0, [pc, #160]	; (80035ec <OLED_ShowChar+0xdc>)
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4403      	add	r3, r0
 8003554:	440b      	add	r3, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e007      	b.n	800356c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800355c:	797a      	ldrb	r2, [r7, #5]
 800355e:	7bbb      	ldrb	r3, [r7, #14]
 8003560:	4923      	ldr	r1, [pc, #140]	; (80035f0 <OLED_ShowChar+0xe0>)
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	440a      	add	r2, r1
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800356c:	2300      	movs	r3, #0
 800356e:	737b      	strb	r3, [r7, #13]
 8003570:	e02d      	b.n	80035ce <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da07      	bge.n	800358a <OLED_ShowChar+0x7a>
 800357a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800357e:	79b9      	ldrb	r1, [r7, #6]
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff6a 	bl	800345c <OLED_DrawPoint>
 8003588:	e00c      	b.n	80035a4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800358a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf0c      	ite	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	2300      	movne	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	79b9      	ldrb	r1, [r7, #6]
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff5c 	bl	800345c <OLED_DrawPoint>
			temp<<=1;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
			y++;
 80035aa:	79bb      	ldrb	r3, [r7, #6]
 80035ac:	3301      	adds	r3, #1
 80035ae:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80035b0:	79ba      	ldrb	r2, [r7, #6]
 80035b2:	7b3b      	ldrb	r3, [r7, #12]
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	793b      	ldrb	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d105      	bne.n	80035c8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80035bc:	7b3b      	ldrb	r3, [r7, #12]
 80035be:	71bb      	strb	r3, [r7, #6]
				x++;
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	3301      	adds	r3, #1
 80035c4:	71fb      	strb	r3, [r7, #7]
				break;
 80035c6:	e005      	b.n	80035d4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80035c8:	7b7b      	ldrb	r3, [r7, #13]
 80035ca:	3301      	adds	r3, #1
 80035cc:	737b      	strb	r3, [r7, #13]
 80035ce:	7b7b      	ldrb	r3, [r7, #13]
 80035d0:	2b07      	cmp	r3, #7
 80035d2:	d9ce      	bls.n	8003572 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	3301      	adds	r3, #1
 80035d8:	73bb      	strb	r3, [r7, #14]
 80035da:	7bba      	ldrb	r2, [r7, #14]
 80035dc:	793b      	ldrb	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3ad      	bcc.n	800353e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	0800d7c4 	.word	0x0800d7c4
 80035f0:	0800dc38 	.word	0x0800dc38

080035f4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	4603      	mov	r3, r0
 80035fc:	603a      	str	r2, [r7, #0]
 80035fe:	71fb      	strb	r3, [r7, #7]
 8003600:	460b      	mov	r3, r1
 8003602:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8003604:	e01f      	b.n	8003646 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b7a      	cmp	r3, #122	; 0x7a
 800360a:	d904      	bls.n	8003616 <OLED_ShowString+0x22>
 800360c:	2300      	movs	r3, #0
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	79bb      	ldrb	r3, [r7, #6]
 8003612:	3310      	adds	r3, #16
 8003614:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8003616:	79bb      	ldrb	r3, [r7, #6]
 8003618:	2b3a      	cmp	r3, #58	; 0x3a
 800361a:	d905      	bls.n	8003628 <OLED_ShowString+0x34>
 800361c:	2300      	movs	r3, #0
 800361e:	71fb      	strb	r3, [r7, #7]
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	71bb      	strb	r3, [r7, #6]
 8003624:	f7ff fef4 	bl	8003410 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	79b9      	ldrb	r1, [r7, #6]
 800362e:	79f8      	ldrb	r0, [r7, #7]
 8003630:	2301      	movs	r3, #1
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	230c      	movs	r3, #12
 8003636:	f7ff ff6b 	bl	8003510 <OLED_ShowChar>
        x+=8;
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	3308      	adds	r3, #8
 800363e:	71fb      	strb	r3, [r7, #7]
        p++;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1db      	bne.n	8003606 <OLED_ShowString+0x12>
    }  
}	 
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <OLED_Init>:

void OLED_Init(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800365c:	f002 fdb6 	bl	80061cc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8003660:	4b41      	ldr	r3, [pc, #260]	; (8003768 <OLED_Init+0x110>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4a40      	ldr	r2, [pc, #256]	; (8003768 <OLED_Init+0x110>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6713      	str	r3, [r2, #112]	; 0x70
 800366c:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <OLED_Init+0x110>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a3d      	ldr	r2, [pc, #244]	; (8003768 <OLED_Init+0x110>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8003678:	f002 fdbc 	bl	80061f4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800367c:	2200      	movs	r2, #0
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	483a      	ldr	r0, [pc, #232]	; (800376c <OLED_Init+0x114>)
 8003682:	f001 fdaf 	bl	80051e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003686:	2064      	movs	r0, #100	; 0x64
 8003688:	f000 fec0 	bl	800440c <HAL_Delay>
	OLED_RST_Set();
 800368c:	2201      	movs	r2, #1
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	4836      	ldr	r0, [pc, #216]	; (800376c <OLED_Init+0x114>)
 8003692:	f001 fda7 	bl	80051e4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8003696:	2100      	movs	r1, #0
 8003698:	20ae      	movs	r0, #174	; 0xae
 800369a:	f7ff fe37 	bl	800330c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800369e:	2100      	movs	r1, #0
 80036a0:	20d5      	movs	r0, #213	; 0xd5
 80036a2:	f7ff fe33 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80036a6:	2100      	movs	r1, #0
 80036a8:	2050      	movs	r0, #80	; 0x50
 80036aa:	f7ff fe2f 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80036ae:	2100      	movs	r1, #0
 80036b0:	20a8      	movs	r0, #168	; 0xa8
 80036b2:	f7ff fe2b 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80036b6:	2100      	movs	r1, #0
 80036b8:	203f      	movs	r0, #63	; 0x3f
 80036ba:	f7ff fe27 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80036be:	2100      	movs	r1, #0
 80036c0:	20d3      	movs	r0, #211	; 0xd3
 80036c2:	f7ff fe23 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80036c6:	2100      	movs	r1, #0
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff fe1f 	bl	800330c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80036ce:	2100      	movs	r1, #0
 80036d0:	2040      	movs	r0, #64	; 0x40
 80036d2:	f7ff fe1b 	bl	800330c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80036d6:	2100      	movs	r1, #0
 80036d8:	208d      	movs	r0, #141	; 0x8d
 80036da:	f7ff fe17 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80036de:	2100      	movs	r1, #0
 80036e0:	2014      	movs	r0, #20
 80036e2:	f7ff fe13 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80036e6:	2100      	movs	r1, #0
 80036e8:	2020      	movs	r0, #32
 80036ea:	f7ff fe0f 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80036ee:	2100      	movs	r1, #0
 80036f0:	2002      	movs	r0, #2
 80036f2:	f7ff fe0b 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80036f6:	2100      	movs	r1, #0
 80036f8:	20a1      	movs	r0, #161	; 0xa1
 80036fa:	f7ff fe07 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80036fe:	2100      	movs	r1, #0
 8003700:	20c0      	movs	r0, #192	; 0xc0
 8003702:	f7ff fe03 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8003706:	2100      	movs	r1, #0
 8003708:	20da      	movs	r0, #218	; 0xda
 800370a:	f7ff fdff 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800370e:	2100      	movs	r1, #0
 8003710:	2012      	movs	r0, #18
 8003712:	f7ff fdfb 	bl	800330c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8003716:	2100      	movs	r1, #0
 8003718:	2081      	movs	r0, #129	; 0x81
 800371a:	f7ff fdf7 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800371e:	2100      	movs	r1, #0
 8003720:	20ef      	movs	r0, #239	; 0xef
 8003722:	f7ff fdf3 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8003726:	2100      	movs	r1, #0
 8003728:	20d9      	movs	r0, #217	; 0xd9
 800372a:	f7ff fdef 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800372e:	2100      	movs	r1, #0
 8003730:	20f1      	movs	r0, #241	; 0xf1
 8003732:	f7ff fdeb 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8003736:	2100      	movs	r1, #0
 8003738:	20db      	movs	r0, #219	; 0xdb
 800373a:	f7ff fde7 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800373e:	2100      	movs	r1, #0
 8003740:	2030      	movs	r0, #48	; 0x30
 8003742:	f7ff fde3 	bl	800330c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8003746:	2100      	movs	r1, #0
 8003748:	20a4      	movs	r0, #164	; 0xa4
 800374a:	f7ff fddf 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800374e:	2100      	movs	r1, #0
 8003750:	20a6      	movs	r0, #166	; 0xa6
 8003752:	f7ff fddb 	bl	800330c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8003756:	2100      	movs	r1, #0
 8003758:	20af      	movs	r0, #175	; 0xaf
 800375a:	f7ff fdd7 	bl	800330c <OLED_WR_Byte>
	OLED_Clear(); 
 800375e:	f7ff fe57 	bl	8003410 <OLED_Clear>
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	40021000 	.word	0x40021000

08003770 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80037a0:	f7fd f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80037b6:	e011      	b.n	80037dc <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80037c4:	f7fd f98a 	bl	8000adc <__aeabi_dcmplt>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <PID_Init+0x60>
}
 80037ce:	e005      	b.n	80037dc <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	0000      	movs	r0, r0
	...

080037e8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08a      	sub	sp, #40	; 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6278      	str	r0, [r7, #36]	; 0x24
 80037f0:	6239      	str	r1, [r7, #32]
 80037f2:	61fa      	str	r2, [r7, #28]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80037fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80037fe:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2200      	movs	r2, #0
 8003818:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800381a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003870 <PID+0x88>
 800381e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8003878 <PID+0x90>
 8003822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003824:	f000 f934 	bl	8003a90 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2264      	movs	r2, #100	; 0x64
 800382c:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800382e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003832:	4619      	mov	r1, r3
 8003834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003836:	f000 fa41 	bl	8003cbc <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800383a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800383e:	4619      	mov	r1, r3
 8003840:	ed97 2b00 	vldr	d2, [r7]
 8003844:	ed97 1b02 	vldr	d1, [r7, #8]
 8003848:	ed97 0b04 	vldr	d0, [r7, #16]
 800384c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800384e:	f000 f98d 	bl	8003b6c <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003852:	f000 fdcf 	bl	80043f4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	1ad2      	subs	r2, r2, r3
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	605a      	str	r2, [r3, #4]
	
}
 8003862:	bf00      	nop
 8003864:	3728      	adds	r7, #40	; 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	f3af 8000 	nop.w
 8003870:	00000000 	.word	0x00000000
 8003874:	406fe000 	.word	0x406fe000
	...

08003880 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8003880:	b5b0      	push	{r4, r5, r7, lr}
 8003882:	b08c      	sub	sp, #48	; 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <PID_Compute+0x14>
	{
		return _FALSE;
 8003890:	2300      	movs	r3, #0
 8003892:	e0db      	b.n	8003a4c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003894:	f000 fdae 	bl	80043f4 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	f0c0 80cd 	bcc.w	8003a4a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c8:	f7fc fcde 	bl	8000288 <__aeabi_dsub>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80038da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038de:	f7fc fcd3 	bl	8000288 <__aeabi_dsub>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80038f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038fa:	f7fc fe7d 	bl	80005f8 <__aeabi_dmul>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fc fcc1 	bl	800028c <__adddf3>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d114      	bne.n	8003946 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392c:	f7fc fe64 	bl	80005f8 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fc fca6 	bl	8000288 <__aeabi_dsub>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003952:	f7fd f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003968:	e010      	b.n	800398c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003976:	f7fd f8b1 	bl	8000adc <__aeabi_dcmplt>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800399a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800399e:	f7fc fe2b 	bl	80005f8 <__aeabi_dmul>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80039aa:	e005      	b.n	80039b8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039c8:	f7fc fe16 	bl	80005f8 <__aeabi_dmul>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4620      	mov	r0, r4
 80039d2:	4629      	mov	r1, r5
 80039d4:	f7fc fc58 	bl	8000288 <__aeabi_dsub>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039e0:	f7fc fc54 	bl	800028c <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80039f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f6:	f7fd f88f 	bl	8000b18 <__aeabi_dcmpgt>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003a0a:	e00e      	b.n	8003a2a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a16:	f7fd f861 	bl	8000adc <__aeabi_dcmplt>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003a26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a32:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a3c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8003a4a:	2300      	movs	r3, #0
	}
	
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3730      	adds	r7, #48	; 0x30
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdb0      	pop	{r4, r5, r7, pc}

08003a54 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <PID_SetMode+0x2e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe77 	bl	8003770 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	705a      	strb	r2, [r3, #1]
	
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6178      	str	r0, [r7, #20]
 8003a98:	ed87 0b02 	vstr	d0, [r7, #8]
 8003a9c:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa8:	f7fd f82c 	bl	8000b04 <__aeabi_dcmpge>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d158      	bne.n	8003b64 <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04b      	beq.n	8003b66 <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003adc:	f7fd f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003af0:	e9c1 2300 	strd	r2, r3, [r1]
 8003af4:	e012      	b.n	8003b1c <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b04:	f7fc ffea 	bl	8000adc <__aeabi_dcmplt>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b18:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003b28:	f7fc fff6 	bl	8000b18 <__aeabi_dcmpgt>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003b3e:	e012      	b.n	8003b66 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b4c:	f7fc ffc6 	bl	8000adc <__aeabi_dcmplt>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003b62:	e000      	b.n	8003b66 <PID_SetOutputLimits+0xd6>
		return;
 8003b64:	bf00      	nop
		}
		else { }
		
	}
	
}
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	61f8      	str	r0, [r7, #28]
 8003b74:	ed87 0b04 	vstr	d0, [r7, #16]
 8003b78:	ed87 1b02 	vstr	d1, [r7, #8]
 8003b7c:	ed87 2b00 	vstr	d2, [r7]
 8003b80:	460b      	mov	r3, r1
 8003b82:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b90:	f7fc ffa4 	bl	8000adc <__aeabi_dcmplt>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8089 	bne.w	8003cae <PID_SetTunings2+0x142>
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ba8:	f7fc ff98 	bl	8000adc <__aeabi_dcmplt>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d17d      	bne.n	8003cae <PID_SetTunings2+0x142>
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bbe:	f7fc ff8d 	bl	8000adc <__aeabi_dcmplt>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d172      	bne.n	8003cae <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	7efa      	ldrb	r2, [r7, #27]
 8003bcc:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003bce:	7efb      	ldrb	r3, [r7, #27]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003be0:	69f9      	ldr	r1, [r7, #28]
 8003be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003be6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003bf4:	69f9      	ldr	r1, [r7, #28]
 8003bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bfa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc fc7e 	bl	8000504 <__aeabi_ui2d>
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <PID_SetTunings2+0x14c>)
 8003c0e:	f7fc fe1d 	bl	800084c <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8003c1a:	69f9      	ldr	r1, [r7, #28]
 8003c1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c20:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c2c:	f7fc fce4 	bl	80005f8 <__aeabi_dmul>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	69f9      	ldr	r1, [r7, #28]
 8003c36:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c42:	f7fc fe03 	bl	800084c <__aeabi_ddiv>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	69f9      	ldr	r1, [r7, #28]
 8003c4c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d12b      	bne.n	8003cb0 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f7fc fb0f 	bl	8000288 <__aeabi_dsub>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	69f9      	ldr	r1, [r7, #28]
 8003c70:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f7fc fb01 	bl	8000288 <__aeabi_dsub>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	69f9      	ldr	r1, [r7, #28]
 8003c8c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003c96:	f04f 0000 	mov.w	r0, #0
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	f7fc faf3 	bl	8000288 <__aeabi_dsub>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003cac:	e000      	b.n	8003cb0 <PID_SetTunings2+0x144>
		return;
 8003cae:	bf00      	nop
		
	}
	
}
 8003cb0:	3728      	adds	r7, #40	; 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	408f4000 	.word	0x408f4000

08003cbc <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d02e      	beq.n	8003d2e <PID_SetControllerDirection+0x72>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d029      	beq.n	8003d2e <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003ce0:	f04f 0000 	mov.w	r0, #0
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	f7fc face 	bl	8000288 <__aeabi_dsub>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	f7fc fac0 	bl	8000288 <__aeabi_dsub>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	f7fc fab2 	bl	8000288 <__aeabi_dsub>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	70da      	strb	r2, [r3, #3]
	
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd2e      	ble.n	8003daa <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f7fc fbe9 	bl	8000524 <__aeabi_i2d>
 8003d52:	4604      	mov	r4, r0
 8003d54:	460d      	mov	r5, r1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fbd2 	bl	8000504 <__aeabi_ui2d>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4620      	mov	r0, r4
 8003d66:	4629      	mov	r1, r5
 8003d68:	f7fc fd70 	bl	800084c <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7e:	f7fc fc3b 	bl	80005f8 <__aeabi_dmul>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d96:	f7fc fd59 	bl	800084c <__aeabi_ddiv>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_MspInit+0x54>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <HAL_MspInit+0x54>)
 8003dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <HAL_MspInit+0x54>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_MspInit+0x54>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <HAL_MspInit+0x54>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <HAL_MspInit+0x54>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	210f      	movs	r1, #15
 8003df6:	f06f 0001 	mvn.w	r0, #1
 8003dfa:	f000 fc06 	bl	800460a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_I2C_MspInit+0x84>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12c      	bne.n	8003e88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e50:	2312      	movs	r3, #18
 8003e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	480c      	ldr	r0, [pc, #48]	; (8003e98 <HAL_I2C_MspInit+0x8c>)
 8003e68:	f001 f808 	bl	8004e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_I2C_MspInit+0x88>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40005400 	.word	0x40005400
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40020400 	.word	0x40020400

08003e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a32      	ldr	r2, [pc, #200]	; (8003f84 <HAL_TIM_Base_MspInit+0xe8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d12d      	bne.n	8003f1a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8003ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	2302      	movs	r3, #2
 8003efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	4619      	mov	r1, r3
 8003f12:	481e      	ldr	r0, [pc, #120]	; (8003f8c <HAL_TIM_Base_MspInit+0xf0>)
 8003f14:	f000 ffb2 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003f18:	e030      	b.n	8003f7c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIM_Base_MspInit+0xf4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d12b      	bne.n	8003f7c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f24:	2300      	movs	r3, #0
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f2e:	f043 0302 	orr.w	r3, r3, #2
 8003f32:	6453      	str	r3, [r2, #68]	; 0x44
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_TIM_Base_MspInit+0xec>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003f5c:	23c0      	movs	r3, #192	; 0xc0
 8003f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f60:	2302      	movs	r3, #2
 8003f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f70:	f107 031c 	add.w	r3, r7, #28
 8003f74:	4619      	mov	r1, r3
 8003f76:	4807      	ldr	r0, [pc, #28]	; (8003f94 <HAL_TIM_Base_MspInit+0xf8>)
 8003f78:	f000 ff80 	bl	8004e7c <HAL_GPIO_Init>
}
 8003f7c:	bf00      	nop
 8003f7e:	3730      	adds	r7, #48	; 0x30
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40020800 	.word	0x40020800

08003f98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08c      	sub	sp, #48	; 0x30
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 031c 	add.w	r3, r7, #28
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d14b      	bne.n	8004052 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a3e      	ldr	r2, [pc, #248]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b3c      	ldr	r3, [pc, #240]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	4b38      	ldr	r3, [pc, #224]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4a37      	ldr	r2, [pc, #220]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe6:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a30      	ldr	r2, [pc, #192]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800400e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004014:	2302      	movs	r3, #2
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401c:	2300      	movs	r3, #0
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004020:	2301      	movs	r3, #1
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	4619      	mov	r1, r3
 800402a:	4825      	ldr	r0, [pc, #148]	; (80040c0 <HAL_TIM_Encoder_MspInit+0x128>)
 800402c:	f000 ff26 	bl	8004e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004030:	2308      	movs	r3, #8
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004040:	2301      	movs	r3, #1
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	4619      	mov	r1, r3
 800404a:	481e      	ldr	r0, [pc, #120]	; (80040c4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800404c:	f000 ff16 	bl	8004e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004050:	e030      	b.n	80040b4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_TIM_Encoder_MspInit+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d12b      	bne.n	80040b4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	6413      	str	r3, [r2, #64]	; 0x40
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004078:	2300      	movs	r3, #0
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6313      	str	r3, [r2, #48]	; 0x30
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_TIM_Encoder_MspInit+0x124>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004094:	23c0      	movs	r3, #192	; 0xc0
 8004096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004098:	2302      	movs	r3, #2
 800409a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040a4:	2302      	movs	r3, #2
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	4619      	mov	r1, r3
 80040ae:	4804      	ldr	r0, [pc, #16]	; (80040c0 <HAL_TIM_Encoder_MspInit+0x128>)
 80040b0:	f000 fee4 	bl	8004e7c <HAL_GPIO_Init>
}
 80040b4:	bf00      	nop
 80040b6:	3730      	adds	r7, #48	; 0x30
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40020400 	.word	0x40020400
 80040c8:	40000400 	.word	0x40000400

080040cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a35      	ldr	r2, [pc, #212]	; (80041c0 <HAL_UART_MspInit+0xf4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d163      	bne.n	80041b6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	6313      	str	r3, [r2, #48]	; 0x30
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_UART_MspInit+0xf8>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004126:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800412a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	2303      	movs	r3, #3
 8004136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004138:	2307      	movs	r3, #7
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4619      	mov	r1, r3
 8004142:	4821      	ldr	r0, [pc, #132]	; (80041c8 <HAL_UART_MspInit+0xfc>)
 8004144:	f000 fe9a 	bl	8004e7c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_UART_MspInit+0x100>)
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <HAL_UART_MspInit+0x104>)
 800414c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800414e:	4b1f      	ldr	r3, [pc, #124]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004154:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_UART_MspInit+0x100>)
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004168:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800416a:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_UART_MspInit+0x100>)
 800416c:	2200      	movs	r2, #0
 800416e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004170:	4b16      	ldr	r3, [pc, #88]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004172:	2200      	movs	r2, #0
 8004174:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800417c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004180:	2200      	movs	r2, #0
 8004182:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_UART_MspInit+0x100>)
 8004186:	2200      	movs	r2, #0
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800418a:	4810      	ldr	r0, [pc, #64]	; (80041cc <HAL_UART_MspInit+0x100>)
 800418c:	f000 fa74 	bl	8004678 <HAL_DMA_Init>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004196:	f7ff f8b3 	bl	8003300 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_UART_MspInit+0x100>)
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_UART_MspInit+0x100>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80041a6:	2200      	movs	r2, #0
 80041a8:	2105      	movs	r1, #5
 80041aa:	2027      	movs	r0, #39	; 0x27
 80041ac:	f000 fa2d 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80041b0:	2027      	movs	r0, #39	; 0x27
 80041b2:	f000 fa46 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041b6:	bf00      	nop
 80041b8:	3728      	adds	r7, #40	; 0x28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40004800 	.word	0x40004800
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40020800 	.word	0x40020800
 80041cc:	20000298 	.word	0x20000298
 80041d0:	40026028 	.word	0x40026028

080041d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <NMI_Handler+0x4>

080041da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041de:	e7fe      	b.n	80041de <HardFault_Handler+0x4>

080041e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <MemManage_Handler+0x4>

080041e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ea:	e7fe      	b.n	80041ea <BusFault_Handler+0x4>

080041ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f0:	e7fe      	b.n	80041f0 <UsageFault_Handler+0x4>

080041f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004204:	f000 f8e2 	bl	80043cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004208:	f006 fc3c 	bl	800aa84 <xTaskGetSchedulerState>
 800420c:	4603      	mov	r3, r0
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004212:	f007 fa21 	bl	800b658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <DMA1_Stream1_IRQHandler+0x10>)
 8004222:	f000 fbc1 	bl	80049a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000298 	.word	0x20000298

08004230 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <USART3_IRQHandler+0x10>)
 8004236:	f003 fd65 	bl	8007d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000254 	.word	0x20000254

08004244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <_sbrk+0x5c>)
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <_sbrk+0x60>)
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004258:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <_sbrk+0x64>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <_sbrk+0x64>)
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <_sbrk+0x68>)
 8004264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004274:	f007 fc6a 	bl	800bb4c <__errno>
 8004278:	4603      	mov	r3, r0
 800427a:	220c      	movs	r2, #12
 800427c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e009      	b.n	8004298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	4a05      	ldr	r2, [pc, #20]	; (80042a8 <_sbrk+0x64>)
 8004294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20020000 	.word	0x20020000
 80042a4:	00000400 	.word	0x00000400
 80042a8:	200008c0 	.word	0x200008c0
 80042ac:	20005228 	.word	0x20005228

080042b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <SystemInit+0x20>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <SystemInit+0x20>)
 80042bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800430c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042da:	490e      	ldr	r1, [pc, #56]	; (8004314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042dc:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e0:	e002      	b.n	80042e8 <LoopCopyDataInit>

080042e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e6:	3304      	adds	r3, #4

080042e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042ec:	d3f9      	bcc.n	80042e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ee:	4a0b      	ldr	r2, [pc, #44]	; (800431c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80042f0:	4c0b      	ldr	r4, [pc, #44]	; (8004320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f4:	e001      	b.n	80042fa <LoopFillZerobss>

080042f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f8:	3204      	adds	r2, #4

080042fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042fc:	d3fb      	bcc.n	80042f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042fe:	f7ff ffd7 	bl	80042b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004302:	f007 fc29 	bl	800bb58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004306:	f7fd f9dd 	bl	80016c4 <main>
  bx  lr    
 800430a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800430c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004314:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8004318:	0800e468 	.word	0x0800e468
  ldr r2, =_sbss
 800431c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004320:	20005228 	.word	0x20005228

08004324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004324:	e7fe      	b.n	8004324 <ADC_IRQHandler>
	...

08004328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800432c:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_Init+0x40>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <HAL_Init+0x40>)
 8004332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <HAL_Init+0x40>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_Init+0x40>)
 800433e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_Init+0x40>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a07      	ldr	r2, [pc, #28]	; (8004368 <HAL_Init+0x40>)
 800434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004350:	2003      	movs	r0, #3
 8004352:	f000 f94f 	bl	80045f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004356:	200f      	movs	r0, #15
 8004358:	f000 f808 	bl	800436c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800435c:	f7ff fd2a 	bl	8003db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00

0800436c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_InitTick+0x54>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_InitTick+0x58>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4619      	mov	r1, r3
 800437e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004382:	fbb3 f3f1 	udiv	r3, r3, r1
 8004386:	fbb2 f3f3 	udiv	r3, r2, r3
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f967 	bl	800465e <HAL_SYSTICK_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e00e      	b.n	80043b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b0f      	cmp	r3, #15
 800439e:	d80a      	bhi.n	80043b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a0:	2200      	movs	r2, #0
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	f000 f92f 	bl	800460a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043ac:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <HAL_InitTick+0x5c>)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e000      	b.n	80043b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000020 	.word	0x20000020
 80043c4:	20000028 	.word	0x20000028
 80043c8:	20000024 	.word	0x20000024

080043cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_IncTick+0x20>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_IncTick+0x24>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_IncTick+0x24>)
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000028 	.word	0x20000028
 80043f0:	200008c4 	.word	0x200008c4

080043f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  return uwTick;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_GetTick+0x14>)
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	200008c4 	.word	0x200008c4

0800440c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004414:	f7ff ffee 	bl	80043f4 <HAL_GetTick>
 8004418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d005      	beq.n	8004432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_Delay+0x44>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004432:	bf00      	nop
 8004434:	f7ff ffde 	bl	80043f4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	429a      	cmp	r2, r3
 8004442:	d8f7      	bhi.n	8004434 <HAL_Delay+0x28>
  {
  }
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000028 	.word	0x20000028

08004454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <__NVIC_SetPriorityGrouping+0x44>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004470:	4013      	ands	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800447c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <__NVIC_SetPriorityGrouping+0x44>)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	60d3      	str	r3, [r2, #12]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <__NVIC_GetPriorityGrouping+0x18>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	f003 0307 	and.w	r3, r3, #7
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	db0b      	blt.n	80044e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	f003 021f 	and.w	r2, r3, #31
 80044d0:	4907      	ldr	r1, [pc, #28]	; (80044f0 <__NVIC_EnableIRQ+0x38>)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2001      	movs	r0, #1
 80044da:	fa00 f202 	lsl.w	r2, r0, r2
 80044de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000e100 	.word	0xe000e100

080044f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db0a      	blt.n	800451e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	490c      	ldr	r1, [pc, #48]	; (8004540 <__NVIC_SetPriority+0x4c>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	440b      	add	r3, r1
 8004518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800451c:	e00a      	b.n	8004534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4908      	ldr	r1, [pc, #32]	; (8004544 <__NVIC_SetPriority+0x50>)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3b04      	subs	r3, #4
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	440b      	add	r3, r1
 8004532:	761a      	strb	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	2b04      	cmp	r3, #4
 8004564:	bf28      	it	cs
 8004566:	2304      	movcs	r3, #4
 8004568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3304      	adds	r3, #4
 800456e:	2b06      	cmp	r3, #6
 8004570:	d902      	bls.n	8004578 <NVIC_EncodePriority+0x30>
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3b03      	subs	r3, #3
 8004576:	e000      	b.n	800457a <NVIC_EncodePriority+0x32>
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	401a      	ands	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004590:	f04f 31ff 	mov.w	r1, #4294967295
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	43d9      	mvns	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	4313      	orrs	r3, r2
         );
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3724      	adds	r7, #36	; 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	d301      	bcc.n	80045c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c2:	2301      	movs	r3, #1
 80045c4:	e00f      	b.n	80045e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <SysTick_Config+0x40>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ce:	210f      	movs	r1, #15
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7ff ff8e 	bl	80044f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SysTick_Config+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <SysTick_Config+0x40>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010

080045f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff29 	bl	8004454 <__NVIC_SetPriorityGrouping>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800461c:	f7ff ff3e 	bl	800449c <__NVIC_GetPriorityGrouping>
 8004620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff8e 	bl	8004548 <NVIC_EncodePriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff5d 	bl	80044f4 <__NVIC_SetPriority>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff31 	bl	80044b8 <__NVIC_EnableIRQ>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ffa2 	bl	80045b0 <SysTick_Config>
 800466c:	4603      	mov	r3, r0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7ff feb6 	bl	80043f4 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e099      	b.n	80047c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b4:	e00f      	b.n	80046d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b6:	f7ff fe9d 	bl	80043f4 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	d908      	bls.n	80046d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2203      	movs	r2, #3
 80046ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e078      	b.n	80047c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e8      	bne.n	80046b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_DMA_Init+0x158>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b04      	cmp	r3, #4
 800472e:	d107      	bne.n	8004740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4313      	orrs	r3, r2
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b04      	cmp	r3, #4
 8004768:	d117      	bne.n	800479a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fb01 	bl	8004d84 <DMA_CheckFifoParam>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004796:	2301      	movs	r3, #1
 8004798:	e016      	b.n	80047c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fab8 	bl	8004d18 <DMA_CalcBaseAndBitshift>
 80047a8:	4603      	mov	r3, r0
 80047aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	223f      	movs	r2, #63	; 0x3f
 80047b2:	409a      	lsls	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	f010803f 	.word	0xf010803f

080047d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_DMA_Start_IT+0x26>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e040      	b.n	800487c <HAL_DMA_Start_IT+0xa8>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d12f      	bne.n	800486e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa4a 	bl	8004cbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	223f      	movs	r2, #63	; 0x3f
 800482e:	409a      	lsls	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0216 	orr.w	r2, r2, #22
 8004842:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0208 	orr.w	r2, r2, #8
 800485a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e005      	b.n	800487a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004876:	2302      	movs	r3, #2
 8004878:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004892:	f7ff fdaf 	bl	80043f4 <HAL_GetTick>
 8004896:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d008      	beq.n	80048b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e052      	b.n	800495c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0216 	bic.w	r2, r2, #22
 80048c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <HAL_DMA_Abort+0x62>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004906:	e013      	b.n	8004930 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004908:	f7ff fd74 	bl	80043f4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b05      	cmp	r3, #5
 8004914:	d90c      	bls.n	8004930 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2203      	movs	r2, #3
 8004920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e015      	b.n	800495c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e4      	bne.n	8004908 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	223f      	movs	r2, #63	; 0x3f
 8004944:	409a      	lsls	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e00c      	b.n	800499c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2205      	movs	r2, #5
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049b4:	4b8e      	ldr	r3, [pc, #568]	; (8004bf0 <HAL_DMA_IRQHandler+0x248>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a8e      	ldr	r2, [pc, #568]	; (8004bf4 <HAL_DMA_IRQHandler+0x24c>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	0a9b      	lsrs	r3, r3, #10
 80049c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d2:	2208      	movs	r2, #8
 80049d4:	409a      	lsls	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0204 	bic.w	r2, r2, #4
 80049fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	2208      	movs	r2, #8
 8004a02:	409a      	lsls	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	f043 0201 	orr.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	2201      	movs	r2, #1
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d012      	beq.n	8004a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a36:	2201      	movs	r2, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a42:	f043 0202 	orr.w	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4e:	2204      	movs	r2, #4
 8004a50:	409a      	lsls	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d012      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	f043 0204 	orr.w	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a84:	2210      	movs	r2, #16
 8004a86:	409a      	lsls	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d043      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03c      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d024      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	4798      	blx	r3
 8004ad6:	e01f      	b.n	8004b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e016      	b.n	8004b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0208 	bic.w	r2, r2, #8
 8004b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808f 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8087 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2220      	movs	r2, #32
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b05      	cmp	r3, #5
 8004b50:	d136      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0216 	bic.w	r2, r2, #22
 8004b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <HAL_DMA_IRQHandler+0x1da>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0208 	bic.w	r2, r2, #8
 8004b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	223f      	movs	r2, #63	; 0x3f
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d07e      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
        }
        return;
 8004bbe:	e079      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01d      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d031      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
 8004bec:	e02c      	b.n	8004c48 <HAL_DMA_IRQHandler+0x2a0>
 8004bee:	bf00      	nop
 8004bf0:	20000020 	.word	0x20000020
 8004bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e01e      	b.n	8004c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10f      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0210 	bic.w	r2, r2, #16
 8004c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d032      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d022      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2205      	movs	r2, #5
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d307      	bcc.n	8004c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f2      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x2cc>
 8004c8e:	e000      	b.n	8004c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	4798      	blx	r3
 8004cb2:	e000      	b.n	8004cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cb4:	bf00      	nop
    }
  }
}
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d108      	bne.n	8004cfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cfa:	e007      	b.n	8004d0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	60da      	str	r2, [r3, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	3b10      	subs	r3, #16
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <DMA_CalcBaseAndBitshift+0x64>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d32:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <DMA_CalcBaseAndBitshift+0x68>)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d909      	bls.n	8004d5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	659a      	str	r2, [r3, #88]	; 0x58
 8004d58:	e007      	b.n	8004d6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	aaaaaaab 	.word	0xaaaaaaab
 8004d80:	0800e240 	.word	0x0800e240

08004d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d11f      	bne.n	8004dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d856      	bhi.n	8004e52 <DMA_CheckFifoParam+0xce>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <DMA_CheckFifoParam+0x28>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcf 	.word	0x08004dcf
 8004db4:	08004dbd 	.word	0x08004dbd
 8004db8:	08004e53 	.word	0x08004e53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d046      	beq.n	8004e56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e043      	b.n	8004e56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dd6:	d140      	bne.n	8004e5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ddc:	e03d      	b.n	8004e5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	d121      	bne.n	8004e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d837      	bhi.n	8004e5e <DMA_CheckFifoParam+0xda>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <DMA_CheckFifoParam+0x70>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e0b 	.word	0x08004e0b
 8004dfc:	08004e05 	.word	0x08004e05
 8004e00:	08004e1d 	.word	0x08004e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      break;
 8004e08:	e030      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d025      	beq.n	8004e62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1a:	e022      	b.n	8004e62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e24:	d11f      	bne.n	8004e66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e2a:	e01c      	b.n	8004e66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d903      	bls.n	8004e3a <DMA_CheckFifoParam+0xb6>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d003      	beq.n	8004e40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e38:	e018      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3e:	e015      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00e      	beq.n	8004e6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e50:	e00b      	b.n	8004e6a <DMA_CheckFifoParam+0xe6>
      break;
 8004e52:	bf00      	nop
 8004e54:	e00a      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e008      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e006      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e004      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <DMA_CheckFifoParam+0xe8>
      break;
 8004e6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop

08004e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e16b      	b.n	8005170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e98:	2201      	movs	r2, #1
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f040 815a 	bne.w	800516a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d005      	beq.n	8004ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d130      	bne.n	8004f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f04:	2201      	movs	r2, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 0201 	and.w	r2, r3, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d017      	beq.n	8004f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	2203      	movs	r2, #3
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d123      	bne.n	8004fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	08da      	lsrs	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3208      	adds	r2, #8
 8004f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	220f      	movs	r2, #15
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	08da      	lsrs	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3208      	adds	r2, #8
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80b4 	beq.w	800516a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	4b60      	ldr	r3, [pc, #384]	; (8005188 <HAL_GPIO_Init+0x30c>)
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	4a5f      	ldr	r2, [pc, #380]	; (8005188 <HAL_GPIO_Init+0x30c>)
 800500c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005010:	6453      	str	r3, [r2, #68]	; 0x44
 8005012:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_GPIO_Init+0x30c>)
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800501e:	4a5b      	ldr	r2, [pc, #364]	; (800518c <HAL_GPIO_Init+0x310>)
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	3302      	adds	r3, #2
 8005026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	220f      	movs	r2, #15
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a52      	ldr	r2, [pc, #328]	; (8005190 <HAL_GPIO_Init+0x314>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02b      	beq.n	80050a2 <HAL_GPIO_Init+0x226>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a51      	ldr	r2, [pc, #324]	; (8005194 <HAL_GPIO_Init+0x318>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d025      	beq.n	800509e <HAL_GPIO_Init+0x222>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a50      	ldr	r2, [pc, #320]	; (8005198 <HAL_GPIO_Init+0x31c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01f      	beq.n	800509a <HAL_GPIO_Init+0x21e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a4f      	ldr	r2, [pc, #316]	; (800519c <HAL_GPIO_Init+0x320>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d019      	beq.n	8005096 <HAL_GPIO_Init+0x21a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4e      	ldr	r2, [pc, #312]	; (80051a0 <HAL_GPIO_Init+0x324>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <HAL_GPIO_Init+0x216>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a4d      	ldr	r2, [pc, #308]	; (80051a4 <HAL_GPIO_Init+0x328>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00d      	beq.n	800508e <HAL_GPIO_Init+0x212>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a4c      	ldr	r2, [pc, #304]	; (80051a8 <HAL_GPIO_Init+0x32c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d007      	beq.n	800508a <HAL_GPIO_Init+0x20e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a4b      	ldr	r2, [pc, #300]	; (80051ac <HAL_GPIO_Init+0x330>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d101      	bne.n	8005086 <HAL_GPIO_Init+0x20a>
 8005082:	2307      	movs	r3, #7
 8005084:	e00e      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 8005086:	2308      	movs	r3, #8
 8005088:	e00c      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 800508a:	2306      	movs	r3, #6
 800508c:	e00a      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 800508e:	2305      	movs	r3, #5
 8005090:	e008      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 8005092:	2304      	movs	r3, #4
 8005094:	e006      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 8005096:	2303      	movs	r3, #3
 8005098:	e004      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 800509a:	2302      	movs	r3, #2
 800509c:	e002      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_GPIO_Init+0x228>
 80050a2:	2300      	movs	r3, #0
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	f002 0203 	and.w	r2, r2, #3
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	4093      	lsls	r3, r2
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050b4:	4935      	ldr	r1, [pc, #212]	; (800518c <HAL_GPIO_Init+0x310>)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_GPIO_Init+0x334>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050e6:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_GPIO_Init+0x334>)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050ec:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <HAL_GPIO_Init+0x334>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005110:	4a27      	ldr	r2, [pc, #156]	; (80051b0 <HAL_GPIO_Init+0x334>)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <HAL_GPIO_Init+0x334>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	43db      	mvns	r3, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4013      	ands	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800513a:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <HAL_GPIO_Init+0x334>)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_GPIO_Init+0x334>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	43db      	mvns	r3, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_GPIO_Init+0x334>)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b0f      	cmp	r3, #15
 8005174:	f67f ae90 	bls.w	8004e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	40013800 	.word	0x40013800
 8005190:	40020000 	.word	0x40020000
 8005194:	40020400 	.word	0x40020400
 8005198:	40020800 	.word	0x40020800
 800519c:	40020c00 	.word	0x40020c00
 80051a0:	40021000 	.word	0x40021000
 80051a4:	40021400 	.word	0x40021400
 80051a8:	40021800 	.word	0x40021800
 80051ac:	40021c00 	.word	0x40021c00
 80051b0:	40013c00 	.word	0x40013c00

080051b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e001      	b.n	80051d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
 80051f0:	4613      	mov	r3, r2
 80051f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f4:	787b      	ldrb	r3, [r7, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005200:	e003      	b.n	800520a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	041a      	lsls	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	619a      	str	r2, [r3, #24]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005216:	b480      	push	{r7}
 8005218:	b085      	sub	sp, #20
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005228:	887a      	ldrh	r2, [r7, #2]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4013      	ands	r3, r2
 800522e:	041a      	lsls	r2, r3, #16
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	43d9      	mvns	r1, r3
 8005234:	887b      	ldrh	r3, [r7, #2]
 8005236:	400b      	ands	r3, r1
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	619a      	str	r2, [r3, #24]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e12b      	b.n	80054b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fe fdca 	bl	8003e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2224      	movs	r2, #36	; 0x24
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0201 	bic.w	r2, r2, #1
 800528e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052b0:	f001 fbe4 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 80052b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a81      	ldr	r2, [pc, #516]	; (80054c0 <HAL_I2C_Init+0x274>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d807      	bhi.n	80052d0 <HAL_I2C_Init+0x84>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a80      	ldr	r2, [pc, #512]	; (80054c4 <HAL_I2C_Init+0x278>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	bf94      	ite	ls
 80052c8:	2301      	movls	r3, #1
 80052ca:	2300      	movhi	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e006      	b.n	80052de <HAL_I2C_Init+0x92>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4a7d      	ldr	r2, [pc, #500]	; (80054c8 <HAL_I2C_Init+0x27c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bf94      	ite	ls
 80052d8:	2301      	movls	r3, #1
 80052da:	2300      	movhi	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e0e7      	b.n	80054b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a78      	ldr	r2, [pc, #480]	; (80054cc <HAL_I2C_Init+0x280>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	0c9b      	lsrs	r3, r3, #18
 80052f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a6a      	ldr	r2, [pc, #424]	; (80054c0 <HAL_I2C_Init+0x274>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d802      	bhi.n	8005320 <HAL_I2C_Init+0xd4>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	3301      	adds	r3, #1
 800531e:	e009      	b.n	8005334 <HAL_I2C_Init+0xe8>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	4a69      	ldr	r2, [pc, #420]	; (80054d0 <HAL_I2C_Init+0x284>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	099b      	lsrs	r3, r3, #6
 8005332:	3301      	adds	r3, #1
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	430b      	orrs	r3, r1
 800533a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	495c      	ldr	r1, [pc, #368]	; (80054c0 <HAL_I2C_Init+0x274>)
 8005350:	428b      	cmp	r3, r1
 8005352:	d819      	bhi.n	8005388 <HAL_I2C_Init+0x13c>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	1e59      	subs	r1, r3, #1
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005368:	400b      	ands	r3, r1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_I2C_Init+0x138>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1e59      	subs	r1, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	fbb1 f3f3 	udiv	r3, r1, r3
 800537c:	3301      	adds	r3, #1
 800537e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005382:	e051      	b.n	8005428 <HAL_I2C_Init+0x1dc>
 8005384:	2304      	movs	r3, #4
 8005386:	e04f      	b.n	8005428 <HAL_I2C_Init+0x1dc>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d111      	bne.n	80053b4 <HAL_I2C_Init+0x168>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1e58      	subs	r0, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6859      	ldr	r1, [r3, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	440b      	add	r3, r1
 800539e:	fbb0 f3f3 	udiv	r3, r0, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	e012      	b.n	80053da <HAL_I2C_Init+0x18e>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e58      	subs	r0, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	0099      	lsls	r1, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ca:	3301      	adds	r3, #1
 80053cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_I2C_Init+0x196>
 80053de:	2301      	movs	r3, #1
 80053e0:	e022      	b.n	8005428 <HAL_I2C_Init+0x1dc>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10e      	bne.n	8005408 <HAL_I2C_Init+0x1bc>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1e58      	subs	r0, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	460b      	mov	r3, r1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	440b      	add	r3, r1
 80053f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fc:	3301      	adds	r3, #1
 80053fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005406:	e00f      	b.n	8005428 <HAL_I2C_Init+0x1dc>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1e58      	subs	r0, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6859      	ldr	r1, [r3, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	0099      	lsls	r1, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	fbb0 f3f3 	udiv	r3, r0, r3
 800541e:	3301      	adds	r3, #1
 8005420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	6809      	ldr	r1, [r1, #0]
 800542c:	4313      	orrs	r3, r2
 800542e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6911      	ldr	r1, [r2, #16]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68d2      	ldr	r2, [r2, #12]
 8005462:	4311      	orrs	r1, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	430b      	orrs	r3, r1
 800546a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695a      	ldr	r2, [r3, #20]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	000186a0 	.word	0x000186a0
 80054c4:	001e847f 	.word	0x001e847f
 80054c8:	003d08ff 	.word	0x003d08ff
 80054cc:	431bde83 	.word	0x431bde83
 80054d0:	10624dd3 	.word	0x10624dd3

080054d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	4608      	mov	r0, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	461a      	mov	r2, r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	817b      	strh	r3, [r7, #10]
 80054e6:	460b      	mov	r3, r1
 80054e8:	813b      	strh	r3, [r7, #8]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054ee:	f7fe ff81 	bl	80043f4 <HAL_GetTick>
 80054f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	f040 80d9 	bne.w	80056b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	2319      	movs	r3, #25
 8005508:	2201      	movs	r2, #1
 800550a:	496d      	ldr	r1, [pc, #436]	; (80056c0 <HAL_I2C_Mem_Write+0x1ec>)
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fc7f 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
 800551a:	e0cc      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_I2C_Mem_Write+0x56>
 8005526:	2302      	movs	r3, #2
 8005528:	e0c5      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b01      	cmp	r3, #1
 800553e:	d007      	beq.n	8005550 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2221      	movs	r2, #33	; 0x21
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2240      	movs	r2, #64	; 0x40
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a4d      	ldr	r2, [pc, #308]	; (80056c4 <HAL_I2C_Mem_Write+0x1f0>)
 8005590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005592:	88f8      	ldrh	r0, [r7, #6]
 8005594:	893a      	ldrh	r2, [r7, #8]
 8005596:	8979      	ldrh	r1, [r7, #10]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4603      	mov	r3, r0
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fab6 	bl	8005b14 <I2C_RequestMemoryWrite>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d052      	beq.n	8005654 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e081      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fd00 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	d107      	bne.n	80055da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e06b      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b04      	cmp	r3, #4
 800561a:	d11b      	bne.n	8005654 <HAL_I2C_Mem_Write+0x180>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d017      	beq.n	8005654 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1aa      	bne.n	80055b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 fcec 	bl	800603e <I2C_WaitOnBTFFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	2b04      	cmp	r3, #4
 8005672:	d107      	bne.n	8005684 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e016      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e000      	b.n	80056b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056b4:	2302      	movs	r3, #2
  }
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	00100002 	.word	0x00100002
 80056c4:	ffff0000 	.word	0xffff0000

080056c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056e2:	f7fe fe87 	bl	80043f4 <HAL_GetTick>
 80056e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	f040 8208 	bne.w	8005b06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2319      	movs	r3, #25
 80056fc:	2201      	movs	r2, #1
 80056fe:	497b      	ldr	r1, [pc, #492]	; (80058ec <HAL_I2C_Mem_Read+0x224>)
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fb85 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
 800570e:	e1fb      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_I2C_Mem_Read+0x56>
 800571a:	2302      	movs	r3, #2
 800571c:	e1f4      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d007      	beq.n	8005744 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2222      	movs	r2, #34	; 0x22
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2240      	movs	r2, #64	; 0x40
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4a5b      	ldr	r2, [pc, #364]	; (80058f0 <HAL_I2C_Mem_Read+0x228>)
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005786:	88f8      	ldrh	r0, [r7, #6]
 8005788:	893a      	ldrh	r2, [r7, #8]
 800578a:	8979      	ldrh	r1, [r7, #10]
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4603      	mov	r3, r0
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fa52 	bl	8005c40 <I2C_RequestMemoryRead>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e1b0      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d113      	bne.n	80057d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	623b      	str	r3, [r7, #32]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e184      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d11b      	bne.n	8005816 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e164      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	2b02      	cmp	r3, #2
 800581c:	d11b      	bne.n	8005856 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	e144      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800586c:	e138      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	2b03      	cmp	r3, #3
 8005874:	f200 80f1 	bhi.w	8005a5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587c:	2b01      	cmp	r3, #1
 800587e:	d123      	bne.n	80058c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fc1b 	bl	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e139      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058c6:	e10b      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d14e      	bne.n	800596e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	2200      	movs	r2, #0
 80058d8:	4906      	ldr	r1, [pc, #24]	; (80058f4 <HAL_I2C_Mem_Read+0x22c>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fa98 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d008      	beq.n	80058f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e10e      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
 80058ea:	bf00      	nop
 80058ec:	00100002 	.word	0x00100002
 80058f0:	ffff0000 	.word	0xffff0000
 80058f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800596c:	e0b8      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2200      	movs	r2, #0
 8005976:	4966      	ldr	r1, [pc, #408]	; (8005b10 <HAL_I2C_Mem_Read+0x448>)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fa49 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0bf      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	2200      	movs	r2, #0
 80059d2:	494f      	ldr	r1, [pc, #316]	; (8005b10 <HAL_I2C_Mem_Read+0x448>)
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fa1b 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e091      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	3b01      	subs	r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a58:	e042      	b.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fb2e 	bl	80060c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e04c      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d118      	bne.n	8005ae0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f47f aec2 	bne.w	800586e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e000      	b.n	8005b08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
  }
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3728      	adds	r7, #40	; 0x28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	00010004 	.word	0x00010004

08005b14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	4611      	mov	r1, r2
 8005b20:	461a      	mov	r2, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	817b      	strh	r3, [r7, #10]
 8005b26:	460b      	mov	r3, r1
 8005b28:	813b      	strh	r3, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f960 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b64:	d103      	bne.n	8005b6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e05f      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	492d      	ldr	r1, [pc, #180]	; (8005c3c <I2C_RequestMemoryWrite+0x128>)
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f998 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e04c      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb0:	6a39      	ldr	r1, [r7, #32]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa02 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d107      	bne.n	8005bd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e02b      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d105      	bne.n	8005bec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	e021      	b.n	8005c30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bec:	893b      	ldrh	r3, [r7, #8]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	6a39      	ldr	r1, [r7, #32]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f9dc 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d107      	bne.n	8005c22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e005      	b.n	8005c32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c26:	893b      	ldrh	r3, [r7, #8]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	00010002 	.word	0x00010002

08005c40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	4608      	mov	r0, r1
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	817b      	strh	r3, [r7, #10]
 8005c52:	460b      	mov	r3, r1
 8005c54:	813b      	strh	r3, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f8c2 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d103      	bne.n	8005caa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0aa      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	4952      	ldr	r1, [pc, #328]	; (8005e0c <I2C_RequestMemoryRead+0x1cc>)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 f8fa 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e097      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f964 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e076      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e021      	b.n	8005d6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 f93e 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e050      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	6a39      	ldr	r1, [r7, #32]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f923 	bl	8005fbc <I2C_WaitOnTXEFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00d      	beq.n	8005d98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d107      	bne.n	8005d94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e035      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f82b 	bl	8005e10 <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d103      	bne.n	8005dd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e013      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	4906      	ldr	r1, [pc, #24]	; (8005e0c <I2C_RequestMemoryRead+0x1cc>)
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f863 	bl	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	00010002 	.word	0x00010002

08005e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e20:	e025      	b.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e28:	d021      	beq.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2a:	f7fe fae3 	bl	80043f4 <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d302      	bcc.n	8005e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d116      	bne.n	8005e6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e023      	b.n	8005eb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d10d      	bne.n	8005e94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	43da      	mvns	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	e00c      	b.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d0b6      	beq.n	8005e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	607a      	str	r2, [r7, #4]
 8005eca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ecc:	e051      	b.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005edc:	d123      	bne.n	8005f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ef6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e046      	b.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d021      	beq.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fe fa61 	bl	80043f4 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d302      	bcc.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d116      	bne.n	8005f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e020      	b.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10c      	bne.n	8005f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bf14      	ite	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	2300      	moveq	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	e00b      	b.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	43da      	mvns	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf14      	ite	ne
 8005fa8:	2301      	movne	r3, #1
 8005faa:	2300      	moveq	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d18d      	bne.n	8005ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fc8:	e02d      	b.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f8ce 	bl	800616c <I2C_IsAcknowledgeFailed>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e02d      	b.n	8006036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d021      	beq.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe2:	f7fe fa07 	bl	80043f4 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d302      	bcc.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e007      	b.n	8006036 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d1ca      	bne.n	8005fca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800604a:	e02d      	b.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f88d 	bl	800616c <I2C_IsAcknowledgeFailed>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e02d      	b.n	80060b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d021      	beq.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006064:	f7fe f9c6 	bl	80043f4 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d302      	bcc.n	800607a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d116      	bne.n	80060a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	f043 0220 	orr.w	r2, r3, #32
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e007      	b.n	80060b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d1ca      	bne.n	800604c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060cc:	e042      	b.n	8006154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d119      	bne.n	8006110 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0210 	mvn.w	r2, #16
 80060e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e029      	b.n	8006164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006110:	f7fe f970 	bl	80043f4 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d116      	bne.n	8006154 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e007      	b.n	8006164 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d1b5      	bne.n	80060ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006182:	d11b      	bne.n	80061bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	f043 0204 	orr.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e000      	b.n	80061be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80061d2:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_PWR_EnableBkUpAccess+0x20>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80061de:	687b      	ldr	r3, [r7, #4]
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	420e0020 	.word	0x420e0020
 80061f0:	40007000 	.word	0x40007000

080061f4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80061fa:	4b06      	ldr	r3, [pc, #24]	; (8006214 <HAL_PWR_DisableBkUpAccess+0x20>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006206:	687b      	ldr	r3, [r7, #4]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	420e0020 	.word	0x420e0020
 8006218:	40007000 	.word	0x40007000

0800621c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e267      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d075      	beq.n	8006326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800623a:	4b88      	ldr	r3, [pc, #544]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b04      	cmp	r3, #4
 8006244:	d00c      	beq.n	8006260 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006246:	4b85      	ldr	r3, [pc, #532]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800624e:	2b08      	cmp	r3, #8
 8006250:	d112      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006252:	4b82      	ldr	r3, [pc, #520]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800625e:	d10b      	bne.n	8006278 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006260:	4b7e      	ldr	r3, [pc, #504]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d05b      	beq.n	8006324 <HAL_RCC_OscConfig+0x108>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d157      	bne.n	8006324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e242      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d106      	bne.n	8006290 <HAL_RCC_OscConfig+0x74>
 8006282:	4b76      	ldr	r3, [pc, #472]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a75      	ldr	r2, [pc, #468]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e01d      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x98>
 800629a:	4b70      	ldr	r3, [pc, #448]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6f      	ldr	r2, [pc, #444]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	4b6d      	ldr	r3, [pc, #436]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6c      	ldr	r2, [pc, #432]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0xb0>
 80062b4:	4b69      	ldr	r3, [pc, #420]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a68      	ldr	r2, [pc, #416]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	4b66      	ldr	r3, [pc, #408]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a65      	ldr	r2, [pc, #404]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d013      	beq.n	80062fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fe f88e 	bl	80043f4 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fe f88a 	bl	80043f4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b64      	cmp	r3, #100	; 0x64
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e207      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ee:	4b5b      	ldr	r3, [pc, #364]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0xc0>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fc:	f7fe f87a 	bl	80043f4 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006304:	f7fe f876 	bl	80043f4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b64      	cmp	r3, #100	; 0x64
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1f3      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006316:	4b51      	ldr	r3, [pc, #324]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0xe8>
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d063      	beq.n	80063fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006332:	4b4a      	ldr	r3, [pc, #296]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633e:	4b47      	ldr	r3, [pc, #284]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006346:	2b08      	cmp	r3, #8
 8006348:	d11c      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800634a:	4b44      	ldr	r3, [pc, #272]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d116      	bne.n	8006384 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006356:	4b41      	ldr	r3, [pc, #260]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d001      	beq.n	800636e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e1c7      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4937      	ldr	r1, [pc, #220]	; (800645c <HAL_RCC_OscConfig+0x240>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	e03a      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d020      	beq.n	80063ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638c:	4b34      	ldr	r3, [pc, #208]	; (8006460 <HAL_RCC_OscConfig+0x244>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006392:	f7fe f82f 	bl	80043f4 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800639a:	f7fe f82b 	bl	80043f4 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e1a8      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ac:	4b2b      	ldr	r3, [pc, #172]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b8:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4925      	ldr	r1, [pc, #148]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	600b      	str	r3, [r1, #0]
 80063cc:	e015      	b.n	80063fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <HAL_RCC_OscConfig+0x244>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fe f80e 	bl	80043f4 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fe f80a 	bl	80043f4 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e187      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d036      	beq.n	8006474 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <HAL_RCC_OscConfig+0x248>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006414:	f7fd ffee 	bl	80043f4 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800641c:	f7fd ffea 	bl	80043f4 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e167      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800642e:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_OscConfig+0x240>)
 8006430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0x200>
 800643a:	e01b      	b.n	8006474 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <HAL_RCC_OscConfig+0x248>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006442:	f7fd ffd7 	bl	80043f4 <HAL_GetTick>
 8006446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006448:	e00e      	b.n	8006468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800644a:	f7fd ffd3 	bl	80043f4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d907      	bls.n	8006468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e150      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800645c:	40023800 	.word	0x40023800
 8006460:	42470000 	.word	0x42470000
 8006464:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006468:	4b88      	ldr	r3, [pc, #544]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800646a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1ea      	bne.n	800644a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8097 	beq.w	80065b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
 8006496:	4b7d      	ldr	r3, [pc, #500]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4a7c      	ldr	r2, [pc, #496]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800649c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6413      	str	r3, [r2, #64]	; 0x40
 80064a2:	4b7a      	ldr	r3, [pc, #488]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b2:	4b77      	ldr	r3, [pc, #476]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d118      	bne.n	80064f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064be:	4b74      	ldr	r3, [pc, #464]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a73      	ldr	r2, [pc, #460]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ca:	f7fd ff93 	bl	80043f4 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064d2:	f7fd ff8f 	bl	80043f4 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e10c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e4:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCC_OscConfig+0x474>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0f0      	beq.n	80064d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d106      	bne.n	8006506 <HAL_RCC_OscConfig+0x2ea>
 80064f8:	4b64      	ldr	r3, [pc, #400]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	4a63      	ldr	r2, [pc, #396]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	6713      	str	r3, [r2, #112]	; 0x70
 8006504:	e01c      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2b05      	cmp	r3, #5
 800650c:	d10c      	bne.n	8006528 <HAL_RCC_OscConfig+0x30c>
 800650e:	4b5f      	ldr	r3, [pc, #380]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a5e      	ldr	r2, [pc, #376]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
 800651a:	4b5c      	ldr	r3, [pc, #368]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	4a5b      	ldr	r2, [pc, #364]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	6713      	str	r3, [r2, #112]	; 0x70
 8006526:	e00b      	b.n	8006540 <HAL_RCC_OscConfig+0x324>
 8006528:	4b58      	ldr	r3, [pc, #352]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	4a57      	ldr	r2, [pc, #348]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800652e:	f023 0301 	bic.w	r3, r3, #1
 8006532:	6713      	str	r3, [r2, #112]	; 0x70
 8006534:	4b55      	ldr	r3, [pc, #340]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	4a54      	ldr	r2, [pc, #336]	; (800668c <HAL_RCC_OscConfig+0x470>)
 800653a:	f023 0304 	bic.w	r3, r3, #4
 800653e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fd ff54 	bl	80043f4 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	e00a      	b.n	8006566 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006550:	f7fd ff50 	bl	80043f4 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	; 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e0cb      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006566:	4b49      	ldr	r3, [pc, #292]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ee      	beq.n	8006550 <HAL_RCC_OscConfig+0x334>
 8006572:	e014      	b.n	800659e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006574:	f7fd ff3e 	bl	80043f4 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657a:	e00a      	b.n	8006592 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fd ff3a 	bl	80043f4 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	; 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0b5      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006592:	4b3e      	ldr	r3, [pc, #248]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ee      	bne.n	800657c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d105      	bne.n	80065b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	4a38      	ldr	r2, [pc, #224]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80a1 	beq.w	80066fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065ba:	4b34      	ldr	r3, [pc, #208]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	d05c      	beq.n	8006680 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d141      	bne.n	8006652 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ce:	4b31      	ldr	r3, [pc, #196]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d4:	f7fd ff0e 	bl	80043f4 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065dc:	f7fd ff0a 	bl	80043f4 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e087      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ee:	4b27      	ldr	r3, [pc, #156]	; (800668c <HAL_RCC_OscConfig+0x470>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f0      	bne.n	80065dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	019b      	lsls	r3, r3, #6
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	3b01      	subs	r3, #1
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	491b      	ldr	r1, [pc, #108]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006624:	4b1b      	ldr	r3, [pc, #108]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662a:	f7fd fee3 	bl	80043f4 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006630:	e008      	b.n	8006644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006632:	f7fd fedf 	bl	80043f4 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e05c      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006644:	4b11      	ldr	r3, [pc, #68]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0f0      	beq.n	8006632 <HAL_RCC_OscConfig+0x416>
 8006650:	e054      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <HAL_RCC_OscConfig+0x478>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006658:	f7fd fecc 	bl	80043f4 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006660:	f7fd fec8 	bl	80043f4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e045      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCC_OscConfig+0x470>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x444>
 800667e:	e03d      	b.n	80066fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e038      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
 800668c:	40023800 	.word	0x40023800
 8006690:	40007000 	.word	0x40007000
 8006694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_RCC_OscConfig+0x4ec>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d028      	beq.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d121      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d11a      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066c8:	4013      	ands	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d111      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	085b      	lsrs	r3, r3, #1
 80066e0:	3b01      	subs	r3, #1
 80066e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d107      	bne.n	80066f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	40023800 	.word	0x40023800

0800670c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0cc      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006720:	4b68      	ldr	r3, [pc, #416]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90c      	bls.n	8006748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800672e:	4b65      	ldr	r3, [pc, #404]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b63      	ldr	r3, [pc, #396]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0b8      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006760:	4b59      	ldr	r3, [pc, #356]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4a58      	ldr	r2, [pc, #352]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800676a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006778:	4b53      	ldr	r3, [pc, #332]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4a52      	ldr	r2, [pc, #328]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006784:	4b50      	ldr	r3, [pc, #320]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	494d      	ldr	r1, [pc, #308]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	4313      	orrs	r3, r2
 8006794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d044      	beq.n	800682c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d107      	bne.n	80067ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	4b47      	ldr	r3, [pc, #284]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d119      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e07f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d003      	beq.n	80067ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d107      	bne.n	80067da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ca:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e06f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067da:	4b3b      	ldr	r3, [pc, #236]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e067      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b37      	ldr	r3, [pc, #220]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4934      	ldr	r1, [pc, #208]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067fc:	f7fd fdfa 	bl	80043f4 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fd fdf6 	bl	80043f4 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e04f      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b2b      	ldr	r3, [pc, #172]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800682c:	4b25      	ldr	r3, [pc, #148]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d20c      	bcs.n	8006854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e032      	b.n	80068ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d008      	beq.n	8006872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006860:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4916      	ldr	r1, [pc, #88]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800686e:	4313      	orrs	r3, r2
 8006870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d009      	beq.n	8006892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	490e      	ldr	r1, [pc, #56]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006892:	f000 f821 	bl	80068d8 <HAL_RCC_GetSysClockFreq>
 8006896:	4602      	mov	r2, r0
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	490a      	ldr	r1, [pc, #40]	; (80068cc <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	5ccb      	ldrb	r3, [r1, r3]
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	4a09      	ldr	r2, [pc, #36]	; (80068d0 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_RCC_ClockConfig+0x1c8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fd fd5a 	bl	800436c <HAL_InitTick>

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023c00 	.word	0x40023c00
 80068c8:	40023800 	.word	0x40023800
 80068cc:	0800e228 	.word	0x0800e228
 80068d0:	20000020 	.word	0x20000020
 80068d4:	20000024 	.word	0x20000024

080068d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068dc:	b090      	sub	sp, #64	; 0x40
 80068de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
 80068e4:	2300      	movs	r3, #0
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	2300      	movs	r3, #0
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 030c 	and.w	r3, r3, #12
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d00d      	beq.n	8006918 <HAL_RCC_GetSysClockFreq+0x40>
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	f200 80a1 	bhi.w	8006a44 <HAL_RCC_GetSysClockFreq+0x16c>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x34>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d003      	beq.n	8006912 <HAL_RCC_GetSysClockFreq+0x3a>
 800690a:	e09b      	b.n	8006a44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800690c:	4b53      	ldr	r3, [pc, #332]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x184>)
 800690e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006910:	e09b      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006912:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006916:	e098      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006918:	4b4f      	ldr	r3, [pc, #316]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006922:	4b4d      	ldr	r3, [pc, #308]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d028      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800692e:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	099b      	lsrs	r3, r3, #6
 8006934:	2200      	movs	r2, #0
 8006936:	623b      	str	r3, [r7, #32]
 8006938:	627a      	str	r2, [r7, #36]	; 0x24
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006940:	2100      	movs	r1, #0
 8006942:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006944:	fb03 f201 	mul.w	r2, r3, r1
 8006948:	2300      	movs	r3, #0
 800694a:	fb00 f303 	mul.w	r3, r0, r3
 800694e:	4413      	add	r3, r2
 8006950:	4a43      	ldr	r2, [pc, #268]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x188>)
 8006952:	fba0 1202 	umull	r1, r2, r0, r2
 8006956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006958:	460a      	mov	r2, r1
 800695a:	62ba      	str	r2, [r7, #40]	; 0x28
 800695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695e:	4413      	add	r3, r2
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	2200      	movs	r2, #0
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	61fa      	str	r2, [r7, #28]
 800696a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800696e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006972:	f7fa f973 	bl	8000c5c <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4613      	mov	r3, r2
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800697e:	e053      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006980:	4b35      	ldr	r3, [pc, #212]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	099b      	lsrs	r3, r3, #6
 8006986:	2200      	movs	r2, #0
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	617a      	str	r2, [r7, #20]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006992:	f04f 0b00 	mov.w	fp, #0
 8006996:	4652      	mov	r2, sl
 8006998:	465b      	mov	r3, fp
 800699a:	f04f 0000 	mov.w	r0, #0
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	0159      	lsls	r1, r3, #5
 80069a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a8:	0150      	lsls	r0, r2, #5
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	ebb2 080a 	subs.w	r8, r2, sl
 80069b2:	eb63 090b 	sbc.w	r9, r3, fp
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069ca:	ebb2 0408 	subs.w	r4, r2, r8
 80069ce:	eb63 0509 	sbc.w	r5, r3, r9
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	00eb      	lsls	r3, r5, #3
 80069dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069e0:	00e2      	lsls	r2, r4, #3
 80069e2:	4614      	mov	r4, r2
 80069e4:	461d      	mov	r5, r3
 80069e6:	eb14 030a 	adds.w	r3, r4, sl
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	eb45 030b 	adc.w	r3, r5, fp
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069fe:	4629      	mov	r1, r5
 8006a00:	028b      	lsls	r3, r1, #10
 8006a02:	4621      	mov	r1, r4
 8006a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a08:	4621      	mov	r1, r4
 8006a0a:	028a      	lsls	r2, r1, #10
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a12:	2200      	movs	r2, #0
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	60fa      	str	r2, [r7, #12]
 8006a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a1c:	f7fa f91e 	bl	8000c5c <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4613      	mov	r3, r2
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	3301      	adds	r3, #1
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a42:	e002      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x184>)
 8006a46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3740      	adds	r7, #64	; 0x40
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	00f42400 	.word	0x00f42400
 8006a60:	017d7840 	.word	0x017d7840

08006a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a68:	4b03      	ldr	r3, [pc, #12]	; (8006a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000020 	.word	0x20000020

08006a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a80:	f7ff fff0 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	0a9b      	lsrs	r3, r3, #10
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	4903      	ldr	r1, [pc, #12]	; (8006aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a92:	5ccb      	ldrb	r3, [r1, r3]
 8006a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	0800e238 	.word	0x0800e238

08006aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006aa8:	f7ff ffdc 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006aac:	4602      	mov	r2, r0
 8006aae:	4b05      	ldr	r3, [pc, #20]	; (8006ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	0b5b      	lsrs	r3, r3, #13
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	4903      	ldr	r1, [pc, #12]	; (8006ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006aba:	5ccb      	ldrb	r3, [r1, r3]
 8006abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	0800e238 	.word	0x0800e238

08006acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e041      	b.n	8006b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fd f9d2 	bl	8003e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f000 fc0c 	bl	8007328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b082      	sub	sp, #8
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e041      	b.n	8006c00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f839 	bl	8006c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f000 fbbd 	bl	8007328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <HAL_TIM_PWM_Start+0x24>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	bf14      	ite	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	e022      	b.n	8006c86 <HAL_TIM_PWM_Start+0x6a>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d109      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x3e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	bf14      	ite	ne
 8006c52:	2301      	movne	r3, #1
 8006c54:	2300      	moveq	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	e015      	b.n	8006c86 <HAL_TIM_PWM_Start+0x6a>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d109      	bne.n	8006c74 <HAL_TIM_PWM_Start+0x58>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	bf14      	ite	ne
 8006c6c:	2301      	movne	r3, #1
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	e008      	b.n	8006c86 <HAL_TIM_PWM_Start+0x6a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	bf14      	ite	ne
 8006c80:	2301      	movne	r3, #1
 8006c82:	2300      	moveq	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e07c      	b.n	8006d88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x82>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	e013      	b.n	8006cc6 <HAL_TIM_PWM_Start+0xaa>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_PWM_Start+0x92>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cac:	e00b      	b.n	8006cc6 <HAL_TIM_PWM_Start+0xaa>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_PWM_Start+0xa2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cbc:	e003      	b.n	8006cc6 <HAL_TIM_PWM_Start+0xaa>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fe14 	bl	80078fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a2d      	ldr	r2, [pc, #180]	; (8006d90 <HAL_TIM_PWM_Start+0x174>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_TIM_PWM_Start+0xcc>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a2c      	ldr	r2, [pc, #176]	; (8006d94 <HAL_TIM_PWM_Start+0x178>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_TIM_PWM_Start+0xd0>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_TIM_PWM_Start+0xd2>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <HAL_TIM_PWM_Start+0x174>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d14:	d01d      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <HAL_TIM_PWM_Start+0x17c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_TIM_PWM_Start+0x180>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_TIM_PWM_Start+0x184>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a16      	ldr	r2, [pc, #88]	; (8006d94 <HAL_TIM_PWM_Start+0x178>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_TIM_PWM_Start+0x188>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIM_PWM_Start+0x136>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a16      	ldr	r2, [pc, #88]	; (8006da8 <HAL_TIM_PWM_Start+0x18c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d111      	bne.n	8006d76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0307 	and.w	r3, r3, #7
 8006d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b06      	cmp	r3, #6
 8006d62:	d010      	beq.n	8006d86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d74:	e007      	b.n	8006d86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40010400 	.word	0x40010400
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40001800 	.word	0x40001800

08006dac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e097      	b.n	8006ef0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7fd f8df 	bl	8003f98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006df0:	f023 0307 	bic.w	r3, r3, #7
 8006df4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f000 fa91 	bl	8007328 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	f023 0303 	bic.w	r3, r3, #3
 8006e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e4c:	f023 030c 	bic.w	r3, r3, #12
 8006e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	031b      	lsls	r3, r3, #12
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d110      	bne.n	8006f4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d102      	bne.n	8006f34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f2e:	7b7b      	ldrb	r3, [r7, #13]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d001      	beq.n	8006f38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e069      	b.n	800700c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f48:	e031      	b.n	8006fae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d110      	bne.n	8006f72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d102      	bne.n	8006f5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f56:	7b3b      	ldrb	r3, [r7, #12]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d001      	beq.n	8006f60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e055      	b.n	800700c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f70:	e01d      	b.n	8006fae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d108      	bne.n	8006f8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d105      	bne.n	8006f8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7e:	7b7b      	ldrb	r3, [r7, #13]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d102      	bne.n	8006f8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f84:	7b3b      	ldrb	r3, [r7, #12]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d001      	beq.n	8006f8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e03e      	b.n	800700c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_TIM_Encoder_Start+0xc4>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d008      	beq.n	8006fcc <HAL_TIM_Encoder_Start+0xd4>
 8006fba:	e00f      	b.n	8006fdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fc99 	bl	80078fc <TIM_CCxChannelCmd>
      break;
 8006fca:	e016      	b.n	8006ffa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	2104      	movs	r1, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fc91 	bl	80078fc <TIM_CCxChannelCmd>
      break;
 8006fda:	e00e      	b.n	8006ffa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 fc89 	bl	80078fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fc82 	bl	80078fc <TIM_CCxChannelCmd>
      break;
 8006ff8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702a:	2b01      	cmp	r3, #1
 800702c:	d101      	bne.n	8007032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800702e:	2302      	movs	r3, #2
 8007030:	e0ae      	b.n	8007190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b0c      	cmp	r3, #12
 800703e:	f200 809f 	bhi.w	8007180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	0800707d 	.word	0x0800707d
 800704c:	08007181 	.word	0x08007181
 8007050:	08007181 	.word	0x08007181
 8007054:	08007181 	.word	0x08007181
 8007058:	080070bd 	.word	0x080070bd
 800705c:	08007181 	.word	0x08007181
 8007060:	08007181 	.word	0x08007181
 8007064:	08007181 	.word	0x08007181
 8007068:	080070ff 	.word	0x080070ff
 800706c:	08007181 	.word	0x08007181
 8007070:	08007181 	.word	0x08007181
 8007074:	08007181 	.word	0x08007181
 8007078:	0800713f 	.word	0x0800713f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f9f0 	bl	8007468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	699a      	ldr	r2, [r3, #24]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0204 	bic.w	r2, r2, #4
 80070a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6999      	ldr	r1, [r3, #24]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	619a      	str	r2, [r3, #24]
      break;
 80070ba:	e064      	b.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fa40 	bl	8007548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699a      	ldr	r2, [r3, #24]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6999      	ldr	r1, [r3, #24]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	619a      	str	r2, [r3, #24]
      break;
 80070fc:	e043      	b.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fa95 	bl	8007634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69da      	ldr	r2, [r3, #28]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0208 	orr.w	r2, r2, #8
 8007118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	69da      	ldr	r2, [r3, #28]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0204 	bic.w	r2, r2, #4
 8007128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	69d9      	ldr	r1, [r3, #28]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	61da      	str	r2, [r3, #28]
      break;
 800713c:	e023      	b.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fae9 	bl	800771c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69da      	ldr	r2, [r3, #28]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69da      	ldr	r2, [r3, #28]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69d9      	ldr	r1, [r3, #28]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	021a      	lsls	r2, r3, #8
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	61da      	str	r2, [r3, #28]
      break;
 800717e:	e002      	b.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_TIM_ConfigClockSource+0x1c>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e0b4      	b.n	800731e <HAL_TIM_ConfigClockSource+0x186>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ec:	d03e      	beq.n	800726c <HAL_TIM_ConfigClockSource+0xd4>
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f2:	f200 8087 	bhi.w	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 80071f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071fa:	f000 8086 	beq.w	800730a <HAL_TIM_ConfigClockSource+0x172>
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d87f      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 8007204:	2b70      	cmp	r3, #112	; 0x70
 8007206:	d01a      	beq.n	800723e <HAL_TIM_ConfigClockSource+0xa6>
 8007208:	2b70      	cmp	r3, #112	; 0x70
 800720a:	d87b      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 800720c:	2b60      	cmp	r3, #96	; 0x60
 800720e:	d050      	beq.n	80072b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007210:	2b60      	cmp	r3, #96	; 0x60
 8007212:	d877      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 8007214:	2b50      	cmp	r3, #80	; 0x50
 8007216:	d03c      	beq.n	8007292 <HAL_TIM_ConfigClockSource+0xfa>
 8007218:	2b50      	cmp	r3, #80	; 0x50
 800721a:	d873      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d058      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d86f      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 8007224:	2b30      	cmp	r3, #48	; 0x30
 8007226:	d064      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007228:	2b30      	cmp	r3, #48	; 0x30
 800722a:	d86b      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 800722c:	2b20      	cmp	r3, #32
 800722e:	d060      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007230:	2b20      	cmp	r3, #32
 8007232:	d867      	bhi.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d05c      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007238:	2b10      	cmp	r3, #16
 800723a:	d05a      	beq.n	80072f2 <HAL_TIM_ConfigClockSource+0x15a>
 800723c:	e062      	b.n	8007304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6899      	ldr	r1, [r3, #8]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	f000 fb35 	bl	80078bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	609a      	str	r2, [r3, #8]
      break;
 800726a:	e04f      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	6899      	ldr	r1, [r3, #8]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f000 fb1e 	bl	80078bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800728e:	609a      	str	r2, [r3, #8]
      break;
 8007290:	e03c      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6859      	ldr	r1, [r3, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	461a      	mov	r2, r3
 80072a0:	f000 fa92 	bl	80077c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2150      	movs	r1, #80	; 0x50
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 faeb 	bl	8007886 <TIM_ITRx_SetConfig>
      break;
 80072b0:	e02c      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6859      	ldr	r1, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 fab1 	bl	8007826 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2160      	movs	r1, #96	; 0x60
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fadb 	bl	8007886 <TIM_ITRx_SetConfig>
      break;
 80072d0:	e01c      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	461a      	mov	r2, r3
 80072e0:	f000 fa72 	bl	80077c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2140      	movs	r1, #64	; 0x40
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 facb 	bl	8007886 <TIM_ITRx_SetConfig>
      break;
 80072f0:	e00c      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f000 fac2 	bl	8007886 <TIM_ITRx_SetConfig>
      break;
 8007302:	e003      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
      break;
 8007308:	e000      	b.n	800730c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800730a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a40      	ldr	r2, [pc, #256]	; (800743c <TIM_Base_SetConfig+0x114>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d013      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d00f      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3d      	ldr	r2, [pc, #244]	; (8007440 <TIM_Base_SetConfig+0x118>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00b      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <TIM_Base_SetConfig+0x11c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <TIM_Base_SetConfig+0x120>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_Base_SetConfig+0x40>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a3a      	ldr	r2, [pc, #232]	; (800744c <TIM_Base_SetConfig+0x124>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d108      	bne.n	800737a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2f      	ldr	r2, [pc, #188]	; (800743c <TIM_Base_SetConfig+0x114>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007388:	d027      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a2c      	ldr	r2, [pc, #176]	; (8007440 <TIM_Base_SetConfig+0x118>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d023      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <TIM_Base_SetConfig+0x11c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01f      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <TIM_Base_SetConfig+0x120>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a29      	ldr	r2, [pc, #164]	; (800744c <TIM_Base_SetConfig+0x124>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d017      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a28      	ldr	r2, [pc, #160]	; (8007450 <TIM_Base_SetConfig+0x128>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d013      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a27      	ldr	r2, [pc, #156]	; (8007454 <TIM_Base_SetConfig+0x12c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <TIM_Base_SetConfig+0x130>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00b      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a25      	ldr	r2, [pc, #148]	; (800745c <TIM_Base_SetConfig+0x134>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d007      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a24      	ldr	r2, [pc, #144]	; (8007460 <TIM_Base_SetConfig+0x138>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d003      	beq.n	80073da <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a23      	ldr	r2, [pc, #140]	; (8007464 <TIM_Base_SetConfig+0x13c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d108      	bne.n	80073ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a0a      	ldr	r2, [pc, #40]	; (800743c <TIM_Base_SetConfig+0x114>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d003      	beq.n	8007420 <TIM_Base_SetConfig+0xf8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a0c      	ldr	r2, [pc, #48]	; (800744c <TIM_Base_SetConfig+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d103      	bne.n	8007428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	615a      	str	r2, [r3, #20]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40010400 	.word	0x40010400
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	40014800 	.word	0x40014800
 800745c:	40001800 	.word	0x40001800
 8007460:	40001c00 	.word	0x40001c00
 8007464:	40002000 	.word	0x40002000

08007468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 0302 	bic.w	r3, r3, #2
 80074b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a20      	ldr	r2, [pc, #128]	; (8007540 <TIM_OC1_SetConfig+0xd8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_OC1_SetConfig+0x64>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <TIM_OC1_SetConfig+0xdc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d10c      	bne.n	80074e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f023 0308 	bic.w	r3, r3, #8
 80074d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f023 0304 	bic.w	r3, r3, #4
 80074e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a15      	ldr	r2, [pc, #84]	; (8007540 <TIM_OC1_SetConfig+0xd8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_OC1_SetConfig+0x8e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a14      	ldr	r2, [pc, #80]	; (8007544 <TIM_OC1_SetConfig+0xdc>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d111      	bne.n	800751a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4313      	orrs	r3, r2
 8007518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	40010000 	.word	0x40010000
 8007544:	40010400 	.word	0x40010400

08007548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f023 0210 	bic.w	r2, r3, #16
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f023 0320 	bic.w	r3, r3, #32
 8007592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	011b      	lsls	r3, r3, #4
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a22      	ldr	r2, [pc, #136]	; (800762c <TIM_OC2_SetConfig+0xe4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_OC2_SetConfig+0x68>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a21      	ldr	r2, [pc, #132]	; (8007630 <TIM_OC2_SetConfig+0xe8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10d      	bne.n	80075cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a17      	ldr	r2, [pc, #92]	; (800762c <TIM_OC2_SetConfig+0xe4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_OC2_SetConfig+0x94>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a16      	ldr	r2, [pc, #88]	; (8007630 <TIM_OC2_SetConfig+0xe8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d113      	bne.n	8007604 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40010400 	.word	0x40010400

08007634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0303 	bic.w	r3, r3, #3
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800767c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a21      	ldr	r2, [pc, #132]	; (8007714 <TIM_OC3_SetConfig+0xe0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d003      	beq.n	800769a <TIM_OC3_SetConfig+0x66>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a20      	ldr	r2, [pc, #128]	; (8007718 <TIM_OC3_SetConfig+0xe4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d10d      	bne.n	80076b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a16      	ldr	r2, [pc, #88]	; (8007714 <TIM_OC3_SetConfig+0xe0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC3_SetConfig+0x92>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a15      	ldr	r2, [pc, #84]	; (8007718 <TIM_OC3_SetConfig+0xe4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d113      	bne.n	80076ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	621a      	str	r2, [r3, #32]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	40010000 	.word	0x40010000
 8007718:	40010400 	.word	0x40010400

0800771c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800774a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a12      	ldr	r2, [pc, #72]	; (80077c0 <TIM_OC4_SetConfig+0xa4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_OC4_SetConfig+0x68>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a11      	ldr	r2, [pc, #68]	; (80077c4 <TIM_OC4_SetConfig+0xa8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d109      	bne.n	8007798 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	019b      	lsls	r3, r3, #6
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	40010400 	.word	0x40010400

080077c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f023 030a 	bic.w	r3, r3, #10
 8007804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	621a      	str	r2, [r3, #32]
}
 800781a:	bf00      	nop
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007826:	b480      	push	{r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f023 0210 	bic.w	r2, r3, #16
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	031b      	lsls	r3, r3, #12
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007862:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f043 0307 	orr.w	r3, r3, #7
 80078a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	609a      	str	r2, [r3, #8]
}
 80078b0:	bf00      	nop
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	021a      	lsls	r2, r3, #8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	431a      	orrs	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2201      	movs	r2, #1
 8007910:	fa02 f303 	lsl.w	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	43db      	mvns	r3, r3
 800791e:	401a      	ands	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1a      	ldr	r2, [r3, #32]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	fa01 f303 	lsl.w	r3, r1, r3
 8007934:	431a      	orrs	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e05a      	b.n	8007a16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d022      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ac:	d01d      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d018      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1b      	ldr	r2, [pc, #108]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d013      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00e      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a18      	ldr	r2, [pc, #96]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d009      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d004      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d10c      	bne.n	8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40001800 	.word	0x40001800

08007a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d101      	bne.n	8007a5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e03d      	b.n	8007ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d101      	bne.n	8007af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e03f      	b.n	8007b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d106      	bne.n	8007b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fc fade 	bl	80040cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2224      	movs	r2, #36	; 0x24
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 ff6f 	bl	8008a0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b08a      	sub	sp, #40	; 0x28
 8007b82:	af02      	add	r7, sp, #8
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	603b      	str	r3, [r7, #0]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d17c      	bne.n	8007c98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_UART_Transmit+0x2c>
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e075      	b.n	8007c9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_UART_Transmit+0x3e>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e06e      	b.n	8007c9a <HAL_UART_Transmit+0x11c>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2221      	movs	r2, #33	; 0x21
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bd2:	f7fc fc0f 	bl	80043f4 <HAL_GetTick>
 8007bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	88fa      	ldrh	r2, [r7, #6]
 8007be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bec:	d108      	bne.n	8007c00 <HAL_UART_Transmit+0x82>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e003      	b.n	8007c08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007c10:	e02a      	b.n	8007c68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2180      	movs	r1, #128	; 0x80
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fc2b 	bl	8008478 <UART_WaitOnFlagUntilTimeout>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e036      	b.n	8007c9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10b      	bne.n	8007c4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	3302      	adds	r3, #2
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	e007      	b.n	8007c5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1cf      	bne.n	8007c12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2140      	movs	r1, #64	; 0x40
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fbfb 	bl	8008478 <UART_WaitOnFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e006      	b.n	8007c9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e000      	b.n	8007c9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c98:	2302      	movs	r3, #2
  }
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3720      	adds	r7, #32
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	4613      	mov	r3, r2
 8007cae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d11d      	bne.n	8007cf8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_UART_Receive_DMA+0x26>
 8007cc2:	88fb      	ldrh	r3, [r7, #6]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e016      	b.n	8007cfa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_UART_Receive_DMA+0x38>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e00f      	b.n	8007cfa <HAL_UART_Receive_DMA+0x58>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	461a      	mov	r2, r3
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fc30 	bl	8008554 <UART_Start_Receive_DMA>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	e000      	b.n	8007cfa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007cf8:	2302      	movs	r3, #2
  }
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b0ba      	sub	sp, #232	; 0xe8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10f      	bne.n	8007d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <HAL_UART_IRQHandler+0x66>
 8007d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fd97 	bl	8008896 <UART_Receive_IT>
      return;
 8007d68:	e256      	b.n	8008218 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 80de 	beq.w	8007f30 <HAL_UART_IRQHandler+0x22c>
 8007d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d106      	bne.n	8007d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80d1 	beq.w	8007f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00b      	beq.n	8007db2 <HAL_UART_IRQHandler+0xae>
 8007d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f043 0201 	orr.w	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_UART_IRQHandler+0xd2>
 8007dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f043 0202 	orr.w	r2, r3, #2
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_UART_IRQHandler+0xf6>
 8007de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f043 0204 	orr.w	r2, r3, #4
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d011      	beq.n	8007e2a <HAL_UART_IRQHandler+0x126>
 8007e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	f043 0208 	orr.w	r2, r3, #8
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 81ed 	beq.w	800820e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d008      	beq.n	8007e52 <HAL_UART_IRQHandler+0x14e>
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e44:	f003 0320 	and.w	r3, r3, #32
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fd22 	bl	8008896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <HAL_UART_IRQHandler+0x17a>
 8007e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d04f      	beq.n	8007f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc2a 	bl	80086d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d141      	bne.n	8007f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3314      	adds	r3, #20
 8007e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3314      	adds	r3, #20
 8007eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1d9      	bne.n	8007e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d013      	beq.n	8007f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	4a7d      	ldr	r2, [pc, #500]	; (80080e0 <HAL_UART_IRQHandler+0x3dc>)
 8007eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fc fd36 	bl	8004964 <HAL_DMA_Abort_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d016      	beq.n	8007f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f0c:	e00e      	b.n	8007f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f9a4 	bl	800825c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f14:	e00a      	b.n	8007f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f9a0 	bl	800825c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	e006      	b.n	8007f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f99c 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f2a:	e170      	b.n	800820e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2c:	bf00      	nop
    return;
 8007f2e:	e16e      	b.n	800820e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	f040 814a 	bne.w	80081ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 8143 	beq.w	80081ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 813c 	beq.w	80081ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f56:	2300      	movs	r3, #0
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60bb      	str	r3, [r7, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b40      	cmp	r3, #64	; 0x40
 8007f78:	f040 80b4 	bne.w	80080e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 8140 	beq.w	8008212 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	f080 8139 	bcs.w	8008212 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	f000 8088 	beq.w	80080c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	330c      	adds	r3, #12
 8007fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d9      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3314      	adds	r3, #20
 8008008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008014:	f023 0301 	bic.w	r3, r3, #1
 8008018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3314      	adds	r3, #20
 8008022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800802a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800802e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e1      	bne.n	8008002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3314      	adds	r3, #20
 8008044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800804e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3314      	adds	r3, #20
 800805e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e3      	bne.n	800803e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008096:	f023 0310 	bic.w	r3, r3, #16
 800809a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	330c      	adds	r3, #12
 80080a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80080a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80080aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e3      	bne.n	8008084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fc fbdf 	bl	8004884 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f8ca 	bl	8008270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080dc:	e099      	b.n	8008212 <HAL_UART_IRQHandler+0x50e>
 80080de:	bf00      	nop
 80080e0:	0800879f 	.word	0x0800879f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 808b 	beq.w	8008216 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8086 	beq.w	8008216 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800812e:	647a      	str	r2, [r7, #68]	; 0x44
 8008130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800813c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e3      	bne.n	800810a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3314      	adds	r3, #20
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	623b      	str	r3, [r7, #32]
   return(result);
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3314      	adds	r3, #20
 8008162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008166:	633a      	str	r2, [r7, #48]	; 0x30
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800816c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e3      	bne.n	8008142 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	e853 3f00 	ldrex	r3, [r3]
 8008196:	60fb      	str	r3, [r7, #12]
   return(result);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0310 	bic.w	r3, r3, #16
 800819e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80081ac:	61fa      	str	r2, [r7, #28]
 80081ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	69b9      	ldr	r1, [r7, #24]
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	617b      	str	r3, [r7, #20]
   return(result);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e3      	bne.n	8008188 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f852 	bl	8008270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081cc:	e023      	b.n	8008216 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <HAL_UART_IRQHandler+0x4ea>
 80081da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 faed 	bl	80087c6 <UART_Transmit_IT>
    return;
 80081ec:	e014      	b.n	8008218 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <HAL_UART_IRQHandler+0x514>
 80081fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fb2d 	bl	8008866 <UART_EndTransmit_IT>
    return;
 800820c:	e004      	b.n	8008218 <HAL_UART_IRQHandler+0x514>
    return;
 800820e:	bf00      	nop
 8008210:	e002      	b.n	8008218 <HAL_UART_IRQHandler+0x514>
      return;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_UART_IRQHandler+0x514>
      return;
 8008216:	bf00      	nop
  }
}
 8008218:	37e8      	adds	r7, #232	; 0xe8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop

08008220 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b09c      	sub	sp, #112	; 0x70
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d172      	bne.n	800838a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80082a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a6:	2200      	movs	r2, #0
 80082a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	330c      	adds	r3, #12
 80082b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	330c      	adds	r3, #12
 80082c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80082cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3314      	adds	r3, #20
 80082e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	e853 3f00 	ldrex	r3, [r3]
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80082ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	667b      	str	r3, [r7, #100]	; 0x64
 80082f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3314      	adds	r3, #20
 80082fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e5      	bne.n	80082de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3314      	adds	r3, #20
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	623b      	str	r3, [r7, #32]
   return(result);
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008328:	663b      	str	r3, [r7, #96]	; 0x60
 800832a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3314      	adds	r3, #20
 8008330:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008332:	633a      	str	r2, [r7, #48]	; 0x30
 8008334:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e5      	bne.n	8008312 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008352:	2b01      	cmp	r3, #1
 8008354:	d119      	bne.n	800838a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	330c      	adds	r3, #12
 800835c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	60fb      	str	r3, [r7, #12]
   return(result);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f023 0310 	bic.w	r3, r3, #16
 800836c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800836e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	330c      	adds	r3, #12
 8008374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008376:	61fa      	str	r2, [r7, #28]
 8008378:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	69b9      	ldr	r1, [r7, #24]
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	617b      	str	r3, [r7, #20]
   return(result);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e5      	bne.n	8008356 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	2b01      	cmp	r3, #1
 8008390:	d106      	bne.n	80083a0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008396:	4619      	mov	r1, r3
 8008398:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800839a:	f7ff ff69 	bl	8008270 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800839e:	e002      	b.n	80083a6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80083a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80083a2:	f7ff ff47 	bl	8008234 <HAL_UART_RxCpltCallback>
}
 80083a6:	bf00      	nop
 80083a8:	3770      	adds	r7, #112	; 0x70
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d108      	bne.n	80083d6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4619      	mov	r1, r3
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f7ff ff4e 	bl	8008270 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083d4:	e002      	b.n	80083dc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff ff36 	bl	8008248 <HAL_UART_RxHalfCpltCallback>
}
 80083dc:	bf00      	nop
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	bf0c      	ite	eq
 8008404:	2301      	moveq	r3, #1
 8008406:	2300      	movne	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b21      	cmp	r3, #33	; 0x21
 8008416:	d108      	bne.n	800842a <UART_DMAError+0x46>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008424:	68b8      	ldr	r0, [r7, #8]
 8008426:	f000 f92f 	bl	8008688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b22      	cmp	r3, #34	; 0x22
 800844a:	d108      	bne.n	800845e <UART_DMAError+0x7a>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2200      	movs	r2, #0
 8008456:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008458:	68b8      	ldr	r0, [r7, #8]
 800845a:	f000 f93d 	bl	80086d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	f043 0210 	orr.w	r2, r3, #16
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800846a:	68b8      	ldr	r0, [r7, #8]
 800846c:	f7ff fef6 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008470:	bf00      	nop
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b090      	sub	sp, #64	; 0x40
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	4613      	mov	r3, r2
 8008486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008488:	e050      	b.n	800852c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800848a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d04c      	beq.n	800852c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008494:	2b00      	cmp	r3, #0
 8008496:	d007      	beq.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008498:	f7fb ffac 	bl	80043f4 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d241      	bcs.n	800852c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084c8:	637a      	str	r2, [r7, #52]	; 0x34
 80084ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e5      	bne.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	613b      	str	r3, [r7, #16]
   return(result);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f023 0301 	bic.w	r3, r3, #1
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3314      	adds	r3, #20
 80084fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fc:	623a      	str	r2, [r7, #32]
 80084fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	69f9      	ldr	r1, [r7, #28]
 8008502:	6a3a      	ldr	r2, [r7, #32]
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	61bb      	str	r3, [r7, #24]
   return(result);
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e5      	bne.n	80084dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e00f      	b.n	800854c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4013      	ands	r3, r2
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	bf0c      	ite	eq
 800853c:	2301      	moveq	r3, #1
 800853e:	2300      	movne	r3, #0
 8008540:	b2db      	uxtb	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	429a      	cmp	r2, r3
 8008548:	d09f      	beq.n	800848a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3740      	adds	r7, #64	; 0x40
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b098      	sub	sp, #96	; 0x60
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	88fa      	ldrh	r2, [r7, #6]
 800856c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2222      	movs	r2, #34	; 0x22
 8008578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	4a3e      	ldr	r2, [pc, #248]	; (800867c <UART_Start_Receive_DMA+0x128>)
 8008582:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <UART_Start_Receive_DMA+0x12c>)
 800858a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008590:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <UART_Start_Receive_DMA+0x130>)
 8008592:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	2200      	movs	r2, #0
 800859a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3304      	adds	r3, #4
 80085ac:	4619      	mov	r1, r3
 80085ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	f7fc f90e 	bl	80047d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	613b      	str	r3, [r7, #16]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	330c      	adds	r3, #12
 80085dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e0:	e853 3f00 	ldrex	r3, [r3]
 80085e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	330c      	adds	r3, #12
 80085f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80085f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80085fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085fe:	e841 2300 	strex	r3, r2, [r1]
 8008602:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1e5      	bne.n	80085d6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3314      	adds	r3, #20
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	657b      	str	r3, [r7, #84]	; 0x54
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3314      	adds	r3, #20
 8008628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800862a:	63ba      	str	r2, [r7, #56]	; 0x38
 800862c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e5      	bne.n	800860a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	617b      	str	r3, [r7, #20]
   return(result);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008654:	653b      	str	r3, [r7, #80]	; 0x50
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800865e:	627a      	str	r2, [r7, #36]	; 0x24
 8008660:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6a39      	ldr	r1, [r7, #32]
 8008664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	61fb      	str	r3, [r7, #28]
   return(result);
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e5      	bne.n	800863e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3760      	adds	r7, #96	; 0x60
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	08008289 	.word	0x08008289
 8008680:	080083af 	.word	0x080083af
 8008684:	080083e5 	.word	0x080083e5

08008688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	; 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	330c      	adds	r3, #12
 8008696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	61ba      	str	r2, [r7, #24]
 80086b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	613b      	str	r3, [r7, #16]
   return(result);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80086cc:	bf00      	nop
 80086ce:	3724      	adds	r7, #36	; 0x24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b095      	sub	sp, #84	; 0x54
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008700:	643a      	str	r2, [r7, #64]	; 0x40
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3314      	adds	r3, #20
 800871a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	e853 3f00 	ldrex	r3, [r3]
 8008722:	61fb      	str	r3, [r7, #28]
   return(result);
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f023 0301 	bic.w	r3, r3, #1
 800872a:	64bb      	str	r3, [r7, #72]	; 0x48
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3314      	adds	r3, #20
 8008732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008734:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800873a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873c:	e841 2300 	strex	r3, r2, [r1]
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1e5      	bne.n	8008714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874c:	2b01      	cmp	r3, #1
 800874e:	d119      	bne.n	8008784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f023 0310 	bic.w	r3, r3, #16
 8008766:	647b      	str	r3, [r7, #68]	; 0x44
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008770:	61ba      	str	r2, [r7, #24]
 8008772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6979      	ldr	r1, [r7, #20]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	613b      	str	r3, [r7, #16]
   return(result);
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e5      	bne.n	8008750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008792:	bf00      	nop
 8008794:	3754      	adds	r7, #84	; 0x54
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fd4f 	bl	800825c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b21      	cmp	r3, #33	; 0x21
 80087d8:	d13e      	bne.n	8008858 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	d114      	bne.n	800880e <UART_Transmit_IT+0x48>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d110      	bne.n	800880e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008800:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	1c9a      	adds	r2, r3, #2
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	621a      	str	r2, [r3, #32]
 800880c:	e008      	b.n	8008820 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	1c59      	adds	r1, r3, #1
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6211      	str	r1, [r2, #32]
 8008818:	781a      	ldrb	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	b29b      	uxth	r3, r3
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4619      	mov	r1, r3
 800882e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10f      	bne.n	8008854 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008842:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008852:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e000      	b.n	800885a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008858:	2302      	movs	r3, #2
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff fcca 	bl	8008220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b08c      	sub	sp, #48	; 0x30
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b22      	cmp	r3, #34	; 0x22
 80088a8:	f040 80ab 	bne.w	8008a02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d117      	bne.n	80088e6 <UART_Receive_IT+0x50>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d113      	bne.n	80088e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	1c9a      	adds	r2, r3, #2
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	629a      	str	r2, [r3, #40]	; 0x28
 80088e4:	e026      	b.n	8008934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088f8:	d007      	beq.n	800890a <UART_Receive_IT+0x74>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10a      	bne.n	8008918 <UART_Receive_IT+0x82>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	b2da      	uxtb	r2, r3
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	e008      	b.n	800892a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008924:	b2da      	uxtb	r2, r3
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008938:	b29b      	uxth	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b29b      	uxth	r3, r3
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4619      	mov	r1, r3
 8008942:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008944:	2b00      	cmp	r3, #0
 8008946:	d15a      	bne.n	80089fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0220 	bic.w	r2, r2, #32
 8008956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68da      	ldr	r2, [r3, #12]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695a      	ldr	r2, [r3, #20]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f022 0201 	bic.w	r2, r2, #1
 8008976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008984:	2b01      	cmp	r3, #1
 8008986:	d135      	bne.n	80089f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	330c      	adds	r3, #12
 8008994:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	613b      	str	r3, [r7, #16]
   return(result);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f023 0310 	bic.w	r3, r3, #16
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	330c      	adds	r3, #12
 80089ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ae:	623a      	str	r2, [r7, #32]
 80089b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	69f9      	ldr	r1, [r7, #28]
 80089b4:	6a3a      	ldr	r2, [r7, #32]
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e5      	bne.n	800898e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b10      	cmp	r3, #16
 80089ce:	d10a      	bne.n	80089e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089d0:	2300      	movs	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fc3f 	bl	8008270 <HAL_UARTEx_RxEventCallback>
 80089f2:	e002      	b.n	80089fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff fc1d 	bl	8008234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e002      	b.n	8008a04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	e000      	b.n	8008a04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a02:	2302      	movs	r3, #2
  }
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3730      	adds	r7, #48	; 0x30
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a10:	b0c0      	sub	sp, #256	; 0x100
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a28:	68d9      	ldr	r1, [r3, #12]
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	ea40 0301 	orr.w	r3, r0, r1
 8008a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a64:	f021 010c 	bic.w	r1, r1, #12
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a72:	430b      	orrs	r3, r1
 8008a74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a86:	6999      	ldr	r1, [r3, #24]
 8008a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	ea40 0301 	orr.w	r3, r0, r1
 8008a92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4b8f      	ldr	r3, [pc, #572]	; (8008cd8 <UART_SetConfig+0x2cc>)
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d005      	beq.n	8008aac <UART_SetConfig+0xa0>
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	4b8d      	ldr	r3, [pc, #564]	; (8008cdc <UART_SetConfig+0x2d0>)
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d104      	bne.n	8008ab6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008aac:	f7fd fffa 	bl	8006aa4 <HAL_RCC_GetPCLK2Freq>
 8008ab0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ab4:	e003      	b.n	8008abe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ab6:	f7fd ffe1 	bl	8006a7c <HAL_RCC_GetPCLK1Freq>
 8008aba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac8:	f040 810c 	bne.w	8008ce4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ad6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ada:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ade:	4622      	mov	r2, r4
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	1891      	adds	r1, r2, r2
 8008ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ae6:	415b      	adcs	r3, r3
 8008ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008aea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008aee:	4621      	mov	r1, r4
 8008af0:	eb12 0801 	adds.w	r8, r2, r1
 8008af4:	4629      	mov	r1, r5
 8008af6:	eb43 0901 	adc.w	r9, r3, r1
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b0e:	4690      	mov	r8, r2
 8008b10:	4699      	mov	r9, r3
 8008b12:	4623      	mov	r3, r4
 8008b14:	eb18 0303 	adds.w	r3, r8, r3
 8008b18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	eb49 0303 	adc.w	r3, r9, r3
 8008b22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	18db      	adds	r3, r3, r3
 8008b3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008b40:	4613      	mov	r3, r2
 8008b42:	eb42 0303 	adc.w	r3, r2, r3
 8008b46:	657b      	str	r3, [r7, #84]	; 0x54
 8008b48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b50:	f7f8 f884 	bl	8000c5c <__aeabi_uldivmod>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4b61      	ldr	r3, [pc, #388]	; (8008ce0 <UART_SetConfig+0x2d4>)
 8008b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008b5e:	095b      	lsrs	r3, r3, #5
 8008b60:	011c      	lsls	r4, r3, #4
 8008b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b66:	2200      	movs	r2, #0
 8008b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	1891      	adds	r1, r2, r2
 8008b7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b7c:	415b      	adcs	r3, r3
 8008b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b84:	4641      	mov	r1, r8
 8008b86:	eb12 0a01 	adds.w	sl, r2, r1
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	eb43 0b01 	adc.w	fp, r3, r1
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ba4:	4692      	mov	sl, r2
 8008ba6:	469b      	mov	fp, r3
 8008ba8:	4643      	mov	r3, r8
 8008baa:	eb1a 0303 	adds.w	r3, sl, r3
 8008bae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	eb4b 0303 	adc.w	r3, fp, r3
 8008bb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008bcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	18db      	adds	r3, r3, r3
 8008bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	eb42 0303 	adc.w	r3, r2, r3
 8008bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008be2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008be6:	f7f8 f839 	bl	8000c5c <__aeabi_uldivmod>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4b3b      	ldr	r3, [pc, #236]	; (8008ce0 <UART_SetConfig+0x2d4>)
 8008bf2:	fba3 2301 	umull	r2, r3, r3, r1
 8008bf6:	095b      	lsrs	r3, r3, #5
 8008bf8:	2264      	movs	r2, #100	; 0x64
 8008bfa:	fb02 f303 	mul.w	r3, r2, r3
 8008bfe:	1acb      	subs	r3, r1, r3
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c06:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <UART_SetConfig+0x2d4>)
 8008c08:	fba3 2302 	umull	r2, r3, r3, r2
 8008c0c:	095b      	lsrs	r3, r3, #5
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c14:	441c      	add	r4, r3
 8008c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	1891      	adds	r1, r2, r2
 8008c2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c30:	415b      	adcs	r3, r3
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c38:	4641      	mov	r1, r8
 8008c3a:	1851      	adds	r1, r2, r1
 8008c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8008c3e:	4649      	mov	r1, r9
 8008c40:	414b      	adcs	r3, r1
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
 8008c44:	f04f 0200 	mov.w	r2, #0
 8008c48:	f04f 0300 	mov.w	r3, #0
 8008c4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c50:	4659      	mov	r1, fp
 8008c52:	00cb      	lsls	r3, r1, #3
 8008c54:	4651      	mov	r1, sl
 8008c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c5a:	4651      	mov	r1, sl
 8008c5c:	00ca      	lsls	r2, r1, #3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	4619      	mov	r1, r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	4642      	mov	r2, r8
 8008c66:	189b      	adds	r3, r3, r2
 8008c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	460a      	mov	r2, r1
 8008c70:	eb42 0303 	adc.w	r3, r2, r3
 8008c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	18db      	adds	r3, r3, r3
 8008c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c92:	4613      	mov	r3, r2
 8008c94:	eb42 0303 	adc.w	r3, r2, r3
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ca2:	f7f7 ffdb 	bl	8000c5c <__aeabi_uldivmod>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4b0d      	ldr	r3, [pc, #52]	; (8008ce0 <UART_SetConfig+0x2d4>)
 8008cac:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	2164      	movs	r1, #100	; 0x64
 8008cb4:	fb01 f303 	mul.w	r3, r1, r3
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	3332      	adds	r3, #50	; 0x32
 8008cbe:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <UART_SetConfig+0x2d4>)
 8008cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc4:	095b      	lsrs	r3, r3, #5
 8008cc6:	f003 0207 	and.w	r2, r3, #7
 8008cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4422      	add	r2, r4
 8008cd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cd4:	e105      	b.n	8008ee2 <UART_SetConfig+0x4d6>
 8008cd6:	bf00      	nop
 8008cd8:	40011000 	.word	0x40011000
 8008cdc:	40011400 	.word	0x40011400
 8008ce0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008cf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008cf6:	4642      	mov	r2, r8
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	1891      	adds	r1, r2, r2
 8008cfc:	6239      	str	r1, [r7, #32]
 8008cfe:	415b      	adcs	r3, r3
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
 8008d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d06:	4641      	mov	r1, r8
 8008d08:	1854      	adds	r4, r2, r1
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	eb43 0501 	adc.w	r5, r3, r1
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	f04f 0300 	mov.w	r3, #0
 8008d18:	00eb      	lsls	r3, r5, #3
 8008d1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d1e:	00e2      	lsls	r2, r4, #3
 8008d20:	4614      	mov	r4, r2
 8008d22:	461d      	mov	r5, r3
 8008d24:	4643      	mov	r3, r8
 8008d26:	18e3      	adds	r3, r4, r3
 8008d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	eb45 0303 	adc.w	r3, r5, r3
 8008d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d52:	4629      	mov	r1, r5
 8008d54:	008b      	lsls	r3, r1, #2
 8008d56:	4621      	mov	r1, r4
 8008d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	008a      	lsls	r2, r1, #2
 8008d60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d64:	f7f7 ff7a 	bl	8000c5c <__aeabi_uldivmod>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4b60      	ldr	r3, [pc, #384]	; (8008ef0 <UART_SetConfig+0x4e4>)
 8008d6e:	fba3 2302 	umull	r2, r3, r3, r2
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	011c      	lsls	r4, r3, #4
 8008d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	1891      	adds	r1, r2, r2
 8008d8e:	61b9      	str	r1, [r7, #24]
 8008d90:	415b      	adcs	r3, r3
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d98:	4641      	mov	r1, r8
 8008d9a:	1851      	adds	r1, r2, r1
 8008d9c:	6139      	str	r1, [r7, #16]
 8008d9e:	4649      	mov	r1, r9
 8008da0:	414b      	adcs	r3, r1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008db0:	4659      	mov	r1, fp
 8008db2:	00cb      	lsls	r3, r1, #3
 8008db4:	4651      	mov	r1, sl
 8008db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dba:	4651      	mov	r1, sl
 8008dbc:	00ca      	lsls	r2, r1, #3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dcc:	464b      	mov	r3, r9
 8008dce:	460a      	mov	r2, r1
 8008dd0:	eb42 0303 	adc.w	r3, r2, r3
 8008dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008de2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008df0:	4649      	mov	r1, r9
 8008df2:	008b      	lsls	r3, r1, #2
 8008df4:	4641      	mov	r1, r8
 8008df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	008a      	lsls	r2, r1, #2
 8008dfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e02:	f7f7 ff2b 	bl	8000c5c <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <UART_SetConfig+0x4e4>)
 8008e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2164      	movs	r1, #100	; 0x64
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a34      	ldr	r2, [pc, #208]	; (8008ef0 <UART_SetConfig+0x4e4>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e2a:	441c      	add	r4, r3
 8008e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e30:	2200      	movs	r2, #0
 8008e32:	673b      	str	r3, [r7, #112]	; 0x70
 8008e34:	677a      	str	r2, [r7, #116]	; 0x74
 8008e36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	1891      	adds	r1, r2, r2
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	415b      	adcs	r3, r3
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e4a:	4641      	mov	r1, r8
 8008e4c:	1851      	adds	r1, r2, r1
 8008e4e:	6039      	str	r1, [r7, #0]
 8008e50:	4649      	mov	r1, r9
 8008e52:	414b      	adcs	r3, r1
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e62:	4659      	mov	r1, fp
 8008e64:	00cb      	lsls	r3, r1, #3
 8008e66:	4651      	mov	r1, sl
 8008e68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e6c:	4651      	mov	r1, sl
 8008e6e:	00ca      	lsls	r2, r1, #3
 8008e70:	4610      	mov	r0, r2
 8008e72:	4619      	mov	r1, r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	4642      	mov	r2, r8
 8008e78:	189b      	adds	r3, r3, r2
 8008e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e7c:	464b      	mov	r3, r9
 8008e7e:	460a      	mov	r2, r1
 8008e80:	eb42 0303 	adc.w	r3, r2, r3
 8008e84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8008e90:	667a      	str	r2, [r7, #100]	; 0x64
 8008e92:	f04f 0200 	mov.w	r2, #0
 8008e96:	f04f 0300 	mov.w	r3, #0
 8008e9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e9e:	4649      	mov	r1, r9
 8008ea0:	008b      	lsls	r3, r1, #2
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	008a      	lsls	r2, r1, #2
 8008eac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008eb0:	f7f7 fed4 	bl	8000c5c <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <UART_SetConfig+0x4e4>)
 8008eba:	fba3 1302 	umull	r1, r3, r3, r2
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	2164      	movs	r1, #100	; 0x64
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	3332      	adds	r3, #50	; 0x32
 8008ecc:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <UART_SetConfig+0x4e4>)
 8008ece:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4422      	add	r2, r4
 8008ee0:	609a      	str	r2, [r3, #8]
}
 8008ee2:	bf00      	nop
 8008ee4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eee:	bf00      	nop
 8008ef0:	51eb851f 	.word	0x51eb851f

08008ef4 <__NVIC_SetPriority>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	6039      	str	r1, [r7, #0]
 8008efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	db0a      	blt.n	8008f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	490c      	ldr	r1, [pc, #48]	; (8008f40 <__NVIC_SetPriority+0x4c>)
 8008f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f12:	0112      	lsls	r2, r2, #4
 8008f14:	b2d2      	uxtb	r2, r2
 8008f16:	440b      	add	r3, r1
 8008f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f1c:	e00a      	b.n	8008f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	4908      	ldr	r1, [pc, #32]	; (8008f44 <__NVIC_SetPriority+0x50>)
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	3b04      	subs	r3, #4
 8008f2c:	0112      	lsls	r2, r2, #4
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	440b      	add	r3, r1
 8008f32:	761a      	strb	r2, [r3, #24]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	e000e100 	.word	0xe000e100
 8008f44:	e000ed00 	.word	0xe000ed00

08008f48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f06f 0004 	mvn.w	r0, #4
 8008f52:	f7ff ffcf 	bl	8008ef4 <__NVIC_SetPriority>
#endif
}
 8008f56:	bf00      	nop
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f62:	f3ef 8305 	mrs	r3, IPSR
 8008f66:	603b      	str	r3, [r7, #0]
  return(result);
 8008f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f6e:	f06f 0305 	mvn.w	r3, #5
 8008f72:	607b      	str	r3, [r7, #4]
 8008f74:	e00c      	b.n	8008f90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <osKernelInitialize+0x44>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d105      	bne.n	8008f8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f7e:	4b08      	ldr	r3, [pc, #32]	; (8008fa0 <osKernelInitialize+0x44>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	607b      	str	r3, [r7, #4]
 8008f88:	e002      	b.n	8008f90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f90:	687b      	ldr	r3, [r7, #4]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	200008c8 	.word	0x200008c8

08008fa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008faa:	f3ef 8305 	mrs	r3, IPSR
 8008fae:	603b      	str	r3, [r7, #0]
  return(result);
 8008fb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fb6:	f06f 0305 	mvn.w	r3, #5
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	e010      	b.n	8008fe0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <osKernelStart+0x48>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d109      	bne.n	8008fda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fc6:	f7ff ffbf 	bl	8008f48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fca:	4b08      	ldr	r3, [pc, #32]	; (8008fec <osKernelStart+0x48>)
 8008fcc:	2202      	movs	r2, #2
 8008fce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fd0:	f001 f910 	bl	800a1f4 <vTaskStartScheduler>
      stat = osOK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	e002      	b.n	8008fe0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fda:	f04f 33ff 	mov.w	r3, #4294967295
 8008fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fe0:	687b      	ldr	r3, [r7, #4]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	200008c8 	.word	0x200008c8

08008ff0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	; 0x38
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009000:	f3ef 8305 	mrs	r3, IPSR
 8009004:	617b      	str	r3, [r7, #20]
  return(result);
 8009006:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009008:	2b00      	cmp	r3, #0
 800900a:	d17e      	bne.n	800910a <osThreadNew+0x11a>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d07b      	beq.n	800910a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009012:	2380      	movs	r3, #128	; 0x80
 8009014:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009016:	2318      	movs	r3, #24
 8009018:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800901a:	2300      	movs	r3, #0
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800901e:	f04f 33ff 	mov.w	r3, #4294967295
 8009022:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d045      	beq.n	80090b6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d002      	beq.n	8009038 <osThreadNew+0x48>
        name = attr->name;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d008      	beq.n	800905e <osThreadNew+0x6e>
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b38      	cmp	r3, #56	; 0x38
 8009050:	d805      	bhi.n	800905e <osThreadNew+0x6e>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <osThreadNew+0x72>
        return (NULL);
 800905e:	2300      	movs	r3, #0
 8009060:	e054      	b.n	800910c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00e      	beq.n	8009098 <osThreadNew+0xa8>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	2b5b      	cmp	r3, #91	; 0x5b
 8009080:	d90a      	bls.n	8009098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009086:	2b00      	cmp	r3, #0
 8009088:	d006      	beq.n	8009098 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <osThreadNew+0xa8>
        mem = 1;
 8009092:	2301      	movs	r3, #1
 8009094:	61bb      	str	r3, [r7, #24]
 8009096:	e010      	b.n	80090ba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10c      	bne.n	80090ba <osThreadNew+0xca>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d108      	bne.n	80090ba <osThreadNew+0xca>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <osThreadNew+0xca>
          mem = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61bb      	str	r3, [r7, #24]
 80090b4:	e001      	b.n	80090ba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d110      	bne.n	80090e2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090c8:	9202      	str	r2, [sp, #8]
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6a3a      	ldr	r2, [r7, #32]
 80090d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fe38 	bl	8009d4c <xTaskCreateStatic>
 80090dc:	4603      	mov	r3, r0
 80090de:	613b      	str	r3, [r7, #16]
 80090e0:	e013      	b.n	800910a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d110      	bne.n	800910a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	f107 0310 	add.w	r3, r7, #16
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fe83 	bl	8009e06 <xTaskCreate>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d001      	beq.n	800910a <osThreadNew+0x11a>
            hTask = NULL;
 8009106:	2300      	movs	r3, #0
 8009108:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800910a:	693b      	ldr	r3, [r7, #16]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3728      	adds	r7, #40	; 0x28
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800911c:	f3ef 8305 	mrs	r3, IPSR
 8009120:	60bb      	str	r3, [r7, #8]
  return(result);
 8009122:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <osDelay+0x1c>
    stat = osErrorISR;
 8009128:	f06f 0305 	mvn.w	r3, #5
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	e007      	b.n	8009140 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009130:	2300      	movs	r3, #0
 8009132:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <osDelay+0x2c>
      vTaskDelay(ticks);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 f826 	bl	800a18c <vTaskDelay>
    }
  }

  return (stat);
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009152:	f3ef 8305 	mrs	r3, IPSR
 8009156:	60fb      	str	r3, [r7, #12]
  return(result);
 8009158:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800915e:	f06f 0305 	mvn.w	r3, #5
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e019      	b.n	800919a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800916a:	f001 f955 	bl	800a418 <xTaskGetTickCount>
 800916e:	4603      	mov	r3, r0
 8009170:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d009      	beq.n	8009194 <osDelayUntil+0x4a>
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	db06      	blt.n	8009194 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009186:	f107 0308 	add.w	r3, r7, #8
 800918a:	6939      	ldr	r1, [r7, #16]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 ff7f 	bl	800a090 <vTaskDelayUntil>
 8009192:	e002      	b.n	800919a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009194:	f06f 0303 	mvn.w	r3, #3
 8009198:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800919a:	697b      	ldr	r3, [r7, #20]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a07      	ldr	r2, [pc, #28]	; (80091d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80091b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4a06      	ldr	r2, [pc, #24]	; (80091d4 <vApplicationGetIdleTaskMemory+0x30>)
 80091ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2280      	movs	r2, #128	; 0x80
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	200008cc 	.word	0x200008cc
 80091d4:	20000928 	.word	0x20000928

080091d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	4a07      	ldr	r2, [pc, #28]	; (8009204 <vApplicationGetTimerTaskMemory+0x2c>)
 80091e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	4a06      	ldr	r2, [pc, #24]	; (8009208 <vApplicationGetTimerTaskMemory+0x30>)
 80091ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091f6:	601a      	str	r2, [r3, #0]
}
 80091f8:	bf00      	nop
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20000b28 	.word	0x20000b28
 8009208:	20000b84 	.word	0x20000b84

0800920c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f103 0208 	add.w	r2, r3, #8
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f103 0208 	add.w	r2, r3, #8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f103 0208 	add.w	r2, r3, #8
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	1c5a      	adds	r2, r3, #1
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d103      	bne.n	80092ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e00c      	b.n	80092e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3308      	adds	r3, #8
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e002      	b.n	80092dc <vListInsert+0x2e>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d2f6      	bcs.n	80092d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6892      	ldr	r2, [r2, #8]
 8009336:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6852      	ldr	r2, [r2, #4]
 8009340:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d103      	bne.n	8009354 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	1e5a      	subs	r2, r3, #1
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800939e:	f002 f8c9 	bl	800b534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093ae:	fb01 f303 	mul.w	r3, r1, r3
 80093b2:	441a      	add	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ce:	3b01      	subs	r3, #1
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	441a      	add	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	22ff      	movs	r2, #255	; 0xff
 80093e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	22ff      	movs	r2, #255	; 0xff
 80093ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d114      	bne.n	800941e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01a      	beq.n	8009432 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3310      	adds	r3, #16
 8009400:	4618      	mov	r0, r3
 8009402:	f001 f981 	bl	800a708 <xTaskRemoveFromEventList>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800940c:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <xQueueGenericReset+0xcc>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	e009      	b.n	8009432 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3310      	adds	r3, #16
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff fef2 	bl	800920c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3324      	adds	r3, #36	; 0x24
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff feed 	bl	800920c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009432:	f002 f8af 	bl	800b594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009436:	2301      	movs	r3, #1
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08e      	sub	sp, #56	; 0x38
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10a      	bne.n	800946e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d002      	beq.n	8009496 <xQueueGenericCreateStatic+0x52>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <xQueueGenericCreateStatic+0x56>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <xQueueGenericCreateStatic+0x58>
 800949a:	2300      	movs	r3, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	623b      	str	r3, [r7, #32]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <xQueueGenericCreateStatic+0x7e>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <xQueueGenericCreateStatic+0x82>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <xQueueGenericCreateStatic+0x84>
 80094c6:	2300      	movs	r3, #0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	61fb      	str	r3, [r7, #28]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094e2:	2350      	movs	r3, #80	; 0x50
 80094e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b50      	cmp	r3, #80	; 0x50
 80094ea:	d00a      	beq.n	8009502 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	61bb      	str	r3, [r7, #24]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009502:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00d      	beq.n	800952a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009516:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	4613      	mov	r3, r2
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	68b9      	ldr	r1, [r7, #8]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f805 	bl	8009534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800952a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800952c:	4618      	mov	r0, r3
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d103      	bne.n	8009550 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e002      	b.n	8009556 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009562:	2101      	movs	r1, #1
 8009564:	69b8      	ldr	r0, [r7, #24]
 8009566:	f7ff ff05 	bl	8009374 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <xQueueGenericSend+0x32>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <xQueueGenericSend+0x40>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <xQueueGenericSend+0x44>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <xQueueGenericSend+0x46>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <xQueueGenericSend+0x60>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d103      	bne.n	80095ea <xQueueGenericSend+0x6e>
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <xQueueGenericSend+0x72>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <xQueueGenericSend+0x74>
 80095ee:	2300      	movs	r3, #0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xQueueGenericSend+0x8e>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	623b      	str	r3, [r7, #32]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800960a:	f001 fa3b 	bl	800aa84 <xTaskGetSchedulerState>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <xQueueGenericSend+0x9e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <xQueueGenericSend+0xa2>
 800961a:	2301      	movs	r3, #1
 800961c:	e000      	b.n	8009620 <xQueueGenericSend+0xa4>
 800961e:	2300      	movs	r3, #0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <xQueueGenericSend+0xbe>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	61fb      	str	r3, [r7, #28]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800963a:	f001 ff7b 	bl	800b534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	429a      	cmp	r2, r3
 8009648:	d302      	bcc.n	8009650 <xQueueGenericSend+0xd4>
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d129      	bne.n	80096a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009656:	f000 fa0b 	bl	8009a70 <prvCopyDataToQueue>
 800965a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	3324      	adds	r3, #36	; 0x24
 8009668:	4618      	mov	r0, r3
 800966a:	f001 f84d 	bl	800a708 <xTaskRemoveFromEventList>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d013      	beq.n	800969c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009674:	4b3f      	ldr	r3, [pc, #252]	; (8009774 <xQueueGenericSend+0x1f8>)
 8009676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	e00a      	b.n	800969c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800968c:	4b39      	ldr	r3, [pc, #228]	; (8009774 <xQueueGenericSend+0x1f8>)
 800968e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800969c:	f001 ff7a 	bl	800b594 <vPortExitCritical>
				return pdPASS;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e063      	b.n	800976c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096aa:	f001 ff73 	bl	800b594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	e05c      	b.n	800976c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d106      	bne.n	80096c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f887 	bl	800a7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096c2:	2301      	movs	r3, #1
 80096c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096c6:	f001 ff65 	bl	800b594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ca:	f000 fdf9 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096ce:	f001 ff31 	bl	800b534 <vPortEnterCritical>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096d8:	b25b      	sxtb	r3, r3
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSend+0x16c>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d103      	bne.n	80096fe <xQueueGenericSend+0x182>
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096fe:	f001 ff49 	bl	800b594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009702:	1d3a      	adds	r2, r7, #4
 8009704:	f107 0314 	add.w	r3, r7, #20
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f001 f876 	bl	800a7fc <xTaskCheckForTimeOut>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d124      	bne.n	8009760 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009718:	f000 faa2 	bl	8009c60 <prvIsQueueFull>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d018      	beq.n	8009754 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	3310      	adds	r3, #16
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f000 ff9c 	bl	800a668 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009732:	f000 fa2d 	bl	8009b90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009736:	f000 fdd1 	bl	800a2dc <xTaskResumeAll>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f af7c 	bne.w	800963a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009742:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <xQueueGenericSend+0x1f8>)
 8009744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	e772      	b.n	800963a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009756:	f000 fa1b 	bl	8009b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800975a:	f000 fdbf 	bl	800a2dc <xTaskResumeAll>
 800975e:	e76c      	b.n	800963a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009762:	f000 fa15 	bl	8009b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009766:	f000 fdb9 	bl	800a2dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800976a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800976c:	4618      	mov	r0, r3
 800976e:	3738      	adds	r7, #56	; 0x38
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b090      	sub	sp, #64	; 0x40
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <xQueueGenericSendFromISR+0x3c>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <xQueueGenericSendFromISR+0x40>
 80097b4:	2301      	movs	r3, #1
 80097b6:	e000      	b.n	80097ba <xQueueGenericSendFromISR+0x42>
 80097b8:	2300      	movs	r3, #0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097d0:	bf00      	nop
 80097d2:	e7fe      	b.n	80097d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d103      	bne.n	80097e2 <xQueueGenericSendFromISR+0x6a>
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <xQueueGenericSendFromISR+0x6e>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e000      	b.n	80097e8 <xQueueGenericSendFromISR+0x70>
 80097e6:	2300      	movs	r3, #0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	623b      	str	r3, [r7, #32]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009802:	f001 ff79 	bl	800b6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009806:	f3ef 8211 	mrs	r2, BASEPRI
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	61fa      	str	r2, [r7, #28]
 800981c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800981e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <xQueueGenericSendFromISR+0xbc>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d12f      	bne.n	8009894 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800983e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	68b9      	ldr	r1, [r7, #8]
 8009848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800984a:	f000 f911 	bl	8009a70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800984e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d112      	bne.n	800987e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d016      	beq.n	800988e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009862:	3324      	adds	r3, #36	; 0x24
 8009864:	4618      	mov	r0, r3
 8009866:	f000 ff4f 	bl	800a708 <xTaskRemoveFromEventList>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00e      	beq.n	800988e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	e007      	b.n	800988e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800987e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009882:	3301      	adds	r3, #1
 8009884:	b2db      	uxtb	r3, r3
 8009886:	b25a      	sxtb	r2, r3
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800988e:	2301      	movs	r3, #1
 8009890:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009892:	e001      	b.n	8009898 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009894:	2300      	movs	r3, #0
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80098a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3740      	adds	r7, #64	; 0x40
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08c      	sub	sp, #48	; 0x30
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80098bc:	2300      	movs	r3, #0
 80098be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <xQueueReceive+0x30>
	__asm volatile
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	623b      	str	r3, [r7, #32]
}
 80098dc:	bf00      	nop
 80098de:	e7fe      	b.n	80098de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <xQueueReceive+0x3e>
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <xQueueReceive+0x42>
 80098ee:	2301      	movs	r3, #1
 80098f0:	e000      	b.n	80098f4 <xQueueReceive+0x44>
 80098f2:	2300      	movs	r3, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <xQueueReceive+0x5e>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	f383 8811 	msr	BASEPRI, r3
 8009900:	f3bf 8f6f 	isb	sy
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	61fb      	str	r3, [r7, #28]
}
 800990a:	bf00      	nop
 800990c:	e7fe      	b.n	800990c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800990e:	f001 f8b9 	bl	800aa84 <xTaskGetSchedulerState>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <xQueueReceive+0x6e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <xQueueReceive+0x72>
 800991e:	2301      	movs	r3, #1
 8009920:	e000      	b.n	8009924 <xQueueReceive+0x74>
 8009922:	2300      	movs	r3, #0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xQueueReceive+0x8e>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	61bb      	str	r3, [r7, #24]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800993e:	f001 fdf9 	bl	800b534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009946:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01f      	beq.n	800998e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009952:	f000 f8f7 	bl	8009b44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	1e5a      	subs	r2, r3, #1
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00f      	beq.n	8009986 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	3310      	adds	r3, #16
 800996a:	4618      	mov	r0, r3
 800996c:	f000 fecc 	bl	800a708 <xTaskRemoveFromEventList>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009976:	4b3d      	ldr	r3, [pc, #244]	; (8009a6c <xQueueReceive+0x1bc>)
 8009978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009986:	f001 fe05 	bl	800b594 <vPortExitCritical>
				return pdPASS;
 800998a:	2301      	movs	r3, #1
 800998c:	e069      	b.n	8009a62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009994:	f001 fdfe 	bl	800b594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009998:	2300      	movs	r3, #0
 800999a:	e062      	b.n	8009a62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d106      	bne.n	80099b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099a2:	f107 0310 	add.w	r3, r7, #16
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 ff12 	bl	800a7d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099b0:	f001 fdf0 	bl	800b594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099b4:	f000 fc84 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099b8:	f001 fdbc 	bl	800b534 <vPortEnterCritical>
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c8:	d103      	bne.n	80099d2 <xQueueReceive+0x122>
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099d8:	b25b      	sxtb	r3, r3
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d103      	bne.n	80099e8 <xQueueReceive+0x138>
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099e8:	f001 fdd4 	bl	800b594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099ec:	1d3a      	adds	r2, r7, #4
 80099ee:	f107 0310 	add.w	r3, r7, #16
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 ff01 	bl	800a7fc <xTaskCheckForTimeOut>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d123      	bne.n	8009a48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a02:	f000 f917 	bl	8009c34 <prvIsQueueEmpty>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d017      	beq.n	8009a3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	3324      	adds	r3, #36	; 0x24
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fe27 	bl	800a668 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a1c:	f000 f8b8 	bl	8009b90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a20:	f000 fc5c 	bl	800a2dc <xTaskResumeAll>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d189      	bne.n	800993e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009a2a:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <xQueueReceive+0x1bc>)
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	e780      	b.n	800993e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a3e:	f000 f8a7 	bl	8009b90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a42:	f000 fc4b 	bl	800a2dc <xTaskResumeAll>
 8009a46:	e77a      	b.n	800993e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4a:	f000 f8a1 	bl	8009b90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a4e:	f000 fc45 	bl	800a2dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a54:	f000 f8ee 	bl	8009c34 <prvIsQueueEmpty>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f43f af6f 	beq.w	800993e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3730      	adds	r7, #48	; 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10d      	bne.n	8009aaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d14d      	bne.n	8009b32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f001 f810 	bl	800aac0 <xTaskPriorityDisinherit>
 8009aa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	e043      	b.n	8009b32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d119      	bne.n	8009ae4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6858      	ldr	r0, [r3, #4]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab8:	461a      	mov	r2, r3
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	f002 f870 	bl	800bba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac8:	441a      	add	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d32b      	bcc.n	8009b32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	e026      	b.n	8009b32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68d8      	ldr	r0, [r3, #12]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	461a      	mov	r2, r3
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	f002 f856 	bl	800bba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	425b      	negs	r3, r3
 8009afe:	441a      	add	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d207      	bcs.n	8009b20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	425b      	negs	r3, r3
 8009b1a:	441a      	add	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d105      	bne.n	8009b32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b3a:	697b      	ldr	r3, [r7, #20]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d018      	beq.n	8009b88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	441a      	add	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d303      	bcc.n	8009b78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68d9      	ldr	r1, [r3, #12]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	461a      	mov	r2, r3
 8009b82:	6838      	ldr	r0, [r7, #0]
 8009b84:	f002 f80c 	bl	800bba0 <memcpy>
	}
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b98:	f001 fccc 	bl	800b534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ba4:	e011      	b.n	8009bca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d012      	beq.n	8009bd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3324      	adds	r3, #36	; 0x24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 fda8 	bl	800a708 <xTaskRemoveFromEventList>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bbe:	f000 fe7f 	bl	800a8c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dce9      	bgt.n	8009ba6 <prvUnlockQueue+0x16>
 8009bd2:	e000      	b.n	8009bd6 <prvUnlockQueue+0x46>
					break;
 8009bd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	22ff      	movs	r2, #255	; 0xff
 8009bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bde:	f001 fcd9 	bl	800b594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009be2:	f001 fca7 	bl	800b534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bee:	e011      	b.n	8009c14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d012      	beq.n	8009c1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3310      	adds	r3, #16
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fd83 	bl	800a708 <xTaskRemoveFromEventList>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c08:	f000 fe5a 	bl	800a8c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c0c:	7bbb      	ldrb	r3, [r7, #14]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dce9      	bgt.n	8009bf0 <prvUnlockQueue+0x60>
 8009c1c:	e000      	b.n	8009c20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	22ff      	movs	r2, #255	; 0xff
 8009c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c28:	f001 fcb4 	bl	800b594 <vPortExitCritical>
}
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c3c:	f001 fc7a 	bl	800b534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e001      	b.n	8009c52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c52:	f001 fc9f 	bl	800b594 <vPortExitCritical>

	return xReturn;
 8009c56:	68fb      	ldr	r3, [r7, #12]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c68:	f001 fc64 	bl	800b534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d102      	bne.n	8009c7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
 8009c7c:	e001      	b.n	8009c82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c82:	f001 fc87 	bl	800b594 <vPortExitCritical>

	return xReturn;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e014      	b.n	8009cca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009ca0:	4a0f      	ldr	r2, [pc, #60]	; (8009ce0 <vQueueAddToRegistry+0x50>)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10b      	bne.n	8009cc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cac:	490c      	ldr	r1, [pc, #48]	; (8009ce0 <vQueueAddToRegistry+0x50>)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ce0 <vQueueAddToRegistry+0x50>)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	4413      	add	r3, r2
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009cc2:	e006      	b.n	8009cd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	d9e7      	bls.n	8009ca0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000f84 	.word	0x20000f84

08009ce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cf4:	f001 fc1e 	bl	800b534 <vPortEnterCritical>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d04:	d103      	bne.n	8009d0e <vQueueWaitForMessageRestricted+0x2a>
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d14:	b25b      	sxtb	r3, r3
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d103      	bne.n	8009d24 <vQueueWaitForMessageRestricted+0x40>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d24:	f001 fc36 	bl	800b594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	3324      	adds	r3, #36	; 0x24
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68b9      	ldr	r1, [r7, #8]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fcb9 	bl	800a6b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d3e:	6978      	ldr	r0, [r7, #20]
 8009d40:	f7ff ff26 	bl	8009b90 <prvUnlockQueue>
	}
 8009d44:	bf00      	nop
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	; 0x38
 8009d50:	af04      	add	r7, sp, #16
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	623b      	str	r3, [r7, #32]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xTaskCreateStatic+0x46>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	61fb      	str	r3, [r7, #28]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d92:	235c      	movs	r3, #92	; 0x5c
 8009d94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	2b5c      	cmp	r3, #92	; 0x5c
 8009d9a:	d00a      	beq.n	8009db2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	61bb      	str	r3, [r7, #24]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009db2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d01e      	beq.n	8009df8 <xTaskCreateStatic+0xac>
 8009dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01b      	beq.n	8009df8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	2202      	movs	r2, #2
 8009dce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	f107 0314 	add.w	r3, r7, #20
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f000 f850 	bl	8009e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009df2:	f000 f8dd 	bl	8009fb0 <prvAddNewTaskToReadyList>
 8009df6:	e001      	b.n	8009dfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009dfc:	697b      	ldr	r3, [r7, #20]
	}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3728      	adds	r7, #40	; 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b08c      	sub	sp, #48	; 0x30
 8009e0a:	af04      	add	r7, sp, #16
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	603b      	str	r3, [r7, #0]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fcac 	bl	800b778 <pvPortMalloc>
 8009e20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00e      	beq.n	8009e46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e28:	205c      	movs	r0, #92	; 0x5c
 8009e2a:	f001 fca5 	bl	800b778 <pvPortMalloc>
 8009e2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e3c:	e005      	b.n	8009e4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e3e:	6978      	ldr	r0, [r7, #20]
 8009e40:	f001 fd66 	bl	800b910 <vPortFree>
 8009e44:	e001      	b.n	8009e4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d017      	beq.n	8009e80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e58:	88fa      	ldrh	r2, [r7, #6]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	9302      	str	r3, [sp, #8]
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f80e 	bl	8009e90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e74:	69f8      	ldr	r0, [r7, #28]
 8009e76:	f000 f89b 	bl	8009fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	61bb      	str	r3, [r7, #24]
 8009e7e:	e002      	b.n	8009e86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e80:	f04f 33ff 	mov.w	r3, #4294967295
 8009e84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e86:	69bb      	ldr	r3, [r7, #24]
	}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3720      	adds	r7, #32
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	21a5      	movs	r1, #165	; 0xa5
 8009eaa:	f001 fe87 	bl	800bbbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	f023 0307 	bic.w	r3, r3, #7
 8009ec6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	617b      	str	r3, [r7, #20]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01f      	beq.n	8009f2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009eee:	2300      	movs	r3, #0
 8009ef0:	61fb      	str	r3, [r7, #28]
 8009ef2:	e012      	b.n	8009f1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	4413      	add	r3, r2
 8009efa:	7819      	ldrb	r1, [r3, #0]
 8009efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	4413      	add	r3, r2
 8009f02:	3334      	adds	r3, #52	; 0x34
 8009f04:	460a      	mov	r2, r1
 8009f06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d006      	beq.n	8009f22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3301      	adds	r3, #1
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b0f      	cmp	r3, #15
 8009f1e:	d9e9      	bls.n	8009ef4 <prvInitialiseNewTask+0x64>
 8009f20:	e000      	b.n	8009f24 <prvInitialiseNewTask+0x94>
			{
				break;
 8009f22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f2c:	e003      	b.n	8009f36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f38:	2b37      	cmp	r3, #55	; 0x37
 8009f3a:	d901      	bls.n	8009f40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f3c:	2337      	movs	r3, #55	; 0x37
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	2200      	movs	r2, #0
 8009f50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	3304      	adds	r3, #4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff f978 	bl	800924c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	3318      	adds	r3, #24
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7ff f973 	bl	800924c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	2200      	movs	r2, #0
 8009f80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f8a:	683a      	ldr	r2, [r7, #0]
 8009f8c:	68f9      	ldr	r1, [r7, #12]
 8009f8e:	69b8      	ldr	r0, [r7, #24]
 8009f90:	f001 f9a6 	bl	800b2e0 <pxPortInitialiseStack>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fa6:	bf00      	nop
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009fb8:	f001 fabc 	bl	800b534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009fbc:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <prvAddNewTaskToReadyList+0xc4>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	4a2c      	ldr	r2, [pc, #176]	; (800a074 <prvAddNewTaskToReadyList+0xc4>)
 8009fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fc6:	4b2c      	ldr	r3, [pc, #176]	; (800a078 <prvAddNewTaskToReadyList+0xc8>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d109      	bne.n	8009fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fce:	4a2a      	ldr	r2, [pc, #168]	; (800a078 <prvAddNewTaskToReadyList+0xc8>)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fd4:	4b27      	ldr	r3, [pc, #156]	; (800a074 <prvAddNewTaskToReadyList+0xc4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d110      	bne.n	8009ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fdc:	f000 fc94 	bl	800a908 <prvInitialiseTaskLists>
 8009fe0:	e00d      	b.n	8009ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fe2:	4b26      	ldr	r3, [pc, #152]	; (800a07c <prvAddNewTaskToReadyList+0xcc>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fea:	4b23      	ldr	r3, [pc, #140]	; (800a078 <prvAddNewTaskToReadyList+0xc8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d802      	bhi.n	8009ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ff8:	4a1f      	ldr	r2, [pc, #124]	; (800a078 <prvAddNewTaskToReadyList+0xc8>)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ffe:	4b20      	ldr	r3, [pc, #128]	; (800a080 <prvAddNewTaskToReadyList+0xd0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	4a1e      	ldr	r2, [pc, #120]	; (800a080 <prvAddNewTaskToReadyList+0xd0>)
 800a006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a008:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <prvAddNewTaskToReadyList+0xd0>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a014:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <prvAddNewTaskToReadyList+0xd4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d903      	bls.n	800a024 <prvAddNewTaskToReadyList+0x74>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	4a18      	ldr	r2, [pc, #96]	; (800a084 <prvAddNewTaskToReadyList+0xd4>)
 800a022:	6013      	str	r3, [r2, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4a15      	ldr	r2, [pc, #84]	; (800a088 <prvAddNewTaskToReadyList+0xd8>)
 800a032:	441a      	add	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f7ff f913 	bl	8009266 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a040:	f001 faa8 	bl	800b594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a044:	4b0d      	ldr	r3, [pc, #52]	; (800a07c <prvAddNewTaskToReadyList+0xcc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <prvAddNewTaskToReadyList+0xc8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	429a      	cmp	r2, r3
 800a058:	d207      	bcs.n	800a06a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a05a:	4b0c      	ldr	r3, [pc, #48]	; (800a08c <prvAddNewTaskToReadyList+0xdc>)
 800a05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a06a:	bf00      	nop
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20001498 	.word	0x20001498
 800a078:	20000fc4 	.word	0x20000fc4
 800a07c:	200014a4 	.word	0x200014a4
 800a080:	200014b4 	.word	0x200014b4
 800a084:	200014a0 	.word	0x200014a0
 800a088:	20000fc8 	.word	0x20000fc8
 800a08c:	e000ed04 	.word	0xe000ed04

0800a090 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08a      	sub	sp, #40	; 0x28
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <vTaskDelayUntil+0x2a>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	617b      	str	r3, [r7, #20]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	613b      	str	r3, [r7, #16]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a0d6:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <vTaskDelayUntil+0xf0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <vTaskDelayUntil+0x64>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	60fb      	str	r3, [r7, #12]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a0f4:	f000 f8e4 	bl	800a2c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a0f8:	4b22      	ldr	r3, [pc, #136]	; (800a184 <vTaskDelayUntil+0xf4>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4413      	add	r3, r2
 800a106:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6a3a      	ldr	r2, [r7, #32]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d20b      	bcs.n	800a12a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d211      	bcs.n	800a140 <vTaskDelayUntil+0xb0>
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	429a      	cmp	r2, r3
 800a122:	d90d      	bls.n	800a140 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a124:	2301      	movs	r3, #1
 800a126:	627b      	str	r3, [r7, #36]	; 0x24
 800a128:	e00a      	b.n	800a140 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	69fa      	ldr	r2, [r7, #28]
 800a130:	429a      	cmp	r2, r3
 800a132:	d303      	bcc.n	800a13c <vTaskDelayUntil+0xac>
 800a134:	69fa      	ldr	r2, [r7, #28]
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d901      	bls.n	800a140 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a13c:	2301      	movs	r3, #1
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69fa      	ldr	r2, [r7, #28]
 800a144:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d006      	beq.n	800a15a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	2100      	movs	r1, #0
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fd21 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a15a:	f000 f8bf 	bl	800a2dc <xTaskResumeAll>
 800a15e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d107      	bne.n	800a176 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <vTaskDelayUntil+0xf8>)
 800a168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a176:	bf00      	nop
 800a178:	3728      	adds	r7, #40	; 0x28
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	200014c0 	.word	0x200014c0
 800a184:	2000149c 	.word	0x2000149c
 800a188:	e000ed04 	.word	0xe000ed04

0800a18c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d017      	beq.n	800a1ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a19e:	4b13      	ldr	r3, [pc, #76]	; (800a1ec <vTaskDelay+0x60>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <vTaskDelay+0x30>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60bb      	str	r3, [r7, #8]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1bc:	f000 f880 	bl	800a2c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fcea 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1c8:	f000 f888 	bl	800a2dc <xTaskResumeAll>
 800a1cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d107      	bne.n	800a1e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <vTaskDelay+0x64>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1e4:	bf00      	nop
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	200014c0 	.word	0x200014c0
 800a1f0:	e000ed04 	.word	0xe000ed04

0800a1f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a202:	463a      	mov	r2, r7
 800a204:	1d39      	adds	r1, r7, #4
 800a206:	f107 0308 	add.w	r3, r7, #8
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe ffca 	bl	80091a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	9202      	str	r2, [sp, #8]
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	2300      	movs	r3, #0
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	2300      	movs	r3, #0
 800a220:	460a      	mov	r2, r1
 800a222:	4921      	ldr	r1, [pc, #132]	; (800a2a8 <vTaskStartScheduler+0xb4>)
 800a224:	4821      	ldr	r0, [pc, #132]	; (800a2ac <vTaskStartScheduler+0xb8>)
 800a226:	f7ff fd91 	bl	8009d4c <xTaskCreateStatic>
 800a22a:	4603      	mov	r3, r0
 800a22c:	4a20      	ldr	r2, [pc, #128]	; (800a2b0 <vTaskStartScheduler+0xbc>)
 800a22e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a230:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <vTaskStartScheduler+0xbc>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d002      	beq.n	800a23e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a238:	2301      	movs	r3, #1
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e001      	b.n	800a242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a23e:	2300      	movs	r3, #0
 800a240:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d102      	bne.n	800a24e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a248:	f000 fcfc 	bl	800ac44 <xTimerCreateTimerTask>
 800a24c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d116      	bne.n	800a282 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	613b      	str	r3, [r7, #16]
}
 800a266:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a268:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <vTaskStartScheduler+0xc0>)
 800a26a:	f04f 32ff 	mov.w	r2, #4294967295
 800a26e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a270:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <vTaskStartScheduler+0xc4>)
 800a272:	2201      	movs	r2, #1
 800a274:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a276:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <vTaskStartScheduler+0xc8>)
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a27c:	f001 f8b8 	bl	800b3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a280:	e00e      	b.n	800a2a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d10a      	bne.n	800a2a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	60fb      	str	r3, [r7, #12]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <vTaskStartScheduler+0xaa>
}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	0800d71c 	.word	0x0800d71c
 800a2ac:	0800a8d9 	.word	0x0800a8d9
 800a2b0:	200014bc 	.word	0x200014bc
 800a2b4:	200014b8 	.word	0x200014b8
 800a2b8:	200014a4 	.word	0x200014a4
 800a2bc:	2000149c 	.word	0x2000149c

0800a2c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a03      	ldr	r2, [pc, #12]	; (800a2d8 <vTaskSuspendAll+0x18>)
 800a2cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	200014c0 	.word	0x200014c0

0800a2dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ea:	4b42      	ldr	r3, [pc, #264]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <xTaskResumeAll+0x2c>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	603b      	str	r3, [r7, #0]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a308:	f001 f914 	bl	800b534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a30c:	4b39      	ldr	r3, [pc, #228]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3b01      	subs	r3, #1
 800a312:	4a38      	ldr	r2, [pc, #224]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a314:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a316:	4b37      	ldr	r3, [pc, #220]	; (800a3f4 <xTaskResumeAll+0x118>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d162      	bne.n	800a3e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a31e:	4b36      	ldr	r3, [pc, #216]	; (800a3f8 <xTaskResumeAll+0x11c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d05e      	beq.n	800a3e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a326:	e02f      	b.n	800a388 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a328:	4b34      	ldr	r3, [pc, #208]	; (800a3fc <xTaskResumeAll+0x120>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3318      	adds	r3, #24
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe fff3 	bl	8009320 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe ffee 	bl	8009320 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4b2d      	ldr	r3, [pc, #180]	; (800a400 <xTaskResumeAll+0x124>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d903      	bls.n	800a358 <xTaskResumeAll+0x7c>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	4a2a      	ldr	r2, [pc, #168]	; (800a400 <xTaskResumeAll+0x124>)
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a27      	ldr	r2, [pc, #156]	; (800a404 <xTaskResumeAll+0x128>)
 800a366:	441a      	add	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f7fe ff79 	bl	8009266 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a378:	4b23      	ldr	r3, [pc, #140]	; (800a408 <xTaskResumeAll+0x12c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37e:	429a      	cmp	r2, r3
 800a380:	d302      	bcc.n	800a388 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a382:	4b22      	ldr	r3, [pc, #136]	; (800a40c <xTaskResumeAll+0x130>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a388:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <xTaskResumeAll+0x120>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1cb      	bne.n	800a328 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a396:	f000 fb55 	bl	800aa44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a39a:	4b1d      	ldr	r3, [pc, #116]	; (800a410 <xTaskResumeAll+0x134>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d010      	beq.n	800a3c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a6:	f000 f847 	bl	800a438 <xTaskIncrementTick>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3b0:	4b16      	ldr	r3, [pc, #88]	; (800a40c <xTaskResumeAll+0x130>)
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f1      	bne.n	800a3a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <xTaskResumeAll+0x134>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3c8:	4b10      	ldr	r3, [pc, #64]	; (800a40c <xTaskResumeAll+0x130>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <xTaskResumeAll+0x138>)
 800a3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e4:	f001 f8d6 	bl	800b594 <vPortExitCritical>

	return xAlreadyYielded;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	200014c0 	.word	0x200014c0
 800a3f8:	20001498 	.word	0x20001498
 800a3fc:	20001458 	.word	0x20001458
 800a400:	200014a0 	.word	0x200014a0
 800a404:	20000fc8 	.word	0x20000fc8
 800a408:	20000fc4 	.word	0x20000fc4
 800a40c:	200014ac 	.word	0x200014ac
 800a410:	200014a8 	.word	0x200014a8
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a41e:	4b05      	ldr	r3, [pc, #20]	; (800a434 <xTaskGetTickCount+0x1c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a424:	687b      	ldr	r3, [r7, #4]
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	2000149c 	.word	0x2000149c

0800a438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a442:	4b4f      	ldr	r3, [pc, #316]	; (800a580 <xTaskIncrementTick+0x148>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 808f 	bne.w	800a56a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a44c:	4b4d      	ldr	r3, [pc, #308]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a454:	4a4b      	ldr	r2, [pc, #300]	; (800a584 <xTaskIncrementTick+0x14c>)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d120      	bne.n	800a4a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a460:	4b49      	ldr	r3, [pc, #292]	; (800a588 <xTaskIncrementTick+0x150>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00a      	beq.n	800a480 <xTaskIncrementTick+0x48>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <xTaskIncrementTick+0x46>
 800a480:	4b41      	ldr	r3, [pc, #260]	; (800a588 <xTaskIncrementTick+0x150>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	4b41      	ldr	r3, [pc, #260]	; (800a58c <xTaskIncrementTick+0x154>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a3f      	ldr	r2, [pc, #252]	; (800a588 <xTaskIncrementTick+0x150>)
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	4a3f      	ldr	r2, [pc, #252]	; (800a58c <xTaskIncrementTick+0x154>)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	4b3e      	ldr	r3, [pc, #248]	; (800a590 <xTaskIncrementTick+0x158>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	4a3d      	ldr	r2, [pc, #244]	; (800a590 <xTaskIncrementTick+0x158>)
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	f000 fad1 	bl	800aa44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4a2:	4b3c      	ldr	r3, [pc, #240]	; (800a594 <xTaskIncrementTick+0x15c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d349      	bcc.n	800a540 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ac:	4b36      	ldr	r3, [pc, #216]	; (800a588 <xTaskIncrementTick+0x150>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b6:	4b37      	ldr	r3, [pc, #220]	; (800a594 <xTaskIncrementTick+0x15c>)
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	601a      	str	r2, [r3, #0]
					break;
 800a4be:	e03f      	b.n	800a540 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c0:	4b31      	ldr	r3, [pc, #196]	; (800a588 <xTaskIncrementTick+0x150>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d203      	bcs.n	800a4e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4d8:	4a2e      	ldr	r2, [pc, #184]	; (800a594 <xTaskIncrementTick+0x15c>)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4de:	e02f      	b.n	800a540 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe ff1b 	bl	8009320 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d004      	beq.n	800a4fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	3318      	adds	r3, #24
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fe ff12 	bl	8009320 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a500:	4b25      	ldr	r3, [pc, #148]	; (800a598 <xTaskIncrementTick+0x160>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d903      	bls.n	800a510 <xTaskIncrementTick+0xd8>
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	4a22      	ldr	r2, [pc, #136]	; (800a598 <xTaskIncrementTick+0x160>)
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a514:	4613      	mov	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	4413      	add	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4a1f      	ldr	r2, [pc, #124]	; (800a59c <xTaskIncrementTick+0x164>)
 800a51e:	441a      	add	r2, r3
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4610      	mov	r0, r2
 800a528:	f7fe fe9d 	bl	8009266 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a530:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <xTaskIncrementTick+0x168>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	429a      	cmp	r2, r3
 800a538:	d3b8      	bcc.n	800a4ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a53e:	e7b5      	b.n	800a4ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a540:	4b17      	ldr	r3, [pc, #92]	; (800a5a0 <xTaskIncrementTick+0x168>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a546:	4915      	ldr	r1, [pc, #84]	; (800a59c <xTaskIncrementTick+0x164>)
 800a548:	4613      	mov	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4413      	add	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	440b      	add	r3, r1
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d901      	bls.n	800a55c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a558:	2301      	movs	r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a55c:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <xTaskIncrementTick+0x16c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a564:	2301      	movs	r3, #1
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	e004      	b.n	800a574 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a56a:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <xTaskIncrementTick+0x170>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3301      	adds	r3, #1
 800a570:	4a0d      	ldr	r2, [pc, #52]	; (800a5a8 <xTaskIncrementTick+0x170>)
 800a572:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a574:	697b      	ldr	r3, [r7, #20]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	200014c0 	.word	0x200014c0
 800a584:	2000149c 	.word	0x2000149c
 800a588:	20001450 	.word	0x20001450
 800a58c:	20001454 	.word	0x20001454
 800a590:	200014b0 	.word	0x200014b0
 800a594:	200014b8 	.word	0x200014b8
 800a598:	200014a0 	.word	0x200014a0
 800a59c:	20000fc8 	.word	0x20000fc8
 800a5a0:	20000fc4 	.word	0x20000fc4
 800a5a4:	200014ac 	.word	0x200014ac
 800a5a8:	200014a8 	.word	0x200014a8

0800a5ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5b2:	4b28      	ldr	r3, [pc, #160]	; (800a654 <vTaskSwitchContext+0xa8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ba:	4b27      	ldr	r3, [pc, #156]	; (800a658 <vTaskSwitchContext+0xac>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5c0:	e041      	b.n	800a646 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a5c2:	4b25      	ldr	r3, [pc, #148]	; (800a658 <vTaskSwitchContext+0xac>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c8:	4b24      	ldr	r3, [pc, #144]	; (800a65c <vTaskSwitchContext+0xb0>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e010      	b.n	800a5f2 <vTaskSwitchContext+0x46>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <vTaskSwitchContext+0x40>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	607b      	str	r3, [r7, #4]
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <vTaskSwitchContext+0x3e>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	491b      	ldr	r1, [pc, #108]	; (800a660 <vTaskSwitchContext+0xb4>)
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	440b      	add	r3, r1
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0e4      	beq.n	800a5d0 <vTaskSwitchContext+0x24>
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4a13      	ldr	r2, [pc, #76]	; (800a660 <vTaskSwitchContext+0xb4>)
 800a612:	4413      	add	r3, r2
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	685a      	ldr	r2, [r3, #4]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	685a      	ldr	r2, [r3, #4]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	3308      	adds	r3, #8
 800a628:	429a      	cmp	r2, r3
 800a62a:	d104      	bne.n	800a636 <vTaskSwitchContext+0x8a>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	685a      	ldr	r2, [r3, #4]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	4a09      	ldr	r2, [pc, #36]	; (800a664 <vTaskSwitchContext+0xb8>)
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	4a06      	ldr	r2, [pc, #24]	; (800a65c <vTaskSwitchContext+0xb0>)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6013      	str	r3, [r2, #0]
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	200014c0 	.word	0x200014c0
 800a658:	200014ac 	.word	0x200014ac
 800a65c:	200014a0 	.word	0x200014a0
 800a660:	20000fc8 	.word	0x20000fc8
 800a664:	20000fc4 	.word	0x20000fc4

0800a668 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	60fb      	str	r3, [r7, #12]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <vTaskPlaceOnEventList+0x44>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3318      	adds	r3, #24
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7fe fe09 	bl	80092ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a69c:	2101      	movs	r1, #1
 800a69e:	6838      	ldr	r0, [r7, #0]
 800a6a0:	f000 fa7c 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20000fc4 	.word	0x20000fc4

0800a6b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10a      	bne.n	800a6d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	617b      	str	r3, [r7, #20]
}
 800a6d4:	bf00      	nop
 800a6d6:	e7fe      	b.n	800a6d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3318      	adds	r3, #24
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7fe fdc0 	bl	8009266 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	68b8      	ldr	r0, [r7, #8]
 800a6f6:	f000 fa51 	bl	800ab9c <prvAddCurrentTaskToDelayedList>
	}
 800a6fa:	bf00      	nop
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000fc4 	.word	0x20000fc4

0800a708 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	60fb      	str	r3, [r7, #12]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	3318      	adds	r3, #24
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fdf1 	bl	8009320 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a73e:	4b1e      	ldr	r3, [pc, #120]	; (800a7b8 <xTaskRemoveFromEventList+0xb0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d11d      	bne.n	800a782 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	3304      	adds	r3, #4
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fde8 	bl	8009320 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	4b19      	ldr	r3, [pc, #100]	; (800a7bc <xTaskRemoveFromEventList+0xb4>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d903      	bls.n	800a764 <xTaskRemoveFromEventList+0x5c>
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a760:	4a16      	ldr	r2, [pc, #88]	; (800a7bc <xTaskRemoveFromEventList+0xb4>)
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4a13      	ldr	r2, [pc, #76]	; (800a7c0 <xTaskRemoveFromEventList+0xb8>)
 800a772:	441a      	add	r2, r3
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	3304      	adds	r3, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	4610      	mov	r0, r2
 800a77c:	f7fe fd73 	bl	8009266 <vListInsertEnd>
 800a780:	e005      	b.n	800a78e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3318      	adds	r3, #24
 800a786:	4619      	mov	r1, r3
 800a788:	480e      	ldr	r0, [pc, #56]	; (800a7c4 <xTaskRemoveFromEventList+0xbc>)
 800a78a:	f7fe fd6c 	bl	8009266 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a792:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <xTaskRemoveFromEventList+0xc0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	429a      	cmp	r2, r3
 800a79a:	d905      	bls.n	800a7a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a79c:	2301      	movs	r3, #1
 800a79e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <xTaskRemoveFromEventList+0xc4>)
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	e001      	b.n	800a7ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7ac:	697b      	ldr	r3, [r7, #20]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3718      	adds	r7, #24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	200014c0 	.word	0x200014c0
 800a7bc:	200014a0 	.word	0x200014a0
 800a7c0:	20000fc8 	.word	0x20000fc8
 800a7c4:	20001458 	.word	0x20001458
 800a7c8:	20000fc4 	.word	0x20000fc4
 800a7cc:	200014ac 	.word	0x200014ac

0800a7d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7d8:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <vTaskInternalSetTimeOutState+0x24>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7e0:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <vTaskInternalSetTimeOutState+0x28>)
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	605a      	str	r2, [r3, #4]
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	200014b0 	.word	0x200014b0
 800a7f8:	2000149c 	.word	0x2000149c

0800a7fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	613b      	str	r3, [r7, #16]
}
 800a81e:	bf00      	nop
 800a820:	e7fe      	b.n	800a820 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d10a      	bne.n	800a83e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60fb      	str	r3, [r7, #12]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a83e:	f000 fe79 	bl	800b534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a842:	4b1d      	ldr	r3, [pc, #116]	; (800a8b8 <xTaskCheckForTimeOut+0xbc>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	69ba      	ldr	r2, [r7, #24]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d102      	bne.n	800a862 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a85c:	2300      	movs	r3, #0
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	e023      	b.n	800a8aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <xTaskCheckForTimeOut+0xc0>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d007      	beq.n	800a87e <xTaskCheckForTimeOut+0x82>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	429a      	cmp	r2, r3
 800a876:	d302      	bcc.n	800a87e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	e015      	b.n	800a8aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	429a      	cmp	r2, r3
 800a886:	d20b      	bcs.n	800a8a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff ff9b 	bl	800a7d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	e004      	b.n	800a8aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8aa:	f000 fe73 	bl	800b594 <vPortExitCritical>

	return xReturn;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	2000149c 	.word	0x2000149c
 800a8bc:	200014b0 	.word	0x200014b0

0800a8c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8c4:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <vTaskMissedYield+0x14>)
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]
}
 800a8ca:	bf00      	nop
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	200014ac 	.word	0x200014ac

0800a8d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8e0:	f000 f852 	bl	800a988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <prvIdleTask+0x28>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d9f9      	bls.n	800a8e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <prvIdleTask+0x2c>)
 800a8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8fc:	e7f0      	b.n	800a8e0 <prvIdleTask+0x8>
 800a8fe:	bf00      	nop
 800a900:	20000fc8 	.word	0x20000fc8
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a90e:	2300      	movs	r3, #0
 800a910:	607b      	str	r3, [r7, #4]
 800a912:	e00c      	b.n	800a92e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a12      	ldr	r2, [pc, #72]	; (800a968 <prvInitialiseTaskLists+0x60>)
 800a920:	4413      	add	r3, r2
 800a922:	4618      	mov	r0, r3
 800a924:	f7fe fc72 	bl	800920c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3301      	adds	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2b37      	cmp	r3, #55	; 0x37
 800a932:	d9ef      	bls.n	800a914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a934:	480d      	ldr	r0, [pc, #52]	; (800a96c <prvInitialiseTaskLists+0x64>)
 800a936:	f7fe fc69 	bl	800920c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a93a:	480d      	ldr	r0, [pc, #52]	; (800a970 <prvInitialiseTaskLists+0x68>)
 800a93c:	f7fe fc66 	bl	800920c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a940:	480c      	ldr	r0, [pc, #48]	; (800a974 <prvInitialiseTaskLists+0x6c>)
 800a942:	f7fe fc63 	bl	800920c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a946:	480c      	ldr	r0, [pc, #48]	; (800a978 <prvInitialiseTaskLists+0x70>)
 800a948:	f7fe fc60 	bl	800920c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a94c:	480b      	ldr	r0, [pc, #44]	; (800a97c <prvInitialiseTaskLists+0x74>)
 800a94e:	f7fe fc5d 	bl	800920c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <prvInitialiseTaskLists+0x78>)
 800a954:	4a05      	ldr	r2, [pc, #20]	; (800a96c <prvInitialiseTaskLists+0x64>)
 800a956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <prvInitialiseTaskLists+0x7c>)
 800a95a:	4a05      	ldr	r2, [pc, #20]	; (800a970 <prvInitialiseTaskLists+0x68>)
 800a95c:	601a      	str	r2, [r3, #0]
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000fc8 	.word	0x20000fc8
 800a96c:	20001428 	.word	0x20001428
 800a970:	2000143c 	.word	0x2000143c
 800a974:	20001458 	.word	0x20001458
 800a978:	2000146c 	.word	0x2000146c
 800a97c:	20001484 	.word	0x20001484
 800a980:	20001450 	.word	0x20001450
 800a984:	20001454 	.word	0x20001454

0800a988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a98e:	e019      	b.n	800a9c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a990:	f000 fdd0 	bl	800b534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a994:	4b10      	ldr	r3, [pc, #64]	; (800a9d8 <prvCheckTasksWaitingTermination+0x50>)
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fcbd 	bl	8009320 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <prvCheckTasksWaitingTermination+0x54>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	4a0b      	ldr	r2, [pc, #44]	; (800a9dc <prvCheckTasksWaitingTermination+0x54>)
 800a9ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <prvCheckTasksWaitingTermination+0x58>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	4a0a      	ldr	r2, [pc, #40]	; (800a9e0 <prvCheckTasksWaitingTermination+0x58>)
 800a9b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9ba:	f000 fdeb 	bl	800b594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f810 	bl	800a9e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9c4:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <prvCheckTasksWaitingTermination+0x58>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e1      	bne.n	800a990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9cc:	bf00      	nop
 800a9ce:	bf00      	nop
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	2000146c 	.word	0x2000146c
 800a9dc:	20001498 	.word	0x20001498
 800a9e0:	20001480 	.word	0x20001480

0800a9e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 ff88 	bl	800b910 <vPortFree>
				vPortFree( pxTCB );
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 ff85 	bl	800b910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa06:	e018      	b.n	800aa3a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d103      	bne.n	800aa1a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 ff7c 	bl	800b910 <vPortFree>
	}
 800aa18:	e00f      	b.n	800aa3a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d00a      	beq.n	800aa3a <prvDeleteTCB+0x56>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60fb      	str	r3, [r7, #12]
}
 800aa36:	bf00      	nop
 800aa38:	e7fe      	b.n	800aa38 <prvDeleteTCB+0x54>
	}
 800aa3a:	bf00      	nop
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
	...

0800aa44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4a:	4b0c      	ldr	r3, [pc, #48]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d104      	bne.n	800aa5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295
 800aa5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa5c:	e008      	b.n	800aa70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5e:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <prvResetNextTaskUnblockTime+0x38>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a04      	ldr	r2, [pc, #16]	; (800aa80 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6e:	6013      	str	r3, [r2, #0]
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20001450 	.word	0x20001450
 800aa80:	200014b8 	.word	0x200014b8

0800aa84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa8a:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <xTaskGetSchedulerState+0x34>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa92:	2301      	movs	r3, #1
 800aa94:	607b      	str	r3, [r7, #4]
 800aa96:	e008      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <xTaskGetSchedulerState+0x38>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	e001      	b.n	800aaaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaaa:	687b      	ldr	r3, [r7, #4]
	}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	200014a4 	.word	0x200014a4
 800aabc:	200014c0 	.word	0x200014c0

0800aac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aacc:	2300      	movs	r3, #0
 800aace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d056      	beq.n	800ab84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aad6:	4b2e      	ldr	r3, [pc, #184]	; (800ab90 <xTaskPriorityDisinherit+0xd0>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d00a      	beq.n	800aaf6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	60fb      	str	r3, [r7, #12]
}
 800aaf2:	bf00      	nop
 800aaf4:	e7fe      	b.n	800aaf4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	60bb      	str	r3, [r7, #8]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab18:	1e5a      	subs	r2, r3, #1
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d02c      	beq.n	800ab84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d128      	bne.n	800ab84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	3304      	adds	r3, #4
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fbf2 	bl	8009320 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab54:	4b0f      	ldr	r3, [pc, #60]	; (800ab94 <xTaskPriorityDisinherit+0xd4>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d903      	bls.n	800ab64 <xTaskPriorityDisinherit+0xa4>
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	4a0c      	ldr	r2, [pc, #48]	; (800ab94 <xTaskPriorityDisinherit+0xd4>)
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab68:	4613      	mov	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4a09      	ldr	r2, [pc, #36]	; (800ab98 <xTaskPriorityDisinherit+0xd8>)
 800ab72:	441a      	add	r2, r3
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f7fe fb73 	bl	8009266 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab80:	2301      	movs	r3, #1
 800ab82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab84:	697b      	ldr	r3, [r7, #20]
	}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000fc4 	.word	0x20000fc4
 800ab94:	200014a0 	.word	0x200014a0
 800ab98:	20000fc8 	.word	0x20000fc8

0800ab9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aba6:	4b21      	ldr	r3, [pc, #132]	; (800ac2c <prvAddCurrentTaskToDelayedList+0x90>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abac:	4b20      	ldr	r3, [pc, #128]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fbb4 	bl	8009320 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbe:	d10a      	bne.n	800abd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3304      	adds	r3, #4
 800abcc:	4619      	mov	r1, r3
 800abce:	4819      	ldr	r0, [pc, #100]	; (800ac34 <prvAddCurrentTaskToDelayedList+0x98>)
 800abd0:	f7fe fb49 	bl	8009266 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abd4:	e026      	b.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4413      	add	r3, r2
 800abdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abde:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	429a      	cmp	r2, r3
 800abec:	d209      	bcs.n	800ac02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abee:	4b12      	ldr	r3, [pc, #72]	; (800ac38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b0f      	ldr	r3, [pc, #60]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe fb57 	bl	80092ae <vListInsert>
}
 800ac00:	e010      	b.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac02:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fe fb4d 	bl	80092ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d202      	bcs.n	800ac24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac1e:	4a08      	ldr	r2, [pc, #32]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	bf00      	nop
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	2000149c 	.word	0x2000149c
 800ac30:	20000fc4 	.word	0x20000fc4
 800ac34:	20001484 	.word	0x20001484
 800ac38:	20001454 	.word	0x20001454
 800ac3c:	20001450 	.word	0x20001450
 800ac40:	200014b8 	.word	0x200014b8

0800ac44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b08a      	sub	sp, #40	; 0x28
 800ac48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac4e:	f000 fb07 	bl	800b260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac52:	4b1c      	ldr	r3, [pc, #112]	; (800acc4 <xTimerCreateTimerTask+0x80>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d021      	beq.n	800ac9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac62:	1d3a      	adds	r2, r7, #4
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	f107 030c 	add.w	r3, r7, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fab3 	bl	80091d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	9202      	str	r2, [sp, #8]
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	460a      	mov	r2, r1
 800ac84:	4910      	ldr	r1, [pc, #64]	; (800acc8 <xTimerCreateTimerTask+0x84>)
 800ac86:	4811      	ldr	r0, [pc, #68]	; (800accc <xTimerCreateTimerTask+0x88>)
 800ac88:	f7ff f860 	bl	8009d4c <xTaskCreateStatic>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <xTimerCreateTimerTask+0x8c>)
 800ac90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac92:	4b0f      	ldr	r3, [pc, #60]	; (800acd0 <xTimerCreateTimerTask+0x8c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	613b      	str	r3, [r7, #16]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acba:	697b      	ldr	r3, [r7, #20]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	200014f4 	.word	0x200014f4
 800acc8:	0800d724 	.word	0x0800d724
 800accc:	0800ae09 	.word	0x0800ae09
 800acd0:	200014f8 	.word	0x200014f8

0800acd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xTimerGenericCommand+0x2e>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	623b      	str	r3, [r7, #32]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad02:	4b1a      	ldr	r3, [pc, #104]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d02a      	beq.n	800ad60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	dc18      	bgt.n	800ad4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad1c:	f7ff feb2 	bl	800aa84 <xTaskGetSchedulerState>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d109      	bne.n	800ad3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	f107 0110 	add.w	r1, r7, #16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad32:	f7fe fc23 	bl	800957c <xQueueGenericSend>
 800ad36:	6278      	str	r0, [r7, #36]	; 0x24
 800ad38:	e012      	b.n	800ad60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad3a:	4b0c      	ldr	r3, [pc, #48]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad3c:	6818      	ldr	r0, [r3, #0]
 800ad3e:	f107 0110 	add.w	r1, r7, #16
 800ad42:	2300      	movs	r3, #0
 800ad44:	2200      	movs	r2, #0
 800ad46:	f7fe fc19 	bl	800957c <xQueueGenericSend>
 800ad4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ad4c:	e008      	b.n	800ad60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad4e:	4b07      	ldr	r3, [pc, #28]	; (800ad6c <xTimerGenericCommand+0x98>)
 800ad50:	6818      	ldr	r0, [r3, #0]
 800ad52:	f107 0110 	add.w	r1, r7, #16
 800ad56:	2300      	movs	r3, #0
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	f7fe fd0d 	bl	8009778 <xQueueGenericSendFromISR>
 800ad5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3728      	adds	r7, #40	; 0x28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200014f4 	.word	0x200014f4

0800ad70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad7a:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <prvProcessExpiredTimer+0x94>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe fac9 	bl	8009320 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d022      	beq.n	800ade2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	699a      	ldr	r2, [r3, #24]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	18d1      	adds	r1, r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	6978      	ldr	r0, [r7, #20]
 800adaa:	f000 f8d1 	bl	800af50 <prvInsertTimerInActiveList>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01f      	beq.n	800adf4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adb4:	2300      	movs	r3, #0
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	2300      	movs	r3, #0
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	2100      	movs	r1, #0
 800adbe:	6978      	ldr	r0, [r7, #20]
 800adc0:	f7ff ff88 	bl	800acd4 <xTimerGenericCommand>
 800adc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d113      	bne.n	800adf4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	60fb      	str	r3, [r7, #12]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade8:	f023 0301 	bic.w	r3, r3, #1
 800adec:	b2da      	uxtb	r2, r3
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	6978      	ldr	r0, [r7, #20]
 800adfa:	4798      	blx	r3
}
 800adfc:	bf00      	nop
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	200014ec 	.word	0x200014ec

0800ae08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 f857 	bl	800aec8 <prvGetNextExpireTime>
 800ae1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f000 f803 	bl	800ae2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae26:	f000 f8d5 	bl	800afd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae2a:	e7f1      	b.n	800ae10 <prvTimerTask+0x8>

0800ae2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b084      	sub	sp, #16
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae36:	f7ff fa43 	bl	800a2c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f866 	bl	800af10 <prvSampleTimeNow>
 800ae44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d130      	bne.n	800aeae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <prvProcessTimerOrBlockTask+0x3c>
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d806      	bhi.n	800ae68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae5a:	f7ff fa3f 	bl	800a2dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ff85 	bl	800ad70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae66:	e024      	b.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d008      	beq.n	800ae80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae6e:	4b13      	ldr	r3, [pc, #76]	; (800aebc <prvProcessTimerOrBlockTask+0x90>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <prvProcessTimerOrBlockTask+0x50>
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e000      	b.n	800ae7e <prvProcessTimerOrBlockTask+0x52>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae80:	4b0f      	ldr	r3, [pc, #60]	; (800aec0 <prvProcessTimerOrBlockTask+0x94>)
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f7fe ff29 	bl	8009ce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae92:	f7ff fa23 	bl	800a2dc <xTaskResumeAll>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <prvProcessTimerOrBlockTask+0x98>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
}
 800aeac:	e001      	b.n	800aeb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aeae:	f7ff fa15 	bl	800a2dc <xTaskResumeAll>
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200014f0 	.word	0x200014f0
 800aec0:	200014f4 	.word	0x200014f4
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aed0:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <prvGetNextExpireTime+0x44>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <prvGetNextExpireTime+0x16>
 800aeda:	2201      	movs	r2, #1
 800aedc:	e000      	b.n	800aee0 <prvGetNextExpireTime+0x18>
 800aede:	2200      	movs	r2, #0
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d105      	bne.n	800aef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aeec:	4b07      	ldr	r3, [pc, #28]	; (800af0c <prvGetNextExpireTime+0x44>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	e001      	b.n	800aefc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aefc:	68fb      	ldr	r3, [r7, #12]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	200014ec 	.word	0x200014ec

0800af10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af18:	f7ff fa7e 	bl	800a418 <xTaskGetTickCount>
 800af1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af1e:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <prvSampleTimeNow+0x3c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d205      	bcs.n	800af34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af28:	f000 f936 	bl	800b198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e002      	b.n	800af3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af3a:	4a04      	ldr	r2, [pc, #16]	; (800af4c <prvSampleTimeNow+0x3c>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	200014fc 	.word	0x200014fc

0800af50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af5e:	2300      	movs	r3, #0
 800af60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	429a      	cmp	r2, r3
 800af74:	d812      	bhi.n	800af9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	429a      	cmp	r2, r3
 800af82:	d302      	bcc.n	800af8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	e01b      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <prvInsertTimerInActiveList+0x7c>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3304      	adds	r3, #4
 800af92:	4619      	mov	r1, r3
 800af94:	4610      	mov	r0, r2
 800af96:	f7fe f98a 	bl	80092ae <vListInsert>
 800af9a:	e012      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d206      	bcs.n	800afb2 <prvInsertTimerInActiveList+0x62>
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d302      	bcc.n	800afb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	e007      	b.n	800afc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afb2:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <prvInsertTimerInActiveList+0x80>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7fe f976 	bl	80092ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afc2:	697b      	ldr	r3, [r7, #20]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	200014f0 	.word	0x200014f0
 800afd0:	200014ec 	.word	0x200014ec

0800afd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afda:	e0ca      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	da18      	bge.n	800b014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800afe2:	1d3b      	adds	r3, r7, #4
 800afe4:	3304      	adds	r3, #4
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	61fb      	str	r3, [r7, #28]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00a:	6850      	ldr	r0, [r2, #4]
 800b00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00e:	6892      	ldr	r2, [r2, #8]
 800b010:	4611      	mov	r1, r2
 800b012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f2c0 80aa 	blt.w	800b170 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d004      	beq.n	800b032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	3304      	adds	r3, #4
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fe f977 	bl	8009320 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b032:	463b      	mov	r3, r7
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ff6b 	bl	800af10 <prvSampleTimeNow>
 800b03a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b09      	cmp	r3, #9
 800b040:	f200 8097 	bhi.w	800b172 <prvProcessReceivedCommands+0x19e>
 800b044:	a201      	add	r2, pc, #4	; (adr r2, 800b04c <prvProcessReceivedCommands+0x78>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b075 	.word	0x0800b075
 800b050:	0800b075 	.word	0x0800b075
 800b054:	0800b075 	.word	0x0800b075
 800b058:	0800b0e9 	.word	0x0800b0e9
 800b05c:	0800b0fd 	.word	0x0800b0fd
 800b060:	0800b147 	.word	0x0800b147
 800b064:	0800b075 	.word	0x0800b075
 800b068:	0800b075 	.word	0x0800b075
 800b06c:	0800b0e9 	.word	0x0800b0e9
 800b070:	0800b0fd 	.word	0x0800b0fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b07a:	f043 0301 	orr.w	r3, r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	699b      	ldr	r3, [r3, #24]
 800b08c:	18d1      	adds	r1, r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b094:	f7ff ff5c 	bl	800af50 <prvInsertTimerInActiveList>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d069      	beq.n	800b172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d05e      	beq.n	800b172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	441a      	add	r2, r3
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c6:	f7ff fe05 	bl	800acd4 <xTimerGenericCommand>
 800b0ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d14f      	bne.n	800b172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d6:	f383 8811 	msr	BASEPRI, r3
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	61bb      	str	r3, [r7, #24]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0fa:	e03a      	b.n	800b172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	b2da      	uxtb	r2, r3
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	617b      	str	r3, [r7, #20]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	699a      	ldr	r2, [r3, #24]
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	18d1      	adds	r1, r2, r3
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b140:	f7ff ff06 	bl	800af50 <prvInsertTimerInActiveList>
					break;
 800b144:	e015      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b156:	f000 fbdb 	bl	800b910 <vPortFree>
 800b15a:	e00a      	b.n	800b172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b162:	f023 0301 	bic.w	r3, r3, #1
 800b166:	b2da      	uxtb	r2, r3
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b16e:	e000      	b.n	800b172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <prvProcessReceivedCommands+0x1c0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	1d39      	adds	r1, r7, #4
 800b178:	2200      	movs	r2, #0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7fe fb98 	bl	80098b0 <xQueueReceive>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	f47f af2a 	bne.w	800afdc <prvProcessReceivedCommands+0x8>
	}
}
 800b188:	bf00      	nop
 800b18a:	bf00      	nop
 800b18c:	3730      	adds	r7, #48	; 0x30
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	200014f4 	.word	0x200014f4

0800b198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b19e:	e048      	b.n	800b232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1a0:	4b2d      	ldr	r3, [pc, #180]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1aa:	4b2b      	ldr	r3, [pc, #172]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe f8b1 	bl	8009320 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02e      	beq.n	800b232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4413      	add	r3, r2
 800b1dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1de:	68ba      	ldr	r2, [r7, #8]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d90e      	bls.n	800b204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1f2:	4b19      	ldr	r3, [pc, #100]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	f7fe f856 	bl	80092ae <vListInsert>
 800b202:	e016      	b.n	800b232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b204:	2300      	movs	r3, #0
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	2300      	movs	r3, #0
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	2100      	movs	r1, #0
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fd60 	bl	800acd4 <xTimerGenericCommand>
 800b214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	603b      	str	r3, [r7, #0]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1b1      	bne.n	800b1a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b23c:	4b06      	ldr	r3, [pc, #24]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b242:	4b06      	ldr	r3, [pc, #24]	; (800b25c <prvSwitchTimerLists+0xc4>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a04      	ldr	r2, [pc, #16]	; (800b258 <prvSwitchTimerLists+0xc0>)
 800b248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b24a:	4a04      	ldr	r2, [pc, #16]	; (800b25c <prvSwitchTimerLists+0xc4>)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	6013      	str	r3, [r2, #0]
}
 800b250:	bf00      	nop
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	200014ec 	.word	0x200014ec
 800b25c:	200014f0 	.word	0x200014f0

0800b260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b266:	f000 f965 	bl	800b534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b26a:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d120      	bne.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b272:	4814      	ldr	r0, [pc, #80]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b274:	f7fd ffca 	bl	800920c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b278:	4813      	ldr	r0, [pc, #76]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b27a:	f7fd ffc7 	bl	800920c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <prvCheckForValidListAndQueue+0x6c>)
 800b280:	4a10      	ldr	r2, [pc, #64]	; (800b2c4 <prvCheckForValidListAndQueue+0x64>)
 800b282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <prvCheckForValidListAndQueue+0x70>)
 800b286:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <prvCheckForValidListAndQueue+0x68>)
 800b288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b28a:	2300      	movs	r3, #0
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <prvCheckForValidListAndQueue+0x74>)
 800b290:	4a11      	ldr	r2, [pc, #68]	; (800b2d8 <prvCheckForValidListAndQueue+0x78>)
 800b292:	2110      	movs	r1, #16
 800b294:	200a      	movs	r0, #10
 800b296:	f7fe f8d5 	bl	8009444 <xQueueGenericCreateStatic>
 800b29a:	4603      	mov	r3, r0
 800b29c:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b29e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2a8:	4b05      	ldr	r3, [pc, #20]	; (800b2c0 <prvCheckForValidListAndQueue+0x60>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	490b      	ldr	r1, [pc, #44]	; (800b2dc <prvCheckForValidListAndQueue+0x7c>)
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fcee 	bl	8009c90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2b4:	f000 f96e 	bl	800b594 <vPortExitCritical>
}
 800b2b8:	bf00      	nop
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200014f4 	.word	0x200014f4
 800b2c4:	200014c4 	.word	0x200014c4
 800b2c8:	200014d8 	.word	0x200014d8
 800b2cc:	200014ec 	.word	0x200014ec
 800b2d0:	200014f0 	.word	0x200014f0
 800b2d4:	200015a0 	.word	0x200015a0
 800b2d8:	20001500 	.word	0x20001500
 800b2dc:	0800d72c 	.word	0x0800d72c

0800b2e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3b04      	subs	r3, #4
 800b2f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	3b04      	subs	r3, #4
 800b2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	f023 0201 	bic.w	r2, r3, #1
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b310:	4a0c      	ldr	r2, [pc, #48]	; (800b344 <pxPortInitialiseStack+0x64>)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3b14      	subs	r3, #20
 800b31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3b04      	subs	r3, #4
 800b326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f06f 0202 	mvn.w	r2, #2
 800b32e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3b20      	subs	r3, #32
 800b334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b336:	68fb      	ldr	r3, [r7, #12]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	0800b349 	.word	0x0800b349

0800b348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b352:	4b12      	ldr	r3, [pc, #72]	; (800b39c <prvTaskExitError+0x54>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35a:	d00a      	beq.n	800b372 <prvTaskExitError+0x2a>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <prvTaskExitError+0x28>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	60bb      	str	r3, [r7, #8]
}
 800b384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b386:	bf00      	nop
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0fc      	beq.n	800b388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	2000002c 	.word	0x2000002c

0800b3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <pxCurrentTCBConst2>)
 800b3a2:	6819      	ldr	r1, [r3, #0]
 800b3a4:	6808      	ldr	r0, [r1, #0]
 800b3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	f380 8809 	msr	PSP, r0
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8811 	msr	BASEPRI, r0
 800b3ba:	4770      	bx	lr
 800b3bc:	f3af 8000 	nop.w

0800b3c0 <pxCurrentTCBConst2>:
 800b3c0:	20000fc4 	.word	0x20000fc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop

0800b3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3c8:	4808      	ldr	r0, [pc, #32]	; (800b3ec <prvPortStartFirstTask+0x24>)
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f380 8808 	msr	MSP, r0
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f380 8814 	msr	CONTROL, r0
 800b3da:	b662      	cpsie	i
 800b3dc:	b661      	cpsie	f
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	df00      	svc	0
 800b3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3ea:	bf00      	nop
 800b3ec:	e000ed08 	.word	0xe000ed08

0800b3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3f6:	4b46      	ldr	r3, [pc, #280]	; (800b510 <xPortStartScheduler+0x120>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a46      	ldr	r2, [pc, #280]	; (800b514 <xPortStartScheduler+0x124>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d10a      	bne.n	800b416 <xPortStartScheduler+0x26>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
 800b414:	e7fe      	b.n	800b414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b416:	4b3e      	ldr	r3, [pc, #248]	; (800b510 <xPortStartScheduler+0x120>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a3f      	ldr	r2, [pc, #252]	; (800b518 <xPortStartScheduler+0x128>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d10a      	bne.n	800b436 <xPortStartScheduler+0x46>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	60fb      	str	r3, [r7, #12]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b436:	4b39      	ldr	r3, [pc, #228]	; (800b51c <xPortStartScheduler+0x12c>)
 800b438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	22ff      	movs	r2, #255	; 0xff
 800b446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b450:	78fb      	ldrb	r3, [r7, #3]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b31      	ldr	r3, [pc, #196]	; (800b520 <xPortStartScheduler+0x130>)
 800b45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b45e:	4b31      	ldr	r3, [pc, #196]	; (800b524 <xPortStartScheduler+0x134>)
 800b460:	2207      	movs	r2, #7
 800b462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b464:	e009      	b.n	800b47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b466:	4b2f      	ldr	r3, [pc, #188]	; (800b524 <xPortStartScheduler+0x134>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	4a2d      	ldr	r2, [pc, #180]	; (800b524 <xPortStartScheduler+0x134>)
 800b46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b482:	2b80      	cmp	r3, #128	; 0x80
 800b484:	d0ef      	beq.n	800b466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b486:	4b27      	ldr	r3, [pc, #156]	; (800b524 <xPortStartScheduler+0x134>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f1c3 0307 	rsb	r3, r3, #7
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d00a      	beq.n	800b4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	60bb      	str	r3, [r7, #8]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4a8:	4b1e      	ldr	r3, [pc, #120]	; (800b524 <xPortStartScheduler+0x134>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	021b      	lsls	r3, r3, #8
 800b4ae:	4a1d      	ldr	r2, [pc, #116]	; (800b524 <xPortStartScheduler+0x134>)
 800b4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4b2:	4b1c      	ldr	r3, [pc, #112]	; (800b524 <xPortStartScheduler+0x134>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4ba:	4a1a      	ldr	r2, [pc, #104]	; (800b524 <xPortStartScheduler+0x134>)
 800b4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4c6:	4b18      	ldr	r3, [pc, #96]	; (800b528 <xPortStartScheduler+0x138>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a17      	ldr	r2, [pc, #92]	; (800b528 <xPortStartScheduler+0x138>)
 800b4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4d2:	4b15      	ldr	r3, [pc, #84]	; (800b528 <xPortStartScheduler+0x138>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a14      	ldr	r2, [pc, #80]	; (800b528 <xPortStartScheduler+0x138>)
 800b4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4de:	f000 f8dd 	bl	800b69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4e2:	4b12      	ldr	r3, [pc, #72]	; (800b52c <xPortStartScheduler+0x13c>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4e8:	f000 f8fc 	bl	800b6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4ec:	4b10      	ldr	r3, [pc, #64]	; (800b530 <xPortStartScheduler+0x140>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a0f      	ldr	r2, [pc, #60]	; (800b530 <xPortStartScheduler+0x140>)
 800b4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4f8:	f7ff ff66 	bl	800b3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4fc:	f7ff f856 	bl	800a5ac <vTaskSwitchContext>
	prvTaskExitError();
 800b500:	f7ff ff22 	bl	800b348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	e000ed00 	.word	0xe000ed00
 800b514:	410fc271 	.word	0x410fc271
 800b518:	410fc270 	.word	0x410fc270
 800b51c:	e000e400 	.word	0xe000e400
 800b520:	200015f0 	.word	0x200015f0
 800b524:	200015f4 	.word	0x200015f4
 800b528:	e000ed20 	.word	0xe000ed20
 800b52c:	2000002c 	.word	0x2000002c
 800b530:	e000ef34 	.word	0xe000ef34

0800b534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	607b      	str	r3, [r7, #4]
}
 800b54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b54e:	4b0f      	ldr	r3, [pc, #60]	; (800b58c <vPortEnterCritical+0x58>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	4a0d      	ldr	r2, [pc, #52]	; (800b58c <vPortEnterCritical+0x58>)
 800b556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b558:	4b0c      	ldr	r3, [pc, #48]	; (800b58c <vPortEnterCritical+0x58>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d10f      	bne.n	800b580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <vPortEnterCritical+0x5c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	b2db      	uxtb	r3, r3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <vPortEnterCritical+0x4c>
	__asm volatile
 800b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	603b      	str	r3, [r7, #0]
}
 800b57c:	bf00      	nop
 800b57e:	e7fe      	b.n	800b57e <vPortEnterCritical+0x4a>
	}
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr
 800b58c:	2000002c 	.word	0x2000002c
 800b590:	e000ed04 	.word	0xe000ed04

0800b594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b59a:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <vPortExitCritical+0x50>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10a      	bne.n	800b5b8 <vPortExitCritical+0x24>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	607b      	str	r3, [r7, #4]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5b8:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	4a09      	ldr	r2, [pc, #36]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5c2:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <vPortExitCritical+0x50>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d105      	bne.n	800b5d6 <vPortExitCritical+0x42>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	f383 8811 	msr	BASEPRI, r3
}
 800b5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	2000002c 	.word	0x2000002c
	...

0800b5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5f0:	f3ef 8009 	mrs	r0, PSP
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	4b15      	ldr	r3, [pc, #84]	; (800b650 <pxCurrentTCBConst>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	f01e 0f10 	tst.w	lr, #16
 800b600:	bf08      	it	eq
 800b602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	6010      	str	r0, [r2, #0]
 800b60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b614:	f380 8811 	msr	BASEPRI, r0
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f7fe ffc4 	bl	800a5ac <vTaskSwitchContext>
 800b624:	f04f 0000 	mov.w	r0, #0
 800b628:	f380 8811 	msr	BASEPRI, r0
 800b62c:	bc09      	pop	{r0, r3}
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b636:	f01e 0f10 	tst.w	lr, #16
 800b63a:	bf08      	it	eq
 800b63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b640:	f380 8809 	msr	PSP, r0
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst>:
 800b650:	20000fc4 	.word	0x20000fc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop

0800b658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
}
 800b670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b672:	f7fe fee1 	bl	800a438 <xTaskIncrementTick>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b67c:	4b06      	ldr	r3, [pc, #24]	; (800b698 <xPortSysTickHandler+0x40>)
 800b67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f383 8811 	msr	BASEPRI, r3
}
 800b68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6a0:	4b0b      	ldr	r3, [pc, #44]	; (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6a6:	4b0b      	ldr	r3, [pc, #44]	; (800b6d4 <vPortSetupTimerInterrupt+0x38>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <vPortSetupTimerInterrupt+0x3c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a0a      	ldr	r2, [pc, #40]	; (800b6dc <vPortSetupTimerInterrupt+0x40>)
 800b6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b6:	099b      	lsrs	r3, r3, #6
 800b6b8:	4a09      	ldr	r2, [pc, #36]	; (800b6e0 <vPortSetupTimerInterrupt+0x44>)
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	601a      	str	r2, [r3, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	e000e010 	.word	0xe000e010
 800b6d4:	e000e018 	.word	0xe000e018
 800b6d8:	20000020 	.word	0x20000020
 800b6dc:	10624dd3 	.word	0x10624dd3
 800b6e0:	e000e014 	.word	0xe000e014

0800b6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6f4 <vPortEnableVFP+0x10>
 800b6e8:	6801      	ldr	r1, [r0, #0]
 800b6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ee:	6001      	str	r1, [r0, #0]
 800b6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6f2:	bf00      	nop
 800b6f4:	e000ed88 	.word	0xe000ed88

0800b6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6fe:	f3ef 8305 	mrs	r3, IPSR
 800b702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b0f      	cmp	r3, #15
 800b708:	d914      	bls.n	800b734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b70a:	4a17      	ldr	r2, [pc, #92]	; (800b768 <vPortValidateInterruptPriority+0x70>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b714:	4b15      	ldr	r3, [pc, #84]	; (800b76c <vPortValidateInterruptPriority+0x74>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	7afa      	ldrb	r2, [r7, #11]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d20a      	bcs.n	800b734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	607b      	str	r3, [r7, #4]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b734:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <vPortValidateInterruptPriority+0x78>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b73c:	4b0d      	ldr	r3, [pc, #52]	; (800b774 <vPortValidateInterruptPriority+0x7c>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d90a      	bls.n	800b75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	603b      	str	r3, [r7, #0]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <vPortValidateInterruptPriority+0x60>
	}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	e000e3f0 	.word	0xe000e3f0
 800b76c:	200015f0 	.word	0x200015f0
 800b770:	e000ed0c 	.word	0xe000ed0c
 800b774:	200015f4 	.word	0x200015f4

0800b778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b784:	f7fe fd9c 	bl	800a2c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b788:	4b5b      	ldr	r3, [pc, #364]	; (800b8f8 <pvPortMalloc+0x180>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b790:	f000 f920 	bl	800b9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b794:	4b59      	ldr	r3, [pc, #356]	; (800b8fc <pvPortMalloc+0x184>)
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4013      	ands	r3, r2
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f040 8093 	bne.w	800b8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01d      	beq.n	800b7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7a8:	2208      	movs	r2, #8
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d014      	beq.n	800b7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f003 0307 	and.w	r3, r3, #7
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	617b      	str	r3, [r7, #20]
}
 800b7e0:	bf00      	nop
 800b7e2:	e7fe      	b.n	800b7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d06e      	beq.n	800b8c8 <pvPortMalloc+0x150>
 800b7ea:	4b45      	ldr	r3, [pc, #276]	; (800b900 <pvPortMalloc+0x188>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d869      	bhi.n	800b8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7f4:	4b43      	ldr	r3, [pc, #268]	; (800b904 <pvPortMalloc+0x18c>)
 800b7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7f8:	4b42      	ldr	r3, [pc, #264]	; (800b904 <pvPortMalloc+0x18c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7fe:	e004      	b.n	800b80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d903      	bls.n	800b81c <pvPortMalloc+0xa4>
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1f1      	bne.n	800b800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b81c:	4b36      	ldr	r3, [pc, #216]	; (800b8f8 <pvPortMalloc+0x180>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b822:	429a      	cmp	r2, r3
 800b824:	d050      	beq.n	800b8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2208      	movs	r2, #8
 800b82c:	4413      	add	r3, r2
 800b82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	2308      	movs	r3, #8
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	429a      	cmp	r2, r3
 800b846:	d91f      	bls.n	800b888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <pvPortMalloc+0xf8>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	613b      	str	r3, [r7, #16]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b882:	69b8      	ldr	r0, [r7, #24]
 800b884:	f000 f908 	bl	800ba98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b888:	4b1d      	ldr	r3, [pc, #116]	; (800b900 <pvPortMalloc+0x188>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	4a1b      	ldr	r2, [pc, #108]	; (800b900 <pvPortMalloc+0x188>)
 800b894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b896:	4b1a      	ldr	r3, [pc, #104]	; (800b900 <pvPortMalloc+0x188>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b1b      	ldr	r3, [pc, #108]	; (800b908 <pvPortMalloc+0x190>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d203      	bcs.n	800b8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8a2:	4b17      	ldr	r3, [pc, #92]	; (800b900 <pvPortMalloc+0x188>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a18      	ldr	r2, [pc, #96]	; (800b908 <pvPortMalloc+0x190>)
 800b8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	4b13      	ldr	r3, [pc, #76]	; (800b8fc <pvPortMalloc+0x184>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8be:	4b13      	ldr	r3, [pc, #76]	; (800b90c <pvPortMalloc+0x194>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	4a11      	ldr	r2, [pc, #68]	; (800b90c <pvPortMalloc+0x194>)
 800b8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8c8:	f7fe fd08 	bl	800a2dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00a      	beq.n	800b8ec <pvPortMalloc+0x174>
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60fb      	str	r3, [r7, #12]
}
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <pvPortMalloc+0x172>
	return pvReturn;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3728      	adds	r7, #40	; 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20005200 	.word	0x20005200
 800b8fc:	20005214 	.word	0x20005214
 800b900:	20005204 	.word	0x20005204
 800b904:	200051f8 	.word	0x200051f8
 800b908:	20005208 	.word	0x20005208
 800b90c:	2000520c 	.word	0x2000520c

0800b910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d04d      	beq.n	800b9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b922:	2308      	movs	r3, #8
 800b924:	425b      	negs	r3, r3
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <vPortFree+0xb8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4013      	ands	r3, r2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10a      	bne.n	800b954 <vPortFree+0x44>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	60fb      	str	r3, [r7, #12]
}
 800b950:	bf00      	nop
 800b952:	e7fe      	b.n	800b952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00a      	beq.n	800b972 <vPortFree+0x62>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	60bb      	str	r3, [r7, #8]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	685a      	ldr	r2, [r3, #4]
 800b976:	4b14      	ldr	r3, [pc, #80]	; (800b9c8 <vPortFree+0xb8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d01e      	beq.n	800b9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d11a      	bne.n	800b9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b0e      	ldr	r3, [pc, #56]	; (800b9c8 <vPortFree+0xb8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	43db      	mvns	r3, r3
 800b992:	401a      	ands	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b998:	f7fe fc92 	bl	800a2c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <vPortFree+0xbc>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	4a09      	ldr	r2, [pc, #36]	; (800b9cc <vPortFree+0xbc>)
 800b9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9aa:	6938      	ldr	r0, [r7, #16]
 800b9ac:	f000 f874 	bl	800ba98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <vPortFree+0xc0>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	4a06      	ldr	r2, [pc, #24]	; (800b9d0 <vPortFree+0xc0>)
 800b9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9ba:	f7fe fc8f 	bl	800a2dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9be:	bf00      	nop
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20005214 	.word	0x20005214
 800b9cc:	20005204 	.word	0x20005204
 800b9d0:	20005210 	.word	0x20005210

0800b9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9e0:	4b27      	ldr	r3, [pc, #156]	; (800ba80 <prvHeapInit+0xac>)
 800b9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f003 0307 	and.w	r3, r3, #7
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00c      	beq.n	800ba08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3307      	adds	r3, #7
 800b9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f023 0307 	bic.w	r3, r3, #7
 800b9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	4a1f      	ldr	r2, [pc, #124]	; (800ba80 <prvHeapInit+0xac>)
 800ba04:	4413      	add	r3, r2
 800ba06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba0c:	4a1d      	ldr	r2, [pc, #116]	; (800ba84 <prvHeapInit+0xb0>)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba12:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <prvHeapInit+0xb0>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba20:	2208      	movs	r2, #8
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	1a9b      	subs	r3, r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f023 0307 	bic.w	r3, r3, #7
 800ba2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4a15      	ldr	r2, [pc, #84]	; (800ba88 <prvHeapInit+0xb4>)
 800ba34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba36:	4b14      	ldr	r3, [pc, #80]	; (800ba88 <prvHeapInit+0xb4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba3e:	4b12      	ldr	r3, [pc, #72]	; (800ba88 <prvHeapInit+0xb4>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba54:	4b0c      	ldr	r3, [pc, #48]	; (800ba88 <prvHeapInit+0xb4>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	4a0a      	ldr	r2, [pc, #40]	; (800ba8c <prvHeapInit+0xb8>)
 800ba62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a09      	ldr	r2, [pc, #36]	; (800ba90 <prvHeapInit+0xbc>)
 800ba6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba6c:	4b09      	ldr	r3, [pc, #36]	; (800ba94 <prvHeapInit+0xc0>)
 800ba6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba72:	601a      	str	r2, [r3, #0]
}
 800ba74:	bf00      	nop
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	200015f8 	.word	0x200015f8
 800ba84:	200051f8 	.word	0x200051f8
 800ba88:	20005200 	.word	0x20005200
 800ba8c:	20005208 	.word	0x20005208
 800ba90:	20005204 	.word	0x20005204
 800ba94:	20005214 	.word	0x20005214

0800ba98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800baa0:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <prvInsertBlockIntoFreeList+0xac>)
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	e002      	b.n	800baac <prvInsertBlockIntoFreeList+0x14>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d8f7      	bhi.n	800baa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d108      	bne.n	800bada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	441a      	add	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	441a      	add	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d118      	bne.n	800bb20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	4b15      	ldr	r3, [pc, #84]	; (800bb48 <prvInsertBlockIntoFreeList+0xb0>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d00d      	beq.n	800bb16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	e008      	b.n	800bb28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb16:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <prvInsertBlockIntoFreeList+0xb0>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	601a      	str	r2, [r3, #0]
 800bb1e:	e003      	b.n	800bb28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d002      	beq.n	800bb36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb36:	bf00      	nop
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	200051f8 	.word	0x200051f8
 800bb48:	20005200 	.word	0x20005200

0800bb4c <__errno>:
 800bb4c:	4b01      	ldr	r3, [pc, #4]	; (800bb54 <__errno+0x8>)
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	20000030 	.word	0x20000030

0800bb58 <__libc_init_array>:
 800bb58:	b570      	push	{r4, r5, r6, lr}
 800bb5a:	4d0d      	ldr	r5, [pc, #52]	; (800bb90 <__libc_init_array+0x38>)
 800bb5c:	4c0d      	ldr	r4, [pc, #52]	; (800bb94 <__libc_init_array+0x3c>)
 800bb5e:	1b64      	subs	r4, r4, r5
 800bb60:	10a4      	asrs	r4, r4, #2
 800bb62:	2600      	movs	r6, #0
 800bb64:	42a6      	cmp	r6, r4
 800bb66:	d109      	bne.n	800bb7c <__libc_init_array+0x24>
 800bb68:	4d0b      	ldr	r5, [pc, #44]	; (800bb98 <__libc_init_array+0x40>)
 800bb6a:	4c0c      	ldr	r4, [pc, #48]	; (800bb9c <__libc_init_array+0x44>)
 800bb6c:	f001 fd36 	bl	800d5dc <_init>
 800bb70:	1b64      	subs	r4, r4, r5
 800bb72:	10a4      	asrs	r4, r4, #2
 800bb74:	2600      	movs	r6, #0
 800bb76:	42a6      	cmp	r6, r4
 800bb78:	d105      	bne.n	800bb86 <__libc_init_array+0x2e>
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb80:	4798      	blx	r3
 800bb82:	3601      	adds	r6, #1
 800bb84:	e7ee      	b.n	800bb64 <__libc_init_array+0xc>
 800bb86:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8a:	4798      	blx	r3
 800bb8c:	3601      	adds	r6, #1
 800bb8e:	e7f2      	b.n	800bb76 <__libc_init_array+0x1e>
 800bb90:	0800e460 	.word	0x0800e460
 800bb94:	0800e460 	.word	0x0800e460
 800bb98:	0800e460 	.word	0x0800e460
 800bb9c:	0800e464 	.word	0x0800e464

0800bba0 <memcpy>:
 800bba0:	440a      	add	r2, r1
 800bba2:	4291      	cmp	r1, r2
 800bba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bba8:	d100      	bne.n	800bbac <memcpy+0xc>
 800bbaa:	4770      	bx	lr
 800bbac:	b510      	push	{r4, lr}
 800bbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb6:	4291      	cmp	r1, r2
 800bbb8:	d1f9      	bne.n	800bbae <memcpy+0xe>
 800bbba:	bd10      	pop	{r4, pc}

0800bbbc <memset>:
 800bbbc:	4402      	add	r2, r0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d100      	bne.n	800bbc6 <memset+0xa>
 800bbc4:	4770      	bx	lr
 800bbc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbca:	e7f9      	b.n	800bbc0 <memset+0x4>

0800bbcc <siprintf>:
 800bbcc:	b40e      	push	{r1, r2, r3}
 800bbce:	b500      	push	{lr}
 800bbd0:	b09c      	sub	sp, #112	; 0x70
 800bbd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bbd4:	9002      	str	r0, [sp, #8]
 800bbd6:	9006      	str	r0, [sp, #24]
 800bbd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbdc:	4809      	ldr	r0, [pc, #36]	; (800bc04 <siprintf+0x38>)
 800bbde:	9107      	str	r1, [sp, #28]
 800bbe0:	9104      	str	r1, [sp, #16]
 800bbe2:	4909      	ldr	r1, [pc, #36]	; (800bc08 <siprintf+0x3c>)
 800bbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe8:	9105      	str	r1, [sp, #20]
 800bbea:	6800      	ldr	r0, [r0, #0]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	a902      	add	r1, sp, #8
 800bbf0:	f000 f870 	bl	800bcd4 <_svfiprintf_r>
 800bbf4:	9b02      	ldr	r3, [sp, #8]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	701a      	strb	r2, [r3, #0]
 800bbfa:	b01c      	add	sp, #112	; 0x70
 800bbfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc00:	b003      	add	sp, #12
 800bc02:	4770      	bx	lr
 800bc04:	20000030 	.word	0x20000030
 800bc08:	ffff0208 	.word	0xffff0208

0800bc0c <strcpy>:
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc12:	f803 2b01 	strb.w	r2, [r3], #1
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d1f9      	bne.n	800bc0e <strcpy+0x2>
 800bc1a:	4770      	bx	lr

0800bc1c <__ssputs_r>:
 800bc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc20:	688e      	ldr	r6, [r1, #8]
 800bc22:	429e      	cmp	r6, r3
 800bc24:	4682      	mov	sl, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	4690      	mov	r8, r2
 800bc2a:	461f      	mov	r7, r3
 800bc2c:	d838      	bhi.n	800bca0 <__ssputs_r+0x84>
 800bc2e:	898a      	ldrh	r2, [r1, #12]
 800bc30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc34:	d032      	beq.n	800bc9c <__ssputs_r+0x80>
 800bc36:	6825      	ldr	r5, [r4, #0]
 800bc38:	6909      	ldr	r1, [r1, #16]
 800bc3a:	eba5 0901 	sub.w	r9, r5, r1
 800bc3e:	6965      	ldr	r5, [r4, #20]
 800bc40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc48:	3301      	adds	r3, #1
 800bc4a:	444b      	add	r3, r9
 800bc4c:	106d      	asrs	r5, r5, #1
 800bc4e:	429d      	cmp	r5, r3
 800bc50:	bf38      	it	cc
 800bc52:	461d      	movcc	r5, r3
 800bc54:	0553      	lsls	r3, r2, #21
 800bc56:	d531      	bpl.n	800bcbc <__ssputs_r+0xa0>
 800bc58:	4629      	mov	r1, r5
 800bc5a:	f000 fb55 	bl	800c308 <_malloc_r>
 800bc5e:	4606      	mov	r6, r0
 800bc60:	b950      	cbnz	r0, 800bc78 <__ssputs_r+0x5c>
 800bc62:	230c      	movs	r3, #12
 800bc64:	f8ca 3000 	str.w	r3, [sl]
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc6e:	81a3      	strh	r3, [r4, #12]
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	6921      	ldr	r1, [r4, #16]
 800bc7a:	464a      	mov	r2, r9
 800bc7c:	f7ff ff90 	bl	800bba0 <memcpy>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	6126      	str	r6, [r4, #16]
 800bc8e:	6165      	str	r5, [r4, #20]
 800bc90:	444e      	add	r6, r9
 800bc92:	eba5 0509 	sub.w	r5, r5, r9
 800bc96:	6026      	str	r6, [r4, #0]
 800bc98:	60a5      	str	r5, [r4, #8]
 800bc9a:	463e      	mov	r6, r7
 800bc9c:	42be      	cmp	r6, r7
 800bc9e:	d900      	bls.n	800bca2 <__ssputs_r+0x86>
 800bca0:	463e      	mov	r6, r7
 800bca2:	6820      	ldr	r0, [r4, #0]
 800bca4:	4632      	mov	r2, r6
 800bca6:	4641      	mov	r1, r8
 800bca8:	f000 faa8 	bl	800c1fc <memmove>
 800bcac:	68a3      	ldr	r3, [r4, #8]
 800bcae:	1b9b      	subs	r3, r3, r6
 800bcb0:	60a3      	str	r3, [r4, #8]
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	4433      	add	r3, r6
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	2000      	movs	r0, #0
 800bcba:	e7db      	b.n	800bc74 <__ssputs_r+0x58>
 800bcbc:	462a      	mov	r2, r5
 800bcbe:	f000 fb97 	bl	800c3f0 <_realloc_r>
 800bcc2:	4606      	mov	r6, r0
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d1e1      	bne.n	800bc8c <__ssputs_r+0x70>
 800bcc8:	6921      	ldr	r1, [r4, #16]
 800bcca:	4650      	mov	r0, sl
 800bccc:	f000 fab0 	bl	800c230 <_free_r>
 800bcd0:	e7c7      	b.n	800bc62 <__ssputs_r+0x46>
	...

0800bcd4 <_svfiprintf_r>:
 800bcd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd8:	4698      	mov	r8, r3
 800bcda:	898b      	ldrh	r3, [r1, #12]
 800bcdc:	061b      	lsls	r3, r3, #24
 800bcde:	b09d      	sub	sp, #116	; 0x74
 800bce0:	4607      	mov	r7, r0
 800bce2:	460d      	mov	r5, r1
 800bce4:	4614      	mov	r4, r2
 800bce6:	d50e      	bpl.n	800bd06 <_svfiprintf_r+0x32>
 800bce8:	690b      	ldr	r3, [r1, #16]
 800bcea:	b963      	cbnz	r3, 800bd06 <_svfiprintf_r+0x32>
 800bcec:	2140      	movs	r1, #64	; 0x40
 800bcee:	f000 fb0b 	bl	800c308 <_malloc_r>
 800bcf2:	6028      	str	r0, [r5, #0]
 800bcf4:	6128      	str	r0, [r5, #16]
 800bcf6:	b920      	cbnz	r0, 800bd02 <_svfiprintf_r+0x2e>
 800bcf8:	230c      	movs	r3, #12
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e0d1      	b.n	800bea6 <_svfiprintf_r+0x1d2>
 800bd02:	2340      	movs	r3, #64	; 0x40
 800bd04:	616b      	str	r3, [r5, #20]
 800bd06:	2300      	movs	r3, #0
 800bd08:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0a:	2320      	movs	r3, #32
 800bd0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd10:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd14:	2330      	movs	r3, #48	; 0x30
 800bd16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bec0 <_svfiprintf_r+0x1ec>
 800bd1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd1e:	f04f 0901 	mov.w	r9, #1
 800bd22:	4623      	mov	r3, r4
 800bd24:	469a      	mov	sl, r3
 800bd26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd2a:	b10a      	cbz	r2, 800bd30 <_svfiprintf_r+0x5c>
 800bd2c:	2a25      	cmp	r2, #37	; 0x25
 800bd2e:	d1f9      	bne.n	800bd24 <_svfiprintf_r+0x50>
 800bd30:	ebba 0b04 	subs.w	fp, sl, r4
 800bd34:	d00b      	beq.n	800bd4e <_svfiprintf_r+0x7a>
 800bd36:	465b      	mov	r3, fp
 800bd38:	4622      	mov	r2, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f7ff ff6d 	bl	800bc1c <__ssputs_r>
 800bd42:	3001      	adds	r0, #1
 800bd44:	f000 80aa 	beq.w	800be9c <_svfiprintf_r+0x1c8>
 800bd48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd4a:	445a      	add	r2, fp
 800bd4c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 80a2 	beq.w	800be9c <_svfiprintf_r+0x1c8>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd62:	f10a 0a01 	add.w	sl, sl, #1
 800bd66:	9304      	str	r3, [sp, #16]
 800bd68:	9307      	str	r3, [sp, #28]
 800bd6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd6e:	931a      	str	r3, [sp, #104]	; 0x68
 800bd70:	4654      	mov	r4, sl
 800bd72:	2205      	movs	r2, #5
 800bd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd78:	4851      	ldr	r0, [pc, #324]	; (800bec0 <_svfiprintf_r+0x1ec>)
 800bd7a:	f7f4 fa31 	bl	80001e0 <memchr>
 800bd7e:	9a04      	ldr	r2, [sp, #16]
 800bd80:	b9d8      	cbnz	r0, 800bdba <_svfiprintf_r+0xe6>
 800bd82:	06d0      	lsls	r0, r2, #27
 800bd84:	bf44      	itt	mi
 800bd86:	2320      	movmi	r3, #32
 800bd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd8c:	0711      	lsls	r1, r2, #28
 800bd8e:	bf44      	itt	mi
 800bd90:	232b      	movmi	r3, #43	; 0x2b
 800bd92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd96:	f89a 3000 	ldrb.w	r3, [sl]
 800bd9a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9c:	d015      	beq.n	800bdca <_svfiprintf_r+0xf6>
 800bd9e:	9a07      	ldr	r2, [sp, #28]
 800bda0:	4654      	mov	r4, sl
 800bda2:	2000      	movs	r0, #0
 800bda4:	f04f 0c0a 	mov.w	ip, #10
 800bda8:	4621      	mov	r1, r4
 800bdaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdae:	3b30      	subs	r3, #48	; 0x30
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	d94e      	bls.n	800be52 <_svfiprintf_r+0x17e>
 800bdb4:	b1b0      	cbz	r0, 800bde4 <_svfiprintf_r+0x110>
 800bdb6:	9207      	str	r2, [sp, #28]
 800bdb8:	e014      	b.n	800bde4 <_svfiprintf_r+0x110>
 800bdba:	eba0 0308 	sub.w	r3, r0, r8
 800bdbe:	fa09 f303 	lsl.w	r3, r9, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	46a2      	mov	sl, r4
 800bdc8:	e7d2      	b.n	800bd70 <_svfiprintf_r+0x9c>
 800bdca:	9b03      	ldr	r3, [sp, #12]
 800bdcc:	1d19      	adds	r1, r3, #4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	9103      	str	r1, [sp, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bfbb      	ittet	lt
 800bdd6:	425b      	neglt	r3, r3
 800bdd8:	f042 0202 	orrlt.w	r2, r2, #2
 800bddc:	9307      	strge	r3, [sp, #28]
 800bdde:	9307      	strlt	r3, [sp, #28]
 800bde0:	bfb8      	it	lt
 800bde2:	9204      	strlt	r2, [sp, #16]
 800bde4:	7823      	ldrb	r3, [r4, #0]
 800bde6:	2b2e      	cmp	r3, #46	; 0x2e
 800bde8:	d10c      	bne.n	800be04 <_svfiprintf_r+0x130>
 800bdea:	7863      	ldrb	r3, [r4, #1]
 800bdec:	2b2a      	cmp	r3, #42	; 0x2a
 800bdee:	d135      	bne.n	800be5c <_svfiprintf_r+0x188>
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	9203      	str	r2, [sp, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bfb8      	it	lt
 800bdfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800be00:	3402      	adds	r4, #2
 800be02:	9305      	str	r3, [sp, #20]
 800be04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bed0 <_svfiprintf_r+0x1fc>
 800be08:	7821      	ldrb	r1, [r4, #0]
 800be0a:	2203      	movs	r2, #3
 800be0c:	4650      	mov	r0, sl
 800be0e:	f7f4 f9e7 	bl	80001e0 <memchr>
 800be12:	b140      	cbz	r0, 800be26 <_svfiprintf_r+0x152>
 800be14:	2340      	movs	r3, #64	; 0x40
 800be16:	eba0 000a 	sub.w	r0, r0, sl
 800be1a:	fa03 f000 	lsl.w	r0, r3, r0
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	4303      	orrs	r3, r0
 800be22:	3401      	adds	r4, #1
 800be24:	9304      	str	r3, [sp, #16]
 800be26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be2a:	4826      	ldr	r0, [pc, #152]	; (800bec4 <_svfiprintf_r+0x1f0>)
 800be2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be30:	2206      	movs	r2, #6
 800be32:	f7f4 f9d5 	bl	80001e0 <memchr>
 800be36:	2800      	cmp	r0, #0
 800be38:	d038      	beq.n	800beac <_svfiprintf_r+0x1d8>
 800be3a:	4b23      	ldr	r3, [pc, #140]	; (800bec8 <_svfiprintf_r+0x1f4>)
 800be3c:	bb1b      	cbnz	r3, 800be86 <_svfiprintf_r+0x1b2>
 800be3e:	9b03      	ldr	r3, [sp, #12]
 800be40:	3307      	adds	r3, #7
 800be42:	f023 0307 	bic.w	r3, r3, #7
 800be46:	3308      	adds	r3, #8
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be4c:	4433      	add	r3, r6
 800be4e:	9309      	str	r3, [sp, #36]	; 0x24
 800be50:	e767      	b.n	800bd22 <_svfiprintf_r+0x4e>
 800be52:	fb0c 3202 	mla	r2, ip, r2, r3
 800be56:	460c      	mov	r4, r1
 800be58:	2001      	movs	r0, #1
 800be5a:	e7a5      	b.n	800bda8 <_svfiprintf_r+0xd4>
 800be5c:	2300      	movs	r3, #0
 800be5e:	3401      	adds	r4, #1
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	4619      	mov	r1, r3
 800be64:	f04f 0c0a 	mov.w	ip, #10
 800be68:	4620      	mov	r0, r4
 800be6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be6e:	3a30      	subs	r2, #48	; 0x30
 800be70:	2a09      	cmp	r2, #9
 800be72:	d903      	bls.n	800be7c <_svfiprintf_r+0x1a8>
 800be74:	2b00      	cmp	r3, #0
 800be76:	d0c5      	beq.n	800be04 <_svfiprintf_r+0x130>
 800be78:	9105      	str	r1, [sp, #20]
 800be7a:	e7c3      	b.n	800be04 <_svfiprintf_r+0x130>
 800be7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be80:	4604      	mov	r4, r0
 800be82:	2301      	movs	r3, #1
 800be84:	e7f0      	b.n	800be68 <_svfiprintf_r+0x194>
 800be86:	ab03      	add	r3, sp, #12
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	462a      	mov	r2, r5
 800be8c:	4b0f      	ldr	r3, [pc, #60]	; (800becc <_svfiprintf_r+0x1f8>)
 800be8e:	a904      	add	r1, sp, #16
 800be90:	4638      	mov	r0, r7
 800be92:	f3af 8000 	nop.w
 800be96:	1c42      	adds	r2, r0, #1
 800be98:	4606      	mov	r6, r0
 800be9a:	d1d6      	bne.n	800be4a <_svfiprintf_r+0x176>
 800be9c:	89ab      	ldrh	r3, [r5, #12]
 800be9e:	065b      	lsls	r3, r3, #25
 800bea0:	f53f af2c 	bmi.w	800bcfc <_svfiprintf_r+0x28>
 800bea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bea6:	b01d      	add	sp, #116	; 0x74
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	ab03      	add	r3, sp, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4b06      	ldr	r3, [pc, #24]	; (800becc <_svfiprintf_r+0x1f8>)
 800beb4:	a904      	add	r1, sp, #16
 800beb6:	4638      	mov	r0, r7
 800beb8:	f000 f87a 	bl	800bfb0 <_printf_i>
 800bebc:	e7eb      	b.n	800be96 <_svfiprintf_r+0x1c2>
 800bebe:	bf00      	nop
 800bec0:	0800e248 	.word	0x0800e248
 800bec4:	0800e252 	.word	0x0800e252
 800bec8:	00000000 	.word	0x00000000
 800becc:	0800bc1d 	.word	0x0800bc1d
 800bed0:	0800e24e 	.word	0x0800e24e

0800bed4 <_printf_common>:
 800bed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed8:	4616      	mov	r6, r2
 800beda:	4699      	mov	r9, r3
 800bedc:	688a      	ldr	r2, [r1, #8]
 800bede:	690b      	ldr	r3, [r1, #16]
 800bee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bee4:	4293      	cmp	r3, r2
 800bee6:	bfb8      	it	lt
 800bee8:	4613      	movlt	r3, r2
 800beea:	6033      	str	r3, [r6, #0]
 800beec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bef0:	4607      	mov	r7, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	b10a      	cbz	r2, 800befa <_printf_common+0x26>
 800bef6:	3301      	adds	r3, #1
 800bef8:	6033      	str	r3, [r6, #0]
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	0699      	lsls	r1, r3, #26
 800befe:	bf42      	ittt	mi
 800bf00:	6833      	ldrmi	r3, [r6, #0]
 800bf02:	3302      	addmi	r3, #2
 800bf04:	6033      	strmi	r3, [r6, #0]
 800bf06:	6825      	ldr	r5, [r4, #0]
 800bf08:	f015 0506 	ands.w	r5, r5, #6
 800bf0c:	d106      	bne.n	800bf1c <_printf_common+0x48>
 800bf0e:	f104 0a19 	add.w	sl, r4, #25
 800bf12:	68e3      	ldr	r3, [r4, #12]
 800bf14:	6832      	ldr	r2, [r6, #0]
 800bf16:	1a9b      	subs	r3, r3, r2
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	dc26      	bgt.n	800bf6a <_printf_common+0x96>
 800bf1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf20:	1e13      	subs	r3, r2, #0
 800bf22:	6822      	ldr	r2, [r4, #0]
 800bf24:	bf18      	it	ne
 800bf26:	2301      	movne	r3, #1
 800bf28:	0692      	lsls	r2, r2, #26
 800bf2a:	d42b      	bmi.n	800bf84 <_printf_common+0xb0>
 800bf2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf30:	4649      	mov	r1, r9
 800bf32:	4638      	mov	r0, r7
 800bf34:	47c0      	blx	r8
 800bf36:	3001      	adds	r0, #1
 800bf38:	d01e      	beq.n	800bf78 <_printf_common+0xa4>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	68e5      	ldr	r5, [r4, #12]
 800bf3e:	6832      	ldr	r2, [r6, #0]
 800bf40:	f003 0306 	and.w	r3, r3, #6
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	bf08      	it	eq
 800bf48:	1aad      	subeq	r5, r5, r2
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	6922      	ldr	r2, [r4, #16]
 800bf4e:	bf0c      	ite	eq
 800bf50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf54:	2500      	movne	r5, #0
 800bf56:	4293      	cmp	r3, r2
 800bf58:	bfc4      	itt	gt
 800bf5a:	1a9b      	subgt	r3, r3, r2
 800bf5c:	18ed      	addgt	r5, r5, r3
 800bf5e:	2600      	movs	r6, #0
 800bf60:	341a      	adds	r4, #26
 800bf62:	42b5      	cmp	r5, r6
 800bf64:	d11a      	bne.n	800bf9c <_printf_common+0xc8>
 800bf66:	2000      	movs	r0, #0
 800bf68:	e008      	b.n	800bf7c <_printf_common+0xa8>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4652      	mov	r2, sl
 800bf6e:	4649      	mov	r1, r9
 800bf70:	4638      	mov	r0, r7
 800bf72:	47c0      	blx	r8
 800bf74:	3001      	adds	r0, #1
 800bf76:	d103      	bne.n	800bf80 <_printf_common+0xac>
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295
 800bf7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf80:	3501      	adds	r5, #1
 800bf82:	e7c6      	b.n	800bf12 <_printf_common+0x3e>
 800bf84:	18e1      	adds	r1, r4, r3
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	2030      	movs	r0, #48	; 0x30
 800bf8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf8e:	4422      	add	r2, r4
 800bf90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf98:	3302      	adds	r3, #2
 800bf9a:	e7c7      	b.n	800bf2c <_printf_common+0x58>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	4649      	mov	r1, r9
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	47c0      	blx	r8
 800bfa6:	3001      	adds	r0, #1
 800bfa8:	d0e6      	beq.n	800bf78 <_printf_common+0xa4>
 800bfaa:	3601      	adds	r6, #1
 800bfac:	e7d9      	b.n	800bf62 <_printf_common+0x8e>
	...

0800bfb0 <_printf_i>:
 800bfb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb4:	7e0f      	ldrb	r7, [r1, #24]
 800bfb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfb8:	2f78      	cmp	r7, #120	; 0x78
 800bfba:	4691      	mov	r9, r2
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	469a      	mov	sl, r3
 800bfc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfc6:	d807      	bhi.n	800bfd8 <_printf_i+0x28>
 800bfc8:	2f62      	cmp	r7, #98	; 0x62
 800bfca:	d80a      	bhi.n	800bfe2 <_printf_i+0x32>
 800bfcc:	2f00      	cmp	r7, #0
 800bfce:	f000 80d8 	beq.w	800c182 <_printf_i+0x1d2>
 800bfd2:	2f58      	cmp	r7, #88	; 0x58
 800bfd4:	f000 80a3 	beq.w	800c11e <_printf_i+0x16e>
 800bfd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfe0:	e03a      	b.n	800c058 <_printf_i+0xa8>
 800bfe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfe6:	2b15      	cmp	r3, #21
 800bfe8:	d8f6      	bhi.n	800bfd8 <_printf_i+0x28>
 800bfea:	a101      	add	r1, pc, #4	; (adr r1, 800bff0 <_printf_i+0x40>)
 800bfec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bff0:	0800c049 	.word	0x0800c049
 800bff4:	0800c05d 	.word	0x0800c05d
 800bff8:	0800bfd9 	.word	0x0800bfd9
 800bffc:	0800bfd9 	.word	0x0800bfd9
 800c000:	0800bfd9 	.word	0x0800bfd9
 800c004:	0800bfd9 	.word	0x0800bfd9
 800c008:	0800c05d 	.word	0x0800c05d
 800c00c:	0800bfd9 	.word	0x0800bfd9
 800c010:	0800bfd9 	.word	0x0800bfd9
 800c014:	0800bfd9 	.word	0x0800bfd9
 800c018:	0800bfd9 	.word	0x0800bfd9
 800c01c:	0800c169 	.word	0x0800c169
 800c020:	0800c08d 	.word	0x0800c08d
 800c024:	0800c14b 	.word	0x0800c14b
 800c028:	0800bfd9 	.word	0x0800bfd9
 800c02c:	0800bfd9 	.word	0x0800bfd9
 800c030:	0800c18b 	.word	0x0800c18b
 800c034:	0800bfd9 	.word	0x0800bfd9
 800c038:	0800c08d 	.word	0x0800c08d
 800c03c:	0800bfd9 	.word	0x0800bfd9
 800c040:	0800bfd9 	.word	0x0800bfd9
 800c044:	0800c153 	.word	0x0800c153
 800c048:	682b      	ldr	r3, [r5, #0]
 800c04a:	1d1a      	adds	r2, r3, #4
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	602a      	str	r2, [r5, #0]
 800c050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c058:	2301      	movs	r3, #1
 800c05a:	e0a3      	b.n	800c1a4 <_printf_i+0x1f4>
 800c05c:	6820      	ldr	r0, [r4, #0]
 800c05e:	6829      	ldr	r1, [r5, #0]
 800c060:	0606      	lsls	r6, r0, #24
 800c062:	f101 0304 	add.w	r3, r1, #4
 800c066:	d50a      	bpl.n	800c07e <_printf_i+0xce>
 800c068:	680e      	ldr	r6, [r1, #0]
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	2e00      	cmp	r6, #0
 800c06e:	da03      	bge.n	800c078 <_printf_i+0xc8>
 800c070:	232d      	movs	r3, #45	; 0x2d
 800c072:	4276      	negs	r6, r6
 800c074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c078:	485e      	ldr	r0, [pc, #376]	; (800c1f4 <_printf_i+0x244>)
 800c07a:	230a      	movs	r3, #10
 800c07c:	e019      	b.n	800c0b2 <_printf_i+0x102>
 800c07e:	680e      	ldr	r6, [r1, #0]
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c086:	bf18      	it	ne
 800c088:	b236      	sxthne	r6, r6
 800c08a:	e7ef      	b.n	800c06c <_printf_i+0xbc>
 800c08c:	682b      	ldr	r3, [r5, #0]
 800c08e:	6820      	ldr	r0, [r4, #0]
 800c090:	1d19      	adds	r1, r3, #4
 800c092:	6029      	str	r1, [r5, #0]
 800c094:	0601      	lsls	r1, r0, #24
 800c096:	d501      	bpl.n	800c09c <_printf_i+0xec>
 800c098:	681e      	ldr	r6, [r3, #0]
 800c09a:	e002      	b.n	800c0a2 <_printf_i+0xf2>
 800c09c:	0646      	lsls	r6, r0, #25
 800c09e:	d5fb      	bpl.n	800c098 <_printf_i+0xe8>
 800c0a0:	881e      	ldrh	r6, [r3, #0]
 800c0a2:	4854      	ldr	r0, [pc, #336]	; (800c1f4 <_printf_i+0x244>)
 800c0a4:	2f6f      	cmp	r7, #111	; 0x6f
 800c0a6:	bf0c      	ite	eq
 800c0a8:	2308      	moveq	r3, #8
 800c0aa:	230a      	movne	r3, #10
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0b2:	6865      	ldr	r5, [r4, #4]
 800c0b4:	60a5      	str	r5, [r4, #8]
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	bfa2      	ittt	ge
 800c0ba:	6821      	ldrge	r1, [r4, #0]
 800c0bc:	f021 0104 	bicge.w	r1, r1, #4
 800c0c0:	6021      	strge	r1, [r4, #0]
 800c0c2:	b90e      	cbnz	r6, 800c0c8 <_printf_i+0x118>
 800c0c4:	2d00      	cmp	r5, #0
 800c0c6:	d04d      	beq.n	800c164 <_printf_i+0x1b4>
 800c0c8:	4615      	mov	r5, r2
 800c0ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0ce:	fb03 6711 	mls	r7, r3, r1, r6
 800c0d2:	5dc7      	ldrb	r7, [r0, r7]
 800c0d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0d8:	4637      	mov	r7, r6
 800c0da:	42bb      	cmp	r3, r7
 800c0dc:	460e      	mov	r6, r1
 800c0de:	d9f4      	bls.n	800c0ca <_printf_i+0x11a>
 800c0e0:	2b08      	cmp	r3, #8
 800c0e2:	d10b      	bne.n	800c0fc <_printf_i+0x14c>
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	07de      	lsls	r6, r3, #31
 800c0e8:	d508      	bpl.n	800c0fc <_printf_i+0x14c>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	6861      	ldr	r1, [r4, #4]
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	bfde      	ittt	le
 800c0f2:	2330      	movle	r3, #48	; 0x30
 800c0f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0fc:	1b52      	subs	r2, r2, r5
 800c0fe:	6122      	str	r2, [r4, #16]
 800c100:	f8cd a000 	str.w	sl, [sp]
 800c104:	464b      	mov	r3, r9
 800c106:	aa03      	add	r2, sp, #12
 800c108:	4621      	mov	r1, r4
 800c10a:	4640      	mov	r0, r8
 800c10c:	f7ff fee2 	bl	800bed4 <_printf_common>
 800c110:	3001      	adds	r0, #1
 800c112:	d14c      	bne.n	800c1ae <_printf_i+0x1fe>
 800c114:	f04f 30ff 	mov.w	r0, #4294967295
 800c118:	b004      	add	sp, #16
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	4835      	ldr	r0, [pc, #212]	; (800c1f4 <_printf_i+0x244>)
 800c120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c124:	6829      	ldr	r1, [r5, #0]
 800c126:	6823      	ldr	r3, [r4, #0]
 800c128:	f851 6b04 	ldr.w	r6, [r1], #4
 800c12c:	6029      	str	r1, [r5, #0]
 800c12e:	061d      	lsls	r5, r3, #24
 800c130:	d514      	bpl.n	800c15c <_printf_i+0x1ac>
 800c132:	07df      	lsls	r7, r3, #31
 800c134:	bf44      	itt	mi
 800c136:	f043 0320 	orrmi.w	r3, r3, #32
 800c13a:	6023      	strmi	r3, [r4, #0]
 800c13c:	b91e      	cbnz	r6, 800c146 <_printf_i+0x196>
 800c13e:	6823      	ldr	r3, [r4, #0]
 800c140:	f023 0320 	bic.w	r3, r3, #32
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	2310      	movs	r3, #16
 800c148:	e7b0      	b.n	800c0ac <_printf_i+0xfc>
 800c14a:	6823      	ldr	r3, [r4, #0]
 800c14c:	f043 0320 	orr.w	r3, r3, #32
 800c150:	6023      	str	r3, [r4, #0]
 800c152:	2378      	movs	r3, #120	; 0x78
 800c154:	4828      	ldr	r0, [pc, #160]	; (800c1f8 <_printf_i+0x248>)
 800c156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c15a:	e7e3      	b.n	800c124 <_printf_i+0x174>
 800c15c:	0659      	lsls	r1, r3, #25
 800c15e:	bf48      	it	mi
 800c160:	b2b6      	uxthmi	r6, r6
 800c162:	e7e6      	b.n	800c132 <_printf_i+0x182>
 800c164:	4615      	mov	r5, r2
 800c166:	e7bb      	b.n	800c0e0 <_printf_i+0x130>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	6826      	ldr	r6, [r4, #0]
 800c16c:	6961      	ldr	r1, [r4, #20]
 800c16e:	1d18      	adds	r0, r3, #4
 800c170:	6028      	str	r0, [r5, #0]
 800c172:	0635      	lsls	r5, r6, #24
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	d501      	bpl.n	800c17c <_printf_i+0x1cc>
 800c178:	6019      	str	r1, [r3, #0]
 800c17a:	e002      	b.n	800c182 <_printf_i+0x1d2>
 800c17c:	0670      	lsls	r0, r6, #25
 800c17e:	d5fb      	bpl.n	800c178 <_printf_i+0x1c8>
 800c180:	8019      	strh	r1, [r3, #0]
 800c182:	2300      	movs	r3, #0
 800c184:	6123      	str	r3, [r4, #16]
 800c186:	4615      	mov	r5, r2
 800c188:	e7ba      	b.n	800c100 <_printf_i+0x150>
 800c18a:	682b      	ldr	r3, [r5, #0]
 800c18c:	1d1a      	adds	r2, r3, #4
 800c18e:	602a      	str	r2, [r5, #0]
 800c190:	681d      	ldr	r5, [r3, #0]
 800c192:	6862      	ldr	r2, [r4, #4]
 800c194:	2100      	movs	r1, #0
 800c196:	4628      	mov	r0, r5
 800c198:	f7f4 f822 	bl	80001e0 <memchr>
 800c19c:	b108      	cbz	r0, 800c1a2 <_printf_i+0x1f2>
 800c19e:	1b40      	subs	r0, r0, r5
 800c1a0:	6060      	str	r0, [r4, #4]
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	6123      	str	r3, [r4, #16]
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ac:	e7a8      	b.n	800c100 <_printf_i+0x150>
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	462a      	mov	r2, r5
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	47d0      	blx	sl
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d0ab      	beq.n	800c114 <_printf_i+0x164>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	079b      	lsls	r3, r3, #30
 800c1c0:	d413      	bmi.n	800c1ea <_printf_i+0x23a>
 800c1c2:	68e0      	ldr	r0, [r4, #12]
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	4298      	cmp	r0, r3
 800c1c8:	bfb8      	it	lt
 800c1ca:	4618      	movlt	r0, r3
 800c1cc:	e7a4      	b.n	800c118 <_printf_i+0x168>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	47d0      	blx	sl
 800c1d8:	3001      	adds	r0, #1
 800c1da:	d09b      	beq.n	800c114 <_printf_i+0x164>
 800c1dc:	3501      	adds	r5, #1
 800c1de:	68e3      	ldr	r3, [r4, #12]
 800c1e0:	9903      	ldr	r1, [sp, #12]
 800c1e2:	1a5b      	subs	r3, r3, r1
 800c1e4:	42ab      	cmp	r3, r5
 800c1e6:	dcf2      	bgt.n	800c1ce <_printf_i+0x21e>
 800c1e8:	e7eb      	b.n	800c1c2 <_printf_i+0x212>
 800c1ea:	2500      	movs	r5, #0
 800c1ec:	f104 0619 	add.w	r6, r4, #25
 800c1f0:	e7f5      	b.n	800c1de <_printf_i+0x22e>
 800c1f2:	bf00      	nop
 800c1f4:	0800e259 	.word	0x0800e259
 800c1f8:	0800e26a 	.word	0x0800e26a

0800c1fc <memmove>:
 800c1fc:	4288      	cmp	r0, r1
 800c1fe:	b510      	push	{r4, lr}
 800c200:	eb01 0402 	add.w	r4, r1, r2
 800c204:	d902      	bls.n	800c20c <memmove+0x10>
 800c206:	4284      	cmp	r4, r0
 800c208:	4623      	mov	r3, r4
 800c20a:	d807      	bhi.n	800c21c <memmove+0x20>
 800c20c:	1e43      	subs	r3, r0, #1
 800c20e:	42a1      	cmp	r1, r4
 800c210:	d008      	beq.n	800c224 <memmove+0x28>
 800c212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c21a:	e7f8      	b.n	800c20e <memmove+0x12>
 800c21c:	4402      	add	r2, r0
 800c21e:	4601      	mov	r1, r0
 800c220:	428a      	cmp	r2, r1
 800c222:	d100      	bne.n	800c226 <memmove+0x2a>
 800c224:	bd10      	pop	{r4, pc}
 800c226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22e:	e7f7      	b.n	800c220 <memmove+0x24>

0800c230 <_free_r>:
 800c230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c232:	2900      	cmp	r1, #0
 800c234:	d044      	beq.n	800c2c0 <_free_r+0x90>
 800c236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c23a:	9001      	str	r0, [sp, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f1a1 0404 	sub.w	r4, r1, #4
 800c242:	bfb8      	it	lt
 800c244:	18e4      	addlt	r4, r4, r3
 800c246:	f000 f913 	bl	800c470 <__malloc_lock>
 800c24a:	4a1e      	ldr	r2, [pc, #120]	; (800c2c4 <_free_r+0x94>)
 800c24c:	9801      	ldr	r0, [sp, #4]
 800c24e:	6813      	ldr	r3, [r2, #0]
 800c250:	b933      	cbnz	r3, 800c260 <_free_r+0x30>
 800c252:	6063      	str	r3, [r4, #4]
 800c254:	6014      	str	r4, [r2, #0]
 800c256:	b003      	add	sp, #12
 800c258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c25c:	f000 b90e 	b.w	800c47c <__malloc_unlock>
 800c260:	42a3      	cmp	r3, r4
 800c262:	d908      	bls.n	800c276 <_free_r+0x46>
 800c264:	6825      	ldr	r5, [r4, #0]
 800c266:	1961      	adds	r1, r4, r5
 800c268:	428b      	cmp	r3, r1
 800c26a:	bf01      	itttt	eq
 800c26c:	6819      	ldreq	r1, [r3, #0]
 800c26e:	685b      	ldreq	r3, [r3, #4]
 800c270:	1949      	addeq	r1, r1, r5
 800c272:	6021      	streq	r1, [r4, #0]
 800c274:	e7ed      	b.n	800c252 <_free_r+0x22>
 800c276:	461a      	mov	r2, r3
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	b10b      	cbz	r3, 800c280 <_free_r+0x50>
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	d9fa      	bls.n	800c276 <_free_r+0x46>
 800c280:	6811      	ldr	r1, [r2, #0]
 800c282:	1855      	adds	r5, r2, r1
 800c284:	42a5      	cmp	r5, r4
 800c286:	d10b      	bne.n	800c2a0 <_free_r+0x70>
 800c288:	6824      	ldr	r4, [r4, #0]
 800c28a:	4421      	add	r1, r4
 800c28c:	1854      	adds	r4, r2, r1
 800c28e:	42a3      	cmp	r3, r4
 800c290:	6011      	str	r1, [r2, #0]
 800c292:	d1e0      	bne.n	800c256 <_free_r+0x26>
 800c294:	681c      	ldr	r4, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	6053      	str	r3, [r2, #4]
 800c29a:	4421      	add	r1, r4
 800c29c:	6011      	str	r1, [r2, #0]
 800c29e:	e7da      	b.n	800c256 <_free_r+0x26>
 800c2a0:	d902      	bls.n	800c2a8 <_free_r+0x78>
 800c2a2:	230c      	movs	r3, #12
 800c2a4:	6003      	str	r3, [r0, #0]
 800c2a6:	e7d6      	b.n	800c256 <_free_r+0x26>
 800c2a8:	6825      	ldr	r5, [r4, #0]
 800c2aa:	1961      	adds	r1, r4, r5
 800c2ac:	428b      	cmp	r3, r1
 800c2ae:	bf04      	itt	eq
 800c2b0:	6819      	ldreq	r1, [r3, #0]
 800c2b2:	685b      	ldreq	r3, [r3, #4]
 800c2b4:	6063      	str	r3, [r4, #4]
 800c2b6:	bf04      	itt	eq
 800c2b8:	1949      	addeq	r1, r1, r5
 800c2ba:	6021      	streq	r1, [r4, #0]
 800c2bc:	6054      	str	r4, [r2, #4]
 800c2be:	e7ca      	b.n	800c256 <_free_r+0x26>
 800c2c0:	b003      	add	sp, #12
 800c2c2:	bd30      	pop	{r4, r5, pc}
 800c2c4:	20005218 	.word	0x20005218

0800c2c8 <sbrk_aligned>:
 800c2c8:	b570      	push	{r4, r5, r6, lr}
 800c2ca:	4e0e      	ldr	r6, [pc, #56]	; (800c304 <sbrk_aligned+0x3c>)
 800c2cc:	460c      	mov	r4, r1
 800c2ce:	6831      	ldr	r1, [r6, #0]
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	b911      	cbnz	r1, 800c2da <sbrk_aligned+0x12>
 800c2d4:	f000 f8bc 	bl	800c450 <_sbrk_r>
 800c2d8:	6030      	str	r0, [r6, #0]
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f000 f8b7 	bl	800c450 <_sbrk_r>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d00a      	beq.n	800c2fc <sbrk_aligned+0x34>
 800c2e6:	1cc4      	adds	r4, r0, #3
 800c2e8:	f024 0403 	bic.w	r4, r4, #3
 800c2ec:	42a0      	cmp	r0, r4
 800c2ee:	d007      	beq.n	800c300 <sbrk_aligned+0x38>
 800c2f0:	1a21      	subs	r1, r4, r0
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f000 f8ac 	bl	800c450 <_sbrk_r>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	d101      	bne.n	800c300 <sbrk_aligned+0x38>
 800c2fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c300:	4620      	mov	r0, r4
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	2000521c 	.word	0x2000521c

0800c308 <_malloc_r>:
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	1ccd      	adds	r5, r1, #3
 800c30e:	f025 0503 	bic.w	r5, r5, #3
 800c312:	3508      	adds	r5, #8
 800c314:	2d0c      	cmp	r5, #12
 800c316:	bf38      	it	cc
 800c318:	250c      	movcc	r5, #12
 800c31a:	2d00      	cmp	r5, #0
 800c31c:	4607      	mov	r7, r0
 800c31e:	db01      	blt.n	800c324 <_malloc_r+0x1c>
 800c320:	42a9      	cmp	r1, r5
 800c322:	d905      	bls.n	800c330 <_malloc_r+0x28>
 800c324:	230c      	movs	r3, #12
 800c326:	603b      	str	r3, [r7, #0]
 800c328:	2600      	movs	r6, #0
 800c32a:	4630      	mov	r0, r6
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	4e2e      	ldr	r6, [pc, #184]	; (800c3ec <_malloc_r+0xe4>)
 800c332:	f000 f89d 	bl	800c470 <__malloc_lock>
 800c336:	6833      	ldr	r3, [r6, #0]
 800c338:	461c      	mov	r4, r3
 800c33a:	bb34      	cbnz	r4, 800c38a <_malloc_r+0x82>
 800c33c:	4629      	mov	r1, r5
 800c33e:	4638      	mov	r0, r7
 800c340:	f7ff ffc2 	bl	800c2c8 <sbrk_aligned>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	4604      	mov	r4, r0
 800c348:	d14d      	bne.n	800c3e6 <_malloc_r+0xde>
 800c34a:	6834      	ldr	r4, [r6, #0]
 800c34c:	4626      	mov	r6, r4
 800c34e:	2e00      	cmp	r6, #0
 800c350:	d140      	bne.n	800c3d4 <_malloc_r+0xcc>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	4631      	mov	r1, r6
 800c356:	4638      	mov	r0, r7
 800c358:	eb04 0803 	add.w	r8, r4, r3
 800c35c:	f000 f878 	bl	800c450 <_sbrk_r>
 800c360:	4580      	cmp	r8, r0
 800c362:	d13a      	bne.n	800c3da <_malloc_r+0xd2>
 800c364:	6821      	ldr	r1, [r4, #0]
 800c366:	3503      	adds	r5, #3
 800c368:	1a6d      	subs	r5, r5, r1
 800c36a:	f025 0503 	bic.w	r5, r5, #3
 800c36e:	3508      	adds	r5, #8
 800c370:	2d0c      	cmp	r5, #12
 800c372:	bf38      	it	cc
 800c374:	250c      	movcc	r5, #12
 800c376:	4629      	mov	r1, r5
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff ffa5 	bl	800c2c8 <sbrk_aligned>
 800c37e:	3001      	adds	r0, #1
 800c380:	d02b      	beq.n	800c3da <_malloc_r+0xd2>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	442b      	add	r3, r5
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	e00e      	b.n	800c3a8 <_malloc_r+0xa0>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	1b52      	subs	r2, r2, r5
 800c38e:	d41e      	bmi.n	800c3ce <_malloc_r+0xc6>
 800c390:	2a0b      	cmp	r2, #11
 800c392:	d916      	bls.n	800c3c2 <_malloc_r+0xba>
 800c394:	1961      	adds	r1, r4, r5
 800c396:	42a3      	cmp	r3, r4
 800c398:	6025      	str	r5, [r4, #0]
 800c39a:	bf18      	it	ne
 800c39c:	6059      	strne	r1, [r3, #4]
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	bf08      	it	eq
 800c3a2:	6031      	streq	r1, [r6, #0]
 800c3a4:	5162      	str	r2, [r4, r5]
 800c3a6:	604b      	str	r3, [r1, #4]
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f104 060b 	add.w	r6, r4, #11
 800c3ae:	f000 f865 	bl	800c47c <__malloc_unlock>
 800c3b2:	f026 0607 	bic.w	r6, r6, #7
 800c3b6:	1d23      	adds	r3, r4, #4
 800c3b8:	1af2      	subs	r2, r6, r3
 800c3ba:	d0b6      	beq.n	800c32a <_malloc_r+0x22>
 800c3bc:	1b9b      	subs	r3, r3, r6
 800c3be:	50a3      	str	r3, [r4, r2]
 800c3c0:	e7b3      	b.n	800c32a <_malloc_r+0x22>
 800c3c2:	6862      	ldr	r2, [r4, #4]
 800c3c4:	42a3      	cmp	r3, r4
 800c3c6:	bf0c      	ite	eq
 800c3c8:	6032      	streq	r2, [r6, #0]
 800c3ca:	605a      	strne	r2, [r3, #4]
 800c3cc:	e7ec      	b.n	800c3a8 <_malloc_r+0xa0>
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	6864      	ldr	r4, [r4, #4]
 800c3d2:	e7b2      	b.n	800c33a <_malloc_r+0x32>
 800c3d4:	4634      	mov	r4, r6
 800c3d6:	6876      	ldr	r6, [r6, #4]
 800c3d8:	e7b9      	b.n	800c34e <_malloc_r+0x46>
 800c3da:	230c      	movs	r3, #12
 800c3dc:	603b      	str	r3, [r7, #0]
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f000 f84c 	bl	800c47c <__malloc_unlock>
 800c3e4:	e7a1      	b.n	800c32a <_malloc_r+0x22>
 800c3e6:	6025      	str	r5, [r4, #0]
 800c3e8:	e7de      	b.n	800c3a8 <_malloc_r+0xa0>
 800c3ea:	bf00      	nop
 800c3ec:	20005218 	.word	0x20005218

0800c3f0 <_realloc_r>:
 800c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	4680      	mov	r8, r0
 800c3f6:	4614      	mov	r4, r2
 800c3f8:	460e      	mov	r6, r1
 800c3fa:	b921      	cbnz	r1, 800c406 <_realloc_r+0x16>
 800c3fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c400:	4611      	mov	r1, r2
 800c402:	f7ff bf81 	b.w	800c308 <_malloc_r>
 800c406:	b92a      	cbnz	r2, 800c414 <_realloc_r+0x24>
 800c408:	f7ff ff12 	bl	800c230 <_free_r>
 800c40c:	4625      	mov	r5, r4
 800c40e:	4628      	mov	r0, r5
 800c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c414:	f000 f838 	bl	800c488 <_malloc_usable_size_r>
 800c418:	4284      	cmp	r4, r0
 800c41a:	4607      	mov	r7, r0
 800c41c:	d802      	bhi.n	800c424 <_realloc_r+0x34>
 800c41e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c422:	d812      	bhi.n	800c44a <_realloc_r+0x5a>
 800c424:	4621      	mov	r1, r4
 800c426:	4640      	mov	r0, r8
 800c428:	f7ff ff6e 	bl	800c308 <_malloc_r>
 800c42c:	4605      	mov	r5, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	d0ed      	beq.n	800c40e <_realloc_r+0x1e>
 800c432:	42bc      	cmp	r4, r7
 800c434:	4622      	mov	r2, r4
 800c436:	4631      	mov	r1, r6
 800c438:	bf28      	it	cs
 800c43a:	463a      	movcs	r2, r7
 800c43c:	f7ff fbb0 	bl	800bba0 <memcpy>
 800c440:	4631      	mov	r1, r6
 800c442:	4640      	mov	r0, r8
 800c444:	f7ff fef4 	bl	800c230 <_free_r>
 800c448:	e7e1      	b.n	800c40e <_realloc_r+0x1e>
 800c44a:	4635      	mov	r5, r6
 800c44c:	e7df      	b.n	800c40e <_realloc_r+0x1e>
	...

0800c450 <_sbrk_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4d06      	ldr	r5, [pc, #24]	; (800c46c <_sbrk_r+0x1c>)
 800c454:	2300      	movs	r3, #0
 800c456:	4604      	mov	r4, r0
 800c458:	4608      	mov	r0, r1
 800c45a:	602b      	str	r3, [r5, #0]
 800c45c:	f7f7 fef2 	bl	8004244 <_sbrk>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_sbrk_r+0x1a>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_sbrk_r+0x1a>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20005220 	.word	0x20005220

0800c470 <__malloc_lock>:
 800c470:	4801      	ldr	r0, [pc, #4]	; (800c478 <__malloc_lock+0x8>)
 800c472:	f000 b811 	b.w	800c498 <__retarget_lock_acquire_recursive>
 800c476:	bf00      	nop
 800c478:	20005224 	.word	0x20005224

0800c47c <__malloc_unlock>:
 800c47c:	4801      	ldr	r0, [pc, #4]	; (800c484 <__malloc_unlock+0x8>)
 800c47e:	f000 b80c 	b.w	800c49a <__retarget_lock_release_recursive>
 800c482:	bf00      	nop
 800c484:	20005224 	.word	0x20005224

0800c488 <_malloc_usable_size_r>:
 800c488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c48c:	1f18      	subs	r0, r3, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bfbc      	itt	lt
 800c492:	580b      	ldrlt	r3, [r1, r0]
 800c494:	18c0      	addlt	r0, r0, r3
 800c496:	4770      	bx	lr

0800c498 <__retarget_lock_acquire_recursive>:
 800c498:	4770      	bx	lr

0800c49a <__retarget_lock_release_recursive>:
 800c49a:	4770      	bx	lr
 800c49c:	0000      	movs	r0, r0
	...

0800c4a0 <cos>:
 800c4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4a2:	ec53 2b10 	vmov	r2, r3, d0
 800c4a6:	4826      	ldr	r0, [pc, #152]	; (800c540 <cos+0xa0>)
 800c4a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c4ac:	4281      	cmp	r1, r0
 800c4ae:	dc06      	bgt.n	800c4be <cos+0x1e>
 800c4b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c538 <cos+0x98>
 800c4b4:	b005      	add	sp, #20
 800c4b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ba:	f000 baa9 	b.w	800ca10 <__kernel_cos>
 800c4be:	4821      	ldr	r0, [pc, #132]	; (800c544 <cos+0xa4>)
 800c4c0:	4281      	cmp	r1, r0
 800c4c2:	dd09      	ble.n	800c4d8 <cos+0x38>
 800c4c4:	ee10 0a10 	vmov	r0, s0
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	f7f3 fedd 	bl	8000288 <__aeabi_dsub>
 800c4ce:	ec41 0b10 	vmov	d0, r0, r1
 800c4d2:	b005      	add	sp, #20
 800c4d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4d8:	4668      	mov	r0, sp
 800c4da:	f000 f88d 	bl	800c5f8 <__ieee754_rem_pio2>
 800c4de:	f000 0003 	and.w	r0, r0, #3
 800c4e2:	2801      	cmp	r0, #1
 800c4e4:	d00b      	beq.n	800c4fe <cos+0x5e>
 800c4e6:	2802      	cmp	r0, #2
 800c4e8:	d016      	beq.n	800c518 <cos+0x78>
 800c4ea:	b9e0      	cbnz	r0, 800c526 <cos+0x86>
 800c4ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4f0:	ed9d 0b00 	vldr	d0, [sp]
 800c4f4:	f000 fa8c 	bl	800ca10 <__kernel_cos>
 800c4f8:	ec51 0b10 	vmov	r0, r1, d0
 800c4fc:	e7e7      	b.n	800c4ce <cos+0x2e>
 800c4fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c502:	ed9d 0b00 	vldr	d0, [sp]
 800c506:	f000 fe9b 	bl	800d240 <__kernel_sin>
 800c50a:	ec53 2b10 	vmov	r2, r3, d0
 800c50e:	ee10 0a10 	vmov	r0, s0
 800c512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c516:	e7da      	b.n	800c4ce <cos+0x2e>
 800c518:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c51c:	ed9d 0b00 	vldr	d0, [sp]
 800c520:	f000 fa76 	bl	800ca10 <__kernel_cos>
 800c524:	e7f1      	b.n	800c50a <cos+0x6a>
 800c526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c52a:	ed9d 0b00 	vldr	d0, [sp]
 800c52e:	2001      	movs	r0, #1
 800c530:	f000 fe86 	bl	800d240 <__kernel_sin>
 800c534:	e7e0      	b.n	800c4f8 <cos+0x58>
 800c536:	bf00      	nop
	...
 800c540:	3fe921fb 	.word	0x3fe921fb
 800c544:	7fefffff 	.word	0x7fefffff

0800c548 <sin>:
 800c548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c54a:	ec53 2b10 	vmov	r2, r3, d0
 800c54e:	4828      	ldr	r0, [pc, #160]	; (800c5f0 <sin+0xa8>)
 800c550:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c554:	4281      	cmp	r1, r0
 800c556:	dc07      	bgt.n	800c568 <sin+0x20>
 800c558:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c5e8 <sin+0xa0>
 800c55c:	2000      	movs	r0, #0
 800c55e:	b005      	add	sp, #20
 800c560:	f85d eb04 	ldr.w	lr, [sp], #4
 800c564:	f000 be6c 	b.w	800d240 <__kernel_sin>
 800c568:	4822      	ldr	r0, [pc, #136]	; (800c5f4 <sin+0xac>)
 800c56a:	4281      	cmp	r1, r0
 800c56c:	dd09      	ble.n	800c582 <sin+0x3a>
 800c56e:	ee10 0a10 	vmov	r0, s0
 800c572:	4619      	mov	r1, r3
 800c574:	f7f3 fe88 	bl	8000288 <__aeabi_dsub>
 800c578:	ec41 0b10 	vmov	d0, r0, r1
 800c57c:	b005      	add	sp, #20
 800c57e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c582:	4668      	mov	r0, sp
 800c584:	f000 f838 	bl	800c5f8 <__ieee754_rem_pio2>
 800c588:	f000 0003 	and.w	r0, r0, #3
 800c58c:	2801      	cmp	r0, #1
 800c58e:	d00c      	beq.n	800c5aa <sin+0x62>
 800c590:	2802      	cmp	r0, #2
 800c592:	d011      	beq.n	800c5b8 <sin+0x70>
 800c594:	b9f0      	cbnz	r0, 800c5d4 <sin+0x8c>
 800c596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c59a:	ed9d 0b00 	vldr	d0, [sp]
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f000 fe4e 	bl	800d240 <__kernel_sin>
 800c5a4:	ec51 0b10 	vmov	r0, r1, d0
 800c5a8:	e7e6      	b.n	800c578 <sin+0x30>
 800c5aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5ae:	ed9d 0b00 	vldr	d0, [sp]
 800c5b2:	f000 fa2d 	bl	800ca10 <__kernel_cos>
 800c5b6:	e7f5      	b.n	800c5a4 <sin+0x5c>
 800c5b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5bc:	ed9d 0b00 	vldr	d0, [sp]
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	f000 fe3d 	bl	800d240 <__kernel_sin>
 800c5c6:	ec53 2b10 	vmov	r2, r3, d0
 800c5ca:	ee10 0a10 	vmov	r0, s0
 800c5ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5d2:	e7d1      	b.n	800c578 <sin+0x30>
 800c5d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5d8:	ed9d 0b00 	vldr	d0, [sp]
 800c5dc:	f000 fa18 	bl	800ca10 <__kernel_cos>
 800c5e0:	e7f1      	b.n	800c5c6 <sin+0x7e>
 800c5e2:	bf00      	nop
 800c5e4:	f3af 8000 	nop.w
	...
 800c5f0:	3fe921fb 	.word	0x3fe921fb
 800c5f4:	7fefffff 	.word	0x7fefffff

0800c5f8 <__ieee754_rem_pio2>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	ed2d 8b02 	vpush	{d8}
 800c600:	ec55 4b10 	vmov	r4, r5, d0
 800c604:	4bca      	ldr	r3, [pc, #808]	; (800c930 <__ieee754_rem_pio2+0x338>)
 800c606:	b08b      	sub	sp, #44	; 0x2c
 800c608:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c60c:	4598      	cmp	r8, r3
 800c60e:	4682      	mov	sl, r0
 800c610:	9502      	str	r5, [sp, #8]
 800c612:	dc08      	bgt.n	800c626 <__ieee754_rem_pio2+0x2e>
 800c614:	2200      	movs	r2, #0
 800c616:	2300      	movs	r3, #0
 800c618:	ed80 0b00 	vstr	d0, [r0]
 800c61c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c620:	f04f 0b00 	mov.w	fp, #0
 800c624:	e028      	b.n	800c678 <__ieee754_rem_pio2+0x80>
 800c626:	4bc3      	ldr	r3, [pc, #780]	; (800c934 <__ieee754_rem_pio2+0x33c>)
 800c628:	4598      	cmp	r8, r3
 800c62a:	dc78      	bgt.n	800c71e <__ieee754_rem_pio2+0x126>
 800c62c:	9b02      	ldr	r3, [sp, #8]
 800c62e:	4ec2      	ldr	r6, [pc, #776]	; (800c938 <__ieee754_rem_pio2+0x340>)
 800c630:	2b00      	cmp	r3, #0
 800c632:	ee10 0a10 	vmov	r0, s0
 800c636:	a3b0      	add	r3, pc, #704	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x300>)
 800c638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63c:	4629      	mov	r1, r5
 800c63e:	dd39      	ble.n	800c6b4 <__ieee754_rem_pio2+0xbc>
 800c640:	f7f3 fe22 	bl	8000288 <__aeabi_dsub>
 800c644:	45b0      	cmp	r8, r6
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	d01b      	beq.n	800c684 <__ieee754_rem_pio2+0x8c>
 800c64c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c900 <__ieee754_rem_pio2+0x308>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fe19 	bl	8000288 <__aeabi_dsub>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	e9ca 2300 	strd	r2, r3, [sl]
 800c65e:	4620      	mov	r0, r4
 800c660:	4629      	mov	r1, r5
 800c662:	f7f3 fe11 	bl	8000288 <__aeabi_dsub>
 800c666:	a3a6      	add	r3, pc, #664	; (adr r3, 800c900 <__ieee754_rem_pio2+0x308>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 fe0c 	bl	8000288 <__aeabi_dsub>
 800c670:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c674:	f04f 0b01 	mov.w	fp, #1
 800c678:	4658      	mov	r0, fp
 800c67a:	b00b      	add	sp, #44	; 0x2c
 800c67c:	ecbd 8b02 	vpop	{d8}
 800c680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c684:	a3a0      	add	r3, pc, #640	; (adr r3, 800c908 <__ieee754_rem_pio2+0x310>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	f7f3 fdfd 	bl	8000288 <__aeabi_dsub>
 800c68e:	a3a0      	add	r3, pc, #640	; (adr r3, 800c910 <__ieee754_rem_pio2+0x318>)
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	4604      	mov	r4, r0
 800c696:	460d      	mov	r5, r1
 800c698:	f7f3 fdf6 	bl	8000288 <__aeabi_dsub>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	e9ca 2300 	strd	r2, r3, [sl]
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 fdee 	bl	8000288 <__aeabi_dsub>
 800c6ac:	a398      	add	r3, pc, #608	; (adr r3, 800c910 <__ieee754_rem_pio2+0x318>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	e7db      	b.n	800c66c <__ieee754_rem_pio2+0x74>
 800c6b4:	f7f3 fdea 	bl	800028c <__adddf3>
 800c6b8:	45b0      	cmp	r8, r6
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	460d      	mov	r5, r1
 800c6be:	d016      	beq.n	800c6ee <__ieee754_rem_pio2+0xf6>
 800c6c0:	a38f      	add	r3, pc, #572	; (adr r3, 800c900 <__ieee754_rem_pio2+0x308>)
 800c6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c6:	f7f3 fde1 	bl	800028c <__adddf3>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	e9ca 2300 	strd	r2, r3, [sl]
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7f3 fdd7 	bl	8000288 <__aeabi_dsub>
 800c6da:	a389      	add	r3, pc, #548	; (adr r3, 800c900 <__ieee754_rem_pio2+0x308>)
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	f7f3 fdd4 	bl	800028c <__adddf3>
 800c6e4:	f04f 3bff 	mov.w	fp, #4294967295
 800c6e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6ec:	e7c4      	b.n	800c678 <__ieee754_rem_pio2+0x80>
 800c6ee:	a386      	add	r3, pc, #536	; (adr r3, 800c908 <__ieee754_rem_pio2+0x310>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fdca 	bl	800028c <__adddf3>
 800c6f8:	a385      	add	r3, pc, #532	; (adr r3, 800c910 <__ieee754_rem_pio2+0x318>)
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	4604      	mov	r4, r0
 800c700:	460d      	mov	r5, r1
 800c702:	f7f3 fdc3 	bl	800028c <__adddf3>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	e9ca 2300 	strd	r2, r3, [sl]
 800c70e:	4620      	mov	r0, r4
 800c710:	4629      	mov	r1, r5
 800c712:	f7f3 fdb9 	bl	8000288 <__aeabi_dsub>
 800c716:	a37e      	add	r3, pc, #504	; (adr r3, 800c910 <__ieee754_rem_pio2+0x318>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	e7e0      	b.n	800c6e0 <__ieee754_rem_pio2+0xe8>
 800c71e:	4b87      	ldr	r3, [pc, #540]	; (800c93c <__ieee754_rem_pio2+0x344>)
 800c720:	4598      	cmp	r8, r3
 800c722:	f300 80d9 	bgt.w	800c8d8 <__ieee754_rem_pio2+0x2e0>
 800c726:	f000 fe49 	bl	800d3bc <fabs>
 800c72a:	ec55 4b10 	vmov	r4, r5, d0
 800c72e:	ee10 0a10 	vmov	r0, s0
 800c732:	a379      	add	r3, pc, #484	; (adr r3, 800c918 <__ieee754_rem_pio2+0x320>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	4629      	mov	r1, r5
 800c73a:	f7f3 ff5d 	bl	80005f8 <__aeabi_dmul>
 800c73e:	4b80      	ldr	r3, [pc, #512]	; (800c940 <__ieee754_rem_pio2+0x348>)
 800c740:	2200      	movs	r2, #0
 800c742:	f7f3 fda3 	bl	800028c <__adddf3>
 800c746:	f7f4 f9f1 	bl	8000b2c <__aeabi_d2iz>
 800c74a:	4683      	mov	fp, r0
 800c74c:	f7f3 feea 	bl	8000524 <__aeabi_i2d>
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	ec43 2b18 	vmov	d8, r2, r3
 800c758:	a367      	add	r3, pc, #412	; (adr r3, 800c8f8 <__ieee754_rem_pio2+0x300>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f7f3 ff4b 	bl	80005f8 <__aeabi_dmul>
 800c762:	4602      	mov	r2, r0
 800c764:	460b      	mov	r3, r1
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f3 fd8d 	bl	8000288 <__aeabi_dsub>
 800c76e:	a364      	add	r3, pc, #400	; (adr r3, 800c900 <__ieee754_rem_pio2+0x308>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	4606      	mov	r6, r0
 800c776:	460f      	mov	r7, r1
 800c778:	ec51 0b18 	vmov	r0, r1, d8
 800c77c:	f7f3 ff3c 	bl	80005f8 <__aeabi_dmul>
 800c780:	f1bb 0f1f 	cmp.w	fp, #31
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	dc0d      	bgt.n	800c7a6 <__ieee754_rem_pio2+0x1ae>
 800c78a:	4b6e      	ldr	r3, [pc, #440]	; (800c944 <__ieee754_rem_pio2+0x34c>)
 800c78c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c794:	4543      	cmp	r3, r8
 800c796:	d006      	beq.n	800c7a6 <__ieee754_rem_pio2+0x1ae>
 800c798:	4622      	mov	r2, r4
 800c79a:	462b      	mov	r3, r5
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f3 fd72 	bl	8000288 <__aeabi_dsub>
 800c7a4:	e00f      	b.n	800c7c6 <__ieee754_rem_pio2+0x1ce>
 800c7a6:	462b      	mov	r3, r5
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c7b6:	9303      	str	r3, [sp, #12]
 800c7b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c7c0:	f1b8 0f10 	cmp.w	r8, #16
 800c7c4:	dc02      	bgt.n	800c7cc <__ieee754_rem_pio2+0x1d4>
 800c7c6:	e9ca 0100 	strd	r0, r1, [sl]
 800c7ca:	e039      	b.n	800c840 <__ieee754_rem_pio2+0x248>
 800c7cc:	a34e      	add	r3, pc, #312	; (adr r3, 800c908 <__ieee754_rem_pio2+0x310>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	ec51 0b18 	vmov	r0, r1, d8
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	4604      	mov	r4, r0
 800c7dc:	460d      	mov	r5, r1
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	4639      	mov	r1, r7
 800c7e6:	f7f3 fd4f 	bl	8000288 <__aeabi_dsub>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f3 fd47 	bl	8000288 <__aeabi_dsub>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	f7f3 fd43 	bl	8000288 <__aeabi_dsub>
 800c802:	a343      	add	r3, pc, #268	; (adr r3, 800c910 <__ieee754_rem_pio2+0x318>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	ec51 0b18 	vmov	r0, r1, d8
 800c810:	f7f3 fef2 	bl	80005f8 <__aeabi_dmul>
 800c814:	4622      	mov	r2, r4
 800c816:	462b      	mov	r3, r5
 800c818:	f7f3 fd36 	bl	8000288 <__aeabi_dsub>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
 800c824:	4640      	mov	r0, r8
 800c826:	4649      	mov	r1, r9
 800c828:	f7f3 fd2e 	bl	8000288 <__aeabi_dsub>
 800c82c:	9a03      	ldr	r2, [sp, #12]
 800c82e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	2b31      	cmp	r3, #49	; 0x31
 800c836:	dc24      	bgt.n	800c882 <__ieee754_rem_pio2+0x28a>
 800c838:	e9ca 0100 	strd	r0, r1, [sl]
 800c83c:	4646      	mov	r6, r8
 800c83e:	464f      	mov	r7, r9
 800c840:	e9da 8900 	ldrd	r8, r9, [sl]
 800c844:	4630      	mov	r0, r6
 800c846:	4642      	mov	r2, r8
 800c848:	464b      	mov	r3, r9
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f3 fd1c 	bl	8000288 <__aeabi_dsub>
 800c850:	462b      	mov	r3, r5
 800c852:	4622      	mov	r2, r4
 800c854:	f7f3 fd18 	bl	8000288 <__aeabi_dsub>
 800c858:	9b02      	ldr	r3, [sp, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c860:	f6bf af0a 	bge.w	800c678 <__ieee754_rem_pio2+0x80>
 800c864:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c868:	f8ca 3004 	str.w	r3, [sl, #4]
 800c86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c870:	f8ca 8000 	str.w	r8, [sl]
 800c874:	f8ca 0008 	str.w	r0, [sl, #8]
 800c878:	f8ca 300c 	str.w	r3, [sl, #12]
 800c87c:	f1cb 0b00 	rsb	fp, fp, #0
 800c880:	e6fa      	b.n	800c678 <__ieee754_rem_pio2+0x80>
 800c882:	a327      	add	r3, pc, #156	; (adr r3, 800c920 <__ieee754_rem_pio2+0x328>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	ec51 0b18 	vmov	r0, r1, d8
 800c88c:	f7f3 feb4 	bl	80005f8 <__aeabi_dmul>
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4640      	mov	r0, r8
 800c89a:	4649      	mov	r1, r9
 800c89c:	f7f3 fcf4 	bl	8000288 <__aeabi_dsub>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	460f      	mov	r7, r1
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	f7f3 fcec 	bl	8000288 <__aeabi_dsub>
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	f7f3 fce8 	bl	8000288 <__aeabi_dsub>
 800c8b8:	a31b      	add	r3, pc, #108	; (adr r3, 800c928 <__ieee754_rem_pio2+0x330>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	ec51 0b18 	vmov	r0, r1, d8
 800c8c6:	f7f3 fe97 	bl	80005f8 <__aeabi_dmul>
 800c8ca:	4622      	mov	r2, r4
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	f7f3 fcdb 	bl	8000288 <__aeabi_dsub>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	e75f      	b.n	800c798 <__ieee754_rem_pio2+0x1a0>
 800c8d8:	4b1b      	ldr	r3, [pc, #108]	; (800c948 <__ieee754_rem_pio2+0x350>)
 800c8da:	4598      	cmp	r8, r3
 800c8dc:	dd36      	ble.n	800c94c <__ieee754_rem_pio2+0x354>
 800c8de:	ee10 2a10 	vmov	r2, s0
 800c8e2:	462b      	mov	r3, r5
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 fcce 	bl	8000288 <__aeabi_dsub>
 800c8ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8f0:	e9ca 0100 	strd	r0, r1, [sl]
 800c8f4:	e694      	b.n	800c620 <__ieee754_rem_pio2+0x28>
 800c8f6:	bf00      	nop
 800c8f8:	54400000 	.word	0x54400000
 800c8fc:	3ff921fb 	.word	0x3ff921fb
 800c900:	1a626331 	.word	0x1a626331
 800c904:	3dd0b461 	.word	0x3dd0b461
 800c908:	1a600000 	.word	0x1a600000
 800c90c:	3dd0b461 	.word	0x3dd0b461
 800c910:	2e037073 	.word	0x2e037073
 800c914:	3ba3198a 	.word	0x3ba3198a
 800c918:	6dc9c883 	.word	0x6dc9c883
 800c91c:	3fe45f30 	.word	0x3fe45f30
 800c920:	2e000000 	.word	0x2e000000
 800c924:	3ba3198a 	.word	0x3ba3198a
 800c928:	252049c1 	.word	0x252049c1
 800c92c:	397b839a 	.word	0x397b839a
 800c930:	3fe921fb 	.word	0x3fe921fb
 800c934:	4002d97b 	.word	0x4002d97b
 800c938:	3ff921fb 	.word	0x3ff921fb
 800c93c:	413921fb 	.word	0x413921fb
 800c940:	3fe00000 	.word	0x3fe00000
 800c944:	0800e27c 	.word	0x0800e27c
 800c948:	7fefffff 	.word	0x7fefffff
 800c94c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c950:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c954:	ee10 0a10 	vmov	r0, s0
 800c958:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c95c:	ee10 6a10 	vmov	r6, s0
 800c960:	460f      	mov	r7, r1
 800c962:	f7f4 f8e3 	bl	8000b2c <__aeabi_d2iz>
 800c966:	f7f3 fddd 	bl	8000524 <__aeabi_i2d>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c976:	f7f3 fc87 	bl	8000288 <__aeabi_dsub>
 800c97a:	4b23      	ldr	r3, [pc, #140]	; (800ca08 <__ieee754_rem_pio2+0x410>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	f7f3 fe3b 	bl	80005f8 <__aeabi_dmul>
 800c982:	460f      	mov	r7, r1
 800c984:	4606      	mov	r6, r0
 800c986:	f7f4 f8d1 	bl	8000b2c <__aeabi_d2iz>
 800c98a:	f7f3 fdcb 	bl	8000524 <__aeabi_i2d>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4630      	mov	r0, r6
 800c994:	4639      	mov	r1, r7
 800c996:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c99a:	f7f3 fc75 	bl	8000288 <__aeabi_dsub>
 800c99e:	4b1a      	ldr	r3, [pc, #104]	; (800ca08 <__ieee754_rem_pio2+0x410>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	f7f3 fe29 	bl	80005f8 <__aeabi_dmul>
 800c9a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c9aa:	ad04      	add	r5, sp, #16
 800c9ac:	f04f 0803 	mov.w	r8, #3
 800c9b0:	46a9      	mov	r9, r5
 800c9b2:	2600      	movs	r6, #0
 800c9b4:	2700      	movs	r7, #0
 800c9b6:	4632      	mov	r2, r6
 800c9b8:	463b      	mov	r3, r7
 800c9ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c9be:	46c3      	mov	fp, r8
 800c9c0:	3d08      	subs	r5, #8
 800c9c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9c6:	f7f4 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d1f3      	bne.n	800c9b6 <__ieee754_rem_pio2+0x3be>
 800c9ce:	4b0f      	ldr	r3, [pc, #60]	; (800ca0c <__ieee754_rem_pio2+0x414>)
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	9300      	str	r3, [sp, #0]
 800c9d6:	4622      	mov	r2, r4
 800c9d8:	465b      	mov	r3, fp
 800c9da:	4651      	mov	r1, sl
 800c9dc:	4648      	mov	r0, r9
 800c9de:	f000 f8df 	bl	800cba0 <__kernel_rem_pio2>
 800c9e2:	9b02      	ldr	r3, [sp, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	4683      	mov	fp, r0
 800c9e8:	f6bf ae46 	bge.w	800c678 <__ieee754_rem_pio2+0x80>
 800c9ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800c9f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9f4:	e9ca 2300 	strd	r2, r3, [sl]
 800c9f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ca04:	e73a      	b.n	800c87c <__ieee754_rem_pio2+0x284>
 800ca06:	bf00      	nop
 800ca08:	41700000 	.word	0x41700000
 800ca0c:	0800e2fc 	.word	0x0800e2fc

0800ca10 <__kernel_cos>:
 800ca10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca14:	ec57 6b10 	vmov	r6, r7, d0
 800ca18:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ca1c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ca20:	ed8d 1b00 	vstr	d1, [sp]
 800ca24:	da07      	bge.n	800ca36 <__kernel_cos+0x26>
 800ca26:	ee10 0a10 	vmov	r0, s0
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f7f4 f87e 	bl	8000b2c <__aeabi_d2iz>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	f000 8088 	beq.w	800cb46 <__kernel_cos+0x136>
 800ca36:	4632      	mov	r2, r6
 800ca38:	463b      	mov	r3, r7
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f3 fddb 	bl	80005f8 <__aeabi_dmul>
 800ca42:	4b51      	ldr	r3, [pc, #324]	; (800cb88 <__kernel_cos+0x178>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	460d      	mov	r5, r1
 800ca4a:	f7f3 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ca4e:	a340      	add	r3, pc, #256	; (adr r3, 800cb50 <__kernel_cos+0x140>)
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	4682      	mov	sl, r0
 800ca56:	468b      	mov	fp, r1
 800ca58:	4620      	mov	r0, r4
 800ca5a:	4629      	mov	r1, r5
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	a33d      	add	r3, pc, #244	; (adr r3, 800cb58 <__kernel_cos+0x148>)
 800ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca66:	f7f3 fc11 	bl	800028c <__adddf3>
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	462b      	mov	r3, r5
 800ca6e:	f7f3 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ca72:	a33b      	add	r3, pc, #236	; (adr r3, 800cb60 <__kernel_cos+0x150>)
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f7f3 fc06 	bl	8000288 <__aeabi_dsub>
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	462b      	mov	r3, r5
 800ca80:	f7f3 fdba 	bl	80005f8 <__aeabi_dmul>
 800ca84:	a338      	add	r3, pc, #224	; (adr r3, 800cb68 <__kernel_cos+0x158>)
 800ca86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8a:	f7f3 fbff 	bl	800028c <__adddf3>
 800ca8e:	4622      	mov	r2, r4
 800ca90:	462b      	mov	r3, r5
 800ca92:	f7f3 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ca96:	a336      	add	r3, pc, #216	; (adr r3, 800cb70 <__kernel_cos+0x160>)
 800ca98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4622      	mov	r2, r4
 800caa2:	462b      	mov	r3, r5
 800caa4:	f7f3 fda8 	bl	80005f8 <__aeabi_dmul>
 800caa8:	a333      	add	r3, pc, #204	; (adr r3, 800cb78 <__kernel_cos+0x168>)
 800caaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caae:	f7f3 fbed 	bl	800028c <__adddf3>
 800cab2:	4622      	mov	r2, r4
 800cab4:	462b      	mov	r3, r5
 800cab6:	f7f3 fd9f 	bl	80005f8 <__aeabi_dmul>
 800caba:	4622      	mov	r2, r4
 800cabc:	462b      	mov	r3, r5
 800cabe:	f7f3 fd9b 	bl	80005f8 <__aeabi_dmul>
 800cac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cac6:	4604      	mov	r4, r0
 800cac8:	460d      	mov	r5, r1
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7f3 fd93 	bl	80005f8 <__aeabi_dmul>
 800cad2:	460b      	mov	r3, r1
 800cad4:	4602      	mov	r2, r0
 800cad6:	4629      	mov	r1, r5
 800cad8:	4620      	mov	r0, r4
 800cada:	f7f3 fbd5 	bl	8000288 <__aeabi_dsub>
 800cade:	4b2b      	ldr	r3, [pc, #172]	; (800cb8c <__kernel_cos+0x17c>)
 800cae0:	4598      	cmp	r8, r3
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	dc10      	bgt.n	800cb0a <__kernel_cos+0xfa>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4650      	mov	r0, sl
 800caee:	4659      	mov	r1, fp
 800caf0:	f7f3 fbca 	bl	8000288 <__aeabi_dsub>
 800caf4:	460b      	mov	r3, r1
 800caf6:	4926      	ldr	r1, [pc, #152]	; (800cb90 <__kernel_cos+0x180>)
 800caf8:	4602      	mov	r2, r0
 800cafa:	2000      	movs	r0, #0
 800cafc:	f7f3 fbc4 	bl	8000288 <__aeabi_dsub>
 800cb00:	ec41 0b10 	vmov	d0, r0, r1
 800cb04:	b003      	add	sp, #12
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <__kernel_cos+0x184>)
 800cb0c:	4920      	ldr	r1, [pc, #128]	; (800cb90 <__kernel_cos+0x180>)
 800cb0e:	4598      	cmp	r8, r3
 800cb10:	bfcc      	ite	gt
 800cb12:	4d21      	ldrgt	r5, [pc, #132]	; (800cb98 <__kernel_cos+0x188>)
 800cb14:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cb18:	2400      	movs	r4, #0
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	462b      	mov	r3, r5
 800cb1e:	2000      	movs	r0, #0
 800cb20:	f7f3 fbb2 	bl	8000288 <__aeabi_dsub>
 800cb24:	4622      	mov	r2, r4
 800cb26:	4680      	mov	r8, r0
 800cb28:	4689      	mov	r9, r1
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	4650      	mov	r0, sl
 800cb2e:	4659      	mov	r1, fp
 800cb30:	f7f3 fbaa 	bl	8000288 <__aeabi_dsub>
 800cb34:	4632      	mov	r2, r6
 800cb36:	463b      	mov	r3, r7
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4640      	mov	r0, r8
 800cb42:	4649      	mov	r1, r9
 800cb44:	e7da      	b.n	800cafc <__kernel_cos+0xec>
 800cb46:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800cb80 <__kernel_cos+0x170>
 800cb4a:	e7db      	b.n	800cb04 <__kernel_cos+0xf4>
 800cb4c:	f3af 8000 	nop.w
 800cb50:	be8838d4 	.word	0xbe8838d4
 800cb54:	bda8fae9 	.word	0xbda8fae9
 800cb58:	bdb4b1c4 	.word	0xbdb4b1c4
 800cb5c:	3e21ee9e 	.word	0x3e21ee9e
 800cb60:	809c52ad 	.word	0x809c52ad
 800cb64:	3e927e4f 	.word	0x3e927e4f
 800cb68:	19cb1590 	.word	0x19cb1590
 800cb6c:	3efa01a0 	.word	0x3efa01a0
 800cb70:	16c15177 	.word	0x16c15177
 800cb74:	3f56c16c 	.word	0x3f56c16c
 800cb78:	5555554c 	.word	0x5555554c
 800cb7c:	3fa55555 	.word	0x3fa55555
 800cb80:	00000000 	.word	0x00000000
 800cb84:	3ff00000 	.word	0x3ff00000
 800cb88:	3fe00000 	.word	0x3fe00000
 800cb8c:	3fd33332 	.word	0x3fd33332
 800cb90:	3ff00000 	.word	0x3ff00000
 800cb94:	3fe90000 	.word	0x3fe90000
 800cb98:	3fd20000 	.word	0x3fd20000
 800cb9c:	00000000 	.word	0x00000000

0800cba0 <__kernel_rem_pio2>:
 800cba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba4:	ed2d 8b02 	vpush	{d8}
 800cba8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cbac:	f112 0f14 	cmn.w	r2, #20
 800cbb0:	9308      	str	r3, [sp, #32]
 800cbb2:	9101      	str	r1, [sp, #4]
 800cbb4:	4bc4      	ldr	r3, [pc, #784]	; (800cec8 <__kernel_rem_pio2+0x328>)
 800cbb6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800cbb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800cbba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbbe:	9302      	str	r3, [sp, #8]
 800cbc0:	9b08      	ldr	r3, [sp, #32]
 800cbc2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbc6:	bfa8      	it	ge
 800cbc8:	1ed4      	subge	r4, r2, #3
 800cbca:	9306      	str	r3, [sp, #24]
 800cbcc:	bfb2      	itee	lt
 800cbce:	2400      	movlt	r4, #0
 800cbd0:	2318      	movge	r3, #24
 800cbd2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cbd6:	f06f 0317 	mvn.w	r3, #23
 800cbda:	fb04 3303 	mla	r3, r4, r3, r3
 800cbde:	eb03 0a02 	add.w	sl, r3, r2
 800cbe2:	9b02      	ldr	r3, [sp, #8]
 800cbe4:	9a06      	ldr	r2, [sp, #24]
 800cbe6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ceb8 <__kernel_rem_pio2+0x318>
 800cbea:	eb03 0802 	add.w	r8, r3, r2
 800cbee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cbf0:	1aa7      	subs	r7, r4, r2
 800cbf2:	ae22      	add	r6, sp, #136	; 0x88
 800cbf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cbf8:	2500      	movs	r5, #0
 800cbfa:	4545      	cmp	r5, r8
 800cbfc:	dd13      	ble.n	800cc26 <__kernel_rem_pio2+0x86>
 800cbfe:	9b08      	ldr	r3, [sp, #32]
 800cc00:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ceb8 <__kernel_rem_pio2+0x318>
 800cc04:	aa22      	add	r2, sp, #136	; 0x88
 800cc06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cc0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cc0e:	f04f 0800 	mov.w	r8, #0
 800cc12:	9b02      	ldr	r3, [sp, #8]
 800cc14:	4598      	cmp	r8, r3
 800cc16:	dc2f      	bgt.n	800cc78 <__kernel_rem_pio2+0xd8>
 800cc18:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cc1c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800cc20:	462f      	mov	r7, r5
 800cc22:	2600      	movs	r6, #0
 800cc24:	e01b      	b.n	800cc5e <__kernel_rem_pio2+0xbe>
 800cc26:	42ef      	cmn	r7, r5
 800cc28:	d407      	bmi.n	800cc3a <__kernel_rem_pio2+0x9a>
 800cc2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cc2e:	f7f3 fc79 	bl	8000524 <__aeabi_i2d>
 800cc32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cc36:	3501      	adds	r5, #1
 800cc38:	e7df      	b.n	800cbfa <__kernel_rem_pio2+0x5a>
 800cc3a:	ec51 0b18 	vmov	r0, r1, d8
 800cc3e:	e7f8      	b.n	800cc32 <__kernel_rem_pio2+0x92>
 800cc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cc48:	f7f3 fcd6 	bl	80005f8 <__aeabi_dmul>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc54:	f7f3 fb1a 	bl	800028c <__adddf3>
 800cc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc5c:	3601      	adds	r6, #1
 800cc5e:	9b06      	ldr	r3, [sp, #24]
 800cc60:	429e      	cmp	r6, r3
 800cc62:	f1a7 0708 	sub.w	r7, r7, #8
 800cc66:	ddeb      	ble.n	800cc40 <__kernel_rem_pio2+0xa0>
 800cc68:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cc6c:	f108 0801 	add.w	r8, r8, #1
 800cc70:	ecab 7b02 	vstmia	fp!, {d7}
 800cc74:	3508      	adds	r5, #8
 800cc76:	e7cc      	b.n	800cc12 <__kernel_rem_pio2+0x72>
 800cc78:	9b02      	ldr	r3, [sp, #8]
 800cc7a:	aa0e      	add	r2, sp, #56	; 0x38
 800cc7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc80:	930d      	str	r3, [sp, #52]	; 0x34
 800cc82:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cc84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cc88:	9c02      	ldr	r4, [sp, #8]
 800cc8a:	930c      	str	r3, [sp, #48]	; 0x30
 800cc8c:	00e3      	lsls	r3, r4, #3
 800cc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc90:	ab9a      	add	r3, sp, #616	; 0x268
 800cc92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cc9a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800cc9e:	ab72      	add	r3, sp, #456	; 0x1c8
 800cca0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cca4:	46c3      	mov	fp, r8
 800cca6:	46a1      	mov	r9, r4
 800cca8:	f1b9 0f00 	cmp.w	r9, #0
 800ccac:	f1a5 0508 	sub.w	r5, r5, #8
 800ccb0:	dc77      	bgt.n	800cda2 <__kernel_rem_pio2+0x202>
 800ccb2:	ec47 6b10 	vmov	d0, r6, r7
 800ccb6:	4650      	mov	r0, sl
 800ccb8:	f000 fc0a 	bl	800d4d0 <scalbn>
 800ccbc:	ec57 6b10 	vmov	r6, r7, d0
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ccc6:	ee10 0a10 	vmov	r0, s0
 800ccca:	4639      	mov	r1, r7
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	ec41 0b10 	vmov	d0, r0, r1
 800ccd4:	f000 fb7c 	bl	800d3d0 <floor>
 800ccd8:	4b7c      	ldr	r3, [pc, #496]	; (800cecc <__kernel_rem_pio2+0x32c>)
 800ccda:	ec51 0b10 	vmov	r0, r1, d0
 800ccde:	2200      	movs	r2, #0
 800cce0:	f7f3 fc8a 	bl	80005f8 <__aeabi_dmul>
 800cce4:	4602      	mov	r2, r0
 800cce6:	460b      	mov	r3, r1
 800cce8:	4630      	mov	r0, r6
 800ccea:	4639      	mov	r1, r7
 800ccec:	f7f3 facc 	bl	8000288 <__aeabi_dsub>
 800ccf0:	460f      	mov	r7, r1
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	f7f3 ff1a 	bl	8000b2c <__aeabi_d2iz>
 800ccf8:	9004      	str	r0, [sp, #16]
 800ccfa:	f7f3 fc13 	bl	8000524 <__aeabi_i2d>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4630      	mov	r0, r6
 800cd04:	4639      	mov	r1, r7
 800cd06:	f7f3 fabf 	bl	8000288 <__aeabi_dsub>
 800cd0a:	f1ba 0f00 	cmp.w	sl, #0
 800cd0e:	4606      	mov	r6, r0
 800cd10:	460f      	mov	r7, r1
 800cd12:	dd6d      	ble.n	800cdf0 <__kernel_rem_pio2+0x250>
 800cd14:	1e62      	subs	r2, r4, #1
 800cd16:	ab0e      	add	r3, sp, #56	; 0x38
 800cd18:	9d04      	ldr	r5, [sp, #16]
 800cd1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cd1e:	f1ca 0118 	rsb	r1, sl, #24
 800cd22:	fa40 f301 	asr.w	r3, r0, r1
 800cd26:	441d      	add	r5, r3
 800cd28:	408b      	lsls	r3, r1
 800cd2a:	1ac0      	subs	r0, r0, r3
 800cd2c:	ab0e      	add	r3, sp, #56	; 0x38
 800cd2e:	9504      	str	r5, [sp, #16]
 800cd30:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cd34:	f1ca 0317 	rsb	r3, sl, #23
 800cd38:	fa40 fb03 	asr.w	fp, r0, r3
 800cd3c:	f1bb 0f00 	cmp.w	fp, #0
 800cd40:	dd65      	ble.n	800ce0e <__kernel_rem_pio2+0x26e>
 800cd42:	9b04      	ldr	r3, [sp, #16]
 800cd44:	2200      	movs	r2, #0
 800cd46:	3301      	adds	r3, #1
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	4615      	mov	r5, r2
 800cd4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cd50:	4294      	cmp	r4, r2
 800cd52:	f300 809c 	bgt.w	800ce8e <__kernel_rem_pio2+0x2ee>
 800cd56:	f1ba 0f00 	cmp.w	sl, #0
 800cd5a:	dd07      	ble.n	800cd6c <__kernel_rem_pio2+0x1cc>
 800cd5c:	f1ba 0f01 	cmp.w	sl, #1
 800cd60:	f000 80c0 	beq.w	800cee4 <__kernel_rem_pio2+0x344>
 800cd64:	f1ba 0f02 	cmp.w	sl, #2
 800cd68:	f000 80c6 	beq.w	800cef8 <__kernel_rem_pio2+0x358>
 800cd6c:	f1bb 0f02 	cmp.w	fp, #2
 800cd70:	d14d      	bne.n	800ce0e <__kernel_rem_pio2+0x26e>
 800cd72:	4632      	mov	r2, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	4956      	ldr	r1, [pc, #344]	; (800ced0 <__kernel_rem_pio2+0x330>)
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f7f3 fa85 	bl	8000288 <__aeabi_dsub>
 800cd7e:	4606      	mov	r6, r0
 800cd80:	460f      	mov	r7, r1
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	d043      	beq.n	800ce0e <__kernel_rem_pio2+0x26e>
 800cd86:	4650      	mov	r0, sl
 800cd88:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800cec0 <__kernel_rem_pio2+0x320>
 800cd8c:	f000 fba0 	bl	800d4d0 <scalbn>
 800cd90:	4630      	mov	r0, r6
 800cd92:	4639      	mov	r1, r7
 800cd94:	ec53 2b10 	vmov	r2, r3, d0
 800cd98:	f7f3 fa76 	bl	8000288 <__aeabi_dsub>
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	460f      	mov	r7, r1
 800cda0:	e035      	b.n	800ce0e <__kernel_rem_pio2+0x26e>
 800cda2:	4b4c      	ldr	r3, [pc, #304]	; (800ced4 <__kernel_rem_pio2+0x334>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f7f3 fc25 	bl	80005f8 <__aeabi_dmul>
 800cdae:	f7f3 febd 	bl	8000b2c <__aeabi_d2iz>
 800cdb2:	f7f3 fbb7 	bl	8000524 <__aeabi_i2d>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	ec43 2b18 	vmov	d8, r2, r3
 800cdbe:	4b46      	ldr	r3, [pc, #280]	; (800ced8 <__kernel_rem_pio2+0x338>)
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f7f3 fc19 	bl	80005f8 <__aeabi_dmul>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fa5b 	bl	8000288 <__aeabi_dsub>
 800cdd2:	f7f3 feab 	bl	8000b2c <__aeabi_d2iz>
 800cdd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdda:	f84b 0b04 	str.w	r0, [fp], #4
 800cdde:	ec51 0b18 	vmov	r0, r1, d8
 800cde2:	f7f3 fa53 	bl	800028c <__adddf3>
 800cde6:	f109 39ff 	add.w	r9, r9, #4294967295
 800cdea:	4606      	mov	r6, r0
 800cdec:	460f      	mov	r7, r1
 800cdee:	e75b      	b.n	800cca8 <__kernel_rem_pio2+0x108>
 800cdf0:	d106      	bne.n	800ce00 <__kernel_rem_pio2+0x260>
 800cdf2:	1e63      	subs	r3, r4, #1
 800cdf4:	aa0e      	add	r2, sp, #56	; 0x38
 800cdf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cdfa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800cdfe:	e79d      	b.n	800cd3c <__kernel_rem_pio2+0x19c>
 800ce00:	4b36      	ldr	r3, [pc, #216]	; (800cedc <__kernel_rem_pio2+0x33c>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	f7f3 fe7e 	bl	8000b04 <__aeabi_dcmpge>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d13d      	bne.n	800ce88 <__kernel_rem_pio2+0x2e8>
 800ce0c:	4683      	mov	fp, r0
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2300      	movs	r3, #0
 800ce12:	4630      	mov	r0, r6
 800ce14:	4639      	mov	r1, r7
 800ce16:	f7f3 fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	f000 80c0 	beq.w	800cfa0 <__kernel_rem_pio2+0x400>
 800ce20:	1e65      	subs	r5, r4, #1
 800ce22:	462b      	mov	r3, r5
 800ce24:	2200      	movs	r2, #0
 800ce26:	9902      	ldr	r1, [sp, #8]
 800ce28:	428b      	cmp	r3, r1
 800ce2a:	da6c      	bge.n	800cf06 <__kernel_rem_pio2+0x366>
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	f000 8089 	beq.w	800cf44 <__kernel_rem_pio2+0x3a4>
 800ce32:	ab0e      	add	r3, sp, #56	; 0x38
 800ce34:	f1aa 0a18 	sub.w	sl, sl, #24
 800ce38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 80ad 	beq.w	800cf9c <__kernel_rem_pio2+0x3fc>
 800ce42:	4650      	mov	r0, sl
 800ce44:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800cec0 <__kernel_rem_pio2+0x320>
 800ce48:	f000 fb42 	bl	800d4d0 <scalbn>
 800ce4c:	ab9a      	add	r3, sp, #616	; 0x268
 800ce4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ce52:	ec57 6b10 	vmov	r6, r7, d0
 800ce56:	00ec      	lsls	r4, r5, #3
 800ce58:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ce5c:	46aa      	mov	sl, r5
 800ce5e:	f1ba 0f00 	cmp.w	sl, #0
 800ce62:	f280 80d6 	bge.w	800d012 <__kernel_rem_pio2+0x472>
 800ce66:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ceb8 <__kernel_rem_pio2+0x318>
 800ce6a:	462e      	mov	r6, r5
 800ce6c:	2e00      	cmp	r6, #0
 800ce6e:	f2c0 8104 	blt.w	800d07a <__kernel_rem_pio2+0x4da>
 800ce72:	ab72      	add	r3, sp, #456	; 0x1c8
 800ce74:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ce78:	f8df a064 	ldr.w	sl, [pc, #100]	; 800cee0 <__kernel_rem_pio2+0x340>
 800ce7c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ce80:	f04f 0800 	mov.w	r8, #0
 800ce84:	1baf      	subs	r7, r5, r6
 800ce86:	e0ea      	b.n	800d05e <__kernel_rem_pio2+0x4be>
 800ce88:	f04f 0b02 	mov.w	fp, #2
 800ce8c:	e759      	b.n	800cd42 <__kernel_rem_pio2+0x1a2>
 800ce8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce92:	b955      	cbnz	r5, 800ceaa <__kernel_rem_pio2+0x30a>
 800ce94:	b123      	cbz	r3, 800cea0 <__kernel_rem_pio2+0x300>
 800ce96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ce9a:	f8c8 3000 	str.w	r3, [r8]
 800ce9e:	2301      	movs	r3, #1
 800cea0:	3201      	adds	r2, #1
 800cea2:	f108 0804 	add.w	r8, r8, #4
 800cea6:	461d      	mov	r5, r3
 800cea8:	e752      	b.n	800cd50 <__kernel_rem_pio2+0x1b0>
 800ceaa:	1acb      	subs	r3, r1, r3
 800ceac:	f8c8 3000 	str.w	r3, [r8]
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	e7f5      	b.n	800cea0 <__kernel_rem_pio2+0x300>
 800ceb4:	f3af 8000 	nop.w
	...
 800cec4:	3ff00000 	.word	0x3ff00000
 800cec8:	0800e448 	.word	0x0800e448
 800cecc:	40200000 	.word	0x40200000
 800ced0:	3ff00000 	.word	0x3ff00000
 800ced4:	3e700000 	.word	0x3e700000
 800ced8:	41700000 	.word	0x41700000
 800cedc:	3fe00000 	.word	0x3fe00000
 800cee0:	0800e408 	.word	0x0800e408
 800cee4:	1e62      	subs	r2, r4, #1
 800cee6:	ab0e      	add	r3, sp, #56	; 0x38
 800cee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cef0:	a90e      	add	r1, sp, #56	; 0x38
 800cef2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cef6:	e739      	b.n	800cd6c <__kernel_rem_pio2+0x1cc>
 800cef8:	1e62      	subs	r2, r4, #1
 800cefa:	ab0e      	add	r3, sp, #56	; 0x38
 800cefc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cf04:	e7f4      	b.n	800cef0 <__kernel_rem_pio2+0x350>
 800cf06:	a90e      	add	r1, sp, #56	; 0x38
 800cf08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	430a      	orrs	r2, r1
 800cf10:	e789      	b.n	800ce26 <__kernel_rem_pio2+0x286>
 800cf12:	3301      	adds	r3, #1
 800cf14:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	d0fa      	beq.n	800cf12 <__kernel_rem_pio2+0x372>
 800cf1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf1e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800cf22:	446a      	add	r2, sp
 800cf24:	3a98      	subs	r2, #152	; 0x98
 800cf26:	920a      	str	r2, [sp, #40]	; 0x28
 800cf28:	9a08      	ldr	r2, [sp, #32]
 800cf2a:	18e3      	adds	r3, r4, r3
 800cf2c:	18a5      	adds	r5, r4, r2
 800cf2e:	aa22      	add	r2, sp, #136	; 0x88
 800cf30:	f104 0801 	add.w	r8, r4, #1
 800cf34:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800cf38:	9304      	str	r3, [sp, #16]
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	4543      	cmp	r3, r8
 800cf3e:	da04      	bge.n	800cf4a <__kernel_rem_pio2+0x3aa>
 800cf40:	461c      	mov	r4, r3
 800cf42:	e6a3      	b.n	800cc8c <__kernel_rem_pio2+0xec>
 800cf44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf46:	2301      	movs	r3, #1
 800cf48:	e7e4      	b.n	800cf14 <__kernel_rem_pio2+0x374>
 800cf4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf4c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800cf50:	f7f3 fae8 	bl	8000524 <__aeabi_i2d>
 800cf54:	e8e5 0102 	strd	r0, r1, [r5], #8
 800cf58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf5a:	46ab      	mov	fp, r5
 800cf5c:	461c      	mov	r4, r3
 800cf5e:	f04f 0900 	mov.w	r9, #0
 800cf62:	2600      	movs	r6, #0
 800cf64:	2700      	movs	r7, #0
 800cf66:	9b06      	ldr	r3, [sp, #24]
 800cf68:	4599      	cmp	r9, r3
 800cf6a:	dd06      	ble.n	800cf7a <__kernel_rem_pio2+0x3da>
 800cf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800cf72:	f108 0801 	add.w	r8, r8, #1
 800cf76:	930a      	str	r3, [sp, #40]	; 0x28
 800cf78:	e7df      	b.n	800cf3a <__kernel_rem_pio2+0x39a>
 800cf7a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800cf7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800cf82:	f7f3 fb39 	bl	80005f8 <__aeabi_dmul>
 800cf86:	4602      	mov	r2, r0
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	4639      	mov	r1, r7
 800cf8e:	f7f3 f97d 	bl	800028c <__adddf3>
 800cf92:	f109 0901 	add.w	r9, r9, #1
 800cf96:	4606      	mov	r6, r0
 800cf98:	460f      	mov	r7, r1
 800cf9a:	e7e4      	b.n	800cf66 <__kernel_rem_pio2+0x3c6>
 800cf9c:	3d01      	subs	r5, #1
 800cf9e:	e748      	b.n	800ce32 <__kernel_rem_pio2+0x292>
 800cfa0:	ec47 6b10 	vmov	d0, r6, r7
 800cfa4:	f1ca 0000 	rsb	r0, sl, #0
 800cfa8:	f000 fa92 	bl	800d4d0 <scalbn>
 800cfac:	ec57 6b10 	vmov	r6, r7, d0
 800cfb0:	4ba0      	ldr	r3, [pc, #640]	; (800d234 <__kernel_rem_pio2+0x694>)
 800cfb2:	ee10 0a10 	vmov	r0, s0
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	4639      	mov	r1, r7
 800cfba:	f7f3 fda3 	bl	8000b04 <__aeabi_dcmpge>
 800cfbe:	b1f8      	cbz	r0, 800d000 <__kernel_rem_pio2+0x460>
 800cfc0:	4b9d      	ldr	r3, [pc, #628]	; (800d238 <__kernel_rem_pio2+0x698>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	f7f3 fb16 	bl	80005f8 <__aeabi_dmul>
 800cfcc:	f7f3 fdae 	bl	8000b2c <__aeabi_d2iz>
 800cfd0:	4680      	mov	r8, r0
 800cfd2:	f7f3 faa7 	bl	8000524 <__aeabi_i2d>
 800cfd6:	4b97      	ldr	r3, [pc, #604]	; (800d234 <__kernel_rem_pio2+0x694>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f7f3 fb0d 	bl	80005f8 <__aeabi_dmul>
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7f3 f94f 	bl	8000288 <__aeabi_dsub>
 800cfea:	f7f3 fd9f 	bl	8000b2c <__aeabi_d2iz>
 800cfee:	1c65      	adds	r5, r4, #1
 800cff0:	ab0e      	add	r3, sp, #56	; 0x38
 800cff2:	f10a 0a18 	add.w	sl, sl, #24
 800cff6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cffa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cffe:	e720      	b.n	800ce42 <__kernel_rem_pio2+0x2a2>
 800d000:	4630      	mov	r0, r6
 800d002:	4639      	mov	r1, r7
 800d004:	f7f3 fd92 	bl	8000b2c <__aeabi_d2iz>
 800d008:	ab0e      	add	r3, sp, #56	; 0x38
 800d00a:	4625      	mov	r5, r4
 800d00c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d010:	e717      	b.n	800ce42 <__kernel_rem_pio2+0x2a2>
 800d012:	ab0e      	add	r3, sp, #56	; 0x38
 800d014:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d018:	f7f3 fa84 	bl	8000524 <__aeabi_i2d>
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	f7f3 faea 	bl	80005f8 <__aeabi_dmul>
 800d024:	4b84      	ldr	r3, [pc, #528]	; (800d238 <__kernel_rem_pio2+0x698>)
 800d026:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d02a:	2200      	movs	r2, #0
 800d02c:	4630      	mov	r0, r6
 800d02e:	4639      	mov	r1, r7
 800d030:	f7f3 fae2 	bl	80005f8 <__aeabi_dmul>
 800d034:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d038:	4606      	mov	r6, r0
 800d03a:	460f      	mov	r7, r1
 800d03c:	e70f      	b.n	800ce5e <__kernel_rem_pio2+0x2be>
 800d03e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d042:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d046:	f7f3 fad7 	bl	80005f8 <__aeabi_dmul>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d052:	f7f3 f91b 	bl	800028c <__adddf3>
 800d056:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d05a:	f108 0801 	add.w	r8, r8, #1
 800d05e:	9b02      	ldr	r3, [sp, #8]
 800d060:	4598      	cmp	r8, r3
 800d062:	dc01      	bgt.n	800d068 <__kernel_rem_pio2+0x4c8>
 800d064:	45b8      	cmp	r8, r7
 800d066:	ddea      	ble.n	800d03e <__kernel_rem_pio2+0x49e>
 800d068:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d06c:	ab4a      	add	r3, sp, #296	; 0x128
 800d06e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d072:	ed87 7b00 	vstr	d7, [r7]
 800d076:	3e01      	subs	r6, #1
 800d078:	e6f8      	b.n	800ce6c <__kernel_rem_pio2+0x2cc>
 800d07a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	dc0b      	bgt.n	800d098 <__kernel_rem_pio2+0x4f8>
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc35      	bgt.n	800d0f0 <__kernel_rem_pio2+0x550>
 800d084:	d059      	beq.n	800d13a <__kernel_rem_pio2+0x59a>
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	f003 0007 	and.w	r0, r3, #7
 800d08c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d090:	ecbd 8b02 	vpop	{d8}
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d1f3      	bne.n	800d086 <__kernel_rem_pio2+0x4e6>
 800d09e:	ab4a      	add	r3, sp, #296	; 0x128
 800d0a0:	4423      	add	r3, r4
 800d0a2:	9306      	str	r3, [sp, #24]
 800d0a4:	461c      	mov	r4, r3
 800d0a6:	469a      	mov	sl, r3
 800d0a8:	9502      	str	r5, [sp, #8]
 800d0aa:	9b02      	ldr	r3, [sp, #8]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f1aa 0a08 	sub.w	sl, sl, #8
 800d0b2:	dc6b      	bgt.n	800d18c <__kernel_rem_pio2+0x5ec>
 800d0b4:	46aa      	mov	sl, r5
 800d0b6:	f1ba 0f01 	cmp.w	sl, #1
 800d0ba:	f1a4 0408 	sub.w	r4, r4, #8
 800d0be:	f300 8085 	bgt.w	800d1cc <__kernel_rem_pio2+0x62c>
 800d0c2:	9c06      	ldr	r4, [sp, #24]
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	3408      	adds	r4, #8
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	2d01      	cmp	r5, #1
 800d0cc:	f300 809d 	bgt.w	800d20a <__kernel_rem_pio2+0x66a>
 800d0d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d0d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d0d8:	f1bb 0f00 	cmp.w	fp, #0
 800d0dc:	f040 809b 	bne.w	800d216 <__kernel_rem_pio2+0x676>
 800d0e0:	9b01      	ldr	r3, [sp, #4]
 800d0e2:	e9c3 5600 	strd	r5, r6, [r3]
 800d0e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d0ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d0ee:	e7ca      	b.n	800d086 <__kernel_rem_pio2+0x4e6>
 800d0f0:	3408      	adds	r4, #8
 800d0f2:	ab4a      	add	r3, sp, #296	; 0x128
 800d0f4:	441c      	add	r4, r3
 800d0f6:	462e      	mov	r6, r5
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	2e00      	cmp	r6, #0
 800d0fe:	da36      	bge.n	800d16e <__kernel_rem_pio2+0x5ce>
 800d100:	f1bb 0f00 	cmp.w	fp, #0
 800d104:	d039      	beq.n	800d17a <__kernel_rem_pio2+0x5da>
 800d106:	4602      	mov	r2, r0
 800d108:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d10c:	9c01      	ldr	r4, [sp, #4]
 800d10e:	e9c4 2300 	strd	r2, r3, [r4]
 800d112:	4602      	mov	r2, r0
 800d114:	460b      	mov	r3, r1
 800d116:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	ae4c      	add	r6, sp, #304	; 0x130
 800d120:	2401      	movs	r4, #1
 800d122:	42a5      	cmp	r5, r4
 800d124:	da2c      	bge.n	800d180 <__kernel_rem_pio2+0x5e0>
 800d126:	f1bb 0f00 	cmp.w	fp, #0
 800d12a:	d002      	beq.n	800d132 <__kernel_rem_pio2+0x592>
 800d12c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d130:	4619      	mov	r1, r3
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d138:	e7a5      	b.n	800d086 <__kernel_rem_pio2+0x4e6>
 800d13a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d13e:	eb0d 0403 	add.w	r4, sp, r3
 800d142:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d146:	2000      	movs	r0, #0
 800d148:	2100      	movs	r1, #0
 800d14a:	2d00      	cmp	r5, #0
 800d14c:	da09      	bge.n	800d162 <__kernel_rem_pio2+0x5c2>
 800d14e:	f1bb 0f00 	cmp.w	fp, #0
 800d152:	d002      	beq.n	800d15a <__kernel_rem_pio2+0x5ba>
 800d154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d158:	4619      	mov	r1, r3
 800d15a:	9b01      	ldr	r3, [sp, #4]
 800d15c:	e9c3 0100 	strd	r0, r1, [r3]
 800d160:	e791      	b.n	800d086 <__kernel_rem_pio2+0x4e6>
 800d162:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d166:	f7f3 f891 	bl	800028c <__adddf3>
 800d16a:	3d01      	subs	r5, #1
 800d16c:	e7ed      	b.n	800d14a <__kernel_rem_pio2+0x5aa>
 800d16e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d172:	f7f3 f88b 	bl	800028c <__adddf3>
 800d176:	3e01      	subs	r6, #1
 800d178:	e7c0      	b.n	800d0fc <__kernel_rem_pio2+0x55c>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	e7c5      	b.n	800d10c <__kernel_rem_pio2+0x56c>
 800d180:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d184:	f7f3 f882 	bl	800028c <__adddf3>
 800d188:	3401      	adds	r4, #1
 800d18a:	e7ca      	b.n	800d122 <__kernel_rem_pio2+0x582>
 800d18c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d190:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d194:	9b02      	ldr	r3, [sp, #8]
 800d196:	3b01      	subs	r3, #1
 800d198:	9302      	str	r3, [sp, #8]
 800d19a:	4632      	mov	r2, r6
 800d19c:	463b      	mov	r3, r7
 800d19e:	4640      	mov	r0, r8
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	f7f3 f873 	bl	800028c <__adddf3>
 800d1a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f3 f869 	bl	8000288 <__aeabi_dsub>
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	463b      	mov	r3, r7
 800d1ba:	f7f3 f867 	bl	800028c <__adddf3>
 800d1be:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d1c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1c6:	ed8a 7b00 	vstr	d7, [sl]
 800d1ca:	e76e      	b.n	800d0aa <__kernel_rem_pio2+0x50a>
 800d1cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d1d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	463b      	mov	r3, r7
 800d1da:	4649      	mov	r1, r9
 800d1dc:	f7f3 f856 	bl	800028c <__adddf3>
 800d1e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4640      	mov	r0, r8
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	f7f3 f84c 	bl	8000288 <__aeabi_dsub>
 800d1f0:	4632      	mov	r2, r6
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	f7f3 f84a 	bl	800028c <__adddf3>
 800d1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d200:	ed84 7b00 	vstr	d7, [r4]
 800d204:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d208:	e755      	b.n	800d0b6 <__kernel_rem_pio2+0x516>
 800d20a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d20e:	f7f3 f83d 	bl	800028c <__adddf3>
 800d212:	3d01      	subs	r5, #1
 800d214:	e759      	b.n	800d0ca <__kernel_rem_pio2+0x52a>
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	9a01      	ldr	r2, [sp, #4]
 800d21a:	601d      	str	r5, [r3, #0]
 800d21c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d220:	605c      	str	r4, [r3, #4]
 800d222:	609f      	str	r7, [r3, #8]
 800d224:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d228:	60d3      	str	r3, [r2, #12]
 800d22a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d22e:	6110      	str	r0, [r2, #16]
 800d230:	6153      	str	r3, [r2, #20]
 800d232:	e728      	b.n	800d086 <__kernel_rem_pio2+0x4e6>
 800d234:	41700000 	.word	0x41700000
 800d238:	3e700000 	.word	0x3e700000
 800d23c:	00000000 	.word	0x00000000

0800d240 <__kernel_sin>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	ed2d 8b04 	vpush	{d8-d9}
 800d248:	eeb0 8a41 	vmov.f32	s16, s2
 800d24c:	eef0 8a61 	vmov.f32	s17, s3
 800d250:	ec55 4b10 	vmov	r4, r5, d0
 800d254:	b083      	sub	sp, #12
 800d256:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d25a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d25e:	9001      	str	r0, [sp, #4]
 800d260:	da06      	bge.n	800d270 <__kernel_sin+0x30>
 800d262:	ee10 0a10 	vmov	r0, s0
 800d266:	4629      	mov	r1, r5
 800d268:	f7f3 fc60 	bl	8000b2c <__aeabi_d2iz>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d051      	beq.n	800d314 <__kernel_sin+0xd4>
 800d270:	4622      	mov	r2, r4
 800d272:	462b      	mov	r3, r5
 800d274:	4620      	mov	r0, r4
 800d276:	4629      	mov	r1, r5
 800d278:	f7f3 f9be 	bl	80005f8 <__aeabi_dmul>
 800d27c:	4682      	mov	sl, r0
 800d27e:	468b      	mov	fp, r1
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	a341      	add	r3, pc, #260	; (adr r3, 800d394 <__kernel_sin+0x154>)
 800d28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d292:	4680      	mov	r8, r0
 800d294:	4689      	mov	r9, r1
 800d296:	4650      	mov	r0, sl
 800d298:	4659      	mov	r1, fp
 800d29a:	f7f3 f9ad 	bl	80005f8 <__aeabi_dmul>
 800d29e:	a33f      	add	r3, pc, #252	; (adr r3, 800d39c <__kernel_sin+0x15c>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f7f2 fff0 	bl	8000288 <__aeabi_dsub>
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	465b      	mov	r3, fp
 800d2ac:	f7f3 f9a4 	bl	80005f8 <__aeabi_dmul>
 800d2b0:	a33c      	add	r3, pc, #240	; (adr r3, 800d3a4 <__kernel_sin+0x164>)
 800d2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b6:	f7f2 ffe9 	bl	800028c <__adddf3>
 800d2ba:	4652      	mov	r2, sl
 800d2bc:	465b      	mov	r3, fp
 800d2be:	f7f3 f99b 	bl	80005f8 <__aeabi_dmul>
 800d2c2:	a33a      	add	r3, pc, #232	; (adr r3, 800d3ac <__kernel_sin+0x16c>)
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f7f2 ffde 	bl	8000288 <__aeabi_dsub>
 800d2cc:	4652      	mov	r2, sl
 800d2ce:	465b      	mov	r3, fp
 800d2d0:	f7f3 f992 	bl	80005f8 <__aeabi_dmul>
 800d2d4:	a337      	add	r3, pc, #220	; (adr r3, 800d3b4 <__kernel_sin+0x174>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f2 ffd7 	bl	800028c <__adddf3>
 800d2de:	9b01      	ldr	r3, [sp, #4]
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	b9eb      	cbnz	r3, 800d322 <__kernel_sin+0xe2>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4650      	mov	r0, sl
 800d2ec:	4659      	mov	r1, fp
 800d2ee:	f7f3 f983 	bl	80005f8 <__aeabi_dmul>
 800d2f2:	a325      	add	r3, pc, #148	; (adr r3, 800d388 <__kernel_sin+0x148>)
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f7f2 ffc6 	bl	8000288 <__aeabi_dsub>
 800d2fc:	4642      	mov	r2, r8
 800d2fe:	464b      	mov	r3, r9
 800d300:	f7f3 f97a 	bl	80005f8 <__aeabi_dmul>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	4620      	mov	r0, r4
 800d30a:	4629      	mov	r1, r5
 800d30c:	f7f2 ffbe 	bl	800028c <__adddf3>
 800d310:	4604      	mov	r4, r0
 800d312:	460d      	mov	r5, r1
 800d314:	ec45 4b10 	vmov	d0, r4, r5
 800d318:	b003      	add	sp, #12
 800d31a:	ecbd 8b04 	vpop	{d8-d9}
 800d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d322:	4b1b      	ldr	r3, [pc, #108]	; (800d390 <__kernel_sin+0x150>)
 800d324:	ec51 0b18 	vmov	r0, r1, d8
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f3 f965 	bl	80005f8 <__aeabi_dmul>
 800d32e:	4632      	mov	r2, r6
 800d330:	ec41 0b19 	vmov	d9, r0, r1
 800d334:	463b      	mov	r3, r7
 800d336:	4640      	mov	r0, r8
 800d338:	4649      	mov	r1, r9
 800d33a:	f7f3 f95d 	bl	80005f8 <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	ec51 0b19 	vmov	r0, r1, d9
 800d346:	f7f2 ff9f 	bl	8000288 <__aeabi_dsub>
 800d34a:	4652      	mov	r2, sl
 800d34c:	465b      	mov	r3, fp
 800d34e:	f7f3 f953 	bl	80005f8 <__aeabi_dmul>
 800d352:	ec53 2b18 	vmov	r2, r3, d8
 800d356:	f7f2 ff97 	bl	8000288 <__aeabi_dsub>
 800d35a:	a30b      	add	r3, pc, #44	; (adr r3, 800d388 <__kernel_sin+0x148>)
 800d35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d360:	4606      	mov	r6, r0
 800d362:	460f      	mov	r7, r1
 800d364:	4640      	mov	r0, r8
 800d366:	4649      	mov	r1, r9
 800d368:	f7f3 f946 	bl	80005f8 <__aeabi_dmul>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4630      	mov	r0, r6
 800d372:	4639      	mov	r1, r7
 800d374:	f7f2 ff8a 	bl	800028c <__adddf3>
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f2 ff82 	bl	8000288 <__aeabi_dsub>
 800d384:	e7c4      	b.n	800d310 <__kernel_sin+0xd0>
 800d386:	bf00      	nop
 800d388:	55555549 	.word	0x55555549
 800d38c:	3fc55555 	.word	0x3fc55555
 800d390:	3fe00000 	.word	0x3fe00000
 800d394:	5acfd57c 	.word	0x5acfd57c
 800d398:	3de5d93a 	.word	0x3de5d93a
 800d39c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d3a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d3a4:	57b1fe7d 	.word	0x57b1fe7d
 800d3a8:	3ec71de3 	.word	0x3ec71de3
 800d3ac:	19c161d5 	.word	0x19c161d5
 800d3b0:	3f2a01a0 	.word	0x3f2a01a0
 800d3b4:	1110f8a6 	.word	0x1110f8a6
 800d3b8:	3f811111 	.word	0x3f811111

0800d3bc <fabs>:
 800d3bc:	ec51 0b10 	vmov	r0, r1, d0
 800d3c0:	ee10 2a10 	vmov	r2, s0
 800d3c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3c8:	ec43 2b10 	vmov	d0, r2, r3
 800d3cc:	4770      	bx	lr
	...

0800d3d0 <floor>:
 800d3d0:	ec51 0b10 	vmov	r0, r1, d0
 800d3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d3dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d3e0:	2e13      	cmp	r6, #19
 800d3e2:	ee10 5a10 	vmov	r5, s0
 800d3e6:	ee10 8a10 	vmov	r8, s0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	dc32      	bgt.n	800d454 <floor+0x84>
 800d3ee:	2e00      	cmp	r6, #0
 800d3f0:	da14      	bge.n	800d41c <floor+0x4c>
 800d3f2:	a333      	add	r3, pc, #204	; (adr r3, 800d4c0 <floor+0xf0>)
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f7f2 ff48 	bl	800028c <__adddf3>
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	2300      	movs	r3, #0
 800d400:	f7f3 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 800d404:	b138      	cbz	r0, 800d416 <floor+0x46>
 800d406:	2c00      	cmp	r4, #0
 800d408:	da57      	bge.n	800d4ba <floor+0xea>
 800d40a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d40e:	431d      	orrs	r5, r3
 800d410:	d001      	beq.n	800d416 <floor+0x46>
 800d412:	4c2d      	ldr	r4, [pc, #180]	; (800d4c8 <floor+0xf8>)
 800d414:	2500      	movs	r5, #0
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	e025      	b.n	800d468 <floor+0x98>
 800d41c:	4f2b      	ldr	r7, [pc, #172]	; (800d4cc <floor+0xfc>)
 800d41e:	4137      	asrs	r7, r6
 800d420:	ea01 0307 	and.w	r3, r1, r7
 800d424:	4303      	orrs	r3, r0
 800d426:	d01f      	beq.n	800d468 <floor+0x98>
 800d428:	a325      	add	r3, pc, #148	; (adr r3, 800d4c0 <floor+0xf0>)
 800d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42e:	f7f2 ff2d 	bl	800028c <__adddf3>
 800d432:	2200      	movs	r2, #0
 800d434:	2300      	movs	r3, #0
 800d436:	f7f3 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d0eb      	beq.n	800d416 <floor+0x46>
 800d43e:	2c00      	cmp	r4, #0
 800d440:	bfbe      	ittt	lt
 800d442:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d446:	fa43 f606 	asrlt.w	r6, r3, r6
 800d44a:	19a4      	addlt	r4, r4, r6
 800d44c:	ea24 0407 	bic.w	r4, r4, r7
 800d450:	2500      	movs	r5, #0
 800d452:	e7e0      	b.n	800d416 <floor+0x46>
 800d454:	2e33      	cmp	r6, #51	; 0x33
 800d456:	dd0b      	ble.n	800d470 <floor+0xa0>
 800d458:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d45c:	d104      	bne.n	800d468 <floor+0x98>
 800d45e:	ee10 2a10 	vmov	r2, s0
 800d462:	460b      	mov	r3, r1
 800d464:	f7f2 ff12 	bl	800028c <__adddf3>
 800d468:	ec41 0b10 	vmov	d0, r0, r1
 800d46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d470:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d474:	f04f 33ff 	mov.w	r3, #4294967295
 800d478:	fa23 f707 	lsr.w	r7, r3, r7
 800d47c:	4207      	tst	r7, r0
 800d47e:	d0f3      	beq.n	800d468 <floor+0x98>
 800d480:	a30f      	add	r3, pc, #60	; (adr r3, 800d4c0 <floor+0xf0>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f2 ff01 	bl	800028c <__adddf3>
 800d48a:	2200      	movs	r2, #0
 800d48c:	2300      	movs	r3, #0
 800d48e:	f7f3 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0bf      	beq.n	800d416 <floor+0x46>
 800d496:	2c00      	cmp	r4, #0
 800d498:	da02      	bge.n	800d4a0 <floor+0xd0>
 800d49a:	2e14      	cmp	r6, #20
 800d49c:	d103      	bne.n	800d4a6 <floor+0xd6>
 800d49e:	3401      	adds	r4, #1
 800d4a0:	ea25 0507 	bic.w	r5, r5, r7
 800d4a4:	e7b7      	b.n	800d416 <floor+0x46>
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d4ac:	fa03 f606 	lsl.w	r6, r3, r6
 800d4b0:	4435      	add	r5, r6
 800d4b2:	4545      	cmp	r5, r8
 800d4b4:	bf38      	it	cc
 800d4b6:	18e4      	addcc	r4, r4, r3
 800d4b8:	e7f2      	b.n	800d4a0 <floor+0xd0>
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	462c      	mov	r4, r5
 800d4be:	e7aa      	b.n	800d416 <floor+0x46>
 800d4c0:	8800759c 	.word	0x8800759c
 800d4c4:	7e37e43c 	.word	0x7e37e43c
 800d4c8:	bff00000 	.word	0xbff00000
 800d4cc:	000fffff 	.word	0x000fffff

0800d4d0 <scalbn>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	ec55 4b10 	vmov	r4, r5, d0
 800d4d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d4da:	4606      	mov	r6, r0
 800d4dc:	462b      	mov	r3, r5
 800d4de:	b99a      	cbnz	r2, 800d508 <scalbn+0x38>
 800d4e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d4e4:	4323      	orrs	r3, r4
 800d4e6:	d036      	beq.n	800d556 <scalbn+0x86>
 800d4e8:	4b39      	ldr	r3, [pc, #228]	; (800d5d0 <scalbn+0x100>)
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	ee10 0a10 	vmov	r0, s0
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f7f3 f881 	bl	80005f8 <__aeabi_dmul>
 800d4f6:	4b37      	ldr	r3, [pc, #220]	; (800d5d4 <scalbn+0x104>)
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	460d      	mov	r5, r1
 800d4fe:	da10      	bge.n	800d522 <scalbn+0x52>
 800d500:	a32b      	add	r3, pc, #172	; (adr r3, 800d5b0 <scalbn+0xe0>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	e03a      	b.n	800d57e <scalbn+0xae>
 800d508:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d50c:	428a      	cmp	r2, r1
 800d50e:	d10c      	bne.n	800d52a <scalbn+0x5a>
 800d510:	ee10 2a10 	vmov	r2, s0
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f2 feb8 	bl	800028c <__adddf3>
 800d51c:	4604      	mov	r4, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	e019      	b.n	800d556 <scalbn+0x86>
 800d522:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d526:	460b      	mov	r3, r1
 800d528:	3a36      	subs	r2, #54	; 0x36
 800d52a:	4432      	add	r2, r6
 800d52c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d530:	428a      	cmp	r2, r1
 800d532:	dd08      	ble.n	800d546 <scalbn+0x76>
 800d534:	2d00      	cmp	r5, #0
 800d536:	a120      	add	r1, pc, #128	; (adr r1, 800d5b8 <scalbn+0xe8>)
 800d538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d53c:	da1c      	bge.n	800d578 <scalbn+0xa8>
 800d53e:	a120      	add	r1, pc, #128	; (adr r1, 800d5c0 <scalbn+0xf0>)
 800d540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d544:	e018      	b.n	800d578 <scalbn+0xa8>
 800d546:	2a00      	cmp	r2, #0
 800d548:	dd08      	ble.n	800d55c <scalbn+0x8c>
 800d54a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d54e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d552:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d556:	ec45 4b10 	vmov	d0, r4, r5
 800d55a:	bd70      	pop	{r4, r5, r6, pc}
 800d55c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d560:	da19      	bge.n	800d596 <scalbn+0xc6>
 800d562:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d566:	429e      	cmp	r6, r3
 800d568:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d56c:	dd0a      	ble.n	800d584 <scalbn+0xb4>
 800d56e:	a112      	add	r1, pc, #72	; (adr r1, 800d5b8 <scalbn+0xe8>)
 800d570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e2      	bne.n	800d53e <scalbn+0x6e>
 800d578:	a30f      	add	r3, pc, #60	; (adr r3, 800d5b8 <scalbn+0xe8>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f3 f83b 	bl	80005f8 <__aeabi_dmul>
 800d582:	e7cb      	b.n	800d51c <scalbn+0x4c>
 800d584:	a10a      	add	r1, pc, #40	; (adr r1, 800d5b0 <scalbn+0xe0>)
 800d586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0b8      	beq.n	800d500 <scalbn+0x30>
 800d58e:	a10e      	add	r1, pc, #56	; (adr r1, 800d5c8 <scalbn+0xf8>)
 800d590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d594:	e7b4      	b.n	800d500 <scalbn+0x30>
 800d596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d59a:	3236      	adds	r2, #54	; 0x36
 800d59c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d5a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	4b0c      	ldr	r3, [pc, #48]	; (800d5d8 <scalbn+0x108>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	e7e8      	b.n	800d57e <scalbn+0xae>
 800d5ac:	f3af 8000 	nop.w
 800d5b0:	c2f8f359 	.word	0xc2f8f359
 800d5b4:	01a56e1f 	.word	0x01a56e1f
 800d5b8:	8800759c 	.word	0x8800759c
 800d5bc:	7e37e43c 	.word	0x7e37e43c
 800d5c0:	8800759c 	.word	0x8800759c
 800d5c4:	fe37e43c 	.word	0xfe37e43c
 800d5c8:	c2f8f359 	.word	0xc2f8f359
 800d5cc:	81a56e1f 	.word	0x81a56e1f
 800d5d0:	43500000 	.word	0x43500000
 800d5d4:	ffff3cb0 	.word	0xffff3cb0
 800d5d8:	3c900000 	.word	0x3c900000

0800d5dc <_init>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr

0800d5e8 <_fini>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr
