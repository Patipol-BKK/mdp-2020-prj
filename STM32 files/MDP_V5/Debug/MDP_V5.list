
MDP_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e8  080090e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f14  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f88  20004f88  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf30  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003527  00000000  00000000  0003bfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a8  00000000  00000000  000409d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c3e  00000000  00000000  00041d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ba7  00000000  00000000  000459b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d519a  00000000  00000000  0005c55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001316f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c94  00000000  00000000  0013174c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800845c 	.word	0x0800845c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800845c 	.word	0x0800845c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b96e 	b.w	8000b70 <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468c      	mov	ip, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f040 8083 	bne.w	80009c2 <__udivmoddi4+0x116>
 80008bc:	428a      	cmp	r2, r1
 80008be:	4617      	mov	r7, r2
 80008c0:	d947      	bls.n	8000952 <__udivmoddi4+0xa6>
 80008c2:	fab2 f282 	clz	r2, r2
 80008c6:	b142      	cbz	r2, 80008da <__udivmoddi4+0x2e>
 80008c8:	f1c2 0020 	rsb	r0, r2, #32
 80008cc:	fa24 f000 	lsr.w	r0, r4, r0
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4097      	lsls	r7, r2
 80008d4:	ea40 0c01 	orr.w	ip, r0, r1
 80008d8:	4094      	lsls	r4, r2
 80008da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008de:	0c23      	lsrs	r3, r4, #16
 80008e0:	fbbc f6f8 	udiv	r6, ip, r8
 80008e4:	fa1f fe87 	uxth.w	lr, r7
 80008e8:	fb08 c116 	mls	r1, r8, r6, ip
 80008ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008f0:	fb06 f10e 	mul.w	r1, r6, lr
 80008f4:	4299      	cmp	r1, r3
 80008f6:	d909      	bls.n	800090c <__udivmoddi4+0x60>
 80008f8:	18fb      	adds	r3, r7, r3
 80008fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80008fe:	f080 8119 	bcs.w	8000b34 <__udivmoddi4+0x288>
 8000902:	4299      	cmp	r1, r3
 8000904:	f240 8116 	bls.w	8000b34 <__udivmoddi4+0x288>
 8000908:	3e02      	subs	r6, #2
 800090a:	443b      	add	r3, r7
 800090c:	1a5b      	subs	r3, r3, r1
 800090e:	b2a4      	uxth	r4, r4
 8000910:	fbb3 f0f8 	udiv	r0, r3, r8
 8000914:	fb08 3310 	mls	r3, r8, r0, r3
 8000918:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000920:	45a6      	cmp	lr, r4
 8000922:	d909      	bls.n	8000938 <__udivmoddi4+0x8c>
 8000924:	193c      	adds	r4, r7, r4
 8000926:	f100 33ff 	add.w	r3, r0, #4294967295
 800092a:	f080 8105 	bcs.w	8000b38 <__udivmoddi4+0x28c>
 800092e:	45a6      	cmp	lr, r4
 8000930:	f240 8102 	bls.w	8000b38 <__udivmoddi4+0x28c>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800093c:	eba4 040e 	sub.w	r4, r4, lr
 8000940:	2600      	movs	r6, #0
 8000942:	b11d      	cbz	r5, 800094c <__udivmoddi4+0xa0>
 8000944:	40d4      	lsrs	r4, r2
 8000946:	2300      	movs	r3, #0
 8000948:	e9c5 4300 	strd	r4, r3, [r5]
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	b902      	cbnz	r2, 8000956 <__udivmoddi4+0xaa>
 8000954:	deff      	udf	#255	; 0xff
 8000956:	fab2 f282 	clz	r2, r2
 800095a:	2a00      	cmp	r2, #0
 800095c:	d150      	bne.n	8000a00 <__udivmoddi4+0x154>
 800095e:	1bcb      	subs	r3, r1, r7
 8000960:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000964:	fa1f f887 	uxth.w	r8, r7
 8000968:	2601      	movs	r6, #1
 800096a:	fbb3 fcfe 	udiv	ip, r3, lr
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fb0e 331c 	mls	r3, lr, ip, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb08 f30c 	mul.w	r3, r8, ip
 800097c:	428b      	cmp	r3, r1
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0xe4>
 8000980:	1879      	adds	r1, r7, r1
 8000982:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0xe2>
 8000988:	428b      	cmp	r3, r1
 800098a:	f200 80e9 	bhi.w	8000b60 <__udivmoddi4+0x2b4>
 800098e:	4684      	mov	ip, r0
 8000990:	1ac9      	subs	r1, r1, r3
 8000992:	b2a3      	uxth	r3, r4
 8000994:	fbb1 f0fe 	udiv	r0, r1, lr
 8000998:	fb0e 1110 	mls	r1, lr, r0, r1
 800099c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009a0:	fb08 f800 	mul.w	r8, r8, r0
 80009a4:	45a0      	cmp	r8, r4
 80009a6:	d907      	bls.n	80009b8 <__udivmoddi4+0x10c>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ae:	d202      	bcs.n	80009b6 <__udivmoddi4+0x10a>
 80009b0:	45a0      	cmp	r8, r4
 80009b2:	f200 80d9 	bhi.w	8000b68 <__udivmoddi4+0x2bc>
 80009b6:	4618      	mov	r0, r3
 80009b8:	eba4 0408 	sub.w	r4, r4, r8
 80009bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009c0:	e7bf      	b.n	8000942 <__udivmoddi4+0x96>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d909      	bls.n	80009da <__udivmoddi4+0x12e>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <__udivmoddi4+0x282>
 80009cc:	2600      	movs	r6, #0
 80009ce:	e9c5 0100 	strd	r0, r1, [r5]
 80009d2:	4630      	mov	r0, r6
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	fab3 f683 	clz	r6, r3
 80009de:	2e00      	cmp	r6, #0
 80009e0:	d14a      	bne.n	8000a78 <__udivmoddi4+0x1cc>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0x140>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 80b8 	bhi.w	8000b5c <__udivmoddi4+0x2b0>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb61 0103 	sbc.w	r1, r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	468c      	mov	ip, r1
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0a8      	beq.n	800094c <__udivmoddi4+0xa0>
 80009fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80009fe:	e7a5      	b.n	800094c <__udivmoddi4+0xa0>
 8000a00:	f1c2 0320 	rsb	r3, r2, #32
 8000a04:	fa20 f603 	lsr.w	r6, r0, r3
 8000a08:	4097      	lsls	r7, r2
 8000a0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a12:	40d9      	lsrs	r1, r3
 8000a14:	4330      	orrs	r0, r6
 8000a16:	0c03      	lsrs	r3, r0, #16
 8000a18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a1c:	fa1f f887 	uxth.w	r8, r7
 8000a20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f108 	mul.w	r1, r6, r8
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a32:	d909      	bls.n	8000a48 <__udivmoddi4+0x19c>
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a3a:	f080 808d 	bcs.w	8000b58 <__udivmoddi4+0x2ac>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 808a 	bls.w	8000b58 <__udivmoddi4+0x2ac>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	443b      	add	r3, r7
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b281      	uxth	r1, r0
 8000a4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a58:	fb00 f308 	mul.w	r3, r0, r8
 8000a5c:	428b      	cmp	r3, r1
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x1c4>
 8000a60:	1879      	adds	r1, r7, r1
 8000a62:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a66:	d273      	bcs.n	8000b50 <__udivmoddi4+0x2a4>
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	d971      	bls.n	8000b50 <__udivmoddi4+0x2a4>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	4439      	add	r1, r7
 8000a70:	1acb      	subs	r3, r1, r3
 8000a72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a76:	e778      	b.n	800096a <__udivmoddi4+0xbe>
 8000a78:	f1c6 0c20 	rsb	ip, r6, #32
 8000a7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a84:	431c      	orrs	r4, r3
 8000a86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a96:	431f      	orrs	r7, r3
 8000a98:	0c3b      	lsrs	r3, r7, #16
 8000a9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9e:	fa1f f884 	uxth.w	r8, r4
 8000aa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aaa:	fb09 fa08 	mul.w	sl, r9, r8
 8000aae:	458a      	cmp	sl, r1
 8000ab0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ab4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x220>
 8000aba:	1861      	adds	r1, r4, r1
 8000abc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac0:	d248      	bcs.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac2:	458a      	cmp	sl, r1
 8000ac4:	d946      	bls.n	8000b54 <__udivmoddi4+0x2a8>
 8000ac6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aca:	4421      	add	r1, r4
 8000acc:	eba1 010a 	sub.w	r1, r1, sl
 8000ad0:	b2bf      	uxth	r7, r7
 8000ad2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ada:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ade:	fb00 f808 	mul.w	r8, r0, r8
 8000ae2:	45b8      	cmp	r8, r7
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x24a>
 8000ae6:	19e7      	adds	r7, r4, r7
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d22e      	bcs.n	8000b4c <__udivmoddi4+0x2a0>
 8000aee:	45b8      	cmp	r8, r7
 8000af0:	d92c      	bls.n	8000b4c <__udivmoddi4+0x2a0>
 8000af2:	3802      	subs	r0, #2
 8000af4:	4427      	add	r7, r4
 8000af6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000afa:	eba7 0708 	sub.w	r7, r7, r8
 8000afe:	fba0 8902 	umull	r8, r9, r0, r2
 8000b02:	454f      	cmp	r7, r9
 8000b04:	46c6      	mov	lr, r8
 8000b06:	4649      	mov	r1, r9
 8000b08:	d31a      	bcc.n	8000b40 <__udivmoddi4+0x294>
 8000b0a:	d017      	beq.n	8000b3c <__udivmoddi4+0x290>
 8000b0c:	b15d      	cbz	r5, 8000b26 <__udivmoddi4+0x27a>
 8000b0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b12:	eb67 0701 	sbc.w	r7, r7, r1
 8000b16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b1a:	40f2      	lsrs	r2, r6
 8000b1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b20:	40f7      	lsrs	r7, r6
 8000b22:	e9c5 2700 	strd	r2, r7, [r5]
 8000b26:	2600      	movs	r6, #0
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e70b      	b.n	800094c <__udivmoddi4+0xa0>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e9      	b.n	800090c <__udivmoddi4+0x60>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6fd      	b.n	8000938 <__udivmoddi4+0x8c>
 8000b3c:	4543      	cmp	r3, r8
 8000b3e:	d2e5      	bcs.n	8000b0c <__udivmoddi4+0x260>
 8000b40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b44:	eb69 0104 	sbc.w	r1, r9, r4
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7df      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	e7d2      	b.n	8000af6 <__udivmoddi4+0x24a>
 8000b50:	4660      	mov	r0, ip
 8000b52:	e78d      	b.n	8000a70 <__udivmoddi4+0x1c4>
 8000b54:	4681      	mov	r9, r0
 8000b56:	e7b9      	b.n	8000acc <__udivmoddi4+0x220>
 8000b58:	4666      	mov	r6, ip
 8000b5a:	e775      	b.n	8000a48 <__udivmoddi4+0x19c>
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	e74a      	b.n	80009f6 <__udivmoddi4+0x14a>
 8000b60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b64:	4439      	add	r1, r7
 8000b66:	e713      	b.n	8000990 <__udivmoddi4+0xe4>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	443c      	add	r4, r7
 8000b6c:	e724      	b.n	80009b8 <__udivmoddi4+0x10c>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_idiv0>:
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f001 fa80 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f858 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 facc 	bl	800111c <MX_GPIO_Init>
  MX_TIM8_Init();
 8000b84:	f000 f9f6 	bl	8000f74 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000b88:	f000 f94c 	bl	8000e24 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b8c:	f000 f8ae 	bl	8000cec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 fa9a 	bl	80010c8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000b94:	f000 f99a 	bl	8000ecc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b98:	f004 fab0 	bl	80050fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <main+0x80>)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <main+0x84>)
 8000ba2:	f004 faf5 	bl	8005190 <osThreadNew>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <main+0x88>)
 8000baa:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <main+0x8c>)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4814      	ldr	r0, [pc, #80]	; (8000c04 <main+0x90>)
 8000bb2:	f004 faed 	bl	8005190 <osThreadNew>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <main+0x94>)
 8000bba:	6013      	str	r3, [r2, #0]

  /* creation of Motor_L */
  Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <main+0x98>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <main+0x9c>)
 8000bc2:	f004 fae5 	bl	8005190 <osThreadNew>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <main+0xa0>)
 8000bca:	6013      	str	r3, [r2, #0]

  /* creation of Motor_R */
  Motor_RHandle = osThreadNew(RightMotor, NULL, &Motor_R_attributes);
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <main+0xa4>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <main+0xa8>)
 8000bd2:	f004 fadd 	bl	8005190 <osThreadNew>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <main+0xac>)
 8000bda:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(EncoderL, NULL, &EncoderTask_attributes);
 8000bdc:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <main+0xb0>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4811      	ldr	r0, [pc, #68]	; (8000c28 <main+0xb4>)
 8000be2:	f004 fad5 	bl	8005190 <osThreadNew>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <main+0xb8>)
 8000bea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bec:	f004 faaa 	bl	8005144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <main+0x7c>
 8000bf2:	bf00      	nop
 8000bf4:	0800857c 	.word	0x0800857c
 8000bf8:	08001209 	.word	0x08001209
 8000bfc:	200049b0 	.word	0x200049b0
 8000c00:	080085a0 	.word	0x080085a0
 8000c04:	08001259 	.word	0x08001259
 8000c08:	20004ad8 	.word	0x20004ad8
 8000c0c:	080085c4 	.word	0x080085c4
 8000c10:	08001289 	.word	0x08001289
 8000c14:	200049ac 	.word	0x200049ac
 8000c18:	080085e8 	.word	0x080085e8
 8000c1c:	080015b1 	.word	0x080015b1
 8000c20:	20004b2c 	.word	0x20004b2c
 8000c24:	0800860c 	.word	0x0800860c
 8000c28:	080018ad 	.word	0x080018ad
 8000c2c:	20004a40 	.word	0x20004a40

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	; 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	; 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 ffe4 	bl	8007c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <SystemClock_Config+0xb4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <SystemClock_Config+0xb4>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <SystemClock_Config+0xb4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <SystemClock_Config+0xb8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <SystemClock_Config+0xb8>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <SystemClock_Config+0xb8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c94:	2310      	movs	r3, #16
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fdd1 	bl	8002848 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cac:	f000 fe06 	bl	80018bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f834 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cd6:	f000 fdf1 	bl	80018bc <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3750      	adds	r7, #80	; 0x50
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b096      	sub	sp, #88	; 0x58
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2220      	movs	r2, #32
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f006 ff71 	bl	8007c0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2a:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d2c:	4a3c      	ldr	r2, [pc, #240]	; (8000e20 <MX_TIM1_Init+0x134>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000d30:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d32:	22a0      	movs	r2, #160	; 0xa0
 8000d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b35      	ldr	r3, [pc, #212]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d56:	4831      	ldr	r0, [pc, #196]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d58:	f002 f9be 	bl	80030d8 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d62:	f000 fdab 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d70:	4619      	mov	r1, r3
 8000d72:	482a      	ldr	r0, [pc, #168]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d74:	f002 fd16 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d7e:	f000 fd9d 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d82:	4826      	ldr	r0, [pc, #152]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000d84:	f002 f9f7 	bl	8003176 <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d8e:	f000 fd95 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000da2:	f003 f8d7 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dac:	f000 fd86 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db0:	2360      	movs	r3, #96	; 0x60
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	220c      	movs	r2, #12
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000dd2:	f002 fc25 	bl	8003620 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000ddc:	f000 fd6e 	bl	80018bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM1_Init+0x130>)
 8000e04:	f003 f922 	bl	800404c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e0e:	f000 fd55 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3758      	adds	r7, #88	; 0x58
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20004a8c 	.word	0x20004a8c
 8000e20:	40010000 	.word	0x40010000

08000e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2224      	movs	r2, #36	; 0x24
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f006 feea 	bl	8007c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e78:	230a      	movs	r3, #10
 8000e7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e80:	2301      	movs	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000e94:	f002 fa90 	bl	80033b8 <HAL_TIM_Encoder_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e9e:	f000 fd0d 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_TIM2_Init+0xa4>)
 8000eb0:	f003 f850 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000eba:	f000 fcff 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3730      	adds	r7, #48	; 0x30
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20004ae4 	.word	0x20004ae4

08000ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2224      	movs	r2, #36	; 0x24
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 fe96 	bl	8007c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <MX_TIM3_Init+0xa4>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f16:	2301      	movs	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f1e:	230a      	movs	r3, #10
 8000f20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f26:	2301      	movs	r3, #1
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000f3a:	f002 fa3d 	bl	80033b8 <HAL_TIM_Encoder_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 fcba 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_TIM3_Init+0xa0>)
 8000f56:	f002 fffd 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f60:	f000 fcac 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20004a44 	.word	0x20004a44
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fe2d 	bl	8007c0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fb2:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fb4:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <MX_TIM8_Init+0x150>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fb8:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fc6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fde:	4838      	ldr	r0, [pc, #224]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000fe0:	f002 f87a 	bl	80030d8 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000fea:	f000 fc67 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4831      	ldr	r0, [pc, #196]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8000ffc:	f002 fbd2 	bl	80037a4 <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001006:	f000 fc59 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800100a:	482d      	ldr	r0, [pc, #180]	; (80010c0 <MX_TIM8_Init+0x14c>)
 800100c:	f002 f8b3 	bl	8003176 <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001016:	f000 fc51 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001022:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001026:	4619      	mov	r1, r3
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <MX_TIM8_Init+0x14c>)
 800102a:	f002 ff93 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001034:	f000 fc42 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_TIM8_Init+0x14c>)
 800105e:	f002 fadf 	bl	8003620 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001068:	f000 fc28 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	2204      	movs	r2, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <MX_TIM8_Init+0x14c>)
 8001076:	f002 fad3 	bl	8003620 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001080:	f000 fc1c 	bl	80018bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <MX_TIM8_Init+0x14c>)
 80010a8:	f002 ffd0 	bl	800404c <HAL_TIMEx_ConfigBreakDeadTime>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80010b2:	f000 fc03 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	; 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200049b4 	.word	0x200049b4
 80010c4:	40010400 	.word	0x40010400

080010c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_USART3_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 8001100:	f002 fff6 	bl	80040f0 <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f000 fbd7 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200049fc 	.word	0x200049fc
 8001118:	40004800 	.word	0x40004800

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <MX_GPIO_Init+0xe0>)
 800113c:	f043 0310 	orr.w	r3, r3, #16
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a29      	ldr	r2, [pc, #164]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a22      	ldr	r2, [pc, #136]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <MX_GPIO_Init+0xe0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_GPIO_Init+0xe0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_GPIO_Init+0xe0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <MX_GPIO_Init+0xe4>)
 80011aa:	f001 fb19 	bl	80027e0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	213c      	movs	r1, #60	; 0x3c
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <MX_GPIO_Init+0xe8>)
 80011b4:	f001 fb14 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80011b8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80011bc:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_GPIO_Init+0xe4>)
 80011d2:	f001 f969 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80011d6:	233c      	movs	r3, #60	; 0x3c
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_GPIO_Init+0xe8>)
 80011ee:	f001 f95b 	bl	80024a8 <HAL_GPIO_Init>

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021000 	.word	0x40021000
 8001204:	40020000 	.word	0x40020000

08001208 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t hello[20];
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
 8001210:	2205      	movs	r2, #5
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <StartDefaultTask+0x40>)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <StartDefaultTask+0x44>)
 8001216:	f003 f84a 	bl	80042ae <HAL_UART_Receive_IT>
	  sprintf(hello, "buff:%s", Buffer);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <StartDefaultTask+0x40>)
 8001220:	490b      	ldr	r1, [pc, #44]	; (8001250 <StartDefaultTask+0x48>)
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fcfa 	bl	8007c1c <siprintf>
	  OLED_ShowString(10,10,hello);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	461a      	mov	r2, r3
 800122e:	210a      	movs	r1, #10
 8001230:	200a      	movs	r0, #10
 8001232:	f000 fcbd 	bl	8001bb0 <OLED_ShowString>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <StartDefaultTask+0x4c>)
 800123c:	f001 fae9 	bl	8002812 <HAL_GPIO_TogglePin>
	  osDelay(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f004 f837 	bl	80052b4 <osDelay>
  {
 8001246:	e7e3      	b.n	8001210 <StartDefaultTask+0x8>
 8001248:	20004adc 	.word	0x20004adc
 800124c:	200049fc 	.word	0x200049fc
 8001250:	080084a8 	.word	0x080084a8
 8001254:	40021000 	.word	0x40021000

08001258 <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "test1!\0";
 8001260:	4a08      	ldr	r2, [pc, #32]	; (8001284 <Display+0x2c>)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126a:	e883 0003 	stmia.w	r3, {r0, r1}
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  //OLED_ShowString(10,10,hello);
	  //OLED_Refresh_Gram();
	  osDelay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f004 f81a 	bl	80052b4 <osDelay>
 8001280:	e7fb      	b.n	800127a <Display+0x22>
 8001282:	bf00      	nop
 8001284:	080084b0 	.word	0x080084b0

08001288 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b092      	sub	sp, #72	; 0x48
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */
  uint16_t pwmVal = 2000, pwmVal_S = 1100, pwmVal_L = 3900;
 8001290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001294:	867b      	strh	r3, [r7, #50]	; 0x32
 8001296:	f240 434c 	movw	r3, #1100	; 0x44c
 800129a:	863b      	strh	r3, [r7, #48]	; 0x30
 800129c:	f640 733c 	movw	r3, #3900	; 0xf3c
 80012a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	48b2      	ldr	r0, [pc, #712]	; (8001570 <LeftMotor+0x2e8>)
 80012a6:	f001 ffbf 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80012aa:	2104      	movs	r1, #4
 80012ac:	48b0      	ldr	r0, [pc, #704]	; (8001570 <LeftMotor+0x2e8>)
 80012ae:	f001 ffbb 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80012b2:	210c      	movs	r1, #12
 80012b4:	48af      	ldr	r0, [pc, #700]	; (8001574 <LeftMotor+0x2ec>)
 80012b6:	f001 ffb7 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012ba:	213c      	movs	r1, #60	; 0x3c
 80012bc:	48ae      	ldr	r0, [pc, #696]	; (8001578 <LeftMotor+0x2f0>)
 80012be:	f002 f921 	bl	8003504 <HAL_TIM_Encoder_Start>

  int cnt1, cnt2, pulse;
  uint32_t tick, dist, angle, pulseneeded, pulsetotal;
  uint8_t hello[20];

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80012c2:	4bad      	ldr	r3, [pc, #692]	; (8001578 <LeftMotor+0x2f0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
  tick = HAL_GetTick();
 80012ca:	f000 ff3d 	bl	8002148 <HAL_GetTick>
 80012ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  dist = 30;
 80012d0:	231e      	movs	r3, #30
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  angle = 45;
 80012d4:	232d      	movs	r3, #45	; 0x2d
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24

  int value;
  /* Infinite loop */
  for(;;){
	  flagL = '0';
 80012d8:	4ba8      	ldr	r3, [pc, #672]	; (800157c <LeftMotor+0x2f4>)
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	701a      	strb	r2, [r3, #0]
	  value = (Buffer[2] - '0')*100 + (Buffer[3] - '0')*10 + Buffer[4] - '0';
 80012de:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <LeftMotor+0x2f8>)
 80012e0:	789b      	ldrb	r3, [r3, #2]
 80012e2:	3b30      	subs	r3, #48	; 0x30
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	fb02 f103 	mul.w	r1, r2, r3
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <LeftMotor+0x2f8>)
 80012ec:	78db      	ldrb	r3, [r3, #3]
 80012ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	440b      	add	r3, r1
 80012fc:	4aa0      	ldr	r2, [pc, #640]	; (8001580 <LeftMotor+0x2f8>)
 80012fe:	7912      	ldrb	r2, [r2, #4]
 8001300:	4413      	add	r3, r2
 8001302:	3b30      	subs	r3, #48	; 0x30
 8001304:	623b      	str	r3, [r7, #32]
	  dist = value;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
	  angle = value;
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
	  if(Buffer[0] == 'F'){
 800130e:	4b9c      	ldr	r3, [pc, #624]	; (8001580 <LeftMotor+0x2f8>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b46      	cmp	r3, #70	; 0x46
 8001314:	d10a      	bne.n	800132c <LeftMotor+0xa4>
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2104      	movs	r1, #4
 800131a:	489a      	ldr	r0, [pc, #616]	; (8001584 <LeftMotor+0x2fc>)
 800131c:	f001 fa60 	bl	80027e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2108      	movs	r1, #8
 8001324:	4897      	ldr	r0, [pc, #604]	; (8001584 <LeftMotor+0x2fc>)
 8001326:	f001 fa5b 	bl	80027e0 <HAL_GPIO_WritePin>
 800132a:	e013      	b.n	8001354 <LeftMotor+0xcc>
	  }
	  else if(Buffer[0] == 'B'){
 800132c:	4b94      	ldr	r3, [pc, #592]	; (8001580 <LeftMotor+0x2f8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b42      	cmp	r3, #66	; 0x42
 8001332:	d10a      	bne.n	800134a <LeftMotor+0xc2>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2108      	movs	r1, #8
 8001338:	4892      	ldr	r0, [pc, #584]	; (8001584 <LeftMotor+0x2fc>)
 800133a:	f001 fa51 	bl	80027e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	2104      	movs	r1, #4
 8001342:	4890      	ldr	r0, [pc, #576]	; (8001584 <LeftMotor+0x2fc>)
 8001344:	f001 fa4c 	bl	80027e0 <HAL_GPIO_WritePin>
 8001348:	e004      	b.n	8001354 <LeftMotor+0xcc>
	  }
	  else{
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <LeftMotor+0x2e8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
		  continue;
 8001352:	e102      	b.n	800155a <LeftMotor+0x2d2>
	  }
	  switch(Buffer[1]){
 8001354:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <LeftMotor+0x2f8>)
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	2b4c      	cmp	r3, #76	; 0x4c
 800135a:	d002      	beq.n	8001362 <LeftMotor+0xda>
 800135c:	2b52      	cmp	r3, #82	; 0x52
 800135e:	d026      	beq.n	80013ae <LeftMotor+0x126>
 8001360:	e04b      	b.n	80013fa <LeftMotor+0x172>
	  case 'L':
		  htim1.Instance ->CCR4 = 90;
 8001362:	4b84      	ldr	r3, [pc, #528]	; (8001574 <LeftMotor+0x2ec>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	225a      	movs	r2, #90	; 0x5a
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 800136a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800136e:	f003 ffa1 	bl	80052b4 <osDelay>
		  pulseneeded = angle*0.115*59;
 8001372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001374:	f7ff f9e8 	bl	8000748 <__aeabi_ui2d>
 8001378:	a379      	add	r3, pc, #484	; (adr r3, 8001560 <LeftMotor+0x2d8>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7fe ff77 	bl	8000270 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b7e      	ldr	r3, [pc, #504]	; (8001588 <LeftMotor+0x300>)
 8001390:	f7fe ff6e 	bl	8000270 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fa4e 	bl	800083c <__aeabi_d2uiz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_S);
 80013a4:	4b72      	ldr	r3, [pc, #456]	; (8001570 <LeftMotor+0x2e8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
		  break;
 80013ac:	e039      	b.n	8001422 <LeftMotor+0x19a>
	  case 'R':
		  htim1.Instance ->CCR4 = 202;
 80013ae:	4b71      	ldr	r3, [pc, #452]	; (8001574 <LeftMotor+0x2ec>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	22ca      	movs	r2, #202	; 0xca
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 80013b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013ba:	f003 ff7b 	bl	80052b4 <osDelay>
		  pulseneeded = angle*0.408*59;
 80013be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013c0:	f7ff f9c2 	bl	8000748 <__aeabi_ui2d>
 80013c4:	a368      	add	r3, pc, #416	; (adr r3, 8001568 <LeftMotor+0x2e0>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7fe ff51 	bl	8000270 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b6b      	ldr	r3, [pc, #428]	; (8001588 <LeftMotor+0x300>)
 80013dc:	f7fe ff48 	bl	8000270 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fa28 	bl	800083c <__aeabi_d2uiz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L);
 80013f0:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <LeftMotor+0x2e8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
		  break;
 80013f8:	e013      	b.n	8001422 <LeftMotor+0x19a>
	  default:
		  htim1.Instance ->CCR4 = 148;
 80013fa:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <LeftMotor+0x2ec>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2294      	movs	r2, #148	; 0x94
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 8001402:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001406:	f003 ff55 	bl	80052b4 <osDelay>
		  pulseneeded = dist*59;
 800140a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140c:	4613      	mov	r3, r2
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8001418:	4b55      	ldr	r3, [pc, #340]	; (8001570 <LeftMotor+0x2e8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
		  break;
 8001420:	bf00      	nop
	  }
	  pulsetotal = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
	  do{
		  if(HAL_GetTick()-tick > 50L){
 8001426:	f000 fe8f 	bl	8002148 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d96f      	bls.n	8001514 <LeftMotor+0x28c>
				sprintf(hello, "LeftPN:%5d\0", pulseneeded);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800143a:	4954      	ldr	r1, [pc, #336]	; (800158c <LeftMotor+0x304>)
 800143c:	4618      	mov	r0, r3
 800143e:	f006 fbed 	bl	8007c1c <siprintf>
				OLED_ShowString(10,20,hello);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	461a      	mov	r2, r3
 8001448:	2114      	movs	r1, #20
 800144a:	200a      	movs	r0, #10
 800144c:	f000 fbb0 	bl	8001bb0 <OLED_ShowString>

				cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <LeftMotor+0x2f0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	61fb      	str	r3, [r7, #28]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <LeftMotor+0x2f0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b10      	cmp	r3, #16
 8001464:	d11e      	bne.n	80014a4 <LeftMotor+0x21c>
					if(cnt2<cnt1)
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800146a:	429a      	cmp	r2, r3
 800146c:	da0b      	bge.n	8001486 <LeftMotor+0x1fe>
					{
						pulse = cnt1 - cnt2;
 800146e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "LeftPT1:%5d\0", pulsetotal);
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800147c:	4944      	ldr	r1, [pc, #272]	; (8001590 <LeftMotor+0x308>)
 800147e:	4618      	mov	r0, r3
 8001480:	f006 fbcc 	bl	8007c1c <siprintf>
 8001484:	e02c      	b.n	80014e0 <LeftMotor+0x258>
					}
					else
					{
						pulse = (65535 - cnt2) + cnt1;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800148c:	33ff      	adds	r3, #255	; 0xff
 800148e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001490:	4413      	add	r3, r2
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "LeftPT2:%5d\0", pulsetotal);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800149a:	493e      	ldr	r1, [pc, #248]	; (8001594 <LeftMotor+0x30c>)
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fbbd 	bl	8007c1c <siprintf>
 80014a2:	e01d      	b.n	80014e0 <LeftMotor+0x258>
					}
				}
				else{
					if(cnt2>cnt1)
 80014a4:	69fa      	ldr	r2, [r7, #28]
 80014a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dd0b      	ble.n	80014c4 <LeftMotor+0x23c>
					{
						pulse = cnt2 - cnt1;
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "LeftPT3:%5d\0", pulsetotal);
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ba:	4937      	ldr	r1, [pc, #220]	; (8001598 <LeftMotor+0x310>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f006 fbad 	bl	8007c1c <siprintf>
 80014c2:	e00d      	b.n	80014e0 <LeftMotor+0x258>
					}
					else
					{
						pulse = (65535 - cnt1) + cnt2;
 80014c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80014ca:	33ff      	adds	r3, #255	; 0xff
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "LeftPT4:%5d\0", pulsetotal);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014d8:	4930      	ldr	r1, [pc, #192]	; (800159c <LeftMotor+0x314>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f006 fb9e 	bl	8007c1c <siprintf>
					}
				}
				pulsetotal = (pulsetotal + pulse)%65535;
 80014e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e4:	441a      	add	r2, r3
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <LeftMotor+0x318>)
 80014e8:	fba3 1302 	umull	r1, r3, r3, r2
 80014ec:	0bd9      	lsrs	r1, r3, #15
 80014ee:	460b      	mov	r3, r1
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	1a5b      	subs	r3, r3, r1
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
				OLED_ShowString(10,30,hello);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	461a      	mov	r2, r3
 80014fe:	211e      	movs	r1, #30
 8001500:	200a      	movs	r0, #10
 8001502:	f000 fb55 	bl	8001bb0 <OLED_ShowString>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <LeftMotor+0x2f0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
				tick = HAL_GetTick();
 800150e:	f000 fe1b 	bl	8002148 <HAL_GetTick>
 8001512:	63f8      	str	r0, [r7, #60]	; 0x3c
		  }
	  }while(pulsetotal < pulseneeded);
 8001514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	429a      	cmp	r2, r3
 800151a:	d384      	bcc.n	8001426 <LeftMotor+0x19e>
	  Buffer[0] = 'd';
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <LeftMotor+0x2f8>)
 800151e:	2264      	movs	r2, #100	; 0x64
 8001520:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <LeftMotor+0x2e8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
	  flagL = '1';
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <LeftMotor+0x2f4>)
 800152c:	2231      	movs	r2, #49	; 0x31
 800152e:	701a      	strb	r2, [r3, #0]
	  if(flagL == '1' && flagR == '1'){
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <LeftMotor+0x2f4>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b31      	cmp	r3, #49	; 0x31
 8001536:	f47f aecf 	bne.w	80012d8 <LeftMotor+0x50>
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <LeftMotor+0x31c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b31      	cmp	r3, #49	; 0x31
 8001540:	f47f aeca 	bne.w	80012d8 <LeftMotor+0x50>
	  osDelay(300);
 8001544:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001548:	f003 feb4 	bl	80052b4 <osDelay>
	  HAL_UART_Transmit(&huart3, "R", sizeof("R"), HAL_MAX_DELAY);
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	2202      	movs	r2, #2
 8001552:	4915      	ldr	r1, [pc, #84]	; (80015a8 <LeftMotor+0x320>)
 8001554:	4815      	ldr	r0, [pc, #84]	; (80015ac <LeftMotor+0x324>)
 8001556:	f002 fe18 	bl	800418a <HAL_UART_Transmit>
	  flagL = '0';
 800155a:	e6bd      	b.n	80012d8 <LeftMotor+0x50>
 800155c:	f3af 8000 	nop.w
 8001560:	d70a3d71 	.word	0xd70a3d71
 8001564:	3fbd70a3 	.word	0x3fbd70a3
 8001568:	083126e9 	.word	0x083126e9
 800156c:	3fda1cac 	.word	0x3fda1cac
 8001570:	200049b4 	.word	0x200049b4
 8001574:	20004a8c 	.word	0x20004a8c
 8001578:	20004ae4 	.word	0x20004ae4
 800157c:	20004b30 	.word	0x20004b30
 8001580:	20004adc 	.word	0x20004adc
 8001584:	40020000 	.word	0x40020000
 8001588:	404d8000 	.word	0x404d8000
 800158c:	080084c4 	.word	0x080084c4
 8001590:	080084d0 	.word	0x080084d0
 8001594:	080084e0 	.word	0x080084e0
 8001598:	080084f0 	.word	0x080084f0
 800159c:	08008500 	.word	0x08008500
 80015a0:	80008001 	.word	0x80008001
 80015a4:	20004ad4 	.word	0x20004ad4
 80015a8:	08008510 	.word	0x08008510
 80015ac:	200049fc 	.word	0x200049fc

080015b0 <RightMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RightMotor */
void RightMotor(void *argument)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b092      	sub	sp, #72	; 0x48
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */
	uint16_t pwmVal = 2000, pwmVal_S = 1100, pwmVal_L = 3900;
 80015b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80015be:	f240 434c 	movw	r3, #1100	; 0x44c
 80015c2:	863b      	strh	r3, [r7, #48]	; 0x30
 80015c4:	f640 733c 	movw	r3, #3900	; 0xf3c
 80015c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 80015ca:	2100      	movs	r1, #0
 80015cc:	48aa      	ldr	r0, [pc, #680]	; (8001878 <RightMotor+0x2c8>)
 80015ce:	f001 fe2b 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 80015d2:	2104      	movs	r1, #4
 80015d4:	48a8      	ldr	r0, [pc, #672]	; (8001878 <RightMotor+0x2c8>)
 80015d6:	f001 fe27 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80015da:	210c      	movs	r1, #12
 80015dc:	48a7      	ldr	r0, [pc, #668]	; (800187c <RightMotor+0x2cc>)
 80015de:	f001 fe23 	bl	8003228 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015e2:	213c      	movs	r1, #60	; 0x3c
 80015e4:	48a6      	ldr	r0, [pc, #664]	; (8001880 <RightMotor+0x2d0>)
 80015e6:	f001 ff8d 	bl	8003504 <HAL_TIM_Encoder_Start>

  int cnt1, cnt2, pulse;
  uint32_t tick, dist, angle, pulseneeded, pulsetotal;
  uint8_t hello[20];

  cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80015ea:	4ba5      	ldr	r3, [pc, #660]	; (8001880 <RightMotor+0x2d0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  tick = HAL_GetTick();
 80015f2:	f000 fda9 	bl	8002148 <HAL_GetTick>
 80015f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  dist = 30;
 80015f8:	231e      	movs	r3, #30
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
  angle = 45;
 80015fc:	232d      	movs	r3, #45	; 0x2d
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

  int value;
  /* Infinite loop */
  for(;;){
	  flagR = '0';
 8001600:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <RightMotor+0x2d4>)
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	701a      	strb	r2, [r3, #0]
	  value = (Buffer[2] - '0')*100 + (Buffer[3] - '0')*10 + Buffer[4] - '0';
 8001606:	4ba0      	ldr	r3, [pc, #640]	; (8001888 <RightMotor+0x2d8>)
 8001608:	789b      	ldrb	r3, [r3, #2]
 800160a:	3b30      	subs	r3, #48	; 0x30
 800160c:	2264      	movs	r2, #100	; 0x64
 800160e:	fb02 f103 	mul.w	r1, r2, r3
 8001612:	4b9d      	ldr	r3, [pc, #628]	; (8001888 <RightMotor+0x2d8>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	440b      	add	r3, r1
 8001624:	4a98      	ldr	r2, [pc, #608]	; (8001888 <RightMotor+0x2d8>)
 8001626:	7912      	ldrb	r2, [r2, #4]
 8001628:	4413      	add	r3, r2
 800162a:	3b30      	subs	r3, #48	; 0x30
 800162c:	623b      	str	r3, [r7, #32]
	  dist = value;
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
	  angle = value;
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
	  if(Buffer[0] == 'F'){
 8001636:	4b94      	ldr	r3, [pc, #592]	; (8001888 <RightMotor+0x2d8>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b46      	cmp	r3, #70	; 0x46
 800163c:	d10a      	bne.n	8001654 <RightMotor+0xa4>
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	4892      	ldr	r0, [pc, #584]	; (800188c <RightMotor+0x2dc>)
 8001644:	f001 f8cc 	bl	80027e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	2110      	movs	r1, #16
 800164c:	488f      	ldr	r0, [pc, #572]	; (800188c <RightMotor+0x2dc>)
 800164e:	f001 f8c7 	bl	80027e0 <HAL_GPIO_WritePin>
 8001652:	e013      	b.n	800167c <RightMotor+0xcc>
	  }
	  else if(Buffer[0] == 'B'){
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <RightMotor+0x2d8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b42      	cmp	r3, #66	; 0x42
 800165a:	d10a      	bne.n	8001672 <RightMotor+0xc2>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2110      	movs	r1, #16
 8001660:	488a      	ldr	r0, [pc, #552]	; (800188c <RightMotor+0x2dc>)
 8001662:	f001 f8bd 	bl	80027e0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001666:	2201      	movs	r2, #1
 8001668:	2120      	movs	r1, #32
 800166a:	4888      	ldr	r0, [pc, #544]	; (800188c <RightMotor+0x2dc>)
 800166c:	f001 f8b8 	bl	80027e0 <HAL_GPIO_WritePin>
 8001670:	e004      	b.n	800167c <RightMotor+0xcc>
	  }
	  else{
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <RightMotor+0x2c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
		  continue;
 800167a:	e0f1      	b.n	8001860 <RightMotor+0x2b0>
	  }
	  switch(Buffer[1]){
 800167c:	4b82      	ldr	r3, [pc, #520]	; (8001888 <RightMotor+0x2d8>)
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	2b4c      	cmp	r3, #76	; 0x4c
 8001682:	d002      	beq.n	800168a <RightMotor+0xda>
 8001684:	2b52      	cmp	r3, #82	; 0x52
 8001686:	d026      	beq.n	80016d6 <RightMotor+0x126>
 8001688:	e04b      	b.n	8001722 <RightMotor+0x172>
	  case 'L':
		  htim1.Instance ->CCR4 = 90;
 800168a:	4b7c      	ldr	r3, [pc, #496]	; (800187c <RightMotor+0x2cc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	225a      	movs	r2, #90	; 0x5a
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 8001692:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001696:	f003 fe0d 	bl	80052b4 <osDelay>
		  pulseneeded = angle*0.408*59;
 800169a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800169c:	f7ff f854 	bl	8000748 <__aeabi_ui2d>
 80016a0:	a371      	add	r3, pc, #452	; (adr r3, 8001868 <RightMotor+0x2b8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe fde3 	bl	8000270 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	4b76      	ldr	r3, [pc, #472]	; (8001890 <RightMotor+0x2e0>)
 80016b8:	f7fe fdda 	bl	8000270 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff f8ba 	bl	800083c <__aeabi_d2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_L);
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <RightMotor+0x2c8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80016d2:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 80016d4:	e039      	b.n	800174a <RightMotor+0x19a>
	  case 'R':
		  htim1.Instance ->CCR4 = 202;
 80016d6:	4b69      	ldr	r3, [pc, #420]	; (800187c <RightMotor+0x2cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	22ca      	movs	r2, #202	; 0xca
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 80016de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016e2:	f003 fde7 	bl	80052b4 <osDelay>
		  pulseneeded = angle*0.115*59;
 80016e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016e8:	f7ff f82e 	bl	8000748 <__aeabi_ui2d>
 80016ec:	a360      	add	r3, pc, #384	; (adr r3, 8001870 <RightMotor+0x2c0>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fdbd 	bl	8000270 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <RightMotor+0x2e0>)
 8001704:	f7fe fdb4 	bl	8000270 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f894 	bl	800083c <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_S);
 8001718:	4b57      	ldr	r3, [pc, #348]	; (8001878 <RightMotor+0x2c8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8001720:	e013      	b.n	800174a <RightMotor+0x19a>
	  default:
		  htim1.Instance ->CCR4 = 148;
 8001722:	4b56      	ldr	r3, [pc, #344]	; (800187c <RightMotor+0x2cc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2294      	movs	r2, #148	; 0x94
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
		  osDelay(300);
 800172a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800172e:	f003 fdc1 	bl	80052b4 <osDelay>
		  pulseneeded = dist*59;
 8001732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <RightMotor+0x2c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001746:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8001748:	bf00      	nop
	  }
	  pulsetotal = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
	  do{
		  if(HAL_GetTick()-tick > 50L){
 800174e:	f000 fcfb 	bl	8002148 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b32      	cmp	r3, #50	; 0x32
 800175a:	d96f      	bls.n	800183c <RightMotor+0x28c>
				sprintf(hello, "RightPN:%5d\0", pulseneeded);
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001762:	494c      	ldr	r1, [pc, #304]	; (8001894 <RightMotor+0x2e4>)
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fa59 	bl	8007c1c <siprintf>
				OLED_ShowString(10,40,hello);
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	461a      	mov	r2, r3
 8001770:	2128      	movs	r1, #40	; 0x28
 8001772:	200a      	movs	r0, #10
 8001774:	f000 fa1c 	bl	8001bb0 <OLED_ShowString>

				cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <RightMotor+0x2d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	61fb      	str	r3, [r7, #28]
				if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <RightMotor+0x2d0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b10      	cmp	r3, #16
 800178c:	d11e      	bne.n	80017cc <RightMotor+0x21c>
					if(cnt2<cnt1)
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001792:	429a      	cmp	r2, r3
 8001794:	da0b      	bge.n	80017ae <RightMotor+0x1fe>
					{
						pulse = cnt1 - cnt2;
 8001796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "RightPT1:%5d\0", pulsetotal);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017a4:	493c      	ldr	r1, [pc, #240]	; (8001898 <RightMotor+0x2e8>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f006 fa38 	bl	8007c1c <siprintf>
 80017ac:	e02c      	b.n	8001808 <RightMotor+0x258>
					}
					else
					{
						pulse = (65535 - cnt2) + cnt1;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80017b4:	33ff      	adds	r3, #255	; 0xff
 80017b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017b8:	4413      	add	r3, r2
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "RightPT2:%5d\0", pulsetotal);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017c2:	4936      	ldr	r1, [pc, #216]	; (800189c <RightMotor+0x2ec>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 fa29 	bl	8007c1c <siprintf>
 80017ca:	e01d      	b.n	8001808 <RightMotor+0x258>
					}
				}
				else{
					if(cnt2>cnt1)
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dd0b      	ble.n	80017ec <RightMotor+0x23c>
					{
						pulse = cnt2 - cnt1;
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "RightPT3:%5d\0", pulsetotal);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e2:	492f      	ldr	r1, [pc, #188]	; (80018a0 <RightMotor+0x2f0>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fa19 	bl	8007c1c <siprintf>
 80017ea:	e00d      	b.n	8001808 <RightMotor+0x258>
					}
					else
					{
						pulse = (65535 - cnt1) + cnt2;
 80017ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80017f2:	33ff      	adds	r3, #255	; 0xff
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	643b      	str	r3, [r7, #64]	; 0x40
						sprintf(hello, "RightPT4:%5d\0", pulsetotal);
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001800:	4928      	ldr	r1, [pc, #160]	; (80018a4 <RightMotor+0x2f4>)
 8001802:	4618      	mov	r0, r3
 8001804:	f006 fa0a 	bl	8007c1c <siprintf>
					}
				}
				pulsetotal = (pulsetotal + pulse)%65535;
 8001808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	441a      	add	r2, r3
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <RightMotor+0x2f8>)
 8001810:	fba3 1302 	umull	r1, r3, r3, r2
 8001814:	0bd9      	lsrs	r1, r3, #15
 8001816:	460b      	mov	r3, r1
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	1a5b      	subs	r3, r3, r1
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
				OLED_ShowString(10,50,hello);
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	461a      	mov	r2, r3
 8001826:	2132      	movs	r1, #50	; 0x32
 8001828:	200a      	movs	r0, #10
 800182a:	f000 f9c1 	bl	8001bb0 <OLED_ShowString>
				cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <RightMotor+0x2d0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	647b      	str	r3, [r7, #68]	; 0x44
				tick = HAL_GetTick();
 8001836:	f000 fc87 	bl	8002148 <HAL_GetTick>
 800183a:	63f8      	str	r0, [r7, #60]	; 0x3c
		  }
	  }while(pulsetotal < pulseneeded);
 800183c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001840:	429a      	cmp	r2, r3
 8001842:	d384      	bcc.n	800174e <RightMotor+0x19e>
	  flagR = '1';
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <RightMotor+0x2d4>)
 8001846:	2231      	movs	r2, #49	; 0x31
 8001848:	701a      	strb	r2, [r3, #0]
	  Buffer[0] = 'd';
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <RightMotor+0x2d8>)
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	701a      	strb	r2, [r3, #0]
	  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <RightMotor+0x2c8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
	  osDelay(300);
 8001858:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800185c:	f003 fd2a 	bl	80052b4 <osDelay>
	  flagR = '0';
 8001860:	e6ce      	b.n	8001600 <RightMotor+0x50>
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	083126e9 	.word	0x083126e9
 800186c:	3fda1cac 	.word	0x3fda1cac
 8001870:	d70a3d71 	.word	0xd70a3d71
 8001874:	3fbd70a3 	.word	0x3fbd70a3
 8001878:	200049b4 	.word	0x200049b4
 800187c:	20004a8c 	.word	0x20004a8c
 8001880:	20004a44 	.word	0x20004a44
 8001884:	20004ad4 	.word	0x20004ad4
 8001888:	20004adc 	.word	0x20004adc
 800188c:	40020000 	.word	0x40020000
 8001890:	404d8000 	.word	0x404d8000
 8001894:	08008514 	.word	0x08008514
 8001898:	08008524 	.word	0x08008524
 800189c:	08008534 	.word	0x08008534
 80018a0:	08008544 	.word	0x08008544
 80018a4:	08008554 	.word	0x08008554
 80018a8:	80008001 	.word	0x80008001

080018ac <EncoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderL */
void EncoderL(void *argument)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderL */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f003 fcfd 	bl	80052b4 <osDelay>
 80018ba:	e7fb      	b.n	80018b4 <EncoderL+0x8>

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	460a      	mov	r2, r1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	4613      	mov	r3, r2
 80018d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d106      	bne.n	80018ec <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	481c      	ldr	r0, [pc, #112]	; (8001958 <OLED_WR_Byte+0x90>)
 80018e6:	f000 ff7b 	bl	80027e0 <HAL_GPIO_WritePin>
 80018ea:	e005      	b.n	80018f8 <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f2:	4819      	ldr	r0, [pc, #100]	; (8001958 <OLED_WR_Byte+0x90>)
 80018f4:	f000 ff74 	bl	80027e0 <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e01e      	b.n	800193c <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 80018fe:	2200      	movs	r2, #0
 8001900:	2120      	movs	r1, #32
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <OLED_WR_Byte+0x90>)
 8001904:	f000 ff6c 	bl	80027e0 <HAL_GPIO_WritePin>
		if(dat & 0x80)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da05      	bge.n	800191c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001910:	2201      	movs	r2, #1
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <OLED_WR_Byte+0x90>)
 8001916:	f000 ff63 	bl	80027e0 <HAL_GPIO_WritePin>
 800191a:	e004      	b.n	8001926 <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 800191c:	2200      	movs	r2, #0
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <OLED_WR_Byte+0x90>)
 8001922:	f000 ff5d 	bl	80027e0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001926:	2201      	movs	r2, #1
 8001928:	2120      	movs	r1, #32
 800192a:	480b      	ldr	r0, [pc, #44]	; (8001958 <OLED_WR_Byte+0x90>)
 800192c:	f000 ff58 	bl	80027e0 <HAL_GPIO_WritePin>
		dat <<= 1;
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9dd      	bls.n	80018fe <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <OLED_WR_Byte+0x90>)
 800194a:	f000 ff49 	bl	80027e0 <HAL_GPIO_WritePin>
} 
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001962:	2300      	movs	r3, #0
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	e026      	b.n	80019b6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	3b50      	subs	r3, #80	; 0x50
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffa9 	bl	80018c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ffa5 	bl	80018c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 800197e:	2100      	movs	r1, #0
 8001980:	2010      	movs	r0, #16
 8001982:	f7ff ffa1 	bl	80018c8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 8001986:	2300      	movs	r3, #0
 8001988:	71bb      	strb	r3, [r7, #6]
 800198a:	e00d      	b.n	80019a8 <OLED_Refresh_Gram+0x4c>
 800198c:	79ba      	ldrb	r2, [r7, #6]
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	490d      	ldr	r1, [pc, #52]	; (80019c8 <OLED_Refresh_Gram+0x6c>)
 8001992:	00d2      	lsls	r2, r2, #3
 8001994:	440a      	add	r2, r1
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff93 	bl	80018c8 <OLED_WR_Byte>
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	3301      	adds	r3, #1
 80019a6:	71bb      	strb	r3, [r7, #6]
 80019a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	daed      	bge.n	800198c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	3301      	adds	r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d9d5      	bls.n	8001968 <OLED_Refresh_Gram+0xc>
	}
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20004b34 	.word	0x20004b34

080019cc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e014      	b.n	8001a02 <OLED_Clear+0x36>
 80019d8:	2300      	movs	r3, #0
 80019da:	71bb      	strb	r3, [r7, #6]
 80019dc:	e00a      	b.n	80019f4 <OLED_Clear+0x28>
 80019de:	79ba      	ldrb	r2, [r7, #6]
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	490c      	ldr	r1, [pc, #48]	; (8001a14 <OLED_Clear+0x48>)
 80019e4:	00d2      	lsls	r2, r2, #3
 80019e6:	440a      	add	r2, r1
 80019e8:	4413      	add	r3, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	3301      	adds	r3, #1
 80019f2:	71bb      	strb	r3, [r7, #6]
 80019f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	daf0      	bge.n	80019de <OLED_Clear+0x12>
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	3301      	adds	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b07      	cmp	r3, #7
 8001a06:	d9e7      	bls.n	80019d8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001a08:	f7ff ffa8 	bl	800195c <OLED_Refresh_Gram>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20004b34 	.word	0x20004b34

08001a18 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	460b      	mov	r3, r1
 8001a24:	71bb      	strb	r3, [r7, #6]
 8001a26:	4613      	mov	r3, r2
 8001a28:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db41      	blt.n	8001aba <OLED_DrawPoint+0xa2>
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	2b3f      	cmp	r3, #63	; 0x3f
 8001a3a:	d83e      	bhi.n	8001aba <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	08db      	lsrs	r3, r3, #3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001a48:	79bb      	ldrb	r3, [r7, #6]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001a50:	7b7b      	ldrb	r3, [r7, #13]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2201      	movs	r2, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001a5e:	797b      	ldrb	r3, [r7, #5]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d012      	beq.n	8001a8a <OLED_DrawPoint+0x72>
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4917      	ldr	r1, [pc, #92]	; (8001ac8 <OLED_DrawPoint+0xb0>)
 8001a6a:	00d2      	lsls	r2, r2, #3
 8001a6c:	440a      	add	r2, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	7818      	ldrb	r0, [r3, #0]
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	7bf9      	ldrb	r1, [r7, #15]
 8001a78:	4301      	orrs	r1, r0
 8001a7a:	b2c8      	uxtb	r0, r1
 8001a7c:	4912      	ldr	r1, [pc, #72]	; (8001ac8 <OLED_DrawPoint+0xb0>)
 8001a7e:	00d2      	lsls	r2, r2, #3
 8001a80:	440a      	add	r2, r1
 8001a82:	4413      	add	r3, r2
 8001a84:	4602      	mov	r2, r0
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e018      	b.n	8001abc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <OLED_DrawPoint+0xb0>)
 8001a90:	00d2      	lsls	r2, r2, #3
 8001a92:	440a      	add	r2, r1
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25a      	sxtb	r2, r3
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	b259      	sxtb	r1, r3
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b2c8      	uxtb	r0, r1
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <OLED_DrawPoint+0xb0>)
 8001aae:	00d2      	lsls	r2, r2, #3
 8001ab0:	440a      	add	r2, r1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e000      	b.n	8001abc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8001aba:	bf00      	nop
}
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20004b34 	.word	0x20004b34

08001acc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	717b      	strb	r3, [r7, #5]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	3b20      	subs	r3, #32
 8001af2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	73bb      	strb	r3, [r7, #14]
 8001af8:	e04d      	b.n	8001b96 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001afa:	793b      	ldrb	r3, [r7, #4]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d10b      	bne.n	8001b18 <OLED_ShowChar+0x4c>
 8001b00:	797a      	ldrb	r2, [r7, #5]
 8001b02:	7bb9      	ldrb	r1, [r7, #14]
 8001b04:	4828      	ldr	r0, [pc, #160]	; (8001ba8 <OLED_ShowChar+0xdc>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4403      	add	r3, r0
 8001b10:	440b      	add	r3, r1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e007      	b.n	8001b28 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001b18:	797a      	ldrb	r2, [r7, #5]
 8001b1a:	7bbb      	ldrb	r3, [r7, #14]
 8001b1c:	4923      	ldr	r1, [pc, #140]	; (8001bac <OLED_ShowChar+0xe0>)
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	440a      	add	r2, r1
 8001b22:	4413      	add	r3, r2
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	737b      	strb	r3, [r7, #13]
 8001b2c:	e02d      	b.n	8001b8a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da07      	bge.n	8001b46 <OLED_ShowChar+0x7a>
 8001b36:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b3a:	79b9      	ldrb	r1, [r7, #6]
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff6a 	bl	8001a18 <OLED_DrawPoint>
 8001b44:	e00c      	b.n	8001b60 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	79b9      	ldrb	r1, [r7, #6]
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff5c 	bl	8001a18 <OLED_DrawPoint>
			temp<<=1;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
			y++;
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001b6c:	79ba      	ldrb	r2, [r7, #6]
 8001b6e:	7b3b      	ldrb	r3, [r7, #12]
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	793b      	ldrb	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d105      	bne.n	8001b84 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001b78:	7b3b      	ldrb	r3, [r7, #12]
 8001b7a:	71bb      	strb	r3, [r7, #6]
				x++;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
				break;
 8001b82:	e005      	b.n	8001b90 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001b84:	7b7b      	ldrb	r3, [r7, #13]
 8001b86:	3301      	adds	r3, #1
 8001b88:	737b      	strb	r3, [r7, #13]
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d9ce      	bls.n	8001b2e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	3301      	adds	r3, #1
 8001b94:	73bb      	strb	r3, [r7, #14]
 8001b96:	7bba      	ldrb	r2, [r7, #14]
 8001b98:	793b      	ldrb	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3ad      	bcc.n	8001afa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd90      	pop	{r4, r7, pc}
 8001ba8:	08008630 	.word	0x08008630
 8001bac:	08008aa4 	.word	0x08008aa4

08001bb0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	603a      	str	r2, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001bc0:	e01f      	b.n	8001c02 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b7a      	cmp	r3, #122	; 0x7a
 8001bc6:	d904      	bls.n	8001bd2 <OLED_ShowString+0x22>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	3310      	adds	r3, #16
 8001bd0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	2b3a      	cmp	r3, #58	; 0x3a
 8001bd6:	d905      	bls.n	8001be4 <OLED_ShowString+0x34>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	71fb      	strb	r3, [r7, #7]
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	71bb      	strb	r3, [r7, #6]
 8001be0:	f7ff fef4 	bl	80019cc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	79b9      	ldrb	r1, [r7, #6]
 8001bea:	79f8      	ldrb	r0, [r7, #7]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	f7ff ff6b 	bl	8001acc <OLED_ShowChar>
        x+=8;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	71fb      	strb	r3, [r7, #7]
        p++;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1db      	bne.n	8001bc2 <OLED_ShowString+0x12>
    }  
}	 
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_MspInit+0x54>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_MspInit+0x54>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_MspInit+0x54>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_MspInit+0x54>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_MspInit+0x54>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_MspInit+0x54>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	210f      	movs	r1, #15
 8001c56:	f06f 0001 	mvn.w	r0, #1
 8001c5a:	f000 fb5c 	bl	8002316 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08c      	sub	sp, #48	; 0x30
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_TIM_Base_MspInit+0xe8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12d      	bne.n	8001cea <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8001cc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <HAL_TIM_Base_MspInit+0xf0>)
 8001ce4:	f000 fbe0 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001ce8:	e030      	b.n	8001d4c <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_TIM_Base_MspInit+0xf4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d12b      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	6453      	str	r3, [r2, #68]	; 0x44
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_TIM_Base_MspInit+0xec>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4807      	ldr	r0, [pc, #28]	; (8001d64 <HAL_TIM_Base_MspInit+0xf8>)
 8001d48:	f000 fbae 	bl	80024a8 <HAL_GPIO_Init>
}
 8001d4c:	bf00      	nop
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40010000 	.word	0x40010000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010400 	.word	0x40010400
 8001d64:	40020800 	.word	0x40020800

08001d68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d88:	d14b      	bne.n	8001e22 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a3e      	ldr	r2, [pc, #248]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a37      	ldr	r2, [pc, #220]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4825      	ldr	r0, [pc, #148]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x128>)
 8001dfc:	f000 fb54 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e00:	2308      	movs	r3, #8
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e10:	2301      	movs	r3, #1
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481e      	ldr	r0, [pc, #120]	; (8001e94 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001e1c:	f000 fb44 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e20:	e030      	b.n	8001e84 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Encoder_MspInit+0x130>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d12b      	bne.n	8001e84 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x124>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e64:	23c0      	movs	r3, #192	; 0xc0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e74:	2302      	movs	r3, #2
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x128>)
 8001e80:	f000 fb12 	bl	80024a8 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40000400 	.word	0x40000400

08001e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <HAL_UART_MspInit+0x94>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d134      	bne.n	8001f28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_UART_MspInit+0x98>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ef6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4809      	ldr	r0, [pc, #36]	; (8001f38 <HAL_UART_MspInit+0x9c>)
 8001f14:	f000 fac8 	bl	80024a8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2105      	movs	r1, #5
 8001f1c:	2027      	movs	r0, #39	; 0x27
 8001f1e:	f000 f9fa 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f22:	2027      	movs	r0, #39	; 0x27
 8001f24:	f000 fa13 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40004800 	.word	0x40004800
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020800 	.word	0x40020800

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 f8d8 	bl	8002120 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f70:	f004 fdae 	bl	8006ad0 <xTaskGetSchedulerState>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f7a:	f005 fb95 	bl	80076a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <USART3_IRQHandler+0x10>)
 8001f8a:	f002 f9c1 	bl	8004310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200049fc 	.word	0x200049fc

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f005 fde8 	bl	8007b9c <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20020000 	.word	0x20020000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	20000090 	.word	0x20000090
 8002000:	20004f88 	.word	0x20004f88

08002004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002052:	f7ff ffd7 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f005 fda7 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7fe fd8b 	bl	8000b74 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800206c:	080090f0 	.word	0x080090f0
  ldr r2, =_sbss
 8002070:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002074:	20004f88 	.word	0x20004f88

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>
	...

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <HAL_Init+0x40>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <HAL_Init+0x40>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_Init+0x40>)
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_Init+0x40>)
 800209e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a4:	2003      	movs	r0, #3
 80020a6:	f000 f92b 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 f808 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b0:	f7ff fdb0 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x58>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f943 	bl	800236a <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f90b 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x5c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000000 	.word	0x20000000
 8002118:	20000008 	.word	0x20000008
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008
 8002144:	20004f34 	.word	0x20004f34

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20004f34 	.word	0x20004f34

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff29 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff3e 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff31 	bl	80021c4 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff feda 	bl	8002148 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d008      	beq.n	80023b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e052      	b.n	800245a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0216 	bic.w	r2, r2, #22
 80023c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <HAL_DMA_Abort+0x62>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0208 	bic.w	r2, r2, #8
 80023f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0201 	bic.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002404:	e013      	b.n	800242e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002406:	f7ff fe9f 	bl	8002148 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b05      	cmp	r3, #5
 8002412:	d90c      	bls.n	800242e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e015      	b.n	800245a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e4      	bne.n	8002406 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d004      	beq.n	8002480 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e00c      	b.n	800249a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2205      	movs	r2, #5
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e16b      	b.n	800279c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 815a 	bne.w	8002796 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d005      	beq.n	80024fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d130      	bne.n	800255c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b03      	cmp	r3, #3
 8002566:	d017      	beq.n	8002598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d123      	bne.n	80025ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	08da      	lsrs	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3208      	adds	r2, #8
 80025ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0203 	and.w	r2, r3, #3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80b4 	beq.w	8002796 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_GPIO_Init+0x30c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_GPIO_Init+0x30c>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_GPIO_Init+0x30c>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264a:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_GPIO_Init+0x310>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	; (80027bc <HAL_GPIO_Init+0x314>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02b      	beq.n	80026ce <HAL_GPIO_Init+0x226>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a51      	ldr	r2, [pc, #324]	; (80027c0 <HAL_GPIO_Init+0x318>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x222>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a50      	ldr	r2, [pc, #320]	; (80027c4 <HAL_GPIO_Init+0x31c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x21e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	; (80027c8 <HAL_GPIO_Init+0x320>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x21a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x216>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <HAL_GPIO_Init+0x328>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x212>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_GPIO_Init+0x32c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x20e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	; (80027d8 <HAL_GPIO_Init+0x330>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x20a>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00e      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026b2:	2308      	movs	r3, #8
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026b6:	2306      	movs	r3, #6
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x228>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	; (80027b8 <HAL_GPIO_Init+0x310>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_GPIO_Init+0x334>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002712:	4a32      	ldr	r2, [pc, #200]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002718:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_GPIO_Init+0x334>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_GPIO_Init+0x334>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002742:	4b26      	ldr	r3, [pc, #152]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_GPIO_Init+0x334>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002790:	4a12      	ldr	r2, [pc, #72]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f ae90 	bls.w	80024c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40021400 	.word	0x40021400
 80027d4:	40021800 	.word	0x40021800
 80027d8:	40021c00 	.word	0x40021c00
 80027dc:	40013c00 	.word	0x40013c00

080027e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
 80027ec:	4613      	mov	r3, r2
 80027ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f0:	787b      	ldrb	r3, [r7, #1]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f6:	887a      	ldrh	r2, [r7, #2]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027fc:	e003      	b.n	8002806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	041a      	lsls	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	041a      	lsls	r2, r3, #16
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43d9      	mvns	r1, r3
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	400b      	ands	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	619a      	str	r2, [r3, #24]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e264      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	4ba3      	ldr	r3, [pc, #652]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4ba0      	ldr	r3, [pc, #640]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b9d      	ldr	r3, [pc, #628]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b99      	ldr	r3, [pc, #612]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e23f      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b91      	ldr	r3, [pc, #580]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a90      	ldr	r2, [pc, #576]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b8b      	ldr	r3, [pc, #556]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a8a      	ldr	r2, [pc, #552]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a87      	ldr	r2, [pc, #540]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b84      	ldr	r3, [pc, #528]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a83      	ldr	r2, [pc, #524]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a80      	ldr	r2, [pc, #512]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff fc22 	bl	8002148 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fc1e 	bl	8002148 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e204      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fc0e 	bl	8002148 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fc0a 	bl	8002148 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f0      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295e:	4b65      	ldr	r3, [pc, #404]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b5f      	ldr	r3, [pc, #380]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b5c      	ldr	r3, [pc, #368]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c4      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4952      	ldr	r1, [pc, #328]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b4f      	ldr	r3, [pc, #316]	; (8002af8 <HAL_RCC_OscConfig+0x2b0>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7ff fbc3 	bl	8002148 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c6:	f7ff fbbf 	bl	8002148 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a5      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b46      	ldr	r3, [pc, #280]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4940      	ldr	r1, [pc, #256]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_OscConfig+0x2b0>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7ff fba2 	bl	8002148 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a08:	f7ff fb9e 	bl	8002148 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e184      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d030      	beq.n	8002a94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x2b4>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7ff fb82 	bl	8002148 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7ff fb7e 	bl	8002148 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e164      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e015      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x2b4>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fb6b 	bl	8002148 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a76:	f7ff fb67 	bl	8002148 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e14d      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a0 	beq.w	8002be2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_OscConfig+0x2b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d121      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_OscConfig+0x2b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_RCC_OscConfig+0x2b8>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7ff fb2d 	bl	8002148 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e011      	b.n	8002b16 <HAL_RCC_OscConfig+0x2ce>
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	42470000 	.word	0x42470000
 8002afc:	42470e80 	.word	0x42470e80
 8002b00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7ff fb20 	bl	8002148 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e106      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x4e4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_RCC_OscConfig+0x2f0>
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a80      	ldr	r2, [pc, #512]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e01c      	b.n	8002b72 <HAL_RCC_OscConfig+0x32a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d10c      	bne.n	8002b5a <HAL_RCC_OscConfig+0x312>
 8002b40:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a7a      	ldr	r2, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b50:	4a77      	ldr	r2, [pc, #476]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	; 0x70
 8002b58:	e00b      	b.n	8002b72 <HAL_RCC_OscConfig+0x32a>
 8002b5a:	4b75      	ldr	r3, [pc, #468]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a74      	ldr	r2, [pc, #464]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a71      	ldr	r2, [pc, #452]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	f023 0304 	bic.w	r3, r3, #4
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d015      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fae5 	bl	8002148 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7ff fae1 	bl	8002148 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0c5      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ee      	beq.n	8002b82 <HAL_RCC_OscConfig+0x33a>
 8002ba4:	e014      	b.n	8002bd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7ff facf 	bl	8002148 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff facb 	bl	8002148 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0af      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd0:	7dfb      	ldrb	r3, [r7, #23]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 809b 	beq.w	8002d22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d05c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d141      	bne.n	8002c84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	4b4c      	ldr	r3, [pc, #304]	; (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7ff fa9f 	bl	8002148 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7ff fa9b 	bl	8002148 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e081      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	019b      	lsls	r3, r3, #6
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	3b01      	subs	r3, #1
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	4937      	ldr	r1, [pc, #220]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fa74 	bl	8002148 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c64:	f7ff fa70 	bl	8002148 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e056      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x41c>
 8002c82:	e04e      	b.n	8002d22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7ff fa5d 	bl	8002148 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c92:	f7ff fa59 	bl	8002148 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e03f      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x44a>
 8002cb0:	e037      	b.n	8002d22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e032      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d028      	beq.n	8002d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d121      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d11a      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cee:	4013      	ands	r3, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d111      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	42470060 	.word	0x42470060

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7ff f98e 	bl	8002148 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7ff f98a 	bl	8002148 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	; (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f8ee 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08009094 	.word	0x08009094
 8002efc:	20000000 	.word	0x20000000
 8002f00:	20000004 	.word	0x20000004

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6079      	str	r1, [r7, #4]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	60f9      	str	r1, [r7, #12]
 8002f12:	2100      	movs	r1, #0
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f16:	2100      	movs	r1, #0
 8002f18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1a:	4952      	ldr	r1, [pc, #328]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f1c:	6889      	ldr	r1, [r1, #8]
 8002f1e:	f001 010c 	and.w	r1, r1, #12
 8002f22:	2908      	cmp	r1, #8
 8002f24:	d00d      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x3e>
 8002f26:	2908      	cmp	r1, #8
 8002f28:	f200 8094 	bhi.w	8003054 <HAL_RCC_GetSysClockFreq+0x150>
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_RCC_GetSysClockFreq+0x32>
 8002f30:	2904      	cmp	r1, #4
 8002f32:	d003      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x38>
 8002f34:	e08e      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f36:	4b4c      	ldr	r3, [pc, #304]	; (8003068 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f38:	60bb      	str	r3, [r7, #8]
       break;
 8002f3a:	e08e      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f3e:	60bb      	str	r3, [r7, #8]
      break;
 8002f40:	e08b      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f42:	4948      	ldr	r1, [pc, #288]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f44:	6849      	ldr	r1, [r1, #4]
 8002f46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002f4a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4c:	4945      	ldr	r1, [pc, #276]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f4e:	6849      	ldr	r1, [r1, #4]
 8002f50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002f54:	2900      	cmp	r1, #0
 8002f56:	d024      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f58:	4942      	ldr	r1, [pc, #264]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f5a:	6849      	ldr	r1, [r1, #4]
 8002f5c:	0989      	lsrs	r1, r1, #6
 8002f5e:	4608      	mov	r0, r1
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f68:	f04f 0500 	mov.w	r5, #0
 8002f6c:	ea00 0204 	and.w	r2, r0, r4
 8002f70:	ea01 0305 	and.w	r3, r1, r5
 8002f74:	493d      	ldr	r1, [pc, #244]	; (800306c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f76:	fb01 f003 	mul.w	r0, r1, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	fb01 f102 	mul.w	r1, r1, r2
 8002f80:	1844      	adds	r4, r0, r1
 8002f82:	493a      	ldr	r1, [pc, #232]	; (800306c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f84:	fba2 0101 	umull	r0, r1, r2, r1
 8002f88:	1863      	adds	r3, r4, r1
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	f7fd fc72 	bl	800087c <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e04a      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa2:	4b30      	ldr	r3, [pc, #192]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	099b      	lsrs	r3, r3, #6
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	ea02 0400 	and.w	r4, r2, r0
 8002fba:	ea03 0501 	and.w	r5, r3, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	014b      	lsls	r3, r1, #5
 8002fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fd0:	0142      	lsls	r2, r0, #5
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	1b00      	subs	r0, r0, r4
 8002fd8:	eb61 0105 	sbc.w	r1, r1, r5
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	018b      	lsls	r3, r1, #6
 8002fe6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fea:	0182      	lsls	r2, r0, #6
 8002fec:	1a12      	subs	r2, r2, r0
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	00d9      	lsls	r1, r3, #3
 8002ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003000:	00d0      	lsls	r0, r2, #3
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	1912      	adds	r2, r2, r4
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	f04f 0000 	mov.w	r0, #0
 8003010:	f04f 0100 	mov.w	r1, #0
 8003014:	0299      	lsls	r1, r3, #10
 8003016:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800301a:	0290      	lsls	r0, r2, #10
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	f7fd fc26 	bl	800087c <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4613      	mov	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003038:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_RCC_GetSysClockFreq+0x160>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	3301      	adds	r3, #1
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	60bb      	str	r3, [r7, #8]
      break;
 8003052:	e002      	b.n	800305a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <HAL_RCC_GetSysClockFreq+0x164>)
 8003056:	60bb      	str	r3, [r7, #8]
      break;
 8003058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305a:	68bb      	ldr	r3, [r7, #8]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	00f42400 	.word	0x00f42400
 800306c:	017d7840 	.word	0x017d7840

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_GetHCLKFreq+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800308c:	f7ff fff0 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003090:	4602      	mov	r2, r0
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	4903      	ldr	r1, [pc, #12]	; (80030ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800309e:	5ccb      	ldrb	r3, [r1, r3]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023800 	.word	0x40023800
 80030ac:	080090a4 	.word	0x080090a4

080030b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030b4:	f7ff ffdc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0b5b      	lsrs	r3, r3, #13
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c6:	5ccb      	ldrb	r3, [r1, r3]
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	080090a4 	.word	0x080090a4

080030d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e041      	b.n	800316e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fdb4 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4610      	mov	r0, r2
 8003118:	f000 fc0c 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e041      	b.n	800320c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f839 	bl	8003214 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3304      	adds	r3, #4
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fbbd 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_TIM_PWM_Start+0x24>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e022      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b04      	cmp	r3, #4
 8003250:	d109      	bne.n	8003266 <HAL_TIM_PWM_Start+0x3e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e015      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d109      	bne.n	8003280 <HAL_TIM_PWM_Start+0x58>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	e008      	b.n	8003292 <HAL_TIM_PWM_Start+0x6a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	bf14      	ite	ne
 800328c:	2301      	movne	r3, #1
 800328e:	2300      	moveq	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07c      	b.n	8003394 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start+0x82>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	e013      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_PWM_Start+0x92>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b8:	e00b      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d104      	bne.n	80032ca <HAL_TIM_PWM_Start+0xa2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	e003      	b.n	80032d2 <HAL_TIM_PWM_Start+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2201      	movs	r2, #1
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fe14 	bl	8003f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_TIM_PWM_Start+0x174>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_PWM_Start+0xcc>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <HAL_TIM_PWM_Start+0x178>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d101      	bne.n	80032f8 <HAL_TIM_PWM_Start+0xd0>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <HAL_TIM_PWM_Start+0xd2>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_TIM_PWM_Start+0x174>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d01d      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_TIM_PWM_Start+0x17c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_TIM_PWM_Start+0x180>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <HAL_TIM_PWM_Start+0x184>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_TIM_PWM_Start+0x178>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_TIM_PWM_Start+0x188>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIM_PWM_Start+0x136>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_TIM_PWM_Start+0x18c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b06      	cmp	r3, #6
 800336e:	d010      	beq.n	8003392 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	e007      	b.n	8003392 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40010000 	.word	0x40010000
 80033a0:	40010400 	.word	0x40010400
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40001800 	.word	0x40001800

080033b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e097      	b.n	80034fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d106      	bne.n	80033e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe fcc1 	bl	8001d68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033fc:	f023 0307 	bic.w	r3, r3, #7
 8003400:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f000 fa91 	bl	8003934 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	4313      	orrs	r3, r2
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003458:	f023 030c 	bic.w	r3, r3, #12
 800345c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	011a      	lsls	r2, r3, #4
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	4313      	orrs	r3, r2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4313      	orrs	r3, r2
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800351c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003524:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800352c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800353a:	7b7b      	ldrb	r3, [r7, #13]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d001      	beq.n	8003544 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e069      	b.n	8003618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003554:	e031      	b.n	80035ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b04      	cmp	r3, #4
 800355a:	d110      	bne.n	800357e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800355c:	7bbb      	ldrb	r3, [r7, #14]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d102      	bne.n	8003568 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003562:	7b3b      	ldrb	r3, [r7, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e055      	b.n	8003618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800357c:	e01d      	b.n	80035ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d105      	bne.n	8003596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800358a:	7b7b      	ldrb	r3, [r7, #13]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003590:	7b3b      	ldrb	r3, [r7, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e03e      	b.n	8003618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_TIM_Encoder_Start+0xc4>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d008      	beq.n	80035d8 <HAL_TIM_Encoder_Start+0xd4>
 80035c6:	e00f      	b.n	80035e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fc99 	bl	8003f08 <TIM_CCxChannelCmd>
      break;
 80035d6:	e016      	b.n	8003606 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	2104      	movs	r1, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fc91 	bl	8003f08 <TIM_CCxChannelCmd>
      break;
 80035e6:	e00e      	b.n	8003606 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	2100      	movs	r1, #0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fc89 	bl	8003f08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	2104      	movs	r1, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc82 	bl	8003f08 <TIM_CCxChannelCmd>
      break;
 8003604:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800363a:	2302      	movs	r3, #2
 800363c:	e0ae      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b0c      	cmp	r3, #12
 800364a:	f200 809f 	bhi.w	800378c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800364e:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	08003689 	.word	0x08003689
 8003658:	0800378d 	.word	0x0800378d
 800365c:	0800378d 	.word	0x0800378d
 8003660:	0800378d 	.word	0x0800378d
 8003664:	080036c9 	.word	0x080036c9
 8003668:	0800378d 	.word	0x0800378d
 800366c:	0800378d 	.word	0x0800378d
 8003670:	0800378d 	.word	0x0800378d
 8003674:	0800370b 	.word	0x0800370b
 8003678:	0800378d 	.word	0x0800378d
 800367c:	0800378d 	.word	0x0800378d
 8003680:	0800378d 	.word	0x0800378d
 8003684:	0800374b 	.word	0x0800374b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f9f0 	bl	8003a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699a      	ldr	r2, [r3, #24]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0208 	orr.w	r2, r2, #8
 80036a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0204 	bic.w	r2, r2, #4
 80036b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6999      	ldr	r1, [r3, #24]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	619a      	str	r2, [r3, #24]
      break;
 80036c6:	e064      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fa40 	bl	8003b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
      break;
 8003708:	e043      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fa95 	bl	8003c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0208 	orr.w	r2, r2, #8
 8003724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0204 	bic.w	r2, r2, #4
 8003734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69d9      	ldr	r1, [r3, #28]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	61da      	str	r2, [r3, #28]
      break;
 8003748:	e023      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fae9 	bl	8003d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69d9      	ldr	r1, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	021a      	lsls	r2, r3, #8
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	61da      	str	r2, [r3, #28]
      break;
 800378a:	e002      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
      break;
 8003790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_ConfigClockSource+0x1c>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0b4      	b.n	800392a <HAL_TIM_ConfigClockSource+0x186>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xd4>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8086 	beq.w	8003916 <HAL_TIM_ConfigClockSource+0x172>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xa6>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x11a>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xfa>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x13a>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x15a>
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 fb35 	bl	8003ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04f      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 fb1e 	bl	8003ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fa92 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 faeb 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 fab1 	bl	8003e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fadb 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 fa72 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 facb 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fac2 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 800390e:	e003      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e000      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d027      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	40001c00 	.word	0x40001c00
 8003a70:	40002000 	.word	0x40002000

08003a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f023 0201 	bic.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0303 	bic.w	r3, r3, #3
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0302 	bic.w	r3, r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <TIM_OC1_SetConfig+0xd8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_OC1_SetConfig+0x64>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <TIM_OC1_SetConfig+0xdc>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10c      	bne.n	8003af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0308 	bic.w	r3, r3, #8
 8003ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a15      	ldr	r2, [pc, #84]	; (8003b4c <TIM_OC1_SetConfig+0xd8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC1_SetConfig+0x8e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <TIM_OC1_SetConfig+0xdc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d111      	bne.n	8003b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40010000 	.word	0x40010000
 8003b50:	40010400 	.word	0x40010400

08003b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f023 0210 	bic.w	r2, r3, #16
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f023 0320 	bic.w	r3, r3, #32
 8003b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <TIM_OC2_SetConfig+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_OC2_SetConfig+0x68>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <TIM_OC2_SetConfig+0xe8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10d      	bne.n	8003bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <TIM_OC2_SetConfig+0xe4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_OC2_SetConfig+0x94>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <TIM_OC2_SetConfig+0xe8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d113      	bne.n	8003c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010400 	.word	0x40010400

08003c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <TIM_OC3_SetConfig+0xe0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d003      	beq.n	8003ca6 <TIM_OC3_SetConfig+0x66>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	; (8003d24 <TIM_OC3_SetConfig+0xe4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10d      	bne.n	8003cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <TIM_OC3_SetConfig+0xe0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x92>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a15      	ldr	r2, [pc, #84]	; (8003d24 <TIM_OC3_SetConfig+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40010000 	.word	0x40010000
 8003d24:	40010400 	.word	0x40010400

08003d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <TIM_OC4_SetConfig+0xa4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_OC4_SetConfig+0x68>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <TIM_OC4_SetConfig+0xa8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d109      	bne.n	8003da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	019b      	lsls	r3, r3, #6
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 030a 	bic.w	r3, r3, #10
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0210 	bic.w	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	031b      	lsls	r3, r3, #12
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f043 0307 	orr.w	r3, r3, #7
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e05a      	b.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1a      	ldr	r2, [pc, #104]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a17      	ldr	r2, [pc, #92]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10c      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4313      	orrs	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40000c00 	.word	0x40000c00
 8004040:	40010400 	.word	0x40010400
 8004044:	40014000 	.word	0x40014000
 8004048:	40001800 	.word	0x40001800

0800404c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004064:	2302      	movs	r3, #2
 8004066:	e03d      	b.n	80040e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e03f      	b.n	8004182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd fec0 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fde5 	bl	8004d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b08a      	sub	sp, #40	; 0x28
 800418e:	af02      	add	r7, sp, #8
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d17c      	bne.n	80042a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_Transmit+0x2c>
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e075      	b.n	80042a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Transmit+0x3e>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e06e      	b.n	80042a6 <HAL_UART_Transmit+0x11c>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2221      	movs	r2, #33	; 0x21
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041de:	f7fd ffb3 	bl	8002148 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d108      	bne.n	800420c <HAL_UART_Transmit+0x82>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e003      	b.n	8004214 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800421c:	e02a      	b.n	8004274 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2200      	movs	r2, #0
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fb29 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e036      	b.n	80042a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3302      	adds	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e007      	b.n	8004266 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1cf      	bne.n	800421e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	2140      	movs	r1, #64	; 0x40
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 faf9 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e006      	b.n	80042a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	4613      	mov	r3, r2
 80042ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d11d      	bne.n	8004304 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Receive_IT+0x26>
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e016      	b.n	8004306 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Receive_IT+0x38>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e00f      	b.n	8004306 <HAL_UART_Receive_IT+0x58>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fb2e 	bl	800495c <UART_Start_Receive_IT>
 8004300:	4603      	mov	r3, r0
 8004302:	e000      	b.n	8004306 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b0ba      	sub	sp, #232	; 0xe8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800434e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_UART_IRQHandler+0x66>
 8004362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fc0d 	bl	8004b8e <UART_Receive_IT>
      return;
 8004374:	e256      	b.n	8004824 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 80de 	beq.w	800453c <HAL_UART_IRQHandler+0x22c>
 8004380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d106      	bne.n	800439a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80d1 	beq.w	800453c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800439a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_UART_IRQHandler+0xae>
 80043a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f043 0201 	orr.w	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_UART_IRQHandler+0xd2>
 80043ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0202 	orr.w	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xf6>
 80043ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <HAL_UART_IRQHandler+0x126>
 8004412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800441e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0208 	orr.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 81ed 	beq.w	800481a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_UART_IRQHandler+0x14e>
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb98 	bl	8004b8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_UART_IRQHandler+0x17a>
 8004482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d04f      	beq.n	800452a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 faa0 	bl	80049d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b40      	cmp	r3, #64	; 0x40
 800449c:	d141      	bne.n	8004522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3314      	adds	r3, #20
 80044c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1d9      	bne.n	800449e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d013      	beq.n	800451a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	4a7d      	ldr	r2, [pc, #500]	; (80046ec <HAL_UART_IRQHandler+0x3dc>)
 80044f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd ffaf 	bl	8002462 <HAL_DMA_Abort_IT>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004514:	4610      	mov	r0, r2
 8004516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e00e      	b.n	8004538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f99a 	bl	8004854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e00a      	b.n	8004538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f996 	bl	8004854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	e006      	b.n	8004538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f992 	bl	8004854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004536:	e170      	b.n	800481a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004538:	bf00      	nop
    return;
 800453a:	e16e      	b.n	800481a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b01      	cmp	r3, #1
 8004542:	f040 814a 	bne.w	80047da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 8143 	beq.w	80047da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 813c 	beq.w	80047da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	f040 80b4 	bne.w	80046f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8140 	beq.w	800481e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045a6:	429a      	cmp	r2, r3
 80045a8:	f080 8139 	bcs.w	800481e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	f000 8088 	beq.w	80046d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1d9      	bne.n	80045c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800461e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004632:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004636:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800463a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e1      	bne.n	800460e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3314      	adds	r3, #20
 8004650:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3314      	adds	r3, #20
 800466a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800466e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004670:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800467c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e3      	bne.n	800464a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80046b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e3      	bne.n	8004690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fd fe58 	bl	8002382 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8c0 	bl	8004868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046e8:	e099      	b.n	800481e <HAL_UART_IRQHandler+0x50e>
 80046ea:	bf00      	nop
 80046ec:	08004a97 	.word	0x08004a97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 808b 	beq.w	8004822 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800470c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8086 	beq.w	8004822 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800472c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800473a:	647a      	str	r2, [r7, #68]	; 0x44
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004742:	e841 2300 	strex	r3, r2, [r1]
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1e3      	bne.n	8004716 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	623b      	str	r3, [r7, #32]
   return(result);
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3314      	adds	r3, #20
 800476e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004772:	633a      	str	r2, [r7, #48]	; 0x30
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e3      	bne.n	800474e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0310 	bic.w	r3, r3, #16
 80047aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	330c      	adds	r3, #12
 80047b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047b8:	61fa      	str	r2, [r7, #28]
 80047ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69b9      	ldr	r1, [r7, #24]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	617b      	str	r3, [r7, #20]
   return(result);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e3      	bne.n	8004794 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f848 	bl	8004868 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047d8:	e023      	b.n	8004822 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_UART_IRQHandler+0x4ea>
 80047e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f963 	bl	8004abe <UART_Transmit_IT>
    return;
 80047f8:	e014      	b.n	8004824 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <HAL_UART_IRQHandler+0x514>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f9a3 	bl	8004b5e <UART_EndTransmit_IT>
    return;
 8004818:	e004      	b.n	8004824 <HAL_UART_IRQHandler+0x514>
    return;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_UART_IRQHandler+0x514>
      return;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_UART_IRQHandler+0x514>
      return;
 8004822:	bf00      	nop
  }
}
 8004824:	37e8      	adds	r7, #232	; 0xe8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop

0800482c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b090      	sub	sp, #64	; 0x40
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	e050      	b.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d04c      	beq.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a0:	f7fd fc52 	bl	8002148 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d241      	bcs.n	8004934 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d0:	637a      	str	r2, [r7, #52]	; 0x34
 80048d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e5      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	613b      	str	r3, [r7, #16]
   return(result);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004904:	623a      	str	r2, [r7, #32]
 8004906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	69f9      	ldr	r1, [r7, #28]
 800490a:	6a3a      	ldr	r2, [r7, #32]
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	61bb      	str	r3, [r7, #24]
   return(result);
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e5      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e00f      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	461a      	mov	r2, r3
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	429a      	cmp	r2, r3
 8004950:	d09f      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3740      	adds	r7, #64	; 0x40
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	88fa      	ldrh	r2, [r7, #6]
 8004974:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2222      	movs	r2, #34	; 0x22
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b095      	sub	sp, #84	; 0x54
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049f8:	643a      	str	r2, [r7, #64]	; 0x40
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d119      	bne.n	8004a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a68:	61ba      	str	r2, [r7, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6979      	ldr	r1, [r7, #20]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	613b      	str	r3, [r7, #16]
   return(result);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a8a:	bf00      	nop
 8004a8c:	3754      	adds	r7, #84	; 0x54
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fecf 	bl	8004854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b21      	cmp	r3, #33	; 0x21
 8004ad0:	d13e      	bne.n	8004b50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ada:	d114      	bne.n	8004b06 <UART_Transmit_IT+0x48>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d110      	bne.n	8004b06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	1c9a      	adds	r2, r3, #2
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]
 8004b04:	e008      	b.n	8004b18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6211      	str	r1, [r2, #32]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4619      	mov	r1, r3
 8004b26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10f      	bne.n	8004b4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
  }
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fe54 	bl	800482c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b08c      	sub	sp, #48	; 0x30
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b22      	cmp	r3, #34	; 0x22
 8004ba0:	f040 80ab 	bne.w	8004cfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bac:	d117      	bne.n	8004bde <UART_Receive_IT+0x50>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
 8004bdc:	e026      	b.n	8004c2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d007      	beq.n	8004c02 <UART_Receive_IT+0x74>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <UART_Receive_IT+0x82>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e008      	b.n	8004c22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d15a      	bne.n	8004cf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0220 	bic.w	r2, r2, #32
 8004c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d135      	bne.n	8004cec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	613b      	str	r3, [r7, #16]
   return(result);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f023 0310 	bic.w	r3, r3, #16
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	623a      	str	r2, [r7, #32]
 8004ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d10a      	bne.n	8004cde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7ff fdbf 	bl	8004868 <HAL_UARTEx_RxEventCallback>
 8004cea:	e002      	b.n	8004cf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fda7 	bl	8004840 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e002      	b.n	8004cfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e000      	b.n	8004cfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3730      	adds	r7, #48	; 0x30
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d08:	b09f      	sub	sp, #124	; 0x7c
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	68d9      	ldr	r1, [r3, #12]
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	ea40 0301 	orr.w	r3, r0, r1
 8004d24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d48:	f021 010c 	bic.w	r1, r1, #12
 8004d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d52:	430b      	orrs	r3, r1
 8004d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	6999      	ldr	r1, [r3, #24]
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	ea40 0301 	orr.w	r3, r0, r1
 8004d6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4bc5      	ldr	r3, [pc, #788]	; (8005088 <UART_SetConfig+0x384>)
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d004      	beq.n	8004d82 <UART_SetConfig+0x7e>
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4bc3      	ldr	r3, [pc, #780]	; (800508c <UART_SetConfig+0x388>)
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d103      	bne.n	8004d8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d82:	f7fe f995 	bl	80030b0 <HAL_RCC_GetPCLK2Freq>
 8004d86:	6778      	str	r0, [r7, #116]	; 0x74
 8004d88:	e002      	b.n	8004d90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d8a:	f7fe f97d 	bl	8003088 <HAL_RCC_GetPCLK1Freq>
 8004d8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d98:	f040 80b6 	bne.w	8004f08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d9e:	461c      	mov	r4, r3
 8004da0:	f04f 0500 	mov.w	r5, #0
 8004da4:	4622      	mov	r2, r4
 8004da6:	462b      	mov	r3, r5
 8004da8:	1891      	adds	r1, r2, r2
 8004daa:	6439      	str	r1, [r7, #64]	; 0x40
 8004dac:	415b      	adcs	r3, r3
 8004dae:	647b      	str	r3, [r7, #68]	; 0x44
 8004db0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004db4:	1912      	adds	r2, r2, r4
 8004db6:	eb45 0303 	adc.w	r3, r5, r3
 8004dba:	f04f 0000 	mov.w	r0, #0
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	00d9      	lsls	r1, r3, #3
 8004dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dc8:	00d0      	lsls	r0, r2, #3
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	1911      	adds	r1, r2, r4
 8004dd0:	6639      	str	r1, [r7, #96]	; 0x60
 8004dd2:	416b      	adcs	r3, r5
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	1891      	adds	r1, r2, r2
 8004de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004de4:	415b      	adcs	r3, r3
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004df0:	f7fb fd44 	bl	800087c <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4ba5      	ldr	r3, [pc, #660]	; (8005090 <UART_SetConfig+0x38c>)
 8004dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	011e      	lsls	r6, r3, #4
 8004e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e04:	461c      	mov	r4, r3
 8004e06:	f04f 0500 	mov.w	r5, #0
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	462b      	mov	r3, r5
 8004e0e:	1891      	adds	r1, r2, r2
 8004e10:	6339      	str	r1, [r7, #48]	; 0x30
 8004e12:	415b      	adcs	r3, r3
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
 8004e16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e1a:	1912      	adds	r2, r2, r4
 8004e1c:	eb45 0303 	adc.w	r3, r5, r3
 8004e20:	f04f 0000 	mov.w	r0, #0
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	00d9      	lsls	r1, r3, #3
 8004e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e2e:	00d0      	lsls	r0, r2, #3
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	1911      	adds	r1, r2, r4
 8004e36:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e38:	416b      	adcs	r3, r5
 8004e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e56:	f7fb fd11 	bl	800087c <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4b8c      	ldr	r3, [pc, #560]	; (8005090 <UART_SetConfig+0x38c>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	2164      	movs	r1, #100	; 0x64
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	3332      	adds	r3, #50	; 0x32
 8004e72:	4a87      	ldr	r2, [pc, #540]	; (8005090 <UART_SetConfig+0x38c>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e80:	441e      	add	r6, r3
 8004e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e84:	4618      	mov	r0, r3
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	1894      	adds	r4, r2, r2
 8004e90:	623c      	str	r4, [r7, #32]
 8004e92:	415b      	adcs	r3, r3
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
 8004e96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e9a:	1812      	adds	r2, r2, r0
 8004e9c:	eb41 0303 	adc.w	r3, r1, r3
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	f04f 0500 	mov.w	r5, #0
 8004ea8:	00dd      	lsls	r5, r3, #3
 8004eaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eae:	00d4      	lsls	r4, r2, #3
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	1814      	adds	r4, r2, r0
 8004eb6:	653c      	str	r4, [r7, #80]	; 0x50
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	657b      	str	r3, [r7, #84]	; 0x54
 8004ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	1891      	adds	r1, r2, r2
 8004ec8:	61b9      	str	r1, [r7, #24]
 8004eca:	415b      	adcs	r3, r3
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ed6:	f7fb fcd1 	bl	800087c <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <UART_SetConfig+0x38c>)
 8004ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	2164      	movs	r1, #100	; 0x64
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	3332      	adds	r3, #50	; 0x32
 8004ef2:	4a67      	ldr	r2, [pc, #412]	; (8005090 <UART_SetConfig+0x38c>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	f003 0207 	and.w	r2, r3, #7
 8004efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4432      	add	r2, r6
 8004f04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f06:	e0b9      	b.n	800507c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0a:	461c      	mov	r4, r3
 8004f0c:	f04f 0500 	mov.w	r5, #0
 8004f10:	4622      	mov	r2, r4
 8004f12:	462b      	mov	r3, r5
 8004f14:	1891      	adds	r1, r2, r2
 8004f16:	6139      	str	r1, [r7, #16]
 8004f18:	415b      	adcs	r3, r3
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f20:	1912      	adds	r2, r2, r4
 8004f22:	eb45 0303 	adc.w	r3, r5, r3
 8004f26:	f04f 0000 	mov.w	r0, #0
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	00d9      	lsls	r1, r3, #3
 8004f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f34:	00d0      	lsls	r0, r2, #3
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	eb12 0804 	adds.w	r8, r2, r4
 8004f3e:	eb43 0905 	adc.w	r9, r3, r5
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	008b      	lsls	r3, r1, #2
 8004f56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f5a:	0082      	lsls	r2, r0, #2
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f7fb fc8c 	bl	800087c <__aeabi_uldivmod>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4b49      	ldr	r3, [pc, #292]	; (8005090 <UART_SetConfig+0x38c>)
 8004f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	011e      	lsls	r6, r3, #4
 8004f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f74:	4618      	mov	r0, r3
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	1894      	adds	r4, r2, r2
 8004f80:	60bc      	str	r4, [r7, #8]
 8004f82:	415b      	adcs	r3, r3
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8a:	1812      	adds	r2, r2, r0
 8004f8c:	eb41 0303 	adc.w	r3, r1, r3
 8004f90:	f04f 0400 	mov.w	r4, #0
 8004f94:	f04f 0500 	mov.w	r5, #0
 8004f98:	00dd      	lsls	r5, r3, #3
 8004f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f9e:	00d4      	lsls	r4, r2, #3
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	1814      	adds	r4, r2, r0
 8004fa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004fa8:	414b      	adcs	r3, r1
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	008b      	lsls	r3, r1, #2
 8004fc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fc4:	0082      	lsls	r2, r0, #2
 8004fc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fca:	f7fb fc57 	bl	800087c <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <UART_SetConfig+0x38c>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	; 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	3332      	adds	r3, #50	; 0x32
 8004fe6:	4a2a      	ldr	r2, [pc, #168]	; (8005090 <UART_SetConfig+0x38c>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ff2:	441e      	add	r6, r3
 8004ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f04f 0100 	mov.w	r1, #0
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	1894      	adds	r4, r2, r2
 8005002:	603c      	str	r4, [r7, #0]
 8005004:	415b      	adcs	r3, r3
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500c:	1812      	adds	r2, r2, r0
 800500e:	eb41 0303 	adc.w	r3, r1, r3
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	f04f 0500 	mov.w	r5, #0
 800501a:	00dd      	lsls	r5, r3, #3
 800501c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005020:	00d4      	lsls	r4, r2, #3
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	eb12 0a00 	adds.w	sl, r2, r0
 800502a:	eb43 0b01 	adc.w	fp, r3, r1
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4618      	mov	r0, r3
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	008b      	lsls	r3, r1, #2
 8005042:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005046:	0082      	lsls	r2, r0, #2
 8005048:	4650      	mov	r0, sl
 800504a:	4659      	mov	r1, fp
 800504c:	f7fb fc16 	bl	800087c <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <UART_SetConfig+0x38c>)
 8005056:	fba3 1302 	umull	r1, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2164      	movs	r1, #100	; 0x64
 800505e:	fb01 f303 	mul.w	r3, r1, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	3332      	adds	r3, #50	; 0x32
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <UART_SetConfig+0x38c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f003 020f 	and.w	r2, r3, #15
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4432      	add	r2, r6
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	377c      	adds	r7, #124	; 0x7c
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005086:	bf00      	nop
 8005088:	40011000 	.word	0x40011000
 800508c:	40011400 	.word	0x40011400
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <__NVIC_SetPriority>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db0a      	blt.n	80050be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	490c      	ldr	r1, [pc, #48]	; (80050e0 <__NVIC_SetPriority+0x4c>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	440b      	add	r3, r1
 80050b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050bc:	e00a      	b.n	80050d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <__NVIC_SetPriority+0x50>)
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	3b04      	subs	r3, #4
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	440b      	add	r3, r1
 80050d2:	761a      	strb	r2, [r3, #24]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000e100 	.word	0xe000e100
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050ec:	2100      	movs	r1, #0
 80050ee:	f06f 0004 	mvn.w	r0, #4
 80050f2:	f7ff ffcf 	bl	8005094 <__NVIC_SetPriority>
#endif
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005102:	f3ef 8305 	mrs	r3, IPSR
 8005106:	603b      	str	r3, [r7, #0]
  return(result);
 8005108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800510e:	f06f 0305 	mvn.w	r3, #5
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	e00c      	b.n	8005130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <osKernelInitialize+0x44>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <osKernelInitialize+0x44>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	607b      	str	r3, [r7, #4]
 8005128:	e002      	b.n	8005130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005130:	687b      	ldr	r3, [r7, #4]
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000094 	.word	0x20000094

08005144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800514a:	f3ef 8305 	mrs	r3, IPSR
 800514e:	603b      	str	r3, [r7, #0]
  return(result);
 8005150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005156:	f06f 0305 	mvn.w	r3, #5
 800515a:	607b      	str	r3, [r7, #4]
 800515c:	e010      	b.n	8005180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <osKernelStart+0x48>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d109      	bne.n	800517a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005166:	f7ff ffbf 	bl	80050e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <osKernelStart+0x48>)
 800516c:	2202      	movs	r2, #2
 800516e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005170:	f001 f866 	bl	8006240 <vTaskStartScheduler>
      stat = osOK;
 8005174:	2300      	movs	r3, #0
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e002      	b.n	8005180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005180:	687b      	ldr	r3, [r7, #4]
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000094 	.word	0x20000094

08005190 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08e      	sub	sp, #56	; 0x38
 8005194:	af04      	add	r7, sp, #16
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a0:	f3ef 8305 	mrs	r3, IPSR
 80051a4:	617b      	str	r3, [r7, #20]
  return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d17e      	bne.n	80052aa <osThreadNew+0x11a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d07b      	beq.n	80052aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051b6:	2318      	movs	r3, #24
 80051b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051be:	f04f 33ff 	mov.w	r3, #4294967295
 80051c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d045      	beq.n	8005256 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <osThreadNew+0x48>
        name = attr->name;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <osThreadNew+0x6e>
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b38      	cmp	r3, #56	; 0x38
 80051f0:	d805      	bhi.n	80051fe <osThreadNew+0x6e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <osThreadNew+0x72>
        return (NULL);
 80051fe:	2300      	movs	r3, #0
 8005200:	e054      	b.n	80052ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00e      	beq.n	8005238 <osThreadNew+0xa8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b5b      	cmp	r3, #91	; 0x5b
 8005220:	d90a      	bls.n	8005238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <osThreadNew+0xa8>
        mem = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e010      	b.n	800525a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10c      	bne.n	800525a <osThreadNew+0xca>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d108      	bne.n	800525a <osThreadNew+0xca>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <osThreadNew+0xca>
          mem = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e001      	b.n	800525a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d110      	bne.n	8005282 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005268:	9202      	str	r2, [sp, #8]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fe0c 	bl	8005e94 <xTaskCreateStatic>
 800527c:	4603      	mov	r3, r0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e013      	b.n	80052aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d110      	bne.n	80052aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	b29a      	uxth	r2, r3
 800528c:	f107 0310 	add.w	r3, r7, #16
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fe57 	bl	8005f4e <xTaskCreate>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d001      	beq.n	80052aa <osThreadNew+0x11a>
            hTask = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052aa:	693b      	ldr	r3, [r7, #16]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052bc:	f3ef 8305 	mrs	r3, IPSR
 80052c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <osDelay+0x1c>
    stat = osErrorISR;
 80052c8:	f06f 0305 	mvn.w	r3, #5
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	e007      	b.n	80052e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 ff7c 	bl	80061d8 <vTaskDelay>
    }
  }

  return (stat);
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <vApplicationGetIdleTaskMemory+0x2c>)
 80052fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a06      	ldr	r2, [pc, #24]	; (800531c <vApplicationGetIdleTaskMemory+0x30>)
 8005302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	601a      	str	r2, [r3, #0]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000098 	.word	0x20000098
 800531c:	200000f4 	.word	0x200000f4

08005320 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <vApplicationGetTimerTaskMemory+0x2c>)
 8005330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a06      	ldr	r2, [pc, #24]	; (8005350 <vApplicationGetTimerTaskMemory+0x30>)
 8005336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	200002f4 	.word	0x200002f4
 8005350:	20000350 	.word	0x20000350

08005354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f103 0208 	add.w	r2, r3, #8
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0208 	add.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540c:	d103      	bne.n	8005416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00c      	b.n	8005430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3308      	adds	r3, #8
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <vListInsert+0x2e>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d2f6      	bcs.n	800541e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	601a      	str	r2, [r3, #0]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d103      	bne.n	800549c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	1e5a      	subs	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10a      	bne.n	80054e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054e6:	f002 f84d 	bl	8007584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	3b01      	subs	r3, #1
 8005518:	68f9      	ldr	r1, [r7, #12]
 800551a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	22ff      	movs	r2, #255	; 0xff
 800552a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d114      	bne.n	8005566 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01a      	beq.n	800557a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3310      	adds	r3, #16
 8005548:	4618      	mov	r0, r3
 800554a:	f001 f903 	bl	8006754 <xTaskRemoveFromEventList>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d012      	beq.n	800557a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <xQueueGenericReset+0xcc>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e009      	b.n	800557a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3310      	adds	r3, #16
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fef2 	bl	8005354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3324      	adds	r3, #36	; 0x24
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff feed 	bl	8005354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800557a:	f002 f833 	bl	80075e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800557e:	2301      	movs	r3, #1
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	; 0x38
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <xQueueGenericCreateStatic+0x52>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <xQueueGenericCreateStatic+0x56>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericCreateStatic+0x58>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	623b      	str	r3, [r7, #32]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <xQueueGenericCreateStatic+0x7e>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueGenericCreateStatic+0x82>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueGenericCreateStatic+0x84>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61fb      	str	r3, [r7, #28]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800562a:	2350      	movs	r3, #80	; 0x50
 800562c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b50      	cmp	r3, #80	; 0x50
 8005632:	d00a      	beq.n	800564a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61bb      	str	r3, [r7, #24]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800564a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800565e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f805 	bl	800567c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e002      	b.n	800569e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056aa:	2101      	movs	r1, #1
 80056ac:	69b8      	ldr	r0, [r7, #24]
 80056ae:	f7ff ff05 	bl	80054bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08e      	sub	sp, #56	; 0x38
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericSend+0x32>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <xQueueGenericSend+0x40>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <xQueueGenericSend+0x44>
 8005704:	2301      	movs	r3, #1
 8005706:	e000      	b.n	800570a <xQueueGenericSend+0x46>
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10a      	bne.n	8005724 <xQueueGenericSend+0x60>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <xQueueGenericSend+0x6e>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <xQueueGenericSend+0x72>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <xQueueGenericSend+0x74>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <xQueueGenericSend+0x8e>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	623b      	str	r3, [r7, #32]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005752:	f001 f9bd 	bl	8006ad0 <xTaskGetSchedulerState>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <xQueueGenericSend+0x9e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <xQueueGenericSend+0xa2>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <xQueueGenericSend+0xa4>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericSend+0xbe>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	61fb      	str	r3, [r7, #28]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005782:	f001 feff 	bl	8007584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	429a      	cmp	r2, r3
 8005790:	d302      	bcc.n	8005798 <xQueueGenericSend+0xd4>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d129      	bne.n	80057ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800579e:	f000 fa0b 	bl	8005bb8 <prvCopyDataToQueue>
 80057a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d010      	beq.n	80057ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	3324      	adds	r3, #36	; 0x24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 ffcf 	bl	8006754 <xTaskRemoveFromEventList>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d013      	beq.n	80057e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	e00a      	b.n	80057e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057d4:	4b39      	ldr	r3, [pc, #228]	; (80058bc <xQueueGenericSend+0x1f8>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057e4:	f001 fefe 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e063      	b.n	80058b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057f2:	f001 fef7 	bl	80075e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e05c      	b.n	80058b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f809 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800580a:	2301      	movs	r3, #1
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800580e:	f001 fee9 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005812:	f000 fd7b 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005816:	f001 feb5 	bl	8007584 <vPortEnterCritical>
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005820:	b25b      	sxtb	r3, r3
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d103      	bne.n	8005830 <xQueueGenericSend+0x16c>
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d103      	bne.n	8005846 <xQueueGenericSend+0x182>
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005846:	f001 fecd 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800584a:	1d3a      	adds	r2, r7, #4
 800584c:	f107 0314 	add.w	r3, r7, #20
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fff8 	bl	8006848 <xTaskCheckForTimeOut>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d124      	bne.n	80058a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800585e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005860:	f000 faa2 	bl	8005da8 <prvIsQueueFull>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d018      	beq.n	800589c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	3310      	adds	r3, #16
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff1e 	bl	80066b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587a:	f000 fa2d 	bl	8005cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800587e:	f000 fd53 	bl	8006328 <xTaskResumeAll>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f47f af7c 	bne.w	8005782 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <xQueueGenericSend+0x1f8>)
 800588c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	e772      	b.n	8005782 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800589c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589e:	f000 fa1b 	bl	8005cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058a2:	f000 fd41 	bl	8006328 <xTaskResumeAll>
 80058a6:	e76c      	b.n	8005782 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058aa:	f000 fa15 	bl	8005cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ae:	f000 fd3b 	bl	8006328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3738      	adds	r7, #56	; 0x38
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b090      	sub	sp, #64	; 0x40
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <xQueueGenericSendFromISR+0x3c>
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <xQueueGenericSendFromISR+0x40>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <xQueueGenericSendFromISR+0x42>
 8005900:	2300      	movs	r3, #0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d103      	bne.n	800592a <xQueueGenericSendFromISR+0x6a>
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <xQueueGenericSendFromISR+0x6e>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <xQueueGenericSendFromISR+0x70>
 800592e:	2300      	movs	r3, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	623b      	str	r3, [r7, #32]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594a:	f001 fefd 	bl	8007748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800594e:	f3ef 8211 	mrs	r2, BASEPRI
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	61fa      	str	r2, [r7, #28]
 8005964:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005966:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <xQueueGenericSendFromISR+0xbc>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d12f      	bne.n	80059dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005992:	f000 f911 	bl	8005bb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005996:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599e:	d112      	bne.n	80059c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	3324      	adds	r3, #36	; 0x24
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fed1 	bl	8006754 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00e      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	b25a      	sxtb	r2, r3
 80059d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059d6:	2301      	movs	r3, #1
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059da:	e001      	b.n	80059e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3740      	adds	r7, #64	; 0x40
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08c      	sub	sp, #48	; 0x30
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <xQueueReceive+0x30>
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	623b      	str	r3, [r7, #32]
}
 8005a24:	bf00      	nop
 8005a26:	e7fe      	b.n	8005a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <xQueueReceive+0x3e>
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xQueueReceive+0x42>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueReceive+0x44>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueReceive+0x5e>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61fb      	str	r3, [r7, #28]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a56:	f001 f83b 	bl	8006ad0 <xTaskGetSchedulerState>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <xQueueReceive+0x6e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <xQueueReceive+0x72>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <xQueueReceive+0x74>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <xQueueReceive+0x8e>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	61bb      	str	r3, [r7, #24]
}
 8005a82:	bf00      	nop
 8005a84:	e7fe      	b.n	8005a84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a86:	f001 fd7d 	bl	8007584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01f      	beq.n	8005ad6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9a:	f000 f8f7 	bl	8005c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	3310      	adds	r3, #16
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fe4e 	bl	8006754 <xTaskRemoveFromEventList>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005abe:	4b3d      	ldr	r3, [pc, #244]	; (8005bb4 <xQueueReceive+0x1bc>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ace:	f001 fd89 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e069      	b.n	8005baa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005adc:	f001 fd82 	bl	80075e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e062      	b.n	8005baa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aea:	f107 0310 	add.w	r3, r7, #16
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fe94 	bl	800681c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005af8:	f001 fd74 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afc:	f000 fc06 	bl	800630c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b00:	f001 fd40 	bl	8007584 <vPortEnterCritical>
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b0a:	b25b      	sxtb	r3, r3
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d103      	bne.n	8005b1a <xQueueReceive+0x122>
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b20:	b25b      	sxtb	r3, r3
 8005b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b26:	d103      	bne.n	8005b30 <xQueueReceive+0x138>
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b30:	f001 fd58 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b34:	1d3a      	adds	r2, r7, #4
 8005b36:	f107 0310 	add.w	r3, r7, #16
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fe83 	bl	8006848 <xTaskCheckForTimeOut>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d123      	bne.n	8005b90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4a:	f000 f917 	bl	8005d7c <prvIsQueueEmpty>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d017      	beq.n	8005b84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	3324      	adds	r3, #36	; 0x24
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fda9 	bl	80066b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b64:	f000 f8b8 	bl	8005cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b68:	f000 fbde 	bl	8006328 <xTaskResumeAll>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d189      	bne.n	8005a86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b72:	4b10      	ldr	r3, [pc, #64]	; (8005bb4 <xQueueReceive+0x1bc>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e780      	b.n	8005a86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b86:	f000 f8a7 	bl	8005cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8a:	f000 fbcd 	bl	8006328 <xTaskResumeAll>
 8005b8e:	e77a      	b.n	8005a86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b92:	f000 f8a1 	bl	8005cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b96:	f000 fbc7 	bl	8006328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9c:	f000 f8ee 	bl	8005d7c <prvIsQueueEmpty>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f43f af6f 	beq.w	8005a86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ba8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3730      	adds	r7, #48	; 0x30
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d14d      	bne.n	8005c7a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 ff92 	bl	8006b0c <xTaskPriorityDisinherit>
 8005be8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	e043      	b.n	8005c7a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d119      	bne.n	8005c2c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6858      	ldr	r0, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	461a      	mov	r2, r3
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	f001 fff4 	bl	8007bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	441a      	add	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d32b      	bcc.n	8005c7a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	e026      	b.n	8005c7a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68d8      	ldr	r0, [r3, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	461a      	mov	r2, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	f001 ffda 	bl	8007bf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	425b      	negs	r3, r3
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d207      	bcs.n	8005c68 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	425b      	negs	r3, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d105      	bne.n	8005c7a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c82:	697b      	ldr	r3, [r7, #20]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	441a      	add	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d303      	bcc.n	8005cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68d9      	ldr	r1, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6838      	ldr	r0, [r7, #0]
 8005ccc:	f001 ff90 	bl	8007bf0 <memcpy>
	}
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ce0:	f001 fc50 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cec:	e011      	b.n	8005d12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d012      	beq.n	8005d1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fd2a 	bl	8006754 <xTaskRemoveFromEventList>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d06:	f000 fe01 	bl	800690c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	dce9      	bgt.n	8005cee <prvUnlockQueue+0x16>
 8005d1a:	e000      	b.n	8005d1e <prvUnlockQueue+0x46>
					break;
 8005d1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d26:	f001 fc5d 	bl	80075e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d2a:	f001 fc2b 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d36:	e011      	b.n	8005d5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3310      	adds	r3, #16
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fd05 	bl	8006754 <xTaskRemoveFromEventList>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d50:	f000 fddc 	bl	800690c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d54:	7bbb      	ldrb	r3, [r7, #14]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	dce9      	bgt.n	8005d38 <prvUnlockQueue+0x60>
 8005d64:	e000      	b.n	8005d68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	22ff      	movs	r2, #255	; 0xff
 8005d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d70:	f001 fc38 	bl	80075e4 <vPortExitCritical>
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d84:	f001 fbfe 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e001      	b.n	8005d9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9a:	f001 fc23 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005db0:	f001 fbe8 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d102      	bne.n	8005dc6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e001      	b.n	8005dca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dca:	f001 fc0b 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e014      	b.n	8005e12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005de8:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005df4:	490c      	ldr	r1, [pc, #48]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <vQueueAddToRegistry+0x50>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e0a:	e006      	b.n	8005e1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b07      	cmp	r3, #7
 8005e16:	d9e7      	bls.n	8005de8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20004f38 	.word	0x20004f38

08005e2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e3c:	f001 fba2 	bl	8007584 <vPortEnterCritical>
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d103      	bne.n	8005e56 <vQueueWaitForMessageRestricted+0x2a>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d103      	bne.n	8005e6c <vQueueWaitForMessageRestricted+0x40>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e6c:	f001 fbba 	bl	80075e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3324      	adds	r3, #36	; 0x24
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fc3b 	bl	80066fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e86:	6978      	ldr	r0, [r7, #20]
 8005e88:	f7ff ff26 	bl	8005cd8 <prvUnlockQueue>
	}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	; 0x38
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	623b      	str	r3, [r7, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xTaskCreateStatic+0x46>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61fb      	str	r3, [r7, #28]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eda:	235c      	movs	r3, #92	; 0x5c
 8005edc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ee2:	d00a      	beq.n	8005efa <xTaskCreateStatic+0x66>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	61bb      	str	r3, [r7, #24]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005efa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d01e      	beq.n	8005f40 <xTaskCreateStatic+0xac>
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2202      	movs	r2, #2
 8005f16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9303      	str	r3, [sp, #12]
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	9302      	str	r3, [sp, #8]
 8005f22:	f107 0314 	add.w	r3, r7, #20
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f850 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f3a:	f000 f8dd 	bl	80060f8 <prvAddNewTaskToReadyList>
 8005f3e:	e001      	b.n	8005f44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f44:	697b      	ldr	r3, [r7, #20]
	}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3728      	adds	r7, #40	; 0x28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b08c      	sub	sp, #48	; 0x30
 8005f52:	af04      	add	r7, sp, #16
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fc30 	bl	80077c8 <pvPortMalloc>
 8005f68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f70:	205c      	movs	r0, #92	; 0x5c
 8005f72:	f001 fc29 	bl	80077c8 <pvPortMalloc>
 8005f76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
 8005f84:	e005      	b.n	8005f92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f001 fcea 	bl	8007960 <vPortFree>
 8005f8c:	e001      	b.n	8005f92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d017      	beq.n	8005fc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	9302      	str	r3, [sp, #8]
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	9301      	str	r3, [sp, #4]
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f80e 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fbc:	69f8      	ldr	r0, [r7, #28]
 8005fbe:	f000 f89b 	bl	80060f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e002      	b.n	8005fce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fce:	69bb      	ldr	r3, [r7, #24]
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	21a5      	movs	r1, #165	; 0xa5
 8005ff2:	f001 fe0b 	bl	8007c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006000:	3b01      	subs	r3, #1
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f023 0307 	bic.w	r3, r3, #7
 800600e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <prvInitialiseNewTask+0x58>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	617b      	str	r3, [r7, #20]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01f      	beq.n	8006076 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006036:	2300      	movs	r3, #0
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	e012      	b.n	8006062 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	7819      	ldrb	r1, [r3, #0]
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	3334      	adds	r3, #52	; 0x34
 800604c:	460a      	mov	r2, r1
 800604e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b0f      	cmp	r3, #15
 8006066:	d9e9      	bls.n	800603c <prvInitialiseNewTask+0x64>
 8006068:	e000      	b.n	800606c <prvInitialiseNewTask+0x94>
			{
				break;
 800606a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006074:	e003      	b.n	800607e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b37      	cmp	r3, #55	; 0x37
 8006082:	d901      	bls.n	8006088 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006084:	2337      	movs	r3, #55	; 0x37
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	3304      	adds	r3, #4
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff f978 	bl	8005394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	3318      	adds	r3, #24
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff f973 	bl	8005394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	69b8      	ldr	r0, [r7, #24]
 80060d8:	f001 f928 	bl	800732c <pxPortInitialiseStack>
 80060dc:	4602      	mov	r2, r0
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ee:	bf00      	nop
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006100:	f001 fa40 	bl	8007584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	4a2c      	ldr	r2, [pc, #176]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 800610c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006116:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800611c:	4b27      	ldr	r3, [pc, #156]	; (80061bc <prvAddNewTaskToReadyList+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d110      	bne.n	8006146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006124:	f000 fc16 	bl	8006954 <prvInitialiseTaskLists>
 8006128:	e00d      	b.n	8006146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800612a:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <prvAddNewTaskToReadyList+0xcc>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006132:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	429a      	cmp	r2, r3
 800613e:	d802      	bhi.n	8006146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006140:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006146:	4b20      	ldr	r3, [pc, #128]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 800614e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006150:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <prvAddNewTaskToReadyList+0xd0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <prvAddNewTaskToReadyList+0xd4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d903      	bls.n	800616c <prvAddNewTaskToReadyList+0x74>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	4a18      	ldr	r2, [pc, #96]	; (80061cc <prvAddNewTaskToReadyList+0xd4>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <prvAddNewTaskToReadyList+0xd8>)
 800617a:	441a      	add	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f7ff f913 	bl	80053ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006188:	f001 fa2c 	bl	80075e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <prvAddNewTaskToReadyList+0xcc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <prvAddNewTaskToReadyList+0xc8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	429a      	cmp	r2, r3
 80061a0:	d207      	bcs.n	80061b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <prvAddNewTaskToReadyList+0xdc>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000c24 	.word	0x20000c24
 80061c0:	20000750 	.word	0x20000750
 80061c4:	20000c30 	.word	0x20000c30
 80061c8:	20000c40 	.word	0x20000c40
 80061cc:	20000c2c 	.word	0x20000c2c
 80061d0:	20000754 	.word	0x20000754
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d017      	beq.n	800621a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <vTaskDelay+0x60>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <vTaskDelay+0x30>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60bb      	str	r3, [r7, #8]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006208:	f000 f880 	bl	800630c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fcea 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006214:	f000 f888 	bl	8006328 <xTaskResumeAll>
 8006218:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d107      	bne.n	8006230 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <vTaskDelay+0x64>)
 8006222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000c4c 	.word	0x20000c4c
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800624e:	463a      	mov	r2, r7
 8006250:	1d39      	adds	r1, r7, #4
 8006252:	f107 0308 	add.w	r3, r7, #8
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff f848 	bl	80052ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	9202      	str	r2, [sp, #8]
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	460a      	mov	r2, r1
 800626e:	4921      	ldr	r1, [pc, #132]	; (80062f4 <vTaskStartScheduler+0xb4>)
 8006270:	4821      	ldr	r0, [pc, #132]	; (80062f8 <vTaskStartScheduler+0xb8>)
 8006272:	f7ff fe0f 	bl	8005e94 <xTaskCreateStatic>
 8006276:	4603      	mov	r3, r0
 8006278:	4a20      	ldr	r2, [pc, #128]	; (80062fc <vTaskStartScheduler+0xbc>)
 800627a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800627c:	4b1f      	ldr	r3, [pc, #124]	; (80062fc <vTaskStartScheduler+0xbc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e001      	b.n	800628e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006294:	f000 fcfc 	bl	8006c90 <xTimerCreateTimerTask>
 8006298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d116      	bne.n	80062ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	613b      	str	r3, [r7, #16]
}
 80062b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <vTaskStartScheduler+0xc0>)
 80062b6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <vTaskStartScheduler+0xc4>)
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <vTaskStartScheduler+0xc8>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062c8:	f001 f8ba 	bl	8007440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062cc:	e00e      	b.n	80062ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d10a      	bne.n	80062ec <vTaskStartScheduler+0xac>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskStartScheduler+0xaa>
}
 80062ec:	bf00      	nop
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	08008564 	.word	0x08008564
 80062f8:	08006925 	.word	0x08006925
 80062fc:	20000c48 	.word	0x20000c48
 8006300:	20000c44 	.word	0x20000c44
 8006304:	20000c30 	.word	0x20000c30
 8006308:	20000c28 	.word	0x20000c28

0800630c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <vTaskSuspendAll+0x18>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a03      	ldr	r2, [pc, #12]	; (8006324 <vTaskSuspendAll+0x18>)
 8006318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800631a:	bf00      	nop
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	20000c4c 	.word	0x20000c4c

08006328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006336:	4b42      	ldr	r3, [pc, #264]	; (8006440 <xTaskResumeAll+0x118>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskResumeAll+0x2c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006354:	f001 f916 	bl	8007584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <xTaskResumeAll+0x118>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a38      	ldr	r2, [pc, #224]	; (8006440 <xTaskResumeAll+0x118>)
 8006360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <xTaskResumeAll+0x118>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d162      	bne.n	8006430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <xTaskResumeAll+0x11c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d05e      	beq.n	8006430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006372:	e02f      	b.n	80063d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <xTaskResumeAll+0x120>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3318      	adds	r3, #24
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f871 	bl	8005468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3304      	adds	r3, #4
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f86c 	bl	8005468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4b2d      	ldr	r3, [pc, #180]	; (800644c <xTaskResumeAll+0x124>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d903      	bls.n	80063a4 <xTaskResumeAll+0x7c>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4a2a      	ldr	r2, [pc, #168]	; (800644c <xTaskResumeAll+0x124>)
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <xTaskResumeAll+0x128>)
 80063b2:	441a      	add	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3304      	adds	r3, #4
 80063b8:	4619      	mov	r1, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f7fe fff7 	bl	80053ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <xTaskResumeAll+0x12c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063ce:	4b22      	ldr	r3, [pc, #136]	; (8006458 <xTaskResumeAll+0x130>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d4:	4b1c      	ldr	r3, [pc, #112]	; (8006448 <xTaskResumeAll+0x120>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1cb      	bne.n	8006374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063e2:	f000 fb55 	bl	8006a90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <xTaskResumeAll+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f000 f847 	bl	8006484 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063fc:	4b16      	ldr	r3, [pc, #88]	; (8006458 <xTaskResumeAll+0x130>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3b01      	subs	r3, #1
 8006406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f1      	bne.n	80063f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800640e:	4b13      	ldr	r3, [pc, #76]	; (800645c <xTaskResumeAll+0x134>)
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <xTaskResumeAll+0x130>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800641c:	2301      	movs	r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <xTaskResumeAll+0x138>)
 8006422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006430:	f001 f8d8 	bl	80075e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006434:	68bb      	ldr	r3, [r7, #8]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000c4c 	.word	0x20000c4c
 8006444:	20000c24 	.word	0x20000c24
 8006448:	20000be4 	.word	0x20000be4
 800644c:	20000c2c 	.word	0x20000c2c
 8006450:	20000754 	.word	0x20000754
 8006454:	20000750 	.word	0x20000750
 8006458:	20000c38 	.word	0x20000c38
 800645c:	20000c34 	.word	0x20000c34
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <xTaskGetTickCount+0x1c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006470:	687b      	ldr	r3, [r7, #4]
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000c28 	.word	0x20000c28

08006484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800648e:	4b4f      	ldr	r3, [pc, #316]	; (80065cc <xTaskIncrementTick+0x148>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 808f 	bne.w	80065b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006498:	4b4d      	ldr	r3, [pc, #308]	; (80065d0 <xTaskIncrementTick+0x14c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064a0:	4a4b      	ldr	r2, [pc, #300]	; (80065d0 <xTaskIncrementTick+0x14c>)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d120      	bne.n	80064ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064ac:	4b49      	ldr	r3, [pc, #292]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <xTaskIncrementTick+0x48>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	603b      	str	r3, [r7, #0]
}
 80064c8:	bf00      	nop
 80064ca:	e7fe      	b.n	80064ca <xTaskIncrementTick+0x46>
 80064cc:	4b41      	ldr	r3, [pc, #260]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	4b41      	ldr	r3, [pc, #260]	; (80065d8 <xTaskIncrementTick+0x154>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3f      	ldr	r2, [pc, #252]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xTaskIncrementTick+0x154>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b3e      	ldr	r3, [pc, #248]	; (80065dc <xTaskIncrementTick+0x158>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	4a3d      	ldr	r2, [pc, #244]	; (80065dc <xTaskIncrementTick+0x158>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	f000 fad1 	bl	8006a90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ee:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <xTaskIncrementTick+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d349      	bcc.n	800658c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f8:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <xTaskIncrementTick+0x150>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <xTaskIncrementTick+0x15c>)
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	601a      	str	r2, [r3, #0]
					break;
 800650a:	e03f      	b.n	800658c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <xTaskIncrementTick+0x150>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	d203      	bcs.n	800652c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006524:	4a2e      	ldr	r2, [pc, #184]	; (80065e0 <xTaskIncrementTick+0x15c>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800652a:	e02f      	b.n	800658c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3304      	adds	r3, #4
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe ff99 	bl	8005468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	3318      	adds	r3, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff90 	bl	8005468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <xTaskIncrementTick+0x160>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d903      	bls.n	800655c <xTaskIncrementTick+0xd8>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <xTaskIncrementTick+0x160>)
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <xTaskIncrementTick+0x164>)
 800656a:	441a      	add	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe ff1b 	bl	80053ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <xTaskIncrementTick+0x168>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	429a      	cmp	r2, r3
 8006584:	d3b8      	bcc.n	80064f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006586:	2301      	movs	r3, #1
 8006588:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658a:	e7b5      	b.n	80064f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800658c:	4b17      	ldr	r3, [pc, #92]	; (80065ec <xTaskIncrementTick+0x168>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	4915      	ldr	r1, [pc, #84]	; (80065e8 <xTaskIncrementTick+0x164>)
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d901      	bls.n	80065a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065a8:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <xTaskIncrementTick+0x16c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e004      	b.n	80065c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <xTaskIncrementTick+0x170>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	4a0d      	ldr	r2, [pc, #52]	; (80065f4 <xTaskIncrementTick+0x170>)
 80065be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065c0:	697b      	ldr	r3, [r7, #20]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000c4c 	.word	0x20000c4c
 80065d0:	20000c28 	.word	0x20000c28
 80065d4:	20000bdc 	.word	0x20000bdc
 80065d8:	20000be0 	.word	0x20000be0
 80065dc:	20000c3c 	.word	0x20000c3c
 80065e0:	20000c44 	.word	0x20000c44
 80065e4:	20000c2c 	.word	0x20000c2c
 80065e8:	20000754 	.word	0x20000754
 80065ec:	20000750 	.word	0x20000750
 80065f0:	20000c38 	.word	0x20000c38
 80065f4:	20000c34 	.word	0x20000c34

080065f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065fe:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <vTaskSwitchContext+0xa8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <vTaskSwitchContext+0xac>)
 8006608:	2201      	movs	r2, #1
 800660a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800660c:	e041      	b.n	8006692 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800660e:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <vTaskSwitchContext+0xac>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006614:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <vTaskSwitchContext+0xb0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e010      	b.n	800663e <vTaskSwitchContext+0x46>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vTaskSwitchContext+0x40>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vTaskSwitchContext+0x3e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3b01      	subs	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	491b      	ldr	r1, [pc, #108]	; (80066ac <vTaskSwitchContext+0xb4>)
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0e4      	beq.n	800661c <vTaskSwitchContext+0x24>
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4a13      	ldr	r2, [pc, #76]	; (80066ac <vTaskSwitchContext+0xb4>)
 800665e:	4413      	add	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3308      	adds	r3, #8
 8006674:	429a      	cmp	r2, r3
 8006676:	d104      	bne.n	8006682 <vTaskSwitchContext+0x8a>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	605a      	str	r2, [r3, #4]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <vTaskSwitchContext+0xb8>)
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	4a06      	ldr	r2, [pc, #24]	; (80066a8 <vTaskSwitchContext+0xb0>)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6013      	str	r3, [r2, #0]
}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	20000c4c 	.word	0x20000c4c
 80066a4:	20000c38 	.word	0x20000c38
 80066a8:	20000c2c 	.word	0x20000c2c
 80066ac:	20000754 	.word	0x20000754
 80066b0:	20000750 	.word	0x20000750

080066b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60fb      	str	r3, [r7, #12]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <vTaskPlaceOnEventList+0x44>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3318      	adds	r3, #24
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fe fe87 	bl	80053f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066e8:	2101      	movs	r1, #1
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	f000 fa7c 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000750 	.word	0x20000750

080066fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	617b      	str	r3, [r7, #20]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006724:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <vTaskPlaceOnEventListRestricted+0x54>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3318      	adds	r3, #24
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7fe fe3e 	bl	80053ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006738:	f04f 33ff 	mov.w	r3, #4294967295
 800673c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f000 fa51 	bl	8006be8 <prvAddCurrentTaskToDelayedList>
	}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20000750 	.word	0x20000750

08006754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	60fb      	str	r3, [r7, #12]
}
 800677c:	bf00      	nop
 800677e:	e7fe      	b.n	800677e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3318      	adds	r3, #24
 8006784:	4618      	mov	r0, r3
 8006786:	f7fe fe6f 	bl	8005468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800678a:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <xTaskRemoveFromEventList+0xb0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d11d      	bne.n	80067ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3304      	adds	r3, #4
 8006796:	4618      	mov	r0, r3
 8006798:	f7fe fe66 	bl	8005468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	4b19      	ldr	r3, [pc, #100]	; (8006808 <xTaskRemoveFromEventList+0xb4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d903      	bls.n	80067b0 <xTaskRemoveFromEventList+0x5c>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a16      	ldr	r2, [pc, #88]	; (8006808 <xTaskRemoveFromEventList+0xb4>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <xTaskRemoveFromEventList+0xb8>)
 80067be:	441a      	add	r2, r3
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fdf1 	bl	80053ae <vListInsertEnd>
 80067cc:	e005      	b.n	80067da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3318      	adds	r3, #24
 80067d2:	4619      	mov	r1, r3
 80067d4:	480e      	ldr	r0, [pc, #56]	; (8006810 <xTaskRemoveFromEventList+0xbc>)
 80067d6:	f7fe fdea 	bl	80053ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <xTaskRemoveFromEventList+0xc0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d905      	bls.n	80067f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <xTaskRemoveFromEventList+0xc4>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e001      	b.n	80067f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067f8:	697b      	ldr	r3, [r7, #20]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000c4c 	.word	0x20000c4c
 8006808:	20000c2c 	.word	0x20000c2c
 800680c:	20000754 	.word	0x20000754
 8006810:	20000be4 	.word	0x20000be4
 8006814:	20000750 	.word	0x20000750
 8006818:	20000c38 	.word	0x20000c38

0800681c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <vTaskInternalSetTimeOutState+0x24>)
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800682c:	4b05      	ldr	r3, [pc, #20]	; (8006844 <vTaskInternalSetTimeOutState+0x28>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	20000c3c 	.word	0x20000c3c
 8006844:	20000c28 	.word	0x20000c28

08006848 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	60fb      	str	r3, [r7, #12]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800688a:	f000 fe7b 	bl	8007584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <xTaskCheckForTimeOut+0xbc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	e023      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <xTaskCheckForTimeOut+0xc0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d007      	beq.n	80068ca <xTaskCheckForTimeOut+0x82>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d302      	bcc.n	80068ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068c4:	2301      	movs	r3, #1
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e015      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d20b      	bcs.n	80068ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	1ad2      	subs	r2, r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ff9b 	bl	800681c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	e004      	b.n	80068f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068f2:	2301      	movs	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068f6:	f000 fe75 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 80068fa:	69fb      	ldr	r3, [r7, #28]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000c28 	.word	0x20000c28
 8006908:	20000c3c 	.word	0x20000c3c

0800690c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <vTaskMissedYield+0x14>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000c38 	.word	0x20000c38

08006924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800692c:	f000 f852 	bl	80069d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <prvIdleTask+0x28>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d9f9      	bls.n	800692c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <prvIdleTask+0x2c>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006948:	e7f0      	b.n	800692c <prvIdleTask+0x8>
 800694a:	bf00      	nop
 800694c:	20000754 	.word	0x20000754
 8006950:	e000ed04 	.word	0xe000ed04

08006954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	e00c      	b.n	800697a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <prvInitialiseTaskLists+0x60>)
 800696c:	4413      	add	r3, r2
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe fcf0 	bl	8005354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3301      	adds	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b37      	cmp	r3, #55	; 0x37
 800697e:	d9ef      	bls.n	8006960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006980:	480d      	ldr	r0, [pc, #52]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 8006982:	f7fe fce7 	bl	8005354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <prvInitialiseTaskLists+0x68>)
 8006988:	f7fe fce4 	bl	8005354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800698c:	480c      	ldr	r0, [pc, #48]	; (80069c0 <prvInitialiseTaskLists+0x6c>)
 800698e:	f7fe fce1 	bl	8005354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006992:	480c      	ldr	r0, [pc, #48]	; (80069c4 <prvInitialiseTaskLists+0x70>)
 8006994:	f7fe fcde 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <prvInitialiseTaskLists+0x74>)
 800699a:	f7fe fcdb 	bl	8005354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <prvInitialiseTaskLists+0x78>)
 80069a0:	4a05      	ldr	r2, [pc, #20]	; (80069b8 <prvInitialiseTaskLists+0x64>)
 80069a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069a4:	4b0a      	ldr	r3, [pc, #40]	; (80069d0 <prvInitialiseTaskLists+0x7c>)
 80069a6:	4a05      	ldr	r2, [pc, #20]	; (80069bc <prvInitialiseTaskLists+0x68>)
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000754 	.word	0x20000754
 80069b8:	20000bb4 	.word	0x20000bb4
 80069bc:	20000bc8 	.word	0x20000bc8
 80069c0:	20000be4 	.word	0x20000be4
 80069c4:	20000bf8 	.word	0x20000bf8
 80069c8:	20000c10 	.word	0x20000c10
 80069cc:	20000bdc 	.word	0x20000bdc
 80069d0:	20000be0 	.word	0x20000be0

080069d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069da:	e019      	b.n	8006a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069dc:	f000 fdd2 	bl	8007584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <prvCheckTasksWaitingTermination+0x50>)
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe fd3b 	bl	8005468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069f2:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <prvCheckTasksWaitingTermination+0x54>)
 80069fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069fc:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 8006a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a06:	f000 fded 	bl	80075e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f810 	bl	8006a30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <prvCheckTasksWaitingTermination+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e1      	bne.n	80069dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000bf8 	.word	0x20000bf8
 8006a28:	20000c24 	.word	0x20000c24
 8006a2c:	20000c0c 	.word	0x20000c0c

08006a30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 ff8a 	bl	8007960 <vPortFree>
				vPortFree( pxTCB );
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 ff87 	bl	8007960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a52:	e018      	b.n	8006a86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d103      	bne.n	8006a66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 ff7e 	bl	8007960 <vPortFree>
	}
 8006a64:	e00f      	b.n	8006a86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d00a      	beq.n	8006a86 <prvDeleteTCB+0x56>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
}
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <prvDeleteTCB+0x54>
	}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a96:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d104      	bne.n	8006aaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aa8:	e008      	b.n	8006abc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aaa:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <prvResetNextTaskUnblockTime+0x38>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	4a04      	ldr	r2, [pc, #16]	; (8006acc <prvResetNextTaskUnblockTime+0x3c>)
 8006aba:	6013      	str	r3, [r2, #0]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000bdc 	.word	0x20000bdc
 8006acc:	20000c44 	.word	0x20000c44

08006ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <xTaskGetSchedulerState+0x34>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	e008      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <xTaskGetSchedulerState+0x38>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d102      	bne.n	8006af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006aec:	2302      	movs	r3, #2
 8006aee:	607b      	str	r3, [r7, #4]
 8006af0:	e001      	b.n	8006af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006af2:	2300      	movs	r3, #0
 8006af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006af6:	687b      	ldr	r3, [r7, #4]
	}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	20000c30 	.word	0x20000c30
 8006b08:	20000c4c 	.word	0x20000c4c

08006b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d056      	beq.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b22:	4b2e      	ldr	r3, [pc, #184]	; (8006bdc <xTaskPriorityDisinherit+0xd0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d00a      	beq.n	8006b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60fb      	str	r3, [r7, #12]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	60bb      	str	r3, [r7, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d02c      	beq.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d128      	bne.n	8006bd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fc70 	bl	8005468 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <xTaskPriorityDisinherit+0xd4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d903      	bls.n	8006bb0 <xTaskPriorityDisinherit+0xa4>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <xTaskPriorityDisinherit+0xd4>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <xTaskPriorityDisinherit+0xd8>)
 8006bbe:	441a      	add	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fe fbf1 	bl	80053ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bd0:	697b      	ldr	r3, [r7, #20]
	}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000750 	.word	0x20000750
 8006be0:	20000c2c 	.word	0x20000c2c
 8006be4:	20000754 	.word	0x20000754

08006be8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf8:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc32 	bl	8005468 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d10a      	bne.n	8006c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4819      	ldr	r0, [pc, #100]	; (8006c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c1c:	f7fe fbc7 	bl	80053ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c20:	e026      	b.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4413      	add	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d209      	bcs.n	8006c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7fe fbd5 	bl	80053f6 <vListInsert>
}
 8006c4c:	e010      	b.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	f7fe fbcb 	bl	80053f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d202      	bcs.n	8006c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6013      	str	r3, [r2, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000c28 	.word	0x20000c28
 8006c7c:	20000750 	.word	0x20000750
 8006c80:	20000c10 	.word	0x20000c10
 8006c84:	20000be0 	.word	0x20000be0
 8006c88:	20000bdc 	.word	0x20000bdc
 8006c8c:	20000c44 	.word	0x20000c44

08006c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c9a:	f000 fb07 	bl	80072ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c9e:	4b1c      	ldr	r3, [pc, #112]	; (8006d10 <xTimerCreateTimerTask+0x80>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d021      	beq.n	8006cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cae:	1d3a      	adds	r2, r7, #4
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	f107 030c 	add.w	r3, r7, #12
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fb31 	bl	8005320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	2302      	movs	r3, #2
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	460a      	mov	r2, r1
 8006cd0:	4910      	ldr	r1, [pc, #64]	; (8006d14 <xTimerCreateTimerTask+0x84>)
 8006cd2:	4811      	ldr	r0, [pc, #68]	; (8006d18 <xTimerCreateTimerTask+0x88>)
 8006cd4:	f7ff f8de 	bl	8005e94 <xTaskCreateStatic>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <xTimerCreateTimerTask+0x8c>)
 8006cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <xTimerCreateTimerTask+0x8c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d06:	697b      	ldr	r3, [r7, #20]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000c80 	.word	0x20000c80
 8006d14:	0800856c 	.word	0x0800856c
 8006d18:	08006e55 	.word	0x08006e55
 8006d1c:	20000c84 	.word	0x20000c84

08006d20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	623b      	str	r3, [r7, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d4e:	4b1a      	ldr	r3, [pc, #104]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02a      	beq.n	8006dac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	dc18      	bgt.n	8006d9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d68:	f7ff feb2 	bl	8006ad0 <xTaskGetSchedulerState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d109      	bne.n	8006d86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d72:	4b11      	ldr	r3, [pc, #68]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f107 0110 	add.w	r1, r7, #16
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	f7fe fca1 	bl	80056c4 <xQueueGenericSend>
 8006d82:	6278      	str	r0, [r7, #36]	; 0x24
 8006d84:	e012      	b.n	8006dac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d86:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f107 0110 	add.w	r1, r7, #16
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2200      	movs	r2, #0
 8006d92:	f7fe fc97 	bl	80056c4 <xQueueGenericSend>
 8006d96:	6278      	str	r0, [r7, #36]	; 0x24
 8006d98:	e008      	b.n	8006dac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d9a:	4b07      	ldr	r3, [pc, #28]	; (8006db8 <xTimerGenericCommand+0x98>)
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	f107 0110 	add.w	r1, r7, #16
 8006da2:	2300      	movs	r3, #0
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	f7fe fd8b 	bl	80058c0 <xQueueGenericSendFromISR>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3728      	adds	r7, #40	; 0x28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20000c80 	.word	0x20000c80

08006dbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc6:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <prvProcessExpiredTimer+0x94>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe fb47 	bl	8005468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d022      	beq.n	8006e2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	18d1      	adds	r1, r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	f000 f8d1 	bl	8006f9c <prvInsertTimerInActiveList>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01f      	beq.n	8006e40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e00:	2300      	movs	r3, #0
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	2300      	movs	r3, #0
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6978      	ldr	r0, [r7, #20]
 8006e0c:	f7ff ff88 	bl	8006d20 <xTimerGenericCommand>
 8006e10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e34:	f023 0301 	bic.w	r3, r3, #1
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	6978      	ldr	r0, [r7, #20]
 8006e46:	4798      	blx	r3
}
 8006e48:	bf00      	nop
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20000c78 	.word	0x20000c78

08006e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 f857 	bl	8006f14 <prvGetNextExpireTime>
 8006e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f803 	bl	8006e78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e72:	f000 f8d5 	bl	8007020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e76:	e7f1      	b.n	8006e5c <prvTimerTask+0x8>

08006e78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e82:	f7ff fa43 	bl	800630c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f866 	bl	8006f5c <prvSampleTimeNow>
 8006e90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d130      	bne.n	8006efa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d806      	bhi.n	8006eb4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ea6:	f7ff fa3f 	bl	8006328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ff85 	bl	8006dbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eb2:	e024      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d008      	beq.n	8006ecc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <prvProcessTimerOrBlockTask+0x90>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <prvProcessTimerOrBlockTask+0x50>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <prvProcessTimerOrBlockTask+0x52>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <prvProcessTimerOrBlockTask+0x94>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f7fe ffa7 	bl	8005e2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ede:	f7ff fa23 	bl	8006328 <xTaskResumeAll>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <prvProcessTimerOrBlockTask+0x98>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
}
 8006ef8:	e001      	b.n	8006efe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006efa:	f7ff fa15 	bl	8006328 <xTaskResumeAll>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000c7c 	.word	0x20000c7c
 8006f0c:	20000c80 	.word	0x20000c80
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <prvGetNextExpireTime+0x16>
 8006f26:	2201      	movs	r2, #1
 8006f28:	e000      	b.n	8006f2c <prvGetNextExpireTime+0x18>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <prvGetNextExpireTime+0x44>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e001      	b.n	8006f48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000c78 	.word	0x20000c78

08006f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f64:	f7ff fa7e 	bl	8006464 <xTaskGetTickCount>
 8006f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d205      	bcs.n	8006f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f74:	f000 f936 	bl	80071e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f86:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <prvSampleTimeNow+0x3c>)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000c88 	.word	0x20000c88

08006f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d812      	bhi.n	8006fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	1ad2      	subs	r2, r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e01b      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <prvInsertTimerInActiveList+0x7c>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fe fa08 	bl	80053f6 <vListInsert>
 8006fe6:	e012      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d206      	bcs.n	8006ffe <prvInsertTimerInActiveList+0x62>
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d302      	bcc.n	8006ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	e007      	b.n	800700e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ffe:	4b07      	ldr	r3, [pc, #28]	; (800701c <prvInsertTimerInActiveList+0x80>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3304      	adds	r3, #4
 8007006:	4619      	mov	r1, r3
 8007008:	4610      	mov	r0, r2
 800700a:	f7fe f9f4 	bl	80053f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800700e:	697b      	ldr	r3, [r7, #20]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20000c7c 	.word	0x20000c7c
 800701c:	20000c78 	.word	0x20000c78

08007020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08e      	sub	sp, #56	; 0x38
 8007024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007026:	e0ca      	b.n	80071be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	da18      	bge.n	8007060 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	3304      	adds	r3, #4
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	61fb      	str	r3, [r7, #28]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	6850      	ldr	r0, [r2, #4]
 8007058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705a:	6892      	ldr	r2, [r2, #8]
 800705c:	4611      	mov	r1, r2
 800705e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f2c0 80aa 	blt.w	80071bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe f9f5 	bl	8005468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800707e:	463b      	mov	r3, r7
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff6b 	bl	8006f5c <prvSampleTimeNow>
 8007086:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b09      	cmp	r3, #9
 800708c:	f200 8097 	bhi.w	80071be <prvProcessReceivedCommands+0x19e>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <prvProcessReceivedCommands+0x78>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c1 	.word	0x080070c1
 80070a4:	08007135 	.word	0x08007135
 80070a8:	08007149 	.word	0x08007149
 80070ac:	08007193 	.word	0x08007193
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c1 	.word	0x080070c1
 80070b8:	08007135 	.word	0x08007135
 80070bc:	08007149 	.word	0x08007149
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e0:	f7ff ff5c 	bl	8006f9c <prvInsertTimerInActiveList>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d069      	beq.n	80071be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d05e      	beq.n	80071be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	441a      	add	r2, r3
 8007108:	2300      	movs	r3, #0
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	2300      	movs	r3, #0
 800710e:	2100      	movs	r1, #0
 8007110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007112:	f7ff fe05 	bl	8006d20 <xTimerGenericCommand>
 8007116:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d14f      	bne.n	80071be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61bb      	str	r3, [r7, #24]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800713a:	f023 0301 	bic.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007146:	e03a      	b.n	80071be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	617b      	str	r3, [r7, #20]
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	18d1      	adds	r1, r2, r3
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718c:	f7ff ff06 	bl	8006f9c <prvInsertTimerInActiveList>
					break;
 8007190:	e015      	b.n	80071be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a2:	f000 fbdd 	bl	8007960 <vPortFree>
 80071a6:	e00a      	b.n	80071be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071ba:	e000      	b.n	80071be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071be:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <prvProcessReceivedCommands+0x1c0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	1d39      	adds	r1, r7, #4
 80071c4:	2200      	movs	r2, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fc16 	bl	80059f8 <xQueueReceive>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f af2a 	bne.w	8007028 <prvProcessReceivedCommands+0x8>
	}
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	3730      	adds	r7, #48	; 0x30
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000c80 	.word	0x20000c80

080071e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071ea:	e048      	b.n	800727e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ec:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	3304      	adds	r3, #4
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe f92f 	bl	8005468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02e      	beq.n	800727e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4413      	add	r3, r2
 8007228:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	429a      	cmp	r2, r3
 8007230:	d90e      	bls.n	8007250 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800723e:	4b19      	ldr	r3, [pc, #100]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3304      	adds	r3, #4
 8007246:	4619      	mov	r1, r3
 8007248:	4610      	mov	r0, r2
 800724a:	f7fe f8d4 	bl	80053f6 <vListInsert>
 800724e:	e016      	b.n	800727e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007250:	2300      	movs	r3, #0
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff fd60 	bl	8006d20 <xTimerGenericCommand>
 8007260:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	603b      	str	r3, [r7, #0]
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800727e:	4b09      	ldr	r3, [pc, #36]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1b1      	bne.n	80071ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <prvSwitchTimerLists+0xc4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <prvSwitchTimerLists+0xc0>)
 8007294:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007296:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <prvSwitchTimerLists+0xc4>)
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	6013      	str	r3, [r2, #0]
}
 800729c:	bf00      	nop
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000c78 	.word	0x20000c78
 80072a8:	20000c7c 	.word	0x20000c7c

080072ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072b2:	f000 f967 	bl	8007584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d120      	bne.n	8007300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072be:	4814      	ldr	r0, [pc, #80]	; (8007310 <prvCheckForValidListAndQueue+0x64>)
 80072c0:	f7fe f848 	bl	8005354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072c4:	4813      	ldr	r0, [pc, #76]	; (8007314 <prvCheckForValidListAndQueue+0x68>)
 80072c6:	f7fe f845 	bl	8005354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072ca:	4b13      	ldr	r3, [pc, #76]	; (8007318 <prvCheckForValidListAndQueue+0x6c>)
 80072cc:	4a10      	ldr	r2, [pc, #64]	; (8007310 <prvCheckForValidListAndQueue+0x64>)
 80072ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072d0:	4b12      	ldr	r3, [pc, #72]	; (800731c <prvCheckForValidListAndQueue+0x70>)
 80072d2:	4a10      	ldr	r2, [pc, #64]	; (8007314 <prvCheckForValidListAndQueue+0x68>)
 80072d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072d6:	2300      	movs	r3, #0
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	4b11      	ldr	r3, [pc, #68]	; (8007320 <prvCheckForValidListAndQueue+0x74>)
 80072dc:	4a11      	ldr	r2, [pc, #68]	; (8007324 <prvCheckForValidListAndQueue+0x78>)
 80072de:	2110      	movs	r1, #16
 80072e0:	200a      	movs	r0, #10
 80072e2:	f7fe f953 	bl	800558c <xQueueGenericCreateStatic>
 80072e6:	4603      	mov	r3, r0
 80072e8:	4a08      	ldr	r2, [pc, #32]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <prvCheckForValidListAndQueue+0x60>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	490b      	ldr	r1, [pc, #44]	; (8007328 <prvCheckForValidListAndQueue+0x7c>)
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fd6c 	bl	8005dd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007300:	f000 f970 	bl	80075e4 <vPortExitCritical>
}
 8007304:	bf00      	nop
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000c80 	.word	0x20000c80
 8007310:	20000c50 	.word	0x20000c50
 8007314:	20000c64 	.word	0x20000c64
 8007318:	20000c78 	.word	0x20000c78
 800731c:	20000c7c 	.word	0x20000c7c
 8007320:	20000d2c 	.word	0x20000d2c
 8007324:	20000c8c 	.word	0x20000c8c
 8007328:	08008574 	.word	0x08008574

0800732c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3b04      	subs	r3, #4
 800733c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3b04      	subs	r3, #4
 800734a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f023 0201 	bic.w	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3b04      	subs	r3, #4
 800735a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800735c:	4a0c      	ldr	r2, [pc, #48]	; (8007390 <pxPortInitialiseStack+0x64>)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3b14      	subs	r3, #20
 8007366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b04      	subs	r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f06f 0202 	mvn.w	r2, #2
 800737a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b20      	subs	r3, #32
 8007380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007382:	68fb      	ldr	r3, [r7, #12]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	08007395 	.word	0x08007395

08007394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800739e:	4b12      	ldr	r3, [pc, #72]	; (80073e8 <prvTaskExitError+0x54>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d00a      	beq.n	80073be <prvTaskExitError+0x2a>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	60fb      	str	r3, [r7, #12]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <prvTaskExitError+0x28>
	__asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	60bb      	str	r3, [r7, #8]
}
 80073d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073d2:	bf00      	nop
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0fc      	beq.n	80073d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	2000000c 	.word	0x2000000c
 80073ec:	00000000 	.word	0x00000000

080073f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <pxCurrentTCBConst2>)
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	f380 8809 	msr	PSP, r0
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8811 	msr	BASEPRI, r0
 800740a:	4770      	bx	lr
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst2>:
 8007410:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007418:	4808      	ldr	r0, [pc, #32]	; (800743c <prvPortStartFirstTask+0x24>)
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f380 8808 	msr	MSP, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8814 	msr	CONTROL, r0
 800742a:	b662      	cpsie	i
 800742c:	b661      	cpsie	f
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	df00      	svc	0
 8007438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800743a:	bf00      	nop
 800743c:	e000ed08 	.word	0xe000ed08

08007440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007446:	4b46      	ldr	r3, [pc, #280]	; (8007560 <xPortStartScheduler+0x120>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a46      	ldr	r2, [pc, #280]	; (8007564 <xPortStartScheduler+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10a      	bne.n	8007466 <xPortStartScheduler+0x26>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <xPortStartScheduler+0x120>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <xPortStartScheduler+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10a      	bne.n	8007486 <xPortStartScheduler+0x46>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007486:	4b39      	ldr	r3, [pc, #228]	; (800756c <xPortStartScheduler+0x12c>)
 8007488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	22ff      	movs	r2, #255	; 0xff
 8007496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	4b31      	ldr	r3, [pc, #196]	; (8007570 <xPortStartScheduler+0x130>)
 80074ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <xPortStartScheduler+0x134>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074b4:	e009      	b.n	80074ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074b6:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <xPortStartScheduler+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4a2d      	ldr	r2, [pc, #180]	; (8007574 <xPortStartScheduler+0x134>)
 80074be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d0ef      	beq.n	80074b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074d6:	4b27      	ldr	r3, [pc, #156]	; (8007574 <xPortStartScheduler+0x134>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1c3 0307 	rsb	r3, r3, #7
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d00a      	beq.n	80074f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	60bb      	str	r3, [r7, #8]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <xPortStartScheduler+0x134>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <xPortStartScheduler+0x134>)
 8007500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <xPortStartScheduler+0x134>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800750a:	4a1a      	ldr	r2, [pc, #104]	; (8007574 <xPortStartScheduler+0x134>)
 800750c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	b2da      	uxtb	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <xPortStartScheduler+0x138>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <xPortStartScheduler+0x138>)
 800751c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <xPortStartScheduler+0x138>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a14      	ldr	r2, [pc, #80]	; (8007578 <xPortStartScheduler+0x138>)
 8007528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800752c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800752e:	f000 f8dd 	bl	80076ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <xPortStartScheduler+0x13c>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007538:	f000 f8fc 	bl	8007734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <xPortStartScheduler+0x140>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0f      	ldr	r2, [pc, #60]	; (8007580 <xPortStartScheduler+0x140>)
 8007542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007548:	f7ff ff66 	bl	8007418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800754c:	f7ff f854 	bl	80065f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007550:	f7ff ff20 	bl	8007394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	e000ed00 	.word	0xe000ed00
 8007564:	410fc271 	.word	0x410fc271
 8007568:	410fc270 	.word	0x410fc270
 800756c:	e000e400 	.word	0xe000e400
 8007570:	20000d7c 	.word	0x20000d7c
 8007574:	20000d80 	.word	0x20000d80
 8007578:	e000ed20 	.word	0xe000ed20
 800757c:	2000000c 	.word	0x2000000c
 8007580:	e000ef34 	.word	0xe000ef34

08007584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	607b      	str	r3, [r7, #4]
}
 800759c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <vPortEnterCritical+0x58>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <vPortEnterCritical+0x58>)
 80075a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075a8:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <vPortEnterCritical+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10f      	bne.n	80075d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <vPortEnterCritical+0x5c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	603b      	str	r3, [r7, #0]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vPortEnterCritical+0x4a>
	}
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	2000000c 	.word	0x2000000c
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <vPortExitCritical+0x50>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <vPortExitCritical+0x24>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	607b      	str	r3, [r7, #4]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <vPortExitCritical+0x50>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <vPortExitCritical+0x50>)
 8007610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <vPortExitCritical+0x42>
 800761a:	2300      	movs	r3, #0
 800761c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f383 8811 	msr	BASEPRI, r3
}
 8007624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000000c 	.word	0x2000000c
	...

08007640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007640:	f3ef 8009 	mrs	r0, PSP
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <pxCurrentTCBConst>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f01e 0f10 	tst.w	lr, #16
 8007650:	bf08      	it	eq
 8007652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007664:	f380 8811 	msr	BASEPRI, r0
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f7fe ffc2 	bl	80065f8 <vTaskSwitchContext>
 8007674:	f04f 0000 	mov.w	r0, #0
 8007678:	f380 8811 	msr	BASEPRI, r0
 800767c:	bc09      	pop	{r0, r3}
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007686:	f01e 0f10 	tst.w	lr, #16
 800768a:	bf08      	it	eq
 800768c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007690:	f380 8809 	msr	PSP, r0
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst>:
 80076a0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076c2:	f7fe fedf 	bl	8006484 <xTaskIncrementTick>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <xPortSysTickHandler+0x40>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <vPortSetupTimerInterrupt+0x38>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <vPortSetupTimerInterrupt+0x3c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <vPortSetupTimerInterrupt+0x40>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <vPortSetupTimerInterrupt+0x44>)
 800770a:	3b01      	subs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000e010 	.word	0xe000e010
 8007724:	e000e018 	.word	0xe000e018
 8007728:	20000000 	.word	0x20000000
 800772c:	10624dd3 	.word	0x10624dd3
 8007730:	e000e014 	.word	0xe000e014

08007734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007744 <vPortEnableVFP+0x10>
 8007738:	6801      	ldr	r1, [r0, #0]
 800773a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800773e:	6001      	str	r1, [r0, #0]
 8007740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007742:	bf00      	nop
 8007744:	e000ed88 	.word	0xe000ed88

08007748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d914      	bls.n	8007784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <vPortValidateInterruptPriority+0x70>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <vPortValidateInterruptPriority+0x74>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	7afa      	ldrb	r2, [r7, #11]
 800776a:	429a      	cmp	r2, r3
 800776c:	d20a      	bcs.n	8007784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <vPortValidateInterruptPriority+0x78>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <vPortValidateInterruptPriority+0x7c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d90a      	bls.n	80077aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	603b      	str	r3, [r7, #0]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vPortValidateInterruptPriority+0x60>
	}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	e000e3f0 	.word	0xe000e3f0
 80077bc:	20000d7c 	.word	0x20000d7c
 80077c0:	e000ed0c 	.word	0xe000ed0c
 80077c4:	20000d80 	.word	0x20000d80

080077c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077d4:	f7fe fd9a 	bl	800630c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077d8:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <pvPortMalloc+0x180>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077e0:	f000 f920 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077e4:	4b59      	ldr	r3, [pc, #356]	; (800794c <pvPortMalloc+0x184>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 8093 	bne.w	8007918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01d      	beq.n	8007834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077f8:	2208      	movs	r2, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <pvPortMalloc+0x6c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	617b      	str	r3, [r7, #20]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06e      	beq.n	8007918 <pvPortMalloc+0x150>
 800783a:	4b45      	ldr	r3, [pc, #276]	; (8007950 <pvPortMalloc+0x188>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d869      	bhi.n	8007918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007844:	4b43      	ldr	r3, [pc, #268]	; (8007954 <pvPortMalloc+0x18c>)
 8007846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <pvPortMalloc+0x18c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800784e:	e004      	b.n	800785a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <pvPortMalloc+0xa4>
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f1      	bne.n	8007850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800786c:	4b36      	ldr	r3, [pc, #216]	; (8007948 <pvPortMalloc+0x180>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007872:	429a      	cmp	r2, r3
 8007874:	d050      	beq.n	8007918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	4413      	add	r3, r2
 800787e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	2308      	movs	r3, #8
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	429a      	cmp	r2, r3
 8007896:	d91f      	bls.n	80078d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <pvPortMalloc+0xf8>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	613b      	str	r3, [r7, #16]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f000 f908 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <pvPortMalloc+0x188>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <pvPortMalloc+0x188>)
 80078e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <pvPortMalloc+0x188>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <pvPortMalloc+0x190>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <pvPortMalloc+0x188>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a18      	ldr	r2, [pc, #96]	; (8007958 <pvPortMalloc+0x190>)
 80078f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <pvPortMalloc+0x184>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	431a      	orrs	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x194>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a11      	ldr	r2, [pc, #68]	; (800795c <pvPortMalloc+0x194>)
 8007916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007918:	f7fe fd06 	bl	8006328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <pvPortMalloc+0x174>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60fb      	str	r3, [r7, #12]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <pvPortMalloc+0x172>
	return pvReturn;
 800793c:	69fb      	ldr	r3, [r7, #28]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	; 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000498c 	.word	0x2000498c
 800794c:	200049a0 	.word	0x200049a0
 8007950:	20004990 	.word	0x20004990
 8007954:	20004984 	.word	0x20004984
 8007958:	20004994 	.word	0x20004994
 800795c:	20004998 	.word	0x20004998

08007960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d04d      	beq.n	8007a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007972:	2308      	movs	r3, #8
 8007974:	425b      	negs	r3, r3
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <vPortFree+0xb8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <vPortFree+0x44>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <vPortFree+0x62>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60bb      	str	r3, [r7, #8]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <vPortFree+0xb8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01e      	beq.n	8007a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11a      	bne.n	8007a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <vPortFree+0xb8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e8:	f7fe fc90 	bl	800630c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <vPortFree+0xbc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <vPortFree+0xbc>)
 80079f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f000 f874 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <vPortFree+0xc0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <vPortFree+0xc0>)
 8007a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a0a:	f7fe fc8d 	bl	8006328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200049a0 	.word	0x200049a0
 8007a1c:	20004990 	.word	0x20004990
 8007a20:	2000499c 	.word	0x2000499c

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20000d84 	.word	0x20000d84
 8007ad4:	20004984 	.word	0x20004984
 8007ad8:	2000498c 	.word	0x2000498c
 8007adc:	20004994 	.word	0x20004994
 8007ae0:	20004990 	.word	0x20004990
 8007ae4:	200049a0 	.word	0x200049a0

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20004984 	.word	0x20004984
 8007b98:	2000498c 	.word	0x2000498c

08007b9c <__errno>:
 8007b9c:	4b01      	ldr	r3, [pc, #4]	; (8007ba4 <__errno+0x8>)
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20000010 	.word	0x20000010

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4d0d      	ldr	r5, [pc, #52]	; (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	; (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1b64      	subs	r4, r4, r5
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4d0b      	ldr	r5, [pc, #44]	; (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	; (8007bec <__libc_init_array+0x44>)
 8007bbc:	f000 fc4e 	bl	800845c <_init>
 8007bc0:	1b64      	subs	r4, r4, r5
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	080090e8 	.word	0x080090e8
 8007be4:	080090e8 	.word	0x080090e8
 8007be8:	080090e8 	.word	0x080090e8
 8007bec:	080090ec 	.word	0x080090ec

08007bf0 <memcpy>:
 8007bf0:	440a      	add	r2, r1
 8007bf2:	4291      	cmp	r1, r2
 8007bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf8:	d100      	bne.n	8007bfc <memcpy+0xc>
 8007bfa:	4770      	bx	lr
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c06:	4291      	cmp	r1, r2
 8007c08:	d1f9      	bne.n	8007bfe <memcpy+0xe>
 8007c0a:	bd10      	pop	{r4, pc}

08007c0c <memset>:
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d100      	bne.n	8007c16 <memset+0xa>
 8007c14:	4770      	bx	lr
 8007c16:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1a:	e7f9      	b.n	8007c10 <memset+0x4>

08007c1c <siprintf>:
 8007c1c:	b40e      	push	{r1, r2, r3}
 8007c1e:	b500      	push	{lr}
 8007c20:	b09c      	sub	sp, #112	; 0x70
 8007c22:	ab1d      	add	r3, sp, #116	; 0x74
 8007c24:	9002      	str	r0, [sp, #8]
 8007c26:	9006      	str	r0, [sp, #24]
 8007c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c2c:	4809      	ldr	r0, [pc, #36]	; (8007c54 <siprintf+0x38>)
 8007c2e:	9107      	str	r1, [sp, #28]
 8007c30:	9104      	str	r1, [sp, #16]
 8007c32:	4909      	ldr	r1, [pc, #36]	; (8007c58 <siprintf+0x3c>)
 8007c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c38:	9105      	str	r1, [sp, #20]
 8007c3a:	6800      	ldr	r0, [r0, #0]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	a902      	add	r1, sp, #8
 8007c40:	f000 f868 	bl	8007d14 <_svfiprintf_r>
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
 8007c4a:	b01c      	add	sp, #112	; 0x70
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b003      	add	sp, #12
 8007c52:	4770      	bx	lr
 8007c54:	20000010 	.word	0x20000010
 8007c58:	ffff0208 	.word	0xffff0208

08007c5c <__ssputs_r>:
 8007c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c60:	688e      	ldr	r6, [r1, #8]
 8007c62:	429e      	cmp	r6, r3
 8007c64:	4682      	mov	sl, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4690      	mov	r8, r2
 8007c6a:	461f      	mov	r7, r3
 8007c6c:	d838      	bhi.n	8007ce0 <__ssputs_r+0x84>
 8007c6e:	898a      	ldrh	r2, [r1, #12]
 8007c70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c74:	d032      	beq.n	8007cdc <__ssputs_r+0x80>
 8007c76:	6825      	ldr	r5, [r4, #0]
 8007c78:	6909      	ldr	r1, [r1, #16]
 8007c7a:	eba5 0901 	sub.w	r9, r5, r1
 8007c7e:	6965      	ldr	r5, [r4, #20]
 8007c80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c88:	3301      	adds	r3, #1
 8007c8a:	444b      	add	r3, r9
 8007c8c:	106d      	asrs	r5, r5, #1
 8007c8e:	429d      	cmp	r5, r3
 8007c90:	bf38      	it	cc
 8007c92:	461d      	movcc	r5, r3
 8007c94:	0553      	lsls	r3, r2, #21
 8007c96:	d531      	bpl.n	8007cfc <__ssputs_r+0xa0>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f000 fb39 	bl	8008310 <_malloc_r>
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	b950      	cbnz	r0, 8007cb8 <__ssputs_r+0x5c>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	f8ca 3000 	str.w	r3, [sl]
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb8:	6921      	ldr	r1, [r4, #16]
 8007cba:	464a      	mov	r2, r9
 8007cbc:	f7ff ff98 	bl	8007bf0 <memcpy>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	6126      	str	r6, [r4, #16]
 8007cce:	6165      	str	r5, [r4, #20]
 8007cd0:	444e      	add	r6, r9
 8007cd2:	eba5 0509 	sub.w	r5, r5, r9
 8007cd6:	6026      	str	r6, [r4, #0]
 8007cd8:	60a5      	str	r5, [r4, #8]
 8007cda:	463e      	mov	r6, r7
 8007cdc:	42be      	cmp	r6, r7
 8007cde:	d900      	bls.n	8007ce2 <__ssputs_r+0x86>
 8007ce0:	463e      	mov	r6, r7
 8007ce2:	4632      	mov	r2, r6
 8007ce4:	6820      	ldr	r0, [r4, #0]
 8007ce6:	4641      	mov	r1, r8
 8007ce8:	f000 faa8 	bl	800823c <memmove>
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	1b9b      	subs	r3, r3, r6
 8007cf2:	4432      	add	r2, r6
 8007cf4:	60a3      	str	r3, [r4, #8]
 8007cf6:	6022      	str	r2, [r4, #0]
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	e7db      	b.n	8007cb4 <__ssputs_r+0x58>
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	f000 fb61 	bl	80083c4 <_realloc_r>
 8007d02:	4606      	mov	r6, r0
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d1e1      	bne.n	8007ccc <__ssputs_r+0x70>
 8007d08:	6921      	ldr	r1, [r4, #16]
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	f000 fab0 	bl	8008270 <_free_r>
 8007d10:	e7c7      	b.n	8007ca2 <__ssputs_r+0x46>
	...

08007d14 <_svfiprintf_r>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	4698      	mov	r8, r3
 8007d1a:	898b      	ldrh	r3, [r1, #12]
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	b09d      	sub	sp, #116	; 0x74
 8007d20:	4607      	mov	r7, r0
 8007d22:	460d      	mov	r5, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	d50e      	bpl.n	8007d46 <_svfiprintf_r+0x32>
 8007d28:	690b      	ldr	r3, [r1, #16]
 8007d2a:	b963      	cbnz	r3, 8007d46 <_svfiprintf_r+0x32>
 8007d2c:	2140      	movs	r1, #64	; 0x40
 8007d2e:	f000 faef 	bl	8008310 <_malloc_r>
 8007d32:	6028      	str	r0, [r5, #0]
 8007d34:	6128      	str	r0, [r5, #16]
 8007d36:	b920      	cbnz	r0, 8007d42 <_svfiprintf_r+0x2e>
 8007d38:	230c      	movs	r3, #12
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e0d1      	b.n	8007ee6 <_svfiprintf_r+0x1d2>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	616b      	str	r3, [r5, #20]
 8007d46:	2300      	movs	r3, #0
 8007d48:	9309      	str	r3, [sp, #36]	; 0x24
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d54:	2330      	movs	r3, #48	; 0x30
 8007d56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f00 <_svfiprintf_r+0x1ec>
 8007d5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5e:	f04f 0901 	mov.w	r9, #1
 8007d62:	4623      	mov	r3, r4
 8007d64:	469a      	mov	sl, r3
 8007d66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6a:	b10a      	cbz	r2, 8007d70 <_svfiprintf_r+0x5c>
 8007d6c:	2a25      	cmp	r2, #37	; 0x25
 8007d6e:	d1f9      	bne.n	8007d64 <_svfiprintf_r+0x50>
 8007d70:	ebba 0b04 	subs.w	fp, sl, r4
 8007d74:	d00b      	beq.n	8007d8e <_svfiprintf_r+0x7a>
 8007d76:	465b      	mov	r3, fp
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff6d 	bl	8007c5c <__ssputs_r>
 8007d82:	3001      	adds	r0, #1
 8007d84:	f000 80aa 	beq.w	8007edc <_svfiprintf_r+0x1c8>
 8007d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d8a:	445a      	add	r2, fp
 8007d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80a2 	beq.w	8007edc <_svfiprintf_r+0x1c8>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da2:	f10a 0a01 	add.w	sl, sl, #1
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dae:	931a      	str	r3, [sp, #104]	; 0x68
 8007db0:	4654      	mov	r4, sl
 8007db2:	2205      	movs	r2, #5
 8007db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db8:	4851      	ldr	r0, [pc, #324]	; (8007f00 <_svfiprintf_r+0x1ec>)
 8007dba:	f7f8 fa09 	bl	80001d0 <memchr>
 8007dbe:	9a04      	ldr	r2, [sp, #16]
 8007dc0:	b9d8      	cbnz	r0, 8007dfa <_svfiprintf_r+0xe6>
 8007dc2:	06d0      	lsls	r0, r2, #27
 8007dc4:	bf44      	itt	mi
 8007dc6:	2320      	movmi	r3, #32
 8007dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dcc:	0711      	lsls	r1, r2, #28
 8007dce:	bf44      	itt	mi
 8007dd0:	232b      	movmi	r3, #43	; 0x2b
 8007dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007dda:	2b2a      	cmp	r3, #42	; 0x2a
 8007ddc:	d015      	beq.n	8007e0a <_svfiprintf_r+0xf6>
 8007dde:	9a07      	ldr	r2, [sp, #28]
 8007de0:	4654      	mov	r4, sl
 8007de2:	2000      	movs	r0, #0
 8007de4:	f04f 0c0a 	mov.w	ip, #10
 8007de8:	4621      	mov	r1, r4
 8007dea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dee:	3b30      	subs	r3, #48	; 0x30
 8007df0:	2b09      	cmp	r3, #9
 8007df2:	d94e      	bls.n	8007e92 <_svfiprintf_r+0x17e>
 8007df4:	b1b0      	cbz	r0, 8007e24 <_svfiprintf_r+0x110>
 8007df6:	9207      	str	r2, [sp, #28]
 8007df8:	e014      	b.n	8007e24 <_svfiprintf_r+0x110>
 8007dfa:	eba0 0308 	sub.w	r3, r0, r8
 8007dfe:	fa09 f303 	lsl.w	r3, r9, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	9304      	str	r3, [sp, #16]
 8007e06:	46a2      	mov	sl, r4
 8007e08:	e7d2      	b.n	8007db0 <_svfiprintf_r+0x9c>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d19      	adds	r1, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9103      	str	r1, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfbb      	ittet	lt
 8007e16:	425b      	neglt	r3, r3
 8007e18:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1c:	9307      	strge	r3, [sp, #28]
 8007e1e:	9307      	strlt	r3, [sp, #28]
 8007e20:	bfb8      	it	lt
 8007e22:	9204      	strlt	r2, [sp, #16]
 8007e24:	7823      	ldrb	r3, [r4, #0]
 8007e26:	2b2e      	cmp	r3, #46	; 0x2e
 8007e28:	d10c      	bne.n	8007e44 <_svfiprintf_r+0x130>
 8007e2a:	7863      	ldrb	r3, [r4, #1]
 8007e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2e:	d135      	bne.n	8007e9c <_svfiprintf_r+0x188>
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	1d1a      	adds	r2, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	9203      	str	r2, [sp, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bfb8      	it	lt
 8007e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e40:	3402      	adds	r4, #2
 8007e42:	9305      	str	r3, [sp, #20]
 8007e44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f10 <_svfiprintf_r+0x1fc>
 8007e48:	7821      	ldrb	r1, [r4, #0]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f7f8 f9bf 	bl	80001d0 <memchr>
 8007e52:	b140      	cbz	r0, 8007e66 <_svfiprintf_r+0x152>
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	eba0 000a 	sub.w	r0, r0, sl
 8007e5a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	4303      	orrs	r3, r0
 8007e62:	3401      	adds	r4, #1
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e6a:	4826      	ldr	r0, [pc, #152]	; (8007f04 <_svfiprintf_r+0x1f0>)
 8007e6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e70:	2206      	movs	r2, #6
 8007e72:	f7f8 f9ad 	bl	80001d0 <memchr>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d038      	beq.n	8007eec <_svfiprintf_r+0x1d8>
 8007e7a:	4b23      	ldr	r3, [pc, #140]	; (8007f08 <_svfiprintf_r+0x1f4>)
 8007e7c:	bb1b      	cbnz	r3, 8007ec6 <_svfiprintf_r+0x1b2>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	3307      	adds	r3, #7
 8007e82:	f023 0307 	bic.w	r3, r3, #7
 8007e86:	3308      	adds	r3, #8
 8007e88:	9303      	str	r3, [sp, #12]
 8007e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8c:	4433      	add	r3, r6
 8007e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e90:	e767      	b.n	8007d62 <_svfiprintf_r+0x4e>
 8007e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e96:	460c      	mov	r4, r1
 8007e98:	2001      	movs	r0, #1
 8007e9a:	e7a5      	b.n	8007de8 <_svfiprintf_r+0xd4>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	3401      	adds	r4, #1
 8007ea0:	9305      	str	r3, [sp, #20]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	f04f 0c0a 	mov.w	ip, #10
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eae:	3a30      	subs	r2, #48	; 0x30
 8007eb0:	2a09      	cmp	r2, #9
 8007eb2:	d903      	bls.n	8007ebc <_svfiprintf_r+0x1a8>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0c5      	beq.n	8007e44 <_svfiprintf_r+0x130>
 8007eb8:	9105      	str	r1, [sp, #20]
 8007eba:	e7c3      	b.n	8007e44 <_svfiprintf_r+0x130>
 8007ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e7f0      	b.n	8007ea8 <_svfiprintf_r+0x194>
 8007ec6:	ab03      	add	r3, sp, #12
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	462a      	mov	r2, r5
 8007ecc:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <_svfiprintf_r+0x1f8>)
 8007ece:	a904      	add	r1, sp, #16
 8007ed0:	4638      	mov	r0, r7
 8007ed2:	f3af 8000 	nop.w
 8007ed6:	1c42      	adds	r2, r0, #1
 8007ed8:	4606      	mov	r6, r0
 8007eda:	d1d6      	bne.n	8007e8a <_svfiprintf_r+0x176>
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	065b      	lsls	r3, r3, #25
 8007ee0:	f53f af2c 	bmi.w	8007d3c <_svfiprintf_r+0x28>
 8007ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee6:	b01d      	add	sp, #116	; 0x74
 8007ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eec:	ab03      	add	r3, sp, #12
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	4b06      	ldr	r3, [pc, #24]	; (8007f0c <_svfiprintf_r+0x1f8>)
 8007ef4:	a904      	add	r1, sp, #16
 8007ef6:	4638      	mov	r0, r7
 8007ef8:	f000 f87a 	bl	8007ff0 <_printf_i>
 8007efc:	e7eb      	b.n	8007ed6 <_svfiprintf_r+0x1c2>
 8007efe:	bf00      	nop
 8007f00:	080090ac 	.word	0x080090ac
 8007f04:	080090b6 	.word	0x080090b6
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	08007c5d 	.word	0x08007c5d
 8007f10:	080090b2 	.word	0x080090b2

08007f14 <_printf_common>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	4616      	mov	r6, r2
 8007f1a:	4699      	mov	r9, r3
 8007f1c:	688a      	ldr	r2, [r1, #8]
 8007f1e:	690b      	ldr	r3, [r1, #16]
 8007f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f24:	4293      	cmp	r3, r2
 8007f26:	bfb8      	it	lt
 8007f28:	4613      	movlt	r3, r2
 8007f2a:	6033      	str	r3, [r6, #0]
 8007f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f30:	4607      	mov	r7, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	b10a      	cbz	r2, 8007f3a <_printf_common+0x26>
 8007f36:	3301      	adds	r3, #1
 8007f38:	6033      	str	r3, [r6, #0]
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	0699      	lsls	r1, r3, #26
 8007f3e:	bf42      	ittt	mi
 8007f40:	6833      	ldrmi	r3, [r6, #0]
 8007f42:	3302      	addmi	r3, #2
 8007f44:	6033      	strmi	r3, [r6, #0]
 8007f46:	6825      	ldr	r5, [r4, #0]
 8007f48:	f015 0506 	ands.w	r5, r5, #6
 8007f4c:	d106      	bne.n	8007f5c <_printf_common+0x48>
 8007f4e:	f104 0a19 	add.w	sl, r4, #25
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	6832      	ldr	r2, [r6, #0]
 8007f56:	1a9b      	subs	r3, r3, r2
 8007f58:	42ab      	cmp	r3, r5
 8007f5a:	dc26      	bgt.n	8007faa <_printf_common+0x96>
 8007f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f60:	1e13      	subs	r3, r2, #0
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	bf18      	it	ne
 8007f66:	2301      	movne	r3, #1
 8007f68:	0692      	lsls	r2, r2, #26
 8007f6a:	d42b      	bmi.n	8007fc4 <_printf_common+0xb0>
 8007f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f70:	4649      	mov	r1, r9
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c0      	blx	r8
 8007f76:	3001      	adds	r0, #1
 8007f78:	d01e      	beq.n	8007fb8 <_printf_common+0xa4>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	68e5      	ldr	r5, [r4, #12]
 8007f7e:	6832      	ldr	r2, [r6, #0]
 8007f80:	f003 0306 	and.w	r3, r3, #6
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	bf08      	it	eq
 8007f88:	1aad      	subeq	r5, r5, r2
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	6922      	ldr	r2, [r4, #16]
 8007f8e:	bf0c      	ite	eq
 8007f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f94:	2500      	movne	r5, #0
 8007f96:	4293      	cmp	r3, r2
 8007f98:	bfc4      	itt	gt
 8007f9a:	1a9b      	subgt	r3, r3, r2
 8007f9c:	18ed      	addgt	r5, r5, r3
 8007f9e:	2600      	movs	r6, #0
 8007fa0:	341a      	adds	r4, #26
 8007fa2:	42b5      	cmp	r5, r6
 8007fa4:	d11a      	bne.n	8007fdc <_printf_common+0xc8>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e008      	b.n	8007fbc <_printf_common+0xa8>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4652      	mov	r2, sl
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	47c0      	blx	r8
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d103      	bne.n	8007fc0 <_printf_common+0xac>
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	3501      	adds	r5, #1
 8007fc2:	e7c6      	b.n	8007f52 <_printf_common+0x3e>
 8007fc4:	18e1      	adds	r1, r4, r3
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	2030      	movs	r0, #48	; 0x30
 8007fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fce:	4422      	add	r2, r4
 8007fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fd8:	3302      	adds	r3, #2
 8007fda:	e7c7      	b.n	8007f6c <_printf_common+0x58>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c0      	blx	r8
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d0e6      	beq.n	8007fb8 <_printf_common+0xa4>
 8007fea:	3601      	adds	r6, #1
 8007fec:	e7d9      	b.n	8007fa2 <_printf_common+0x8e>
	...

08007ff0 <_printf_i>:
 8007ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4691      	mov	r9, r2
 8007ff8:	7e27      	ldrb	r7, [r4, #24]
 8007ffa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ffc:	2f78      	cmp	r7, #120	; 0x78
 8007ffe:	4680      	mov	r8, r0
 8008000:	469a      	mov	sl, r3
 8008002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008006:	d807      	bhi.n	8008018 <_printf_i+0x28>
 8008008:	2f62      	cmp	r7, #98	; 0x62
 800800a:	d80a      	bhi.n	8008022 <_printf_i+0x32>
 800800c:	2f00      	cmp	r7, #0
 800800e:	f000 80d8 	beq.w	80081c2 <_printf_i+0x1d2>
 8008012:	2f58      	cmp	r7, #88	; 0x58
 8008014:	f000 80a3 	beq.w	800815e <_printf_i+0x16e>
 8008018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800801c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008020:	e03a      	b.n	8008098 <_printf_i+0xa8>
 8008022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008026:	2b15      	cmp	r3, #21
 8008028:	d8f6      	bhi.n	8008018 <_printf_i+0x28>
 800802a:	a001      	add	r0, pc, #4	; (adr r0, 8008030 <_printf_i+0x40>)
 800802c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008030:	08008089 	.word	0x08008089
 8008034:	0800809d 	.word	0x0800809d
 8008038:	08008019 	.word	0x08008019
 800803c:	08008019 	.word	0x08008019
 8008040:	08008019 	.word	0x08008019
 8008044:	08008019 	.word	0x08008019
 8008048:	0800809d 	.word	0x0800809d
 800804c:	08008019 	.word	0x08008019
 8008050:	08008019 	.word	0x08008019
 8008054:	08008019 	.word	0x08008019
 8008058:	08008019 	.word	0x08008019
 800805c:	080081a9 	.word	0x080081a9
 8008060:	080080cd 	.word	0x080080cd
 8008064:	0800818b 	.word	0x0800818b
 8008068:	08008019 	.word	0x08008019
 800806c:	08008019 	.word	0x08008019
 8008070:	080081cb 	.word	0x080081cb
 8008074:	08008019 	.word	0x08008019
 8008078:	080080cd 	.word	0x080080cd
 800807c:	08008019 	.word	0x08008019
 8008080:	08008019 	.word	0x08008019
 8008084:	08008193 	.word	0x08008193
 8008088:	680b      	ldr	r3, [r1, #0]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	600a      	str	r2, [r1, #0]
 8008090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008098:	2301      	movs	r3, #1
 800809a:	e0a3      	b.n	80081e4 <_printf_i+0x1f4>
 800809c:	6825      	ldr	r5, [r4, #0]
 800809e:	6808      	ldr	r0, [r1, #0]
 80080a0:	062e      	lsls	r6, r5, #24
 80080a2:	f100 0304 	add.w	r3, r0, #4
 80080a6:	d50a      	bpl.n	80080be <_printf_i+0xce>
 80080a8:	6805      	ldr	r5, [r0, #0]
 80080aa:	600b      	str	r3, [r1, #0]
 80080ac:	2d00      	cmp	r5, #0
 80080ae:	da03      	bge.n	80080b8 <_printf_i+0xc8>
 80080b0:	232d      	movs	r3, #45	; 0x2d
 80080b2:	426d      	negs	r5, r5
 80080b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b8:	485e      	ldr	r0, [pc, #376]	; (8008234 <_printf_i+0x244>)
 80080ba:	230a      	movs	r3, #10
 80080bc:	e019      	b.n	80080f2 <_printf_i+0x102>
 80080be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080c2:	6805      	ldr	r5, [r0, #0]
 80080c4:	600b      	str	r3, [r1, #0]
 80080c6:	bf18      	it	ne
 80080c8:	b22d      	sxthne	r5, r5
 80080ca:	e7ef      	b.n	80080ac <_printf_i+0xbc>
 80080cc:	680b      	ldr	r3, [r1, #0]
 80080ce:	6825      	ldr	r5, [r4, #0]
 80080d0:	1d18      	adds	r0, r3, #4
 80080d2:	6008      	str	r0, [r1, #0]
 80080d4:	0628      	lsls	r0, r5, #24
 80080d6:	d501      	bpl.n	80080dc <_printf_i+0xec>
 80080d8:	681d      	ldr	r5, [r3, #0]
 80080da:	e002      	b.n	80080e2 <_printf_i+0xf2>
 80080dc:	0669      	lsls	r1, r5, #25
 80080de:	d5fb      	bpl.n	80080d8 <_printf_i+0xe8>
 80080e0:	881d      	ldrh	r5, [r3, #0]
 80080e2:	4854      	ldr	r0, [pc, #336]	; (8008234 <_printf_i+0x244>)
 80080e4:	2f6f      	cmp	r7, #111	; 0x6f
 80080e6:	bf0c      	ite	eq
 80080e8:	2308      	moveq	r3, #8
 80080ea:	230a      	movne	r3, #10
 80080ec:	2100      	movs	r1, #0
 80080ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080f2:	6866      	ldr	r6, [r4, #4]
 80080f4:	60a6      	str	r6, [r4, #8]
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	bfa2      	ittt	ge
 80080fa:	6821      	ldrge	r1, [r4, #0]
 80080fc:	f021 0104 	bicge.w	r1, r1, #4
 8008100:	6021      	strge	r1, [r4, #0]
 8008102:	b90d      	cbnz	r5, 8008108 <_printf_i+0x118>
 8008104:	2e00      	cmp	r6, #0
 8008106:	d04d      	beq.n	80081a4 <_printf_i+0x1b4>
 8008108:	4616      	mov	r6, r2
 800810a:	fbb5 f1f3 	udiv	r1, r5, r3
 800810e:	fb03 5711 	mls	r7, r3, r1, r5
 8008112:	5dc7      	ldrb	r7, [r0, r7]
 8008114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008118:	462f      	mov	r7, r5
 800811a:	42bb      	cmp	r3, r7
 800811c:	460d      	mov	r5, r1
 800811e:	d9f4      	bls.n	800810a <_printf_i+0x11a>
 8008120:	2b08      	cmp	r3, #8
 8008122:	d10b      	bne.n	800813c <_printf_i+0x14c>
 8008124:	6823      	ldr	r3, [r4, #0]
 8008126:	07df      	lsls	r7, r3, #31
 8008128:	d508      	bpl.n	800813c <_printf_i+0x14c>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	4299      	cmp	r1, r3
 8008130:	bfde      	ittt	le
 8008132:	2330      	movle	r3, #48	; 0x30
 8008134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800813c:	1b92      	subs	r2, r2, r6
 800813e:	6122      	str	r2, [r4, #16]
 8008140:	f8cd a000 	str.w	sl, [sp]
 8008144:	464b      	mov	r3, r9
 8008146:	aa03      	add	r2, sp, #12
 8008148:	4621      	mov	r1, r4
 800814a:	4640      	mov	r0, r8
 800814c:	f7ff fee2 	bl	8007f14 <_printf_common>
 8008150:	3001      	adds	r0, #1
 8008152:	d14c      	bne.n	80081ee <_printf_i+0x1fe>
 8008154:	f04f 30ff 	mov.w	r0, #4294967295
 8008158:	b004      	add	sp, #16
 800815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815e:	4835      	ldr	r0, [pc, #212]	; (8008234 <_printf_i+0x244>)
 8008160:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	680e      	ldr	r6, [r1, #0]
 8008168:	061f      	lsls	r7, r3, #24
 800816a:	f856 5b04 	ldr.w	r5, [r6], #4
 800816e:	600e      	str	r6, [r1, #0]
 8008170:	d514      	bpl.n	800819c <_printf_i+0x1ac>
 8008172:	07d9      	lsls	r1, r3, #31
 8008174:	bf44      	itt	mi
 8008176:	f043 0320 	orrmi.w	r3, r3, #32
 800817a:	6023      	strmi	r3, [r4, #0]
 800817c:	b91d      	cbnz	r5, 8008186 <_printf_i+0x196>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	f023 0320 	bic.w	r3, r3, #32
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	2310      	movs	r3, #16
 8008188:	e7b0      	b.n	80080ec <_printf_i+0xfc>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	f043 0320 	orr.w	r3, r3, #32
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	2378      	movs	r3, #120	; 0x78
 8008194:	4828      	ldr	r0, [pc, #160]	; (8008238 <_printf_i+0x248>)
 8008196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800819a:	e7e3      	b.n	8008164 <_printf_i+0x174>
 800819c:	065e      	lsls	r6, r3, #25
 800819e:	bf48      	it	mi
 80081a0:	b2ad      	uxthmi	r5, r5
 80081a2:	e7e6      	b.n	8008172 <_printf_i+0x182>
 80081a4:	4616      	mov	r6, r2
 80081a6:	e7bb      	b.n	8008120 <_printf_i+0x130>
 80081a8:	680b      	ldr	r3, [r1, #0]
 80081aa:	6826      	ldr	r6, [r4, #0]
 80081ac:	6960      	ldr	r0, [r4, #20]
 80081ae:	1d1d      	adds	r5, r3, #4
 80081b0:	600d      	str	r5, [r1, #0]
 80081b2:	0635      	lsls	r5, r6, #24
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	d501      	bpl.n	80081bc <_printf_i+0x1cc>
 80081b8:	6018      	str	r0, [r3, #0]
 80081ba:	e002      	b.n	80081c2 <_printf_i+0x1d2>
 80081bc:	0671      	lsls	r1, r6, #25
 80081be:	d5fb      	bpl.n	80081b8 <_printf_i+0x1c8>
 80081c0:	8018      	strh	r0, [r3, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	4616      	mov	r6, r2
 80081c8:	e7ba      	b.n	8008140 <_printf_i+0x150>
 80081ca:	680b      	ldr	r3, [r1, #0]
 80081cc:	1d1a      	adds	r2, r3, #4
 80081ce:	600a      	str	r2, [r1, #0]
 80081d0:	681e      	ldr	r6, [r3, #0]
 80081d2:	6862      	ldr	r2, [r4, #4]
 80081d4:	2100      	movs	r1, #0
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7f7 fffa 	bl	80001d0 <memchr>
 80081dc:	b108      	cbz	r0, 80081e2 <_printf_i+0x1f2>
 80081de:	1b80      	subs	r0, r0, r6
 80081e0:	6060      	str	r0, [r4, #4]
 80081e2:	6863      	ldr	r3, [r4, #4]
 80081e4:	6123      	str	r3, [r4, #16]
 80081e6:	2300      	movs	r3, #0
 80081e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ec:	e7a8      	b.n	8008140 <_printf_i+0x150>
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	4632      	mov	r2, r6
 80081f2:	4649      	mov	r1, r9
 80081f4:	4640      	mov	r0, r8
 80081f6:	47d0      	blx	sl
 80081f8:	3001      	adds	r0, #1
 80081fa:	d0ab      	beq.n	8008154 <_printf_i+0x164>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	079b      	lsls	r3, r3, #30
 8008200:	d413      	bmi.n	800822a <_printf_i+0x23a>
 8008202:	68e0      	ldr	r0, [r4, #12]
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	4298      	cmp	r0, r3
 8008208:	bfb8      	it	lt
 800820a:	4618      	movlt	r0, r3
 800820c:	e7a4      	b.n	8008158 <_printf_i+0x168>
 800820e:	2301      	movs	r3, #1
 8008210:	4632      	mov	r2, r6
 8008212:	4649      	mov	r1, r9
 8008214:	4640      	mov	r0, r8
 8008216:	47d0      	blx	sl
 8008218:	3001      	adds	r0, #1
 800821a:	d09b      	beq.n	8008154 <_printf_i+0x164>
 800821c:	3501      	adds	r5, #1
 800821e:	68e3      	ldr	r3, [r4, #12]
 8008220:	9903      	ldr	r1, [sp, #12]
 8008222:	1a5b      	subs	r3, r3, r1
 8008224:	42ab      	cmp	r3, r5
 8008226:	dcf2      	bgt.n	800820e <_printf_i+0x21e>
 8008228:	e7eb      	b.n	8008202 <_printf_i+0x212>
 800822a:	2500      	movs	r5, #0
 800822c:	f104 0619 	add.w	r6, r4, #25
 8008230:	e7f5      	b.n	800821e <_printf_i+0x22e>
 8008232:	bf00      	nop
 8008234:	080090bd 	.word	0x080090bd
 8008238:	080090ce 	.word	0x080090ce

0800823c <memmove>:
 800823c:	4288      	cmp	r0, r1
 800823e:	b510      	push	{r4, lr}
 8008240:	eb01 0402 	add.w	r4, r1, r2
 8008244:	d902      	bls.n	800824c <memmove+0x10>
 8008246:	4284      	cmp	r4, r0
 8008248:	4623      	mov	r3, r4
 800824a:	d807      	bhi.n	800825c <memmove+0x20>
 800824c:	1e43      	subs	r3, r0, #1
 800824e:	42a1      	cmp	r1, r4
 8008250:	d008      	beq.n	8008264 <memmove+0x28>
 8008252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825a:	e7f8      	b.n	800824e <memmove+0x12>
 800825c:	4402      	add	r2, r0
 800825e:	4601      	mov	r1, r0
 8008260:	428a      	cmp	r2, r1
 8008262:	d100      	bne.n	8008266 <memmove+0x2a>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800826e:	e7f7      	b.n	8008260 <memmove+0x24>

08008270 <_free_r>:
 8008270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008272:	2900      	cmp	r1, #0
 8008274:	d048      	beq.n	8008308 <_free_r+0x98>
 8008276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827a:	9001      	str	r0, [sp, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f1a1 0404 	sub.w	r4, r1, #4
 8008282:	bfb8      	it	lt
 8008284:	18e4      	addlt	r4, r4, r3
 8008286:	f000 f8d3 	bl	8008430 <__malloc_lock>
 800828a:	4a20      	ldr	r2, [pc, #128]	; (800830c <_free_r+0x9c>)
 800828c:	9801      	ldr	r0, [sp, #4]
 800828e:	6813      	ldr	r3, [r2, #0]
 8008290:	4615      	mov	r5, r2
 8008292:	b933      	cbnz	r3, 80082a2 <_free_r+0x32>
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	6014      	str	r4, [r2, #0]
 8008298:	b003      	add	sp, #12
 800829a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800829e:	f000 b8cd 	b.w	800843c <__malloc_unlock>
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	d90b      	bls.n	80082be <_free_r+0x4e>
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	1862      	adds	r2, r4, r1
 80082aa:	4293      	cmp	r3, r2
 80082ac:	bf04      	itt	eq
 80082ae:	681a      	ldreq	r2, [r3, #0]
 80082b0:	685b      	ldreq	r3, [r3, #4]
 80082b2:	6063      	str	r3, [r4, #4]
 80082b4:	bf04      	itt	eq
 80082b6:	1852      	addeq	r2, r2, r1
 80082b8:	6022      	streq	r2, [r4, #0]
 80082ba:	602c      	str	r4, [r5, #0]
 80082bc:	e7ec      	b.n	8008298 <_free_r+0x28>
 80082be:	461a      	mov	r2, r3
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	b10b      	cbz	r3, 80082c8 <_free_r+0x58>
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d9fa      	bls.n	80082be <_free_r+0x4e>
 80082c8:	6811      	ldr	r1, [r2, #0]
 80082ca:	1855      	adds	r5, r2, r1
 80082cc:	42a5      	cmp	r5, r4
 80082ce:	d10b      	bne.n	80082e8 <_free_r+0x78>
 80082d0:	6824      	ldr	r4, [r4, #0]
 80082d2:	4421      	add	r1, r4
 80082d4:	1854      	adds	r4, r2, r1
 80082d6:	42a3      	cmp	r3, r4
 80082d8:	6011      	str	r1, [r2, #0]
 80082da:	d1dd      	bne.n	8008298 <_free_r+0x28>
 80082dc:	681c      	ldr	r4, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	6053      	str	r3, [r2, #4]
 80082e2:	4421      	add	r1, r4
 80082e4:	6011      	str	r1, [r2, #0]
 80082e6:	e7d7      	b.n	8008298 <_free_r+0x28>
 80082e8:	d902      	bls.n	80082f0 <_free_r+0x80>
 80082ea:	230c      	movs	r3, #12
 80082ec:	6003      	str	r3, [r0, #0]
 80082ee:	e7d3      	b.n	8008298 <_free_r+0x28>
 80082f0:	6825      	ldr	r5, [r4, #0]
 80082f2:	1961      	adds	r1, r4, r5
 80082f4:	428b      	cmp	r3, r1
 80082f6:	bf04      	itt	eq
 80082f8:	6819      	ldreq	r1, [r3, #0]
 80082fa:	685b      	ldreq	r3, [r3, #4]
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	bf04      	itt	eq
 8008300:	1949      	addeq	r1, r1, r5
 8008302:	6021      	streq	r1, [r4, #0]
 8008304:	6054      	str	r4, [r2, #4]
 8008306:	e7c7      	b.n	8008298 <_free_r+0x28>
 8008308:	b003      	add	sp, #12
 800830a:	bd30      	pop	{r4, r5, pc}
 800830c:	200049a4 	.word	0x200049a4

08008310 <_malloc_r>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	1ccd      	adds	r5, r1, #3
 8008314:	f025 0503 	bic.w	r5, r5, #3
 8008318:	3508      	adds	r5, #8
 800831a:	2d0c      	cmp	r5, #12
 800831c:	bf38      	it	cc
 800831e:	250c      	movcc	r5, #12
 8008320:	2d00      	cmp	r5, #0
 8008322:	4606      	mov	r6, r0
 8008324:	db01      	blt.n	800832a <_malloc_r+0x1a>
 8008326:	42a9      	cmp	r1, r5
 8008328:	d903      	bls.n	8008332 <_malloc_r+0x22>
 800832a:	230c      	movs	r3, #12
 800832c:	6033      	str	r3, [r6, #0]
 800832e:	2000      	movs	r0, #0
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008332:	f000 f87d 	bl	8008430 <__malloc_lock>
 8008336:	4921      	ldr	r1, [pc, #132]	; (80083bc <_malloc_r+0xac>)
 8008338:	680a      	ldr	r2, [r1, #0]
 800833a:	4614      	mov	r4, r2
 800833c:	b99c      	cbnz	r4, 8008366 <_malloc_r+0x56>
 800833e:	4f20      	ldr	r7, [pc, #128]	; (80083c0 <_malloc_r+0xb0>)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b923      	cbnz	r3, 800834e <_malloc_r+0x3e>
 8008344:	4621      	mov	r1, r4
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f862 	bl	8008410 <_sbrk_r>
 800834c:	6038      	str	r0, [r7, #0]
 800834e:	4629      	mov	r1, r5
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f85d 	bl	8008410 <_sbrk_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d123      	bne.n	80083a2 <_malloc_r+0x92>
 800835a:	230c      	movs	r3, #12
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	4630      	mov	r0, r6
 8008360:	f000 f86c 	bl	800843c <__malloc_unlock>
 8008364:	e7e3      	b.n	800832e <_malloc_r+0x1e>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	1b5b      	subs	r3, r3, r5
 800836a:	d417      	bmi.n	800839c <_malloc_r+0x8c>
 800836c:	2b0b      	cmp	r3, #11
 800836e:	d903      	bls.n	8008378 <_malloc_r+0x68>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	441c      	add	r4, r3
 8008374:	6025      	str	r5, [r4, #0]
 8008376:	e004      	b.n	8008382 <_malloc_r+0x72>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	42a2      	cmp	r2, r4
 800837c:	bf0c      	ite	eq
 800837e:	600b      	streq	r3, [r1, #0]
 8008380:	6053      	strne	r3, [r2, #4]
 8008382:	4630      	mov	r0, r6
 8008384:	f000 f85a 	bl	800843c <__malloc_unlock>
 8008388:	f104 000b 	add.w	r0, r4, #11
 800838c:	1d23      	adds	r3, r4, #4
 800838e:	f020 0007 	bic.w	r0, r0, #7
 8008392:	1ac2      	subs	r2, r0, r3
 8008394:	d0cc      	beq.n	8008330 <_malloc_r+0x20>
 8008396:	1a1b      	subs	r3, r3, r0
 8008398:	50a3      	str	r3, [r4, r2]
 800839a:	e7c9      	b.n	8008330 <_malloc_r+0x20>
 800839c:	4622      	mov	r2, r4
 800839e:	6864      	ldr	r4, [r4, #4]
 80083a0:	e7cc      	b.n	800833c <_malloc_r+0x2c>
 80083a2:	1cc4      	adds	r4, r0, #3
 80083a4:	f024 0403 	bic.w	r4, r4, #3
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d0e3      	beq.n	8008374 <_malloc_r+0x64>
 80083ac:	1a21      	subs	r1, r4, r0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f000 f82e 	bl	8008410 <_sbrk_r>
 80083b4:	3001      	adds	r0, #1
 80083b6:	d1dd      	bne.n	8008374 <_malloc_r+0x64>
 80083b8:	e7cf      	b.n	800835a <_malloc_r+0x4a>
 80083ba:	bf00      	nop
 80083bc:	200049a4 	.word	0x200049a4
 80083c0:	200049a8 	.word	0x200049a8

080083c4 <_realloc_r>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	4607      	mov	r7, r0
 80083c8:	4614      	mov	r4, r2
 80083ca:	460e      	mov	r6, r1
 80083cc:	b921      	cbnz	r1, 80083d8 <_realloc_r+0x14>
 80083ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083d2:	4611      	mov	r1, r2
 80083d4:	f7ff bf9c 	b.w	8008310 <_malloc_r>
 80083d8:	b922      	cbnz	r2, 80083e4 <_realloc_r+0x20>
 80083da:	f7ff ff49 	bl	8008270 <_free_r>
 80083de:	4625      	mov	r5, r4
 80083e0:	4628      	mov	r0, r5
 80083e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e4:	f000 f830 	bl	8008448 <_malloc_usable_size_r>
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d20f      	bcs.n	800840c <_realloc_r+0x48>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4638      	mov	r0, r7
 80083f0:	f7ff ff8e 	bl	8008310 <_malloc_r>
 80083f4:	4605      	mov	r5, r0
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0f2      	beq.n	80083e0 <_realloc_r+0x1c>
 80083fa:	4631      	mov	r1, r6
 80083fc:	4622      	mov	r2, r4
 80083fe:	f7ff fbf7 	bl	8007bf0 <memcpy>
 8008402:	4631      	mov	r1, r6
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff ff33 	bl	8008270 <_free_r>
 800840a:	e7e9      	b.n	80083e0 <_realloc_r+0x1c>
 800840c:	4635      	mov	r5, r6
 800840e:	e7e7      	b.n	80083e0 <_realloc_r+0x1c>

08008410 <_sbrk_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d06      	ldr	r5, [pc, #24]	; (800842c <_sbrk_r+0x1c>)
 8008414:	2300      	movs	r3, #0
 8008416:	4604      	mov	r4, r0
 8008418:	4608      	mov	r0, r1
 800841a:	602b      	str	r3, [r5, #0]
 800841c:	f7f9 fdbc 	bl	8001f98 <_sbrk>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_sbrk_r+0x1a>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_sbrk_r+0x1a>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	20004f78 	.word	0x20004f78

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__malloc_lock+0x8>)
 8008432:	f000 b811 	b.w	8008458 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	20004f80 	.word	0x20004f80

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_unlock+0x8>)
 800843e:	f000 b80c 	b.w	800845a <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	20004f80 	.word	0x20004f80

08008448 <_malloc_usable_size_r>:
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f18      	subs	r0, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfbc      	itt	lt
 8008452:	580b      	ldrlt	r3, [r1, r0]
 8008454:	18c0      	addlt	r0, r0, r3
 8008456:	4770      	bx	lr

08008458 <__retarget_lock_acquire_recursive>:
 8008458:	4770      	bx	lr

0800845a <__retarget_lock_release_recursive>:
 800845a:	4770      	bx	lr

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
