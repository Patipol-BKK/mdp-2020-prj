
mdp-v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c1c  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009390  08009390  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009398  08009398  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080093a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ebc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f30  20004f30  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189eb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000340c  00000000  00000000  00038a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001430  00000000  00000000  0003d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e38  00000000  00000000  0003e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172b4  00000000  00000000  00042670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52b5  00000000  00000000  00059924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ebd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ef4  00000000  00000000  0012ec2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800875c 	.word	0x0800875c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800875c 	.word	0x0800875c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f001 faac 	bl	80020e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f858 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 fa78 	bl	8001080 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000b90:	f000 f9a2 	bl	8000ed8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000b94:	f000 f94c 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b98:	f000 f8ae 	bl	8000cf8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000b9c:	f000 fa46 	bl	800102c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000ba0:	f001 f812 	bl	8001bc8 <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ba4:	f004 fbe8 	bl	8005378 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <main+0x80>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4815      	ldr	r0, [pc, #84]	; (8000c04 <main+0x84>)
 8000bae:	f004 fc2d 	bl	800540c <osThreadNew>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <main+0x88>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(Display, NULL, &DisplayTask_attributes);
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <main+0x8c>)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4814      	ldr	r0, [pc, #80]	; (8000c10 <main+0x90>)
 8000bbe:	f004 fc25 	bl	800540c <osThreadNew>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <main+0x94>)
 8000bc6:	6013      	str	r3, [r2, #0]

  /* creation of Motor_L */
  Motor_LHandle = osThreadNew(LeftMotor, NULL, &Motor_L_attributes);
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <main+0x98>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <main+0x9c>)
 8000bce:	f004 fc1d 	bl	800540c <osThreadNew>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <main+0xa0>)
 8000bd6:	6013      	str	r3, [r2, #0]

  /* creation of Motor_R */
  Motor_RHandle = osThreadNew(RightMotor, NULL, &Motor_R_attributes);
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <main+0xa4>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <main+0xa8>)
 8000bde:	f004 fc15 	bl	800540c <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <main+0xac>)
 8000be6:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(EncoderL, NULL, &EncoderTask_attributes);
 8000be8:	4a11      	ldr	r2, [pc, #68]	; (8000c30 <main+0xb0>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4811      	ldr	r0, [pc, #68]	; (8000c34 <main+0xb4>)
 8000bee:	f004 fc0d 	bl	800540c <osThreadNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <main+0xb8>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf8:	f004 fbe2 	bl	80053c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x7c>
 8000bfe:	bf00      	nop
 8000c00:	0800882c 	.word	0x0800882c
 8000c04:	0800116d 	.word	0x0800116d
 8000c08:	200001ac 	.word	0x200001ac
 8000c0c:	08008850 	.word	0x08008850
 8000c10:	080011bd 	.word	0x080011bd
 8000c14:	200001b0 	.word	0x200001b0
 8000c18:	08008874 	.word	0x08008874
 8000c1c:	08001201 	.word	0x08001201
 8000c20:	200001b4 	.word	0x200001b4
 8000c24:	08008898 	.word	0x08008898
 8000c28:	08001859 	.word	0x08001859
 8000c2c:	200001b8 	.word	0x200001b8
 8000c30:	080088bc 	.word	0x080088bc
 8000c34:	08001863 	.word	0x08001863
 8000c38:	200001bc 	.word	0x200001bc

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	; 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f007 f91e 	bl	8007e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SystemClock_Config+0xb4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <SystemClock_Config+0xb4>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <SystemClock_Config+0xb4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <SystemClock_Config+0xb8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 fe49 	bl	8002944 <HAL_RCC_OscConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cb8:	f000 fddb 	bl	8001872 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 f8ac 	bl	8002e34 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ce2:	f000 fdc6 	bl	8001872 <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3750      	adds	r7, #80	; 0x50
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b096      	sub	sp, #88	; 0x58
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f007 f8ab 	bl	8007e8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d38:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <MX_TIM1_Init+0x134>)
 8000d3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000d3c:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d3e:	22a0      	movs	r2, #160	; 0xa0
 8000d40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000d48:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d62:	4831      	ldr	r0, [pc, #196]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d64:	f002 fa46 	bl	80031f4 <HAL_TIM_Base_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d6e:	f000 fd80 	bl	8001872 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482a      	ldr	r0, [pc, #168]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d80:	f002 fd9e 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d8a:	f000 fd72 	bl	8001872 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000d90:	f002 fa7f 	bl	8003292 <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d9a:	f000 fd6a 	bl	8001872 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000daa:	4619      	mov	r1, r3
 8000dac:	481e      	ldr	r0, [pc, #120]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000dae:	f003 f95f 	bl	8004070 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000db8:	f000 fd5b 	bl	8001872 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	220c      	movs	r2, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4812      	ldr	r0, [pc, #72]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000dde:	f002 fcad 	bl	800373c <HAL_TIM_PWM_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000de8:	f000 fd43 	bl	8001872 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_TIM1_Init+0x130>)
 8000e10:	f003 f9aa 	bl	8004168 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e1a:	f000 fd2a 	bl	8001872 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3758      	adds	r7, #88	; 0x58
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000090 	.word	0x20000090
 8000e2c:	40010000 	.word	0x40010000

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2224      	movs	r2, #36	; 0x24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f007 f824 	bl	8007e8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e74:	2303      	movs	r3, #3
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e84:	230a      	movs	r3, #10
 8000e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e94:	230a      	movs	r3, #10
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000ea0:	f002 fb18 	bl	80034d4 <HAL_TIM_Encoder_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eaa:	f000 fce2 	bl	8001872 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000ebc:	f003 f8d8 	bl	8004070 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ec6:	f000 fcd4 	bl	8001872 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000d8 	.word	0x200000d8

08000ed8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2220      	movs	r2, #32
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 ffbb 	bl	8007e8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f16:	4b43      	ldr	r3, [pc, #268]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f18:	4a43      	ldr	r2, [pc, #268]	; (8001028 <MX_TIM8_Init+0x150>)
 8000f1a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f1c:	4b41      	ldr	r3, [pc, #260]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b40      	ldr	r3, [pc, #256]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f2a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000f2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f42:	4838      	ldr	r0, [pc, #224]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f44:	f002 f956 	bl	80031f4 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000f4e:	f000 fc90 	bl	8001872 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4831      	ldr	r0, [pc, #196]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f60:	f002 fcae 	bl	80038c0 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f000 fc82 	bl	8001872 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f6e:	482d      	ldr	r0, [pc, #180]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f70:	f002 f98f 	bl	8003292 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f7a:	f000 fc7a 	bl	8001872 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4825      	ldr	r0, [pc, #148]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000f8e:	f003 f86f 	bl	8004070 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f98:	f000 fc6b 	bl	8001872 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	; 0x60
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000fc2:	f002 fbbb 	bl	800373c <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000fcc:	f000 fc51 	bl	8001872 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <MX_TIM8_Init+0x14c>)
 8000fda:	f002 fbaf 	bl	800373c <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000fe4:	f000 fc45 	bl	8001872 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_TIM8_Init+0x14c>)
 800100c:	f003 f8ac 	bl	8004168 <HAL_TIMEx_ConfigBreakDeadTime>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001016:	f000 fc2c 	bl	8001872 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3758      	adds	r7, #88	; 0x58
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000120 	.word	0x20000120
 8001028:	40010400 	.word	0x40010400

0800102c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_USART3_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART3_UART_Init+0x4c>)
 8001064:	f003 f8d2 	bl	800420c <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 fc00 	bl	8001872 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000168 	.word	0x20000168
 800107c:	40004800 	.word	0x40004800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <MX_GPIO_Init+0xe0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a30      	ldr	r2, [pc, #192]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a29      	ldr	r2, [pc, #164]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a22      	ldr	r2, [pc, #136]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_GPIO_Init+0xe0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800110c:	4815      	ldr	r0, [pc, #84]	; (8001164 <MX_GPIO_Init+0xe4>)
 800110e:	f001 fbbd 	bl	800288c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	213c      	movs	r1, #60	; 0x3c
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_GPIO_Init+0xe8>)
 8001118:	f001 fbb8 	bl	800288c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800111c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001120:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <MX_GPIO_Init+0xe4>)
 8001136:	f001 fa0d 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800113a:	233c      	movs	r3, #60	; 0x3c
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_GPIO_Init+0xe8>)
 8001152:	f001 f9ff 	bl	8002554 <HAL_GPIO_Init>

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40021000 	.word	0x40021000
 8001168:	40020000 	.word	0x40020000

0800116c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t hello[20];
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Receive_IT(&huart3,(uint8_t *) Buffer,5);
 8001174:	2205      	movs	r2, #5
 8001176:	490d      	ldr	r1, [pc, #52]	; (80011ac <StartDefaultTask+0x40>)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <StartDefaultTask+0x44>)
 800117a:	f003 f926 	bl	80043ca <HAL_UART_Receive_IT>
	sprintf(hello, "buff:%s", Buffer);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <StartDefaultTask+0x40>)
 8001184:	490b      	ldr	r1, [pc, #44]	; (80011b4 <StartDefaultTask+0x48>)
 8001186:	4618      	mov	r0, r3
 8001188:	f006 fe88 	bl	8007e9c <siprintf>
	OLED_ShowString(10,20,hello);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	461a      	mov	r2, r3
 8001192:	2114      	movs	r1, #20
 8001194:	200a      	movs	r0, #10
 8001196:	f000 fce5 	bl	8001b64 <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <StartDefaultTask+0x4c>)
 80011a0:	f001 fb8d 	bl	80028be <HAL_GPIO_TogglePin>
    osDelay(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f004 f9c3 	bl	8005530 <osDelay>
  {
 80011aa:	e7e3      	b.n	8001174 <StartDefaultTask+0x8>
 80011ac:	200001c0 	.word	0x200001c0
 80011b0:	20000168 	.word	0x20000168
 80011b4:	080087a8 	.word	0x080087a8
 80011b8:	40021000 	.word	0x40021000

080011bc <Display>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display */
void Display(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display */
  uint8_t hello[20] = "test1!\0";
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <Display+0x3c>)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	OLED_ShowString(10,10,hello);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	461a      	mov	r2, r3
 80011e4:	210a      	movs	r1, #10
 80011e6:	200a      	movs	r0, #10
 80011e8:	f000 fcbc 	bl	8001b64 <OLED_ShowString>
	OLED_Refresh_Gram();
 80011ec:	f000 fb90 	bl	8001910 <OLED_Refresh_Gram>
    osDelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f004 f99d 	bl	8005530 <osDelay>
	OLED_ShowString(10,10,hello);
 80011f6:	e7f2      	b.n	80011de <Display+0x22>
 80011f8:	080087b0 	.word	0x080087b0
 80011fc:	00000000 	.word	0x00000000

08001200 <LeftMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeftMotor */
void LeftMotor(void *argument)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b090      	sub	sp, #64	; 0x40
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeftMotor */
  uint16_t pwmVal = 1500;
 8001208:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800120c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800120e:	2100      	movs	r1, #0
 8001210:	48a7      	ldr	r0, [pc, #668]	; (80014b0 <LeftMotor+0x2b0>)
 8001212:	f002 f897 	bl	8003344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001216:	2104      	movs	r1, #4
 8001218:	48a5      	ldr	r0, [pc, #660]	; (80014b0 <LeftMotor+0x2b0>)
 800121a:	f002 f893 	bl	8003344 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800121e:	210c      	movs	r1, #12
 8001220:	48a4      	ldr	r0, [pc, #656]	; (80014b4 <LeftMotor+0x2b4>)
 8001222:	f002 f88f 	bl	8003344 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001226:	213c      	movs	r1, #60	; 0x3c
 8001228:	48a3      	ldr	r0, [pc, #652]	; (80014b8 <LeftMotor+0x2b8>)
 800122a:	f002 f9f9 	bl	8003620 <HAL_TIM_Encoder_Start>

  int cnt1, cnt2, pulse;
  uint32_t tick, dist, angle, pulseneeded, pulsetotal;
  uint8_t hello[20];

  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800122e:	4ba2      	ldr	r3, [pc, #648]	; (80014b8 <LeftMotor+0x2b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  tick = HAL_GetTick();
 8001236:	f000 ffb9 	bl	80021ac <HAL_GetTick>
 800123a:	6378      	str	r0, [r7, #52]	; 0x34
  dist = 30;
 800123c:	231e      	movs	r3, #30
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  angle = 45;
 8001240:	232d      	movs	r3, #45	; 0x2d
 8001242:	627b      	str	r3, [r7, #36]	; 0x24


  /* Infinite loop */
  for(;;){

	  switch(Buffer[0]){
 8001244:	4b9d      	ldr	r3, [pc, #628]	; (80014bc <LeftMotor+0x2bc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3b42      	subs	r3, #66	; 0x42
 800124a:	2b10      	cmp	r3, #16
 800124c:	f200 82e5 	bhi.w	800181a <LeftMotor+0x61a>
 8001250:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <LeftMotor+0x58>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	080013bf 	.word	0x080013bf
 800125c:	0800181b 	.word	0x0800181b
 8001260:	0800181b 	.word	0x0800181b
 8001264:	0800181b 	.word	0x0800181b
 8001268:	0800129d 	.word	0x0800129d
 800126c:	0800181b 	.word	0x0800181b
 8001270:	0800181b 	.word	0x0800181b
 8001274:	0800181b 	.word	0x0800181b
 8001278:	0800181b 	.word	0x0800181b
 800127c:	0800181b 	.word	0x0800181b
 8001280:	08001551 	.word	0x08001551
 8001284:	0800181b 	.word	0x0800181b
 8001288:	0800181b 	.word	0x0800181b
 800128c:	0800181b 	.word	0x0800181b
 8001290:	0800181b 	.word	0x0800181b
 8001294:	0800181b 	.word	0x0800181b
 8001298:	08001699 	.word	0x08001699
	  case 'F':
		  pulsetotal = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
		  pulseneeded = dist*60;
 80012a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a2:	4613      	mov	r3, r2
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
		  htim1.Instance ->CCR4 = 147; //straighten wheels
 80012ac:	4b81      	ldr	r3, [pc, #516]	; (80014b4 <LeftMotor+0x2b4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2293      	movs	r2, #147	; 0x93
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
		  //start up both wheel to go forward

		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2104      	movs	r1, #4
 80012b8:	4881      	ldr	r0, [pc, #516]	; (80014c0 <LeftMotor+0x2c0>)
 80012ba:	f001 fae7 	bl	800288c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2108      	movs	r1, #8
 80012c2:	487f      	ldr	r0, [pc, #508]	; (80014c0 <LeftMotor+0x2c0>)
 80012c4:	f001 fae2 	bl	800288c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2120      	movs	r1, #32
 80012cc:	487c      	ldr	r0, [pc, #496]	; (80014c0 <LeftMotor+0x2c0>)
 80012ce:	f001 fadd 	bl	800288c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2110      	movs	r1, #16
 80012d6:	487a      	ldr	r0, [pc, #488]	; (80014c0 <LeftMotor+0x2c0>)
 80012d8:	f001 fad8 	bl	800288c <HAL_GPIO_WritePin>
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 80012dc:	4b74      	ldr	r3, [pc, #464]	; (80014b0 <LeftMotor+0x2b0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 80012e4:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <LeftMotor+0x2b0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38

		  do{
			  if(HAL_GetTick()-tick > 50L){
 80012ec:	f000 ff5e 	bl	80021ac <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b32      	cmp	r3, #50	; 0x32
 80012f8:	d952      	bls.n	80013a0 <LeftMotor+0x1a0>
			  		  		  		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80012fa:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <LeftMotor+0x2b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	61fb      	str	r3, [r7, #28]
			  		  		  		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <LeftMotor+0x2b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	2b10      	cmp	r3, #16
 800130e:	d110      	bne.n	8001332 <LeftMotor+0x132>
			  		  		  			if(cnt2<cnt1)
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001314:	429a      	cmp	r2, r3
 8001316:	da04      	bge.n	8001322 <LeftMotor+0x122>
			  		  		  				pulse = cnt1 - cnt2;
 8001318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001320:	e017      	b.n	8001352 <LeftMotor+0x152>
			  		  		  			else
			  		  		  				pulse = (65535 - cnt2) + cnt1;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001328:	33ff      	adds	r3, #255	; 0xff
 800132a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800132c:	4413      	add	r3, r2
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001330:	e00f      	b.n	8001352 <LeftMotor+0x152>
			  		  		  		}
			  		  		  		else{
			  		  		  			if(cnt2>cnt1)
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001336:	429a      	cmp	r2, r3
 8001338:	dd04      	ble.n	8001344 <LeftMotor+0x144>
			  		  		  				pulse = cnt2 - cnt1;
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
 8001342:	e006      	b.n	8001352 <LeftMotor+0x152>
			  		  		  			else
			  		  		  				pulse = (65535 - cnt1) + cnt2;
 8001344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001346:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800134a:	33ff      	adds	r3, #255	; 0xff
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
			  		  		  		}
			  		  		  		pulsetotal +=pulse;
 8001352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001356:	4413      	add	r3, r2
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
			  		  		  		sprintf(hello, "pulse:%5d\0", pulseneeded);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	6a3a      	ldr	r2, [r7, #32]
 8001360:	4958      	ldr	r1, [pc, #352]	; (80014c4 <LeftMotor+0x2c4>)
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fd9a 	bl	8007e9c <siprintf>
			  		  		  		OLED_ShowString(10,30,hello);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	461a      	mov	r2, r3
 800136e:	211e      	movs	r1, #30
 8001370:	200a      	movs	r0, #10
 8001372:	f000 fbf7 	bl	8001b64 <OLED_ShowString>
			  		  		  		sprintf(hello, "total:%5d\0", pulsetotal);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137c:	4952      	ldr	r1, [pc, #328]	; (80014c8 <LeftMotor+0x2c8>)
 800137e:	4618      	mov	r0, r3
 8001380:	f006 fd8c 	bl	8007e9c <siprintf>
			  		  		  		OLED_ShowString(10,40,hello);
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	461a      	mov	r2, r3
 800138a:	2128      	movs	r1, #40	; 0x28
 800138c:	200a      	movs	r0, #10
 800138e:	f000 fbe9 	bl	8001b64 <OLED_ShowString>
			  		  		  		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001392:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <LeftMotor+0x2b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
			  		  		  		tick = HAL_GetTick();
 800139a:	f000 ff07 	bl	80021ac <HAL_GetTick>
 800139e:	6378      	str	r0, [r7, #52]	; 0x34
			  		  		  	}

		  }while(pulsetotal < pulseneeded);
 80013a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3a1      	bcc.n	80012ec <LeftMotor+0xec>
		  Buffer[0] = 'd';
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <LeftMotor+0x2bc>)
 80013aa:	2264      	movs	r2, #100	; 0x64
 80013ac:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, "READY", sizeof("READY"), HAL_MAX_DELAY);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	2206      	movs	r2, #6
 80013b4:	4945      	ldr	r1, [pc, #276]	; (80014cc <LeftMotor+0x2cc>)
 80013b6:	4846      	ldr	r0, [pc, #280]	; (80014d0 <LeftMotor+0x2d0>)
 80013b8:	f002 ff75 	bl	80042a6 <HAL_UART_Transmit>
		  break;
 80013bc:	e23a      	b.n	8001834 <LeftMotor+0x634>

	  case 'B':
		  pulsetotal = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
		  		  pulseneeded = dist*60;
 80013c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c4:	4613      	mov	r3, r2
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
		  		  htim1.Instance ->CCR4 = 147; //straighten wheels
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <LeftMotor+0x2b4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2293      	movs	r2, #147	; 0x93
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
		  		  //start up both wheel to go forward

		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2108      	movs	r1, #8
 80013da:	4839      	ldr	r0, [pc, #228]	; (80014c0 <LeftMotor+0x2c0>)
 80013dc:	f001 fa56 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2104      	movs	r1, #4
 80013e4:	4836      	ldr	r0, [pc, #216]	; (80014c0 <LeftMotor+0x2c0>)
 80013e6:	f001 fa51 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <LeftMotor+0x2c0>)
 80013f0:	f001 fa4c 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2120      	movs	r1, #32
 80013f8:	4831      	ldr	r0, [pc, #196]	; (80014c0 <LeftMotor+0x2c0>)
 80013fa:	f001 fa47 	bl	800288c <HAL_GPIO_WritePin>
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <LeftMotor+0x2b0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <LeftMotor+0x2b0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800140c:	639a      	str	r2, [r3, #56]	; 0x38

		  		  do{
		  			  if(HAL_GetTick()-tick > 50L){
 800140e:	f000 fecd 	bl	80021ac <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b32      	cmp	r3, #50	; 0x32
 800141a:	f240 8089 	bls.w	8001530 <LeftMotor+0x330>
		  				  	  	  	  	  	sprintf(hello, "pulse:%5d\0", pulseneeded);
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	6a3a      	ldr	r2, [r7, #32]
 8001424:	4927      	ldr	r1, [pc, #156]	; (80014c4 <LeftMotor+0x2c4>)
 8001426:	4618      	mov	r0, r3
 8001428:	f006 fd38 	bl	8007e9c <siprintf>
		  						  			OLED_ShowString(10,30,hello);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	461a      	mov	r2, r3
 8001432:	211e      	movs	r1, #30
 8001434:	200a      	movs	r0, #10
 8001436:	f000 fb95 	bl	8001b64 <OLED_ShowString>

		  			  		  		  		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <LeftMotor+0x2b8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	61fb      	str	r3, [r7, #28]
		  			  		  		  		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <LeftMotor+0x2b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	2b10      	cmp	r3, #16
 800144e:	d11e      	bne.n	800148e <LeftMotor+0x28e>
		  			  		  		  			if(cnt2<cnt1)
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	429a      	cmp	r2, r3
 8001456:	da0b      	bge.n	8001470 <LeftMotor+0x270>
		  			  		  		  			{
		  			  		  		  				pulse = cnt1 - cnt2;
 8001458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  				sprintf(hello, "total1:%5d\0", pulsetotal);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001466:	491b      	ldr	r1, [pc, #108]	; (80014d4 <LeftMotor+0x2d4>)
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fd17 	bl	8007e9c <siprintf>
 800146e:	e045      	b.n	80014fc <LeftMotor+0x2fc>
		  			  		  		  			}
		  			  		  		  			else
		  			  		  		  			{
		  			  		  		  				pulse = (65535 - cnt2) + cnt1;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001476:	33ff      	adds	r3, #255	; 0xff
 8001478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800147a:	4413      	add	r3, r2
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  				sprintf(hello, "total2:%5d\0", pulsetotal);
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001484:	4914      	ldr	r1, [pc, #80]	; (80014d8 <LeftMotor+0x2d8>)
 8001486:	4618      	mov	r0, r3
 8001488:	f006 fd08 	bl	8007e9c <siprintf>
 800148c:	e036      	b.n	80014fc <LeftMotor+0x2fc>
		  			  		  		  			}
		  			  		  		  		}
		  			  		  		  		else{
		  			  		  		  			if(cnt2>cnt1)
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001492:	429a      	cmp	r2, r3
 8001494:	dd24      	ble.n	80014e0 <LeftMotor+0x2e0>
		  			  		  		  			{
		  			  		  		  				pulse = cnt2 - cnt1;
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  				sprintf(hello, "total3:%5d\0", pulsetotal);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014a4:	490d      	ldr	r1, [pc, #52]	; (80014dc <LeftMotor+0x2dc>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 fcf8 	bl	8007e9c <siprintf>
 80014ac:	e026      	b.n	80014fc <LeftMotor+0x2fc>
 80014ae:	bf00      	nop
 80014b0:	20000120 	.word	0x20000120
 80014b4:	20000090 	.word	0x20000090
 80014b8:	200000d8 	.word	0x200000d8
 80014bc:	200001c0 	.word	0x200001c0
 80014c0:	40020000 	.word	0x40020000
 80014c4:	080087c4 	.word	0x080087c4
 80014c8:	080087d0 	.word	0x080087d0
 80014cc:	080087dc 	.word	0x080087dc
 80014d0:	20000168 	.word	0x20000168
 80014d4:	080087e4 	.word	0x080087e4
 80014d8:	080087f0 	.word	0x080087f0
 80014dc:	080087fc 	.word	0x080087fc
		  			  		  		  			}
		  			  		  		  			else
		  			  		  		  			{
		  			  		  		  				pulse = (65535 - cnt1) + cnt2;
 80014e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80014e6:	33ff      	adds	r3, #255	; 0xff
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  				sprintf(hello, "total4:%5d\0", pulsetotal);
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f4:	499e      	ldr	r1, [pc, #632]	; (8001770 <LeftMotor+0x570>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f006 fcd0 	bl	8007e9c <siprintf>
		  			  		  		  			}
		  			  		  		  		}
		  			  		  		  		pulsetotal = (pulsetotal + pulse)%65535;
 80014fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001500:	441a      	add	r2, r3
 8001502:	4b9c      	ldr	r3, [pc, #624]	; (8001774 <LeftMotor+0x574>)
 8001504:	fba3 1302 	umull	r1, r3, r3, r2
 8001508:	0bd9      	lsrs	r1, r3, #15
 800150a:	460b      	mov	r3, r1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	1a5b      	subs	r3, r3, r1
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	633b      	str	r3, [r7, #48]	; 0x30


		  			  		  		  		OLED_ShowString(10,40,hello);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	461a      	mov	r2, r3
 800151a:	2128      	movs	r1, #40	; 0x28
 800151c:	200a      	movs	r0, #10
 800151e:	f000 fb21 	bl	8001b64 <OLED_ShowString>
		  			  		  		  		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001522:	4b95      	ldr	r3, [pc, #596]	; (8001778 <LeftMotor+0x578>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
		  			  		  		  		tick = HAL_GetTick();
 800152a:	f000 fe3f 	bl	80021ac <HAL_GetTick>
 800152e:	6378      	str	r0, [r7, #52]	; 0x34
		  			  		  		  	}

		  		  }while(pulsetotal < pulseneeded);
 8001530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	429a      	cmp	r2, r3
 8001536:	f4ff af6a 	bcc.w	800140e <LeftMotor+0x20e>
		  		  Buffer[0] = 'd';
 800153a:	4b90      	ldr	r3, [pc, #576]	; (800177c <LeftMotor+0x57c>)
 800153c:	2264      	movs	r2, #100	; 0x64
 800153e:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, "READY", sizeof("READY"), HAL_MAX_DELAY);
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	2206      	movs	r2, #6
 8001546:	498e      	ldr	r1, [pc, #568]	; (8001780 <LeftMotor+0x580>)
 8001548:	488e      	ldr	r0, [pc, #568]	; (8001784 <LeftMotor+0x584>)
 800154a:	f002 feac 	bl	80042a6 <HAL_UART_Transmit>
		  		  break;
 800154e:	e171      	b.n	8001834 <LeftMotor+0x634>

	  case 'L':
		  pulsetotal = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
		  pulseneeded = angle*0.35*59;
 8001554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001556:	f7ff f8f7 	bl	8000748 <__aeabi_ui2d>
 800155a:	a383      	add	r3, pc, #524	; (adr r3, 8001768 <LeftMotor+0x568>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7fe fe86 	bl	8000270 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b85      	ldr	r3, [pc, #532]	; (8001788 <LeftMotor+0x588>)
 8001572:	f7fe fe7d 	bl	8000270 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff f95d 	bl	800083c <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	623b      	str	r3, [r7, #32]
		  		  htim1.Instance ->CCR4 = 90; //left
 8001586:	4b81      	ldr	r3, [pc, #516]	; (800178c <LeftMotor+0x58c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	225a      	movs	r2, #90	; 0x5a
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
		  		  //start up both wheel to go forward

		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2104      	movs	r1, #4
 8001592:	487f      	ldr	r0, [pc, #508]	; (8001790 <LeftMotor+0x590>)
 8001594:	f001 f97a 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2108      	movs	r1, #8
 800159c:	487c      	ldr	r0, [pc, #496]	; (8001790 <LeftMotor+0x590>)
 800159e:	f001 f975 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	487a      	ldr	r0, [pc, #488]	; (8001790 <LeftMotor+0x590>)
 80015a8:	f001 f970 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2110      	movs	r1, #16
 80015b0:	4877      	ldr	r0, [pc, #476]	; (8001790 <LeftMotor+0x590>)
 80015b2:	f001 f96b 	bl	800288c <HAL_GPIO_WritePin>
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <LeftMotor+0x594>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 80015be:	4b75      	ldr	r3, [pc, #468]	; (8001794 <LeftMotor+0x594>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38

		  		  do{
		  			  if(HAL_GetTick()-tick > 50L){
 80015c6:	f000 fdf1 	bl	80021ac <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b32      	cmp	r3, #50	; 0x32
 80015d2:	d952      	bls.n	800167a <LeftMotor+0x47a>
		  			  		  		  		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <LeftMotor+0x578>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	61fb      	str	r3, [r7, #28]
		  			  		  		  		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <LeftMotor+0x578>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d110      	bne.n	800160c <LeftMotor+0x40c>
		  			  		  		  			if(cnt2<cnt1)
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ee:	429a      	cmp	r2, r3
 80015f0:	da04      	bge.n	80015fc <LeftMotor+0x3fc>
		  			  		  		  				pulse = cnt1 - cnt2;
 80015f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80015fa:	e017      	b.n	800162c <LeftMotor+0x42c>
		  			  		  		  			else
		  			  		  		  				pulse = (65535 - cnt2) + cnt1;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001602:	33ff      	adds	r3, #255	; 0xff
 8001604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001606:	4413      	add	r3, r2
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
 800160a:	e00f      	b.n	800162c <LeftMotor+0x42c>
		  			  		  		  		}
		  			  		  		  		else{
		  			  		  		  			if(cnt2>cnt1)
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001610:	429a      	cmp	r2, r3
 8001612:	dd04      	ble.n	800161e <LeftMotor+0x41e>
		  			  		  		  				pulse = cnt2 - cnt1;
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
 800161c:	e006      	b.n	800162c <LeftMotor+0x42c>
		  			  		  		  			else
		  			  		  		  				pulse = (65535 - cnt1) + cnt2;
 800161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001620:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001624:	33ff      	adds	r3, #255	; 0xff
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  		}
		  			  		  		  		pulsetotal +=pulse;
 800162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800162e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001630:	4413      	add	r3, r2
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
		  			  		  		  		sprintf(hello, "pulse:%5d\0", pulseneeded);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	4957      	ldr	r1, [pc, #348]	; (8001798 <LeftMotor+0x598>)
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fc2d 	bl	8007e9c <siprintf>
		  			  		  		  		OLED_ShowString(10,30,hello);
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	461a      	mov	r2, r3
 8001648:	211e      	movs	r1, #30
 800164a:	200a      	movs	r0, #10
 800164c:	f000 fa8a 	bl	8001b64 <OLED_ShowString>
		  			  		  		  		sprintf(hello, "total:%5d\0", pulsetotal);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001656:	4951      	ldr	r1, [pc, #324]	; (800179c <LeftMotor+0x59c>)
 8001658:	4618      	mov	r0, r3
 800165a:	f006 fc1f 	bl	8007e9c <siprintf>
		  			  		  		  		OLED_ShowString(10,40,hello);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	461a      	mov	r2, r3
 8001664:	2128      	movs	r1, #40	; 0x28
 8001666:	200a      	movs	r0, #10
 8001668:	f000 fa7c 	bl	8001b64 <OLED_ShowString>
		  			  		  		  		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <LeftMotor+0x578>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	63fb      	str	r3, [r7, #60]	; 0x3c
		  			  		  		  		tick = HAL_GetTick();
 8001674:	f000 fd9a 	bl	80021ac <HAL_GetTick>
 8001678:	6378      	str	r0, [r7, #52]	; 0x34
		  			  		  		  	}

		  		  }while(pulsetotal < pulseneeded);
 800167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	429a      	cmp	r2, r3
 8001680:	d3a1      	bcc.n	80015c6 <LeftMotor+0x3c6>
		  		  Buffer[0] = 'd';
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <LeftMotor+0x57c>)
 8001684:	2264      	movs	r2, #100	; 0x64
 8001686:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, "READY", sizeof("READY"), HAL_MAX_DELAY);
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	2206      	movs	r2, #6
 800168e:	493c      	ldr	r1, [pc, #240]	; (8001780 <LeftMotor+0x580>)
 8001690:	483c      	ldr	r0, [pc, #240]	; (8001784 <LeftMotor+0x584>)
 8001692:	f002 fe08 	bl	80042a6 <HAL_UART_Transmit>
		  		  break;
 8001696:	e0cd      	b.n	8001834 <LeftMotor+0x634>

	  case 'R':
		  pulsetotal = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
		  pulseneeded = angle*0.35*59;
 800169c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800169e:	f7ff f853 	bl	8000748 <__aeabi_ui2d>
 80016a2:	a331      	add	r3, pc, #196	; (adr r3, 8001768 <LeftMotor+0x568>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe fde2 	bl	8000270 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b33      	ldr	r3, [pc, #204]	; (8001788 <LeftMotor+0x588>)
 80016ba:	f7fe fdd9 	bl	8000270 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f8b9 	bl	800083c <__aeabi_d2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	623b      	str	r3, [r7, #32]
		  		  htim1.Instance ->CCR4 = 202; //straighten wheels
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <LeftMotor+0x58c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	22ca      	movs	r2, #202	; 0xca
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
		  		  //start up both wheel to go forward

		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2104      	movs	r1, #4
 80016da:	482d      	ldr	r0, [pc, #180]	; (8001790 <LeftMotor+0x590>)
 80016dc:	f001 f8d6 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2108      	movs	r1, #8
 80016e4:	482a      	ldr	r0, [pc, #168]	; (8001790 <LeftMotor+0x590>)
 80016e6:	f001 f8d1 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	4828      	ldr	r0, [pc, #160]	; (8001790 <LeftMotor+0x590>)
 80016f0:	f001 f8cc 	bl	800288c <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2110      	movs	r1, #16
 80016f8:	4825      	ldr	r0, [pc, #148]	; (8001790 <LeftMotor+0x590>)
 80016fa:	f001 f8c7 	bl	800288c <HAL_GPIO_WritePin>
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <LeftMotor+0x594>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
		  		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <LeftMotor+0x594>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800170c:	639a      	str	r2, [r3, #56]	; 0x38

		  		  do{
		  			  if(HAL_GetTick()-tick > 50L){
 800170e:	f000 fd4d 	bl	80021ac <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b32      	cmp	r3, #50	; 0x32
 800171a:	d96f      	bls.n	80017fc <LeftMotor+0x5fc>
		  			  		  		  		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <LeftMotor+0x578>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	61fb      	str	r3, [r7, #28]
		  			  		  		  		if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <LeftMotor+0x578>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b10      	cmp	r3, #16
 8001730:	d110      	bne.n	8001754 <LeftMotor+0x554>
		  			  		  		  			if(cnt2<cnt1)
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001736:	429a      	cmp	r2, r3
 8001738:	da04      	bge.n	8001744 <LeftMotor+0x544>
		  			  		  		  				pulse = cnt1 - cnt2;
 800173a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
 8001742:	e034      	b.n	80017ae <LeftMotor+0x5ae>
		  			  		  		  			else
		  			  		  		  				pulse = (65535 - cnt2) + cnt1;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800174a:	33ff      	adds	r3, #255	; 0xff
 800174c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800174e:	4413      	add	r3, r2
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
 8001752:	e02c      	b.n	80017ae <LeftMotor+0x5ae>
		  			  		  		  		}
		  			  		  		  		else{
		  			  		  		  			if(cnt2>cnt1)
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001758:	429a      	cmp	r2, r3
 800175a:	dd21      	ble.n	80017a0 <LeftMotor+0x5a0>
		  			  		  		  				pulse = cnt2 - cnt1;
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	63bb      	str	r3, [r7, #56]	; 0x38
 8001764:	e023      	b.n	80017ae <LeftMotor+0x5ae>
 8001766:	bf00      	nop
 8001768:	66666666 	.word	0x66666666
 800176c:	3fd66666 	.word	0x3fd66666
 8001770:	08008808 	.word	0x08008808
 8001774:	80008001 	.word	0x80008001
 8001778:	200000d8 	.word	0x200000d8
 800177c:	200001c0 	.word	0x200001c0
 8001780:	080087dc 	.word	0x080087dc
 8001784:	20000168 	.word	0x20000168
 8001788:	404d8000 	.word	0x404d8000
 800178c:	20000090 	.word	0x20000090
 8001790:	40020000 	.word	0x40020000
 8001794:	20000120 	.word	0x20000120
 8001798:	080087c4 	.word	0x080087c4
 800179c:	080087d0 	.word	0x080087d0
		  			  		  		  			else
		  			  		  		  				pulse = (65535 - cnt1) + cnt2;
 80017a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017a2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80017a6:	33ff      	adds	r3, #255	; 0xff
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	4413      	add	r3, r2
 80017ac:	63bb      	str	r3, [r7, #56]	; 0x38
		  			  		  		  		}
		  			  		  		  		pulsetotal +=pulse;
 80017ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b2:	4413      	add	r3, r2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
		  			  		  		  		sprintf(hello, "pulse:%5d\0", pulseneeded);
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	491e      	ldr	r1, [pc, #120]	; (8001838 <LeftMotor+0x638>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fb6c 	bl	8007e9c <siprintf>
		  			  		  		  		OLED_ShowString(10,30,hello);
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	461a      	mov	r2, r3
 80017ca:	211e      	movs	r1, #30
 80017cc:	200a      	movs	r0, #10
 80017ce:	f000 f9c9 	bl	8001b64 <OLED_ShowString>
		  			  		  		  		sprintf(hello, "total:%5d\0", pulsetotal);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017d8:	4918      	ldr	r1, [pc, #96]	; (800183c <LeftMotor+0x63c>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 fb5e 	bl	8007e9c <siprintf>
		  			  		  		  		OLED_ShowString(10,40,hello);
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	461a      	mov	r2, r3
 80017e6:	2128      	movs	r1, #40	; 0x28
 80017e8:	200a      	movs	r0, #10
 80017ea:	f000 f9bb 	bl	8001b64 <OLED_ShowString>
		  			  		  		  		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <LeftMotor+0x640>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		  			  		  		  		tick = HAL_GetTick();
 80017f6:	f000 fcd9 	bl	80021ac <HAL_GetTick>
 80017fa:	6378      	str	r0, [r7, #52]	; 0x34
		  			  		  		  	}

		  		  }while(pulsetotal < pulseneeded);
 80017fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	429a      	cmp	r2, r3
 8001802:	d384      	bcc.n	800170e <LeftMotor+0x50e>
		  		  Buffer[0] = 'd';
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <LeftMotor+0x644>)
 8001806:	2264      	movs	r2, #100	; 0x64
 8001808:	701a      	strb	r2, [r3, #0]
		  		  HAL_UART_Transmit(&huart3, "READY", sizeof("READY"), HAL_MAX_DELAY);
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	2206      	movs	r2, #6
 8001810:	490d      	ldr	r1, [pc, #52]	; (8001848 <LeftMotor+0x648>)
 8001812:	480e      	ldr	r0, [pc, #56]	; (800184c <LeftMotor+0x64c>)
 8001814:	f002 fd47 	bl	80042a6 <HAL_UART_Transmit>
		  		  break;
 8001818:	e00c      	b.n	8001834 <LeftMotor+0x634>


	  default:
		  htim1.Instance ->CCR4 = 202;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <LeftMotor+0x650>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	22ca      	movs	r2, #202	; 0xca
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <LeftMotor+0x654>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <LeftMotor+0x654>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	; 0x38
		  break;
 8001832:	bf00      	nop
	  switch(Buffer[0]){
 8001834:	e506      	b.n	8001244 <LeftMotor+0x44>
 8001836:	bf00      	nop
 8001838:	080087c4 	.word	0x080087c4
 800183c:	080087d0 	.word	0x080087d0
 8001840:	200000d8 	.word	0x200000d8
 8001844:	200001c0 	.word	0x200001c0
 8001848:	080087dc 	.word	0x080087dc
 800184c:	20000168 	.word	0x20000168
 8001850:	20000090 	.word	0x20000090
 8001854:	20000120 	.word	0x20000120

08001858 <RightMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RightMotor */
void RightMotor(void *argument)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RightMotor */
  /* Infinite loop */
  for(;;)
 8001860:	e7fe      	b.n	8001860 <RightMotor+0x8>

08001862 <EncoderL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoderL */
void EncoderL(void *argument)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderL */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f003 fe60 	bl	8005530 <osDelay>
 8001870:	e7fb      	b.n	800186a <EncoderL+0x8>

08001872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001876:	b672      	cpsid	i
}
 8001878:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187a:	e7fe      	b.n	800187a <Error_Handler+0x8>

0800187c <OLED_WR_Byte>:
Output  : none

**************************************************************************/  

void OLED_WR_Byte(uint8_t dat,uint8_t DataCmd)
{	
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if(DataCmd == 1) 		// Data write
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d106      	bne.n	80018a0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();		// Set the D/C# line
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	481c      	ldr	r0, [pc, #112]	; (800190c <OLED_WR_Byte+0x90>)
 800189a:	f000 fff7 	bl	800288c <HAL_GPIO_WritePin>
 800189e:	e005      	b.n	80018ac <OLED_WR_Byte+0x30>
	else  					// Command write
	  OLED_RS_Clr();        // Clear the D/C# line
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4819      	ldr	r0, [pc, #100]	; (800190c <OLED_WR_Byte+0x90>)
 80018a8:	f000 fff0 	bl	800288c <HAL_GPIO_WritePin>

	for(i=0;i<8;i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e01e      	b.n	80018f0 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 80018b2:	2200      	movs	r2, #0
 80018b4:	2120      	movs	r1, #32
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <OLED_WR_Byte+0x90>)
 80018b8:	f000 ffe8 	bl	800288c <HAL_GPIO_WritePin>
		if(dat & 0x80)
 80018bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da05      	bge.n	80018d0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80018c4:	2201      	movs	r2, #1
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <OLED_WR_Byte+0x90>)
 80018ca:	f000 ffdf 	bl	800288c <HAL_GPIO_WritePin>
 80018ce:	e004      	b.n	80018da <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 80018d0:	2200      	movs	r2, #0
 80018d2:	2140      	movs	r1, #64	; 0x40
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <OLED_WR_Byte+0x90>)
 80018d6:	f000 ffd9 	bl	800288c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80018da:	2201      	movs	r2, #1
 80018dc:	2120      	movs	r1, #32
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <OLED_WR_Byte+0x90>)
 80018e0:	f000 ffd4 	bl	800288c <HAL_GPIO_WritePin>
		dat <<= 1;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	3301      	adds	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d9dd      	bls.n	80018b2 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();   	  // Keep the D/C# line high upon exit
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <OLED_WR_Byte+0x90>)
 80018fe:	f000 ffc5 	bl	800288c <HAL_GPIO_WritePin>
} 
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <OLED_Refresh_Gram>:

//**************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 8001916:	2300      	movs	r3, #0
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e026      	b.n	800196a <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	3b50      	subs	r3, #80	; 0x50
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffa9 	bl	800187c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800192a:	2100      	movs	r1, #0
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff ffa5 	bl	800187c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 8001932:	2100      	movs	r1, #0
 8001934:	2010      	movs	r0, #16
 8001936:	f7ff ffa1 	bl	800187c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800193a:	2300      	movs	r3, #0
 800193c:	71bb      	strb	r3, [r7, #6]
 800193e:	e00d      	b.n	800195c <OLED_Refresh_Gram+0x4c>
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	490d      	ldr	r1, [pc, #52]	; (800197c <OLED_Refresh_Gram+0x6c>)
 8001946:	00d2      	lsls	r2, r2, #3
 8001948:	440a      	add	r2, r1
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2101      	movs	r1, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff93 	bl	800187c <OLED_WR_Byte>
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	3301      	adds	r3, #1
 800195a:	71bb      	strb	r3, [r7, #6]
 800195c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	daed      	bge.n	8001940 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	3301      	adds	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b07      	cmp	r3, #7
 800196e:	d9d5      	bls.n	800191c <OLED_Refresh_Gram+0xc>
	}
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001c8 	.word	0x200001c8

08001980 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	e014      	b.n	80019b6 <OLED_Clear+0x36>
 800198c:	2300      	movs	r3, #0
 800198e:	71bb      	strb	r3, [r7, #6]
 8001990:	e00a      	b.n	80019a8 <OLED_Clear+0x28>
 8001992:	79ba      	ldrb	r2, [r7, #6]
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	490c      	ldr	r1, [pc, #48]	; (80019c8 <OLED_Clear+0x48>)
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	440a      	add	r2, r1
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	3301      	adds	r3, #1
 80019a6:	71bb      	strb	r3, [r7, #6]
 80019a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	daf0      	bge.n	8001992 <OLED_Clear+0x12>
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	3301      	adds	r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d9e7      	bls.n	800198c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80019bc:	f7ff ffa8 	bl	8001910 <OLED_Refresh_Gram>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200001c8 	.word	0x200001c8

080019cc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	4613      	mov	r3, r2
 80019dc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db41      	blt.n	8001a6e <OLED_DrawPoint+0xa2>
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	2b3f      	cmp	r3, #63	; 0x3f
 80019ee:	d83e      	bhi.n	8001a6e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001a12:	797b      	ldrb	r3, [r7, #5]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <OLED_DrawPoint+0x72>
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	4917      	ldr	r1, [pc, #92]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a1e:	00d2      	lsls	r2, r2, #3
 8001a20:	440a      	add	r2, r1
 8001a22:	4413      	add	r3, r2
 8001a24:	7818      	ldrb	r0, [r3, #0]
 8001a26:	79fa      	ldrb	r2, [r7, #7]
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	7bf9      	ldrb	r1, [r7, #15]
 8001a2c:	4301      	orrs	r1, r0
 8001a2e:	b2c8      	uxtb	r0, r1
 8001a30:	4912      	ldr	r1, [pc, #72]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a32:	00d2      	lsls	r2, r2, #3
 8001a34:	440a      	add	r2, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	4602      	mov	r2, r0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e018      	b.n	8001a70 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a44:	00d2      	lsls	r2, r2, #3
 8001a46:	440a      	add	r2, r1
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	b259      	sxtb	r1, r3
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	b2c8      	uxtb	r0, r1
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	440a      	add	r2, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	4602      	mov	r2, r0
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e000      	b.n	8001a70 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8001a6e:	bf00      	nop
}
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200001c8 	.word	0x200001c8

08001a80 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	4603      	mov	r3, r0
 8001a94:	71bb      	strb	r3, [r7, #6]
 8001a96:	460b      	mov	r3, r1
 8001a98:	717b      	strb	r3, [r7, #5]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001aa2:	797b      	ldrb	r3, [r7, #5]
 8001aa4:	3b20      	subs	r3, #32
 8001aa6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73bb      	strb	r3, [r7, #14]
 8001aac:	e04d      	b.n	8001b4a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001aae:	793b      	ldrb	r3, [r7, #4]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d10b      	bne.n	8001acc <OLED_ShowChar+0x4c>
 8001ab4:	797a      	ldrb	r2, [r7, #5]
 8001ab6:	7bb9      	ldrb	r1, [r7, #14]
 8001ab8:	4828      	ldr	r0, [pc, #160]	; (8001b5c <OLED_ShowChar+0xdc>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4403      	add	r3, r0
 8001ac4:	440b      	add	r3, r1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e007      	b.n	8001adc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001acc:	797a      	ldrb	r2, [r7, #5]
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	4923      	ldr	r1, [pc, #140]	; (8001b60 <OLED_ShowChar+0xe0>)
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	440a      	add	r2, r1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	737b      	strb	r3, [r7, #13]
 8001ae0:	e02d      	b.n	8001b3e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da07      	bge.n	8001afa <OLED_ShowChar+0x7a>
 8001aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aee:	79b9      	ldrb	r1, [r7, #6]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff6a 	bl	80019cc <OLED_DrawPoint>
 8001af8:	e00c      	b.n	8001b14 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	79b9      	ldrb	r1, [r7, #6]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff5c 	bl	80019cc <OLED_DrawPoint>
			temp<<=1;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
			y++;
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001b20:	79ba      	ldrb	r2, [r7, #6]
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	793b      	ldrb	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d105      	bne.n	8001b38 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001b2c:	7b3b      	ldrb	r3, [r7, #12]
 8001b2e:	71bb      	strb	r3, [r7, #6]
				x++;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	3301      	adds	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
				break;
 8001b36:	e005      	b.n	8001b44 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001b38:	7b7b      	ldrb	r3, [r7, #13]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	737b      	strb	r3, [r7, #13]
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d9ce      	bls.n	8001ae2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	3301      	adds	r3, #1
 8001b48:	73bb      	strb	r3, [r7, #14]
 8001b4a:	7bba      	ldrb	r2, [r7, #14]
 8001b4c:	793b      	ldrb	r3, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3ad      	bcc.n	8001aae <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	080088e0 	.word	0x080088e0
 8001b60:	08008d54 	.word	0x08008d54

08001b64 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	603a      	str	r2, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	460b      	mov	r3, r1
 8001b72:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001b74:	e01f      	b.n	8001bb6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b7a      	cmp	r3, #122	; 0x7a
 8001b7a:	d904      	bls.n	8001b86 <OLED_ShowString+0x22>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	3310      	adds	r3, #16
 8001b84:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	2b3a      	cmp	r3, #58	; 0x3a
 8001b8a:	d905      	bls.n	8001b98 <OLED_ShowString+0x34>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	71bb      	strb	r3, [r7, #6]
 8001b94:	f7ff fef4 	bl	8001980 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	79b9      	ldrb	r1, [r7, #6]
 8001b9e:	79f8      	ldrb	r0, [r7, #7]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	230c      	movs	r3, #12
 8001ba6:	f7ff ff6b 	bl	8001a80 <OLED_ShowChar>
        x+=8;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3308      	adds	r3, #8
 8001bae:	71fb      	strb	r3, [r7, #7]
        p++;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1db      	bne.n	8001b76 <OLED_ShowString+0x12>
    }  
}	 
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <OLED_Init>:

void OLED_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001bcc:	f000 fe92 	bl	80028f4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <OLED_Init+0x110>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <OLED_Init+0x110>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <OLED_Init+0x110>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a3d      	ldr	r2, [pc, #244]	; (8001cd8 <OLED_Init+0x110>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001be8:	f000 fe98 	bl	800291c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001bec:	2200      	movs	r2, #0
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	483a      	ldr	r0, [pc, #232]	; (8001cdc <OLED_Init+0x114>)
 8001bf2:	f000 fe4b 	bl	800288c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f000 fae4 	bl	80021c4 <HAL_Delay>
	OLED_RST_Set();
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	4836      	ldr	r0, [pc, #216]	; (8001cdc <OLED_Init+0x114>)
 8001c02:	f000 fe43 	bl	800288c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001c06:	2100      	movs	r1, #0
 8001c08:	20ae      	movs	r0, #174	; 0xae
 8001c0a:	f7ff fe37 	bl	800187c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001c0e:	2100      	movs	r1, #0
 8001c10:	20d5      	movs	r0, #213	; 0xd5
 8001c12:	f7ff fe33 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001c16:	2100      	movs	r1, #0
 8001c18:	2050      	movs	r0, #80	; 0x50
 8001c1a:	f7ff fe2f 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001c1e:	2100      	movs	r1, #0
 8001c20:	20a8      	movs	r0, #168	; 0xa8
 8001c22:	f7ff fe2b 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001c26:	2100      	movs	r1, #0
 8001c28:	203f      	movs	r0, #63	; 0x3f
 8001c2a:	f7ff fe27 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001c2e:	2100      	movs	r1, #0
 8001c30:	20d3      	movs	r0, #211	; 0xd3
 8001c32:	f7ff fe23 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f7ff fe1f 	bl	800187c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2040      	movs	r0, #64	; 0x40
 8001c42:	f7ff fe1b 	bl	800187c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001c46:	2100      	movs	r1, #0
 8001c48:	208d      	movs	r0, #141	; 0x8d
 8001c4a:	f7ff fe17 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2014      	movs	r0, #20
 8001c52:	f7ff fe13 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001c56:	2100      	movs	r1, #0
 8001c58:	2020      	movs	r0, #32
 8001c5a:	f7ff fe0f 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2002      	movs	r0, #2
 8001c62:	f7ff fe0b 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001c66:	2100      	movs	r1, #0
 8001c68:	20a1      	movs	r0, #161	; 0xa1
 8001c6a:	f7ff fe07 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001c6e:	2100      	movs	r1, #0
 8001c70:	20c0      	movs	r0, #192	; 0xc0
 8001c72:	f7ff fe03 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001c76:	2100      	movs	r1, #0
 8001c78:	20da      	movs	r0, #218	; 0xda
 8001c7a:	f7ff fdff 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001c7e:	2100      	movs	r1, #0
 8001c80:	2012      	movs	r0, #18
 8001c82:	f7ff fdfb 	bl	800187c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001c86:	2100      	movs	r1, #0
 8001c88:	2081      	movs	r0, #129	; 0x81
 8001c8a:	f7ff fdf7 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001c8e:	2100      	movs	r1, #0
 8001c90:	20ef      	movs	r0, #239	; 0xef
 8001c92:	f7ff fdf3 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001c96:	2100      	movs	r1, #0
 8001c98:	20d9      	movs	r0, #217	; 0xd9
 8001c9a:	f7ff fdef 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	20f1      	movs	r0, #241	; 0xf1
 8001ca2:	f7ff fdeb 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	20db      	movs	r0, #219	; 0xdb
 8001caa:	f7ff fde7 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2030      	movs	r0, #48	; 0x30
 8001cb2:	f7ff fde3 	bl	800187c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	20a4      	movs	r0, #164	; 0xa4
 8001cba:	f7ff fddf 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	20a6      	movs	r0, #166	; 0xa6
 8001cc2:	f7ff fddb 	bl	800187c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	20af      	movs	r0, #175	; 0xaf
 8001cca:	f7ff fdd7 	bl	800187c <OLED_WR_Byte>
	OLED_Clear(); 
 8001cce:	f7ff fe57 	bl	8001980 <OLED_Clear>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_MspInit+0x54>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a11      	ldr	r2, [pc, #68]	; (8001d34 <HAL_MspInit+0x54>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_MspInit+0x54>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_MspInit+0x54>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_MspInit+0x54>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_MspInit+0x54>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	210f      	movs	r1, #15
 8001d22:	f06f 0001 	mvn.w	r0, #1
 8001d26:	f000 fb4c 	bl	80023c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a32      	ldr	r2, [pc, #200]	; (8001e20 <HAL_TIM_Base_MspInit+0xe8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d12d      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a30      	ldr	r2, [pc, #192]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0310 	and.w	r3, r3, #16
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8001d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	481e      	ldr	r0, [pc, #120]	; (8001e28 <HAL_TIM_Base_MspInit+0xf0>)
 8001db0:	f000 fbd0 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001db4:	e030      	b.n	8001e18 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_TIM_Base_MspInit+0xf4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d12b      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_TIM_Base_MspInit+0xec>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <HAL_TIM_Base_MspInit+0xf8>)
 8001e14:	f000 fb9e 	bl	8002554 <HAL_GPIO_Init>
}
 8001e18:	bf00      	nop
 8001e1a:	3730      	adds	r7, #48	; 0x30
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010400 	.word	0x40010400
 8001e30:	40020800 	.word	0x40020800

08001e34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e54:	d14a      	bne.n	8001eec <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6413      	str	r3, [r2, #64]	; 0x40
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001ec8:	f000 fb44 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ee8:	f000 fb34 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3728      	adds	r7, #40	; 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_UART_MspInit+0x94>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d134      	bne.n	8001f8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_UART_MspInit+0x98>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	4619      	mov	r1, r3
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <HAL_UART_MspInit+0x9c>)
 8001f78:	f000 faec 	bl	8002554 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2105      	movs	r1, #5
 8001f80:	2027      	movs	r0, #39	; 0x27
 8001f82:	f000 fa1e 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f86:	2027      	movs	r0, #39	; 0x27
 8001f88:	f000 fa37 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f000 f8d8 	bl	8002184 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001fd4:	f004 feba 	bl	8006d4c <xTaskGetSchedulerState>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001fde:	f005 fca3 	bl	8007928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART3_IRQHandler+0x10>)
 8001fee:	f002 fa1d 	bl	800442c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000168 	.word	0x20000168

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	; (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f005 fef6 	bl	8007e1c <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20020000 	.word	0x20020000
 800205c:	00000400 	.word	0x00000400
 8002060:	200005c8 	.word	0x200005c8
 8002064:	20004f30 	.word	0x20004f30

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a8:	4c0b      	ldr	r4, [pc, #44]	; (80020d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b6:	f7ff ffd7 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ba:	f005 feb5 	bl	8007e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020be:	f7fe fd5f 	bl	8000b80 <main>
  bx  lr    
 80020c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020cc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020d0:	080093a0 	.word	0x080093a0
  ldr r2, =_sbss
 80020d4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020d8:	20004f30 	.word	0x20004f30

080020dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020dc:	e7fe      	b.n	80020dc <ADC_IRQHandler>
	...

080020e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_Init+0x40>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_Init+0x40>)
 80020f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_Init+0x40>)
 8002102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f94f 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800210e:	200f      	movs	r0, #15
 8002110:	f000 f808 	bl	8002124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002114:	f7ff fde4 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023c00 	.word	0x40023c00

08002124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x54>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_InitTick+0x58>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213a:	fbb3 f3f1 	udiv	r3, r3, r1
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f967 	bl	8002416 <HAL_SYSTICK_Config>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e00e      	b.n	8002170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d80a      	bhi.n	800216e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f000 f92f 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002164:	4a06      	ldr	r2, [pc, #24]	; (8002180 <HAL_InitTick+0x5c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000000 	.word	0x20000000
 800217c:	20000008 	.word	0x20000008
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x20>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_IncTick+0x24>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4413      	add	r3, r2
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_IncTick+0x24>)
 8002196:	6013      	str	r3, [r2, #0]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008
 80021a8:	200005cc 	.word	0x200005cc

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	200005cc 	.word	0x200005cc

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d005      	beq.n	80021ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_Delay+0x44>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ea:	bf00      	nop
 80021ec:	f7ff ffde 	bl	80021ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d8f7      	bhi.n	80021ec <HAL_Delay+0x28>
  {
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff3e 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff8e 	bl	8002300 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5d 	bl	80022ac <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff31 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff feb6 	bl	80021ac <HAL_GetTick>
 8002440:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d008      	beq.n	8002460 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e052      	b.n	8002506 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0216 	bic.w	r2, r2, #22
 800246e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_DMA_Abort+0x62>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	e013      	b.n	80024da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b2:	f7ff fe7b 	bl	80021ac <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d90c      	bls.n	80024da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2203      	movs	r2, #3
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e015      	b.n	8002506 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e4      	bne.n	80024b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	223f      	movs	r2, #63	; 0x3f
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d004      	beq.n	800252c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e00c      	b.n	8002546 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2205      	movs	r2, #5
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
 8002898:	4613      	mov	r3, r2
 800289a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800289c:	787b      	ldrb	r3, [r7, #1]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a8:	e003      	b.n	80028b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	041a      	lsls	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d0:	887a      	ldrh	r2, [r7, #2]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4013      	ands	r3, r2
 80028d6:	041a      	lsls	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43d9      	mvns	r1, r3
 80028dc:	887b      	ldrh	r3, [r7, #2]
 80028de:	400b      	ands	r3, r1
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	619a      	str	r2, [r3, #24]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_PWR_EnableBkUpAccess+0x20>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002906:	687b      	ldr	r3, [r7, #4]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	420e0020 	.word	0x420e0020
 8002918:	40007000 	.word	0x40007000

0800291c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_PWR_DisableBkUpAccess+0x20>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_PWR_DisableBkUpAccess+0x24>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800292e:	687b      	ldr	r3, [r7, #4]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	420e0020 	.word	0x420e0020
 8002940:	40007000 	.word	0x40007000

08002944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e267      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d075      	beq.n	8002a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002962:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d00c      	beq.n	8002988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	2b08      	cmp	r3, #8
 8002978:	d112      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002986:	d10b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	4b7e      	ldr	r3, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d05b      	beq.n	8002a4c <HAL_RCC_OscConfig+0x108>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d157      	bne.n	8002a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e242      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x74>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e01d      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x98>
 80029c2:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6f      	ldr	r2, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a68      	ldr	r2, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fbd6 	bl	80021ac <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff fbd2 	bl	80021ac <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e207      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0xc0>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fbc2 	bl	80021ac <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff fbbe 	bl	80021ac <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1f3      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0xe8>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11c      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1c7      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	e03a      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7ff fb77 	bl	80021ac <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7ff fb73 	bl	80021ac <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1a8      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4925      	ldr	r1, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff fb56 	bl	80021ac <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b04:	f7ff fb52 	bl	80021ac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e187      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7ff fb36 	bl	80021ac <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b44:	f7ff fb32 	bl	80021ac <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e167      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x200>
 8002b62:	e01b      	b.n	8002b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff fb1f 	bl	80021ac <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00e      	b.n	8002b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b72:	f7ff fb1b 	bl	80021ac <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d907      	bls.n	8002b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e150      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	42470000 	.word	0x42470000
 8002b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ea      	bne.n	8002b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8097 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a7c      	ldr	r2, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a73      	ldr	r2, [pc, #460]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff fadb 	bl	80021ac <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7ff fad7 	bl	80021ac <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e10c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2ea>
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a63      	ldr	r2, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x30c>
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a54      	ldr	r2, [pc, #336]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff fa9c 	bl	80021ac <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7ff fa98 	bl	80021ac <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0cb      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0ee      	beq.n	8002c78 <HAL_RCC_OscConfig+0x334>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7ff fa86 	bl	80021ac <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7ff fa82 	bl	80021ac <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0b5      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a1 	beq.w	8002e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d05c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d141      	bne.n	8002d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fa56 	bl	80021ac <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff fa52 	bl	80021ac <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e087      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	491b      	ldr	r1, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7ff fa2b 	bl	80021ac <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7ff fa27 	bl	80021ac <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e05c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x416>
 8002d78:	e054      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7ff fa14 	bl	80021ac <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff fa10 	bl	80021ac <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e045      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x444>
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e038      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d028      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d121      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0cc      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90c      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7ff f942 	bl	80021ac <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7ff f93e 	bl	80021ac <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20c      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f8a2 	bl	8002124 <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08009344 	.word	0x08009344
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b090      	sub	sp, #64	; 0x40
 8003006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	2300      	movs	r3, #0
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003010:	2300      	movs	r3, #0
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d00d      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x40>
 8003024:	2b08      	cmp	r3, #8
 8003026:	f200 80a1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x16c>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x34>
 800302e:	2b04      	cmp	r3, #4
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x3a>
 8003032:	e09b      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_GetSysClockFreq+0x184>)
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003038:	e09b      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303a:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800303c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800303e:	e098      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304a:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	627a      	str	r2, [r7, #36]	; 0x24
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003068:	2100      	movs	r1, #0
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800306c:	fb03 f201 	mul.w	r2, r3, r1
 8003070:	2300      	movs	r3, #0
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	4413      	add	r3, r2
 8003078:	4a43      	ldr	r2, [pc, #268]	; (8003188 <HAL_RCC_GetSysClockFreq+0x188>)
 800307a:	fba0 1202 	umull	r1, r2, r0, r2
 800307e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003080:	460a      	mov	r2, r1
 8003082:	62ba      	str	r2, [r7, #40]	; 0x28
 8003084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003086:	4413      	add	r3, r2
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308c:	2200      	movs	r2, #0
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	61fa      	str	r2, [r7, #28]
 8003092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800309a:	f7fd fbef 	bl	800087c <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4613      	mov	r3, r2
 80030a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030a6:	e053      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	2200      	movs	r2, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	617a      	str	r2, [r7, #20]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030ba:	f04f 0b00 	mov.w	fp, #0
 80030be:	4652      	mov	r2, sl
 80030c0:	465b      	mov	r3, fp
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	ebb2 080a 	subs.w	r8, r2, sl
 80030da:	eb63 090b 	sbc.w	r9, r3, fp
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030f2:	ebb2 0408 	subs.w	r4, r2, r8
 80030f6:	eb63 0509 	sbc.w	r5, r3, r9
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	00eb      	lsls	r3, r5, #3
 8003104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003108:	00e2      	lsls	r2, r4, #3
 800310a:	4614      	mov	r4, r2
 800310c:	461d      	mov	r5, r3
 800310e:	eb14 030a 	adds.w	r3, r4, sl
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	eb45 030b 	adc.w	r3, r5, fp
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313a:	2200      	movs	r2, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003144:	f7fd fb9a 	bl	800087c <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_GetSysClockFreq+0x180>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetSysClockFreq+0x184>)
 800316e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003174:	4618      	mov	r0, r3
 8003176:	3740      	adds	r7, #64	; 0x40
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	00f42400 	.word	0x00f42400
 8003188:	017d7840 	.word	0x017d7840

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff0 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0a9b      	lsrs	r3, r3, #10
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	08009354 	.word	0x08009354

080031cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d0:	f7ff ffdc 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0b5b      	lsrs	r3, r3, #13
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08009354 	.word	0x08009354

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e041      	b.n	800328a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fd8c 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fc0c 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e041      	b.n	8003328 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f839 	bl	8003330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f000 fbbd 	bl	8003a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <HAL_TIM_PWM_Start+0x24>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e022      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d109      	bne.n	8003382 <HAL_TIM_PWM_Start+0x3e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	e015      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d109      	bne.n	800339c <HAL_TIM_PWM_Start+0x58>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e008      	b.n	80033ae <HAL_TIM_PWM_Start+0x6a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07c      	b.n	80034b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x82>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c4:	e013      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x92>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_PWM_Start+0xa2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	e003      	b.n	80033ee <HAL_TIM_PWM_Start+0xaa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fe14 	bl	8004024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_TIM_PWM_Start+0x174>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIM_PWM_Start+0xcc>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <HAL_TIM_PWM_Start+0x178>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PWM_Start+0xd0>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_TIM_PWM_Start+0xd2>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <HAL_TIM_PWM_Start+0x174>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d01d      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_TIM_PWM_Start+0x17c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_TIM_PWM_Start+0x180>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_TIM_PWM_Start+0x184>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_TIM_PWM_Start+0x178>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIM_PWM_Start+0x188>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_TIM_PWM_Start+0x136>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a16      	ldr	r2, [pc, #88]	; (80034d0 <HAL_TIM_PWM_Start+0x18c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d111      	bne.n	800349e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b06      	cmp	r3, #6
 800348a:	d010      	beq.n	80034ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	e007      	b.n	80034ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40010400 	.word	0x40010400
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40001800 	.word	0x40001800

080034d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e097      	b.n	8003618 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fe fc99 	bl	8001e34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2202      	movs	r2, #2
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003518:	f023 0307 	bic.w	r3, r3, #7
 800351c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 fa91 	bl	8003a50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	4313      	orrs	r3, r2
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003574:	f023 030c 	bic.w	r3, r3, #12
 8003578:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	4313      	orrs	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	011a      	lsls	r2, r3, #4
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	031b      	lsls	r3, r3, #12
 80035a4:	4313      	orrs	r3, r2
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	4313      	orrs	r3, r2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003630:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003638:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003640:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003648:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d110      	bne.n	8003672 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d102      	bne.n	800365c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003656:	7b7b      	ldrb	r3, [r7, #13]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e069      	b.n	8003734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003670:	e031      	b.n	80036d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b04      	cmp	r3, #4
 8003676:	d110      	bne.n	800369a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800367e:	7b3b      	ldrb	r3, [r7, #12]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e055      	b.n	8003734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	e01d      	b.n	80036d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d108      	bne.n	80036b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036a0:	7bbb      	ldrb	r3, [r7, #14]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036a6:	7b7b      	ldrb	r3, [r7, #13]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036ac:	7b3b      	ldrb	r3, [r7, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e03e      	b.n	8003734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_TIM_Encoder_Start+0xc4>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d008      	beq.n	80036f4 <HAL_TIM_Encoder_Start+0xd4>
 80036e2:	e00f      	b.n	8003704 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fc99 	bl	8004024 <TIM_CCxChannelCmd>
      break;
 80036f2:	e016      	b.n	8003722 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	2104      	movs	r1, #4
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fc91 	bl	8004024 <TIM_CCxChannelCmd>
      break;
 8003702:	e00e      	b.n	8003722 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2201      	movs	r2, #1
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fc89 	bl	8004024 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	2104      	movs	r1, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fc82 	bl	8004024 <TIM_CCxChannelCmd>
      break;
 8003720:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003756:	2302      	movs	r3, #2
 8003758:	e0ae      	b.n	80038b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b0c      	cmp	r3, #12
 8003766:	f200 809f 	bhi.w	80038a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080038a9 	.word	0x080038a9
 8003778:	080038a9 	.word	0x080038a9
 800377c:	080038a9 	.word	0x080038a9
 8003780:	080037e5 	.word	0x080037e5
 8003784:	080038a9 	.word	0x080038a9
 8003788:	080038a9 	.word	0x080038a9
 800378c:	080038a9 	.word	0x080038a9
 8003790:	08003827 	.word	0x08003827
 8003794:	080038a9 	.word	0x080038a9
 8003798:	080038a9 	.word	0x080038a9
 800379c:	080038a9 	.word	0x080038a9
 80037a0:	08003867 	.word	0x08003867
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9f0 	bl	8003b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0208 	orr.w	r2, r2, #8
 80037be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6999      	ldr	r1, [r3, #24]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	619a      	str	r2, [r3, #24]
      break;
 80037e2:	e064      	b.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fa40 	bl	8003c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	021a      	lsls	r2, r3, #8
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	619a      	str	r2, [r3, #24]
      break;
 8003824:	e043      	b.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fa95 	bl	8003d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0208 	orr.w	r2, r2, #8
 8003840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0204 	bic.w	r2, r2, #4
 8003850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69d9      	ldr	r1, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
      break;
 8003864:	e023      	b.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fae9 	bl	8003e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	021a      	lsls	r2, r3, #8
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	61da      	str	r2, [r3, #28]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75fb      	strb	r3, [r7, #23]
      break;
 80038ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_TIM_ConfigClockSource+0x1c>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0b4      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x186>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d03e      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0xd4>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	f200 8087 	bhi.w	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 800391e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003922:	f000 8086 	beq.w	8003a32 <HAL_TIM_ConfigClockSource+0x172>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d87f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 800392c:	2b70      	cmp	r3, #112	; 0x70
 800392e:	d01a      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xa6>
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d87b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 8003934:	2b60      	cmp	r3, #96	; 0x60
 8003936:	d050      	beq.n	80039da <HAL_TIM_ConfigClockSource+0x11a>
 8003938:	2b60      	cmp	r3, #96	; 0x60
 800393a:	d877      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 800393c:	2b50      	cmp	r3, #80	; 0x50
 800393e:	d03c      	beq.n	80039ba <HAL_TIM_ConfigClockSource+0xfa>
 8003940:	2b50      	cmp	r3, #80	; 0x50
 8003942:	d873      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d058      	beq.n	80039fa <HAL_TIM_ConfigClockSource+0x13a>
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d86f      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d064      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15a>
 8003950:	2b30      	cmp	r3, #48	; 0x30
 8003952:	d86b      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b20      	cmp	r3, #32
 8003956:	d060      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15a>
 8003958:	2b20      	cmp	r3, #32
 800395a:	d867      	bhi.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d05c      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15a>
 8003960:	2b10      	cmp	r3, #16
 8003962:	d05a      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0x15a>
 8003964:	e062      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6899      	ldr	r1, [r3, #8]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f000 fb35 	bl	8003fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
      break;
 8003992:	e04f      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f000 fb1e 	bl	8003fe4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e03c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f000 fa92 	bl	8003ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2150      	movs	r1, #80	; 0x50
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 faeb 	bl	8003fae <TIM_ITRx_SetConfig>
      break;
 80039d8:	e02c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f000 fab1 	bl	8003f4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2160      	movs	r1, #96	; 0x60
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fadb 	bl	8003fae <TIM_ITRx_SetConfig>
      break;
 80039f8:	e01c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f000 fa72 	bl	8003ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 facb 	bl	8003fae <TIM_ITRx_SetConfig>
      break;
 8003a18:	e00c      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f000 fac2 	bl	8003fae <TIM_ITRx_SetConfig>
      break;
 8003a2a:	e003      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a30:	e000      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a40      	ldr	r2, [pc, #256]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d00f      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3d      	ldr	r2, [pc, #244]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3a      	ldr	r2, [pc, #232]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d108      	bne.n	8003aa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d02b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d027      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <TIM_Base_SetConfig+0x118>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d023      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <TIM_Base_SetConfig+0x11c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <TIM_Base_SetConfig+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d017      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <TIM_Base_SetConfig+0x128>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <TIM_Base_SetConfig+0x12c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00f      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <TIM_Base_SetConfig+0x130>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <TIM_Base_SetConfig+0x134>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a24      	ldr	r2, [pc, #144]	; (8003b88 <TIM_Base_SetConfig+0x138>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <TIM_Base_SetConfig+0x13c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d108      	bne.n	8003b14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <TIM_Base_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0xf8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <TIM_Base_SetConfig+0x124>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800
 8003b84:	40001800 	.word	0x40001800
 8003b88:	40001c00 	.word	0x40001c00
 8003b8c:	40002000 	.word	0x40002000

08003b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0302 	bic.w	r3, r3, #2
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <TIM_OC1_SetConfig+0xd8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC1_SetConfig+0x64>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <TIM_OC1_SetConfig+0xdc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10c      	bne.n	8003c0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0308 	bic.w	r3, r3, #8
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <TIM_OC1_SetConfig+0xd8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC1_SetConfig+0x8e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <TIM_OC1_SetConfig+0xdc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d111      	bne.n	8003c42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40010400 	.word	0x40010400

08003c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0210 	bic.w	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0320 	bic.w	r3, r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <TIM_OC2_SetConfig+0xe4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x68>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <TIM_OC2_SetConfig+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d10d      	bne.n	8003cf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <TIM_OC2_SetConfig+0xe4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <TIM_OC2_SetConfig+0x94>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <TIM_OC2_SetConfig+0xe8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400

08003d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <TIM_OC3_SetConfig+0xe0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC3_SetConfig+0x66>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <TIM_OC3_SetConfig+0xe4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10d      	bne.n	8003dde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <TIM_OC3_SetConfig+0xe0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d003      	beq.n	8003dee <TIM_OC3_SetConfig+0x92>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <TIM_OC3_SetConfig+0xe4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d113      	bne.n	8003e16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400

08003e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	021b      	lsls	r3, r3, #8
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <TIM_OC4_SetConfig+0xa4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC4_SetConfig+0x68>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <TIM_OC4_SetConfig+0xa8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d109      	bne.n	8003ec0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40010400 	.word	0x40010400

08003ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	f023 0201 	bic.w	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 030a 	bic.w	r3, r3, #10
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b087      	sub	sp, #28
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0210 	bic.w	r2, r3, #16
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f043 0307 	orr.w	r3, r3, #7
 8003fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	021a      	lsls	r2, r3, #8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	431a      	orrs	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2201      	movs	r2, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	43db      	mvns	r3, r3
 8004046:	401a      	ands	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	fa01 f303 	lsl.w	r3, r1, r3
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e05a      	b.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d022      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d4:	d01d      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1b      	ldr	r2, [pc, #108]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a18      	ldr	r2, [pc, #96]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a17      	ldr	r2, [pc, #92]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a15      	ldr	r2, [pc, #84]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10c      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40010400 	.word	0x40010400
 8004160:	40014000 	.word	0x40014000
 8004164:	40001800 	.word	0x40001800

08004168 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004180:	2302      	movs	r3, #2
 8004182:	e03d      	b.n	8004200 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e03f      	b.n	800429e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd fe64 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fde9 	bl	8004e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695a      	ldr	r2, [r3, #20]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b08a      	sub	sp, #40	; 0x28
 80042aa:	af02      	add	r7, sp, #8
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d17c      	bne.n	80043c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HAL_UART_Transmit+0x2c>
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e075      	b.n	80043c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x3e>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e06e      	b.n	80043c2 <HAL_UART_Transmit+0x11c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fd ff57 	bl	80021ac <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	88fa      	ldrh	r2, [r7, #6]
 800430a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d108      	bne.n	8004328 <HAL_UART_Transmit+0x82>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d104      	bne.n	8004328 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e003      	b.n	8004330 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004338:	e02a      	b.n	8004390 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fb29 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e036      	b.n	80043c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3302      	adds	r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e007      	b.n	8004382 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	781a      	ldrb	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3301      	adds	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1cf      	bne.n	800433a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 faf9 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e006      	b.n	80043c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	4613      	mov	r3, r2
 80043d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d11d      	bne.n	8004420 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Receive_IT+0x26>
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e016      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Receive_IT+0x38>
 80043fe:	2302      	movs	r3, #2
 8004400:	e00f      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	461a      	mov	r2, r3
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fb2e 	bl	8004a78 <UART_Start_Receive_IT>
 800441c:	4603      	mov	r3, r0
 800441e:	e000      	b.n	8004422 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0ba      	sub	sp, #232	; 0xe8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800446a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_UART_IRQHandler+0x66>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fc11 	bl	8004cb2 <UART_Receive_IT>
      return;
 8004490:	e256      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80de 	beq.w	8004658 <HAL_UART_IRQHandler+0x22c>
 800449c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80d1 	beq.w	8004658 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_UART_IRQHandler+0xae>
 80044c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_UART_IRQHandler+0xd2>
 80044e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <HAL_UART_IRQHandler+0xf6>
 800450a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d011      	beq.n	8004552 <HAL_UART_IRQHandler+0x126>
 800452e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800453a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0208 	orr.w	r2, r3, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 81ed 	beq.w	8004936 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800455c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_UART_IRQHandler+0x14e>
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb9c 	bl	8004cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_UART_IRQHandler+0x17a>
 800459e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04f      	beq.n	8004646 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 faa4 	bl	8004af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d141      	bne.n	800463e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1d9      	bne.n	80045ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d013      	beq.n	8004636 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	4a7d      	ldr	r2, [pc, #500]	; (8004808 <HAL_UART_IRQHandler+0x3dc>)
 8004614:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd ff77 	bl	800250e <HAL_DMA_Abort_IT>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004630:	4610      	mov	r0, r2
 8004632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	e00e      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f99a 	bl	8004970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	e00a      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f996 	bl	8004970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e006      	b.n	8004654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f992 	bl	8004970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004652:	e170      	b.n	8004936 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004654:	bf00      	nop
    return;
 8004656:	e16e      	b.n	8004936 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2b01      	cmp	r3, #1
 800465e:	f040 814a 	bne.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8143 	beq.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 813c 	beq.w	80048f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	f040 80b4 	bne.w	800480c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8140 	beq.w	800493a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046c2:	429a      	cmp	r2, r3
 80046c4:	f080 8139 	bcs.w	800493a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046da:	f000 8088 	beq.w	80047ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800470a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800470e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004716:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1d9      	bne.n	80046de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800473a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800474e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004752:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004756:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e1      	bne.n	800472a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800478a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800478c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004790:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e3      	bne.n	8004766 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047be:	f023 0310 	bic.w	r3, r3, #16
 80047c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80047d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e3      	bne.n	80047ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fd fe20 	bl	800242e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f8c0 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004804:	e099      	b.n	800493a <HAL_UART_IRQHandler+0x50e>
 8004806:	bf00      	nop
 8004808:	08004bbb 	.word	0x08004bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004814:	b29b      	uxth	r3, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 808b 	beq.w	800493e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8086 	beq.w	800493e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004856:	647a      	str	r2, [r7, #68]	; 0x44
 8004858:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800485c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3314      	adds	r3, #20
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	623b      	str	r3, [r7, #32]
   return(result);
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3314      	adds	r3, #20
 800488a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800488e:	633a      	str	r2, [r7, #48]	; 0x30
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0310 	bic.w	r3, r3, #16
 80048c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048d4:	61fa      	str	r2, [r7, #28]
 80048d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	617b      	str	r3, [r7, #20]
   return(result);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e3      	bne.n	80048b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f848 	bl	8004984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f4:	e023      	b.n	800493e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_UART_IRQHandler+0x4ea>
 8004902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f967 	bl	8004be2 <UART_Transmit_IT>
    return;
 8004914:	e014      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00e      	beq.n	8004940 <HAL_UART_IRQHandler+0x514>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9a7 	bl	8004c82 <UART_EndTransmit_IT>
    return;
 8004934:	e004      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
    return;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
      return;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_UART_IRQHandler+0x514>
      return;
 800493e:	bf00      	nop
  }
}
 8004940:	37e8      	adds	r7, #232	; 0xe8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b090      	sub	sp, #64	; 0x40
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ac:	e050      	b.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d04c      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
 80049bc:	f7fd fbf6 	bl	80021ac <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d241      	bcs.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ec:	637a      	str	r2, [r7, #52]	; 0x34
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a20:	623a      	str	r2, [r7, #32]
 8004a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e00f      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d09f      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3740      	adds	r7, #64	; 0x40
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2222      	movs	r2, #34	; 0x22
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0201 	orr.w	r2, r2, #1
 8004ad4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b095      	sub	sp, #84	; 0x54
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6a3b      	ldr	r3, [r7, #32]
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d119      	bne.n	8004ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f023 0310 	bic.w	r3, r3, #16
 8004b82:	647b      	str	r3, [r7, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b8c:	61ba      	str	r2, [r7, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bae:	bf00      	nop
 8004bb0:	3754      	adds	r7, #84	; 0x54
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f7ff fecb 	bl	8004970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b21      	cmp	r3, #33	; 0x21
 8004bf4:	d13e      	bne.n	8004c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d114      	bne.n	8004c2a <UART_Transmit_IT+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d110      	bne.n	8004c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	621a      	str	r2, [r3, #32]
 8004c28:	e008      	b.n	8004c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6211      	str	r1, [r2, #32]
 8004c34:	781a      	ldrb	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b082      	sub	sp, #8
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fe50 	bl	8004948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b08c      	sub	sp, #48	; 0x30
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	f040 80ab 	bne.w	8004e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd0:	d117      	bne.n	8004d02 <UART_Receive_IT+0x50>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d113      	bne.n	8004d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	1c9a      	adds	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004d00:	e026      	b.n	8004d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d14:	d007      	beq.n	8004d26 <UART_Receive_IT+0x74>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <UART_Receive_IT+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e008      	b.n	8004d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d15a      	bne.n	8004e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0220 	bic.w	r2, r2, #32
 8004d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d135      	bne.n	8004e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	330c      	adds	r3, #12
 8004db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	e853 3f00 	ldrex	r3, [r3]
 8004db8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dca:	623a      	str	r2, [r7, #32]
 8004dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	69f9      	ldr	r1, [r7, #28]
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e5      	bne.n	8004daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d10a      	bne.n	8004e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fdbb 	bl	8004984 <HAL_UARTEx_RxEventCallback>
 8004e0e:	e002      	b.n	8004e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fda3 	bl	800495c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e002      	b.n	8004e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3730      	adds	r7, #48	; 0x30
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e2c:	b0c0      	sub	sp, #256	; 0x100
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e44:	68d9      	ldr	r1, [r3, #12]
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	ea40 0301 	orr.w	r3, r0, r1
 8004e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e80:	f021 010c 	bic.w	r1, r1, #12
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	6999      	ldr	r1, [r3, #24]
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	ea40 0301 	orr.w	r3, r0, r1
 8004eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b8f      	ldr	r3, [pc, #572]	; (80050f4 <UART_SetConfig+0x2cc>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d005      	beq.n	8004ec8 <UART_SetConfig+0xa0>
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <UART_SetConfig+0x2d0>)
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d104      	bne.n	8004ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7fe f980 	bl	80031cc <HAL_RCC_GetPCLK2Freq>
 8004ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ed0:	e003      	b.n	8004eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ed2:	f7fe f967 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8004ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	f040 810c 	bne.w	8005100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f02:	415b      	adcs	r3, r3
 8004f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	eb12 0801 	adds.w	r8, r2, r1
 8004f10:	4629      	mov	r1, r5
 8004f12:	eb43 0901 	adc.w	r9, r3, r1
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2a:	4690      	mov	r8, r2
 8004f2c:	4699      	mov	r9, r3
 8004f2e:	4623      	mov	r3, r4
 8004f30:	eb18 0303 	adds.w	r3, r8, r3
 8004f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f38:	462b      	mov	r3, r5
 8004f3a:	eb49 0303 	adc.w	r3, r9, r3
 8004f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f56:	460b      	mov	r3, r1
 8004f58:	18db      	adds	r3, r3, r3
 8004f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	eb42 0303 	adc.w	r3, r2, r3
 8004f62:	657b      	str	r3, [r7, #84]	; 0x54
 8004f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f6c:	f7fb fc86 	bl	800087c <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <UART_SetConfig+0x2d4>)
 8004f76:	fba3 2302 	umull	r2, r3, r3, r2
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	011c      	lsls	r4, r3, #4
 8004f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f98:	415b      	adcs	r3, r3
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc0:	4692      	mov	sl, r2
 8004fc2:	469b      	mov	fp, r3
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fce:	464b      	mov	r3, r9
 8004fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fec:	460b      	mov	r3, r1
 8004fee:	18db      	adds	r3, r3, r3
 8004ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005002:	f7fb fc3b 	bl	800087c <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4611      	mov	r1, r2
 800500c:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <UART_SetConfig+0x2d4>)
 800500e:	fba3 2301 	umull	r2, r3, r3, r1
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2264      	movs	r2, #100	; 0x64
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	1acb      	subs	r3, r1, r3
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005022:	4b36      	ldr	r3, [pc, #216]	; (80050fc <UART_SetConfig+0x2d4>)
 8005024:	fba3 2302 	umull	r2, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005030:	441c      	add	r4, r3
 8005032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	1891      	adds	r1, r2, r2
 800504a:	63b9      	str	r1, [r7, #56]	; 0x38
 800504c:	415b      	adcs	r3, r3
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005054:	4641      	mov	r1, r8
 8005056:	1851      	adds	r1, r2, r1
 8005058:	6339      	str	r1, [r7, #48]	; 0x30
 800505a:	4649      	mov	r1, r9
 800505c:	414b      	adcs	r3, r1
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
 8005060:	f04f 0200 	mov.w	r2, #0
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800506c:	4659      	mov	r1, fp
 800506e:	00cb      	lsls	r3, r1, #3
 8005070:	4651      	mov	r1, sl
 8005072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005076:	4651      	mov	r1, sl
 8005078:	00ca      	lsls	r2, r1, #3
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	4603      	mov	r3, r0
 8005080:	4642      	mov	r2, r8
 8005082:	189b      	adds	r3, r3, r2
 8005084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005088:	464b      	mov	r3, r9
 800508a:	460a      	mov	r2, r1
 800508c:	eb42 0303 	adc.w	r3, r2, r3
 8005090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050a8:	460b      	mov	r3, r1
 80050aa:	18db      	adds	r3, r3, r3
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ae:	4613      	mov	r3, r2
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050be:	f7fb fbdd 	bl	800087c <__aeabi_uldivmod>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <UART_SetConfig+0x2d4>)
 80050c8:	fba3 1302 	umull	r1, r3, r3, r2
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	2164      	movs	r1, #100	; 0x64
 80050d0:	fb01 f303 	mul.w	r3, r1, r3
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	3332      	adds	r3, #50	; 0x32
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <UART_SetConfig+0x2d4>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	f003 0207 	and.w	r2, r3, #7
 80050e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4422      	add	r2, r4
 80050ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050f0:	e105      	b.n	80052fe <UART_SetConfig+0x4d6>
 80050f2:	bf00      	nop
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005104:	2200      	movs	r2, #0
 8005106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800510a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800510e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005112:	4642      	mov	r2, r8
 8005114:	464b      	mov	r3, r9
 8005116:	1891      	adds	r1, r2, r2
 8005118:	6239      	str	r1, [r7, #32]
 800511a:	415b      	adcs	r3, r3
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
 800511e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005122:	4641      	mov	r1, r8
 8005124:	1854      	adds	r4, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb43 0501 	adc.w	r5, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	00eb      	lsls	r3, r5, #3
 8005136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800513a:	00e2      	lsls	r2, r4, #3
 800513c:	4614      	mov	r4, r2
 800513e:	461d      	mov	r5, r3
 8005140:	4643      	mov	r3, r8
 8005142:	18e3      	adds	r3, r4, r3
 8005144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005148:	464b      	mov	r3, r9
 800514a:	eb45 0303 	adc.w	r3, r5, r3
 800514e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800515e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800516e:	4629      	mov	r1, r5
 8005170:	008b      	lsls	r3, r1, #2
 8005172:	4621      	mov	r1, r4
 8005174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005178:	4621      	mov	r1, r4
 800517a:	008a      	lsls	r2, r1, #2
 800517c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005180:	f7fb fb7c 	bl	800087c <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b60      	ldr	r3, [pc, #384]	; (800530c <UART_SetConfig+0x4e4>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011c      	lsls	r4, r3, #4
 8005192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800519c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	1891      	adds	r1, r2, r2
 80051aa:	61b9      	str	r1, [r7, #24]
 80051ac:	415b      	adcs	r3, r3
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b4:	4641      	mov	r1, r8
 80051b6:	1851      	adds	r1, r2, r1
 80051b8:	6139      	str	r1, [r7, #16]
 80051ba:	4649      	mov	r1, r9
 80051bc:	414b      	adcs	r3, r1
 80051be:	617b      	str	r3, [r7, #20]
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051cc:	4659      	mov	r1, fp
 80051ce:	00cb      	lsls	r3, r1, #3
 80051d0:	4651      	mov	r1, sl
 80051d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d6:	4651      	mov	r1, sl
 80051d8:	00ca      	lsls	r2, r1, #3
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	4642      	mov	r2, r8
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e8:	464b      	mov	r3, r9
 80051ea:	460a      	mov	r2, r1
 80051ec:	eb42 0303 	adc.w	r3, r2, r3
 80051f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80051fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800520c:	4649      	mov	r1, r9
 800520e:	008b      	lsls	r3, r1, #2
 8005210:	4641      	mov	r1, r8
 8005212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005216:	4641      	mov	r1, r8
 8005218:	008a      	lsls	r2, r1, #2
 800521a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800521e:	f7fb fb2d 	bl	800087c <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <UART_SetConfig+0x4e4>)
 8005228:	fba3 1302 	umull	r1, r3, r3, r2
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	2164      	movs	r1, #100	; 0x64
 8005230:	fb01 f303 	mul.w	r3, r1, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	3332      	adds	r3, #50	; 0x32
 800523a:	4a34      	ldr	r2, [pc, #208]	; (800530c <UART_SetConfig+0x4e4>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005246:	441c      	add	r4, r3
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	673b      	str	r3, [r7, #112]	; 0x70
 8005250:	677a      	str	r2, [r7, #116]	; 0x74
 8005252:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005256:	4642      	mov	r2, r8
 8005258:	464b      	mov	r3, r9
 800525a:	1891      	adds	r1, r2, r2
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	415b      	adcs	r3, r3
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005266:	4641      	mov	r1, r8
 8005268:	1851      	adds	r1, r2, r1
 800526a:	6039      	str	r1, [r7, #0]
 800526c:	4649      	mov	r1, r9
 800526e:	414b      	adcs	r3, r1
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800527e:	4659      	mov	r1, fp
 8005280:	00cb      	lsls	r3, r1, #3
 8005282:	4651      	mov	r1, sl
 8005284:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005288:	4651      	mov	r1, sl
 800528a:	00ca      	lsls	r2, r1, #3
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	4603      	mov	r3, r0
 8005292:	4642      	mov	r2, r8
 8005294:	189b      	adds	r3, r3, r2
 8005296:	66bb      	str	r3, [r7, #104]	; 0x68
 8005298:	464b      	mov	r3, r9
 800529a:	460a      	mov	r2, r1
 800529c:	eb42 0303 	adc.w	r3, r2, r3
 80052a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	663b      	str	r3, [r7, #96]	; 0x60
 80052ac:	667a      	str	r2, [r7, #100]	; 0x64
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052ba:	4649      	mov	r1, r9
 80052bc:	008b      	lsls	r3, r1, #2
 80052be:	4641      	mov	r1, r8
 80052c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c4:	4641      	mov	r1, r8
 80052c6:	008a      	lsls	r2, r1, #2
 80052c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80052cc:	f7fb fad6 	bl	800087c <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <UART_SetConfig+0x4e4>)
 80052d6:	fba3 1302 	umull	r1, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2164      	movs	r1, #100	; 0x64
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	3332      	adds	r3, #50	; 0x32
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <UART_SetConfig+0x4e4>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	f003 020f 	and.w	r2, r3, #15
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4422      	add	r2, r4
 80052fc:	609a      	str	r2, [r3, #8]
}
 80052fe:	bf00      	nop
 8005300:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005304:	46bd      	mov	sp, r7
 8005306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800530a:	bf00      	nop
 800530c:	51eb851f 	.word	0x51eb851f

08005310 <__NVIC_SetPriority>:
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	6039      	str	r1, [r7, #0]
 800531a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800531c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005320:	2b00      	cmp	r3, #0
 8005322:	db0a      	blt.n	800533a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	490c      	ldr	r1, [pc, #48]	; (800535c <__NVIC_SetPriority+0x4c>)
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	440b      	add	r3, r1
 8005334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005338:	e00a      	b.n	8005350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	b2da      	uxtb	r2, r3
 800533e:	4908      	ldr	r1, [pc, #32]	; (8005360 <__NVIC_SetPriority+0x50>)
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	3b04      	subs	r3, #4
 8005348:	0112      	lsls	r2, r2, #4
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	440b      	add	r3, r1
 800534e:	761a      	strb	r2, [r3, #24]
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	e000e100 	.word	0xe000e100
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005368:	2100      	movs	r1, #0
 800536a:	f06f 0004 	mvn.w	r0, #4
 800536e:	f7ff ffcf 	bl	8005310 <__NVIC_SetPriority>
#endif
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800537e:	f3ef 8305 	mrs	r3, IPSR
 8005382:	603b      	str	r3, [r7, #0]
  return(result);
 8005384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800538a:	f06f 0305 	mvn.w	r3, #5
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	e00c      	b.n	80053ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <osKernelInitialize+0x44>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d105      	bne.n	80053a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <osKernelInitialize+0x44>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	e002      	b.n	80053ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053ac:	687b      	ldr	r3, [r7, #4]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	200005d0 	.word	0x200005d0

080053c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	603b      	str	r3, [r7, #0]
  return(result);
 80053cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <osKernelStart+0x1a>
    stat = osErrorISR;
 80053d2:	f06f 0305 	mvn.w	r3, #5
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	e010      	b.n	80053fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053da:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <osKernelStart+0x48>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d109      	bne.n	80053f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053e2:	f7ff ffbf 	bl	8005364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <osKernelStart+0x48>)
 80053e8:	2202      	movs	r2, #2
 80053ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053ec:	f001 f866 	bl	80064bc <vTaskStartScheduler>
      stat = osOK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	e002      	b.n	80053fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053fc:	687b      	ldr	r3, [r7, #4]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200005d0 	.word	0x200005d0

0800540c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af04      	add	r7, sp, #16
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800541c:	f3ef 8305 	mrs	r3, IPSR
 8005420:	617b      	str	r3, [r7, #20]
  return(result);
 8005422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005424:	2b00      	cmp	r3, #0
 8005426:	d17e      	bne.n	8005526 <osThreadNew+0x11a>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d07b      	beq.n	8005526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005432:	2318      	movs	r3, #24
 8005434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d045      	beq.n	80054d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <osThreadNew+0x48>
        name = attr->name;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <osThreadNew+0x6e>
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	2b38      	cmp	r3, #56	; 0x38
 800546c:	d805      	bhi.n	800547a <osThreadNew+0x6e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <osThreadNew+0x72>
        return (NULL);
 800547a:	2300      	movs	r3, #0
 800547c:	e054      	b.n	8005528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	089b      	lsrs	r3, r3, #2
 800548c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00e      	beq.n	80054b4 <osThreadNew+0xa8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b5b      	cmp	r3, #91	; 0x5b
 800549c:	d90a      	bls.n	80054b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d006      	beq.n	80054b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <osThreadNew+0xa8>
        mem = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	e010      	b.n	80054d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10c      	bne.n	80054d6 <osThreadNew+0xca>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d108      	bne.n	80054d6 <osThreadNew+0xca>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d104      	bne.n	80054d6 <osThreadNew+0xca>
          mem = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e001      	b.n	80054d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d110      	bne.n	80054fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054e4:	9202      	str	r2, [sp, #8]
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6a3a      	ldr	r2, [r7, #32]
 80054f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fe0c 	bl	8006110 <xTaskCreateStatic>
 80054f8:	4603      	mov	r3, r0
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e013      	b.n	8005526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	b29a      	uxth	r2, r3
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fe57 	bl	80061ca <xTaskCreate>
 800551c:	4603      	mov	r3, r0
 800551e:	2b01      	cmp	r3, #1
 8005520:	d001      	beq.n	8005526 <osThreadNew+0x11a>
            hTask = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005526:	693b      	ldr	r3, [r7, #16]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3728      	adds	r7, #40	; 0x28
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005538:	f3ef 8305 	mrs	r3, IPSR
 800553c:	60bb      	str	r3, [r7, #8]
  return(result);
 800553e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <osDelay+0x1c>
    stat = osErrorISR;
 8005544:	f06f 0305 	mvn.w	r3, #5
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e007      	b.n	800555c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 ff7c 	bl	8006454 <vTaskDelay>
    }
  }

  return (stat);
 800555c:	68fb      	ldr	r3, [r7, #12]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a07      	ldr	r2, [pc, #28]	; (8005594 <vApplicationGetIdleTaskMemory+0x2c>)
 8005578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a06      	ldr	r2, [pc, #24]	; (8005598 <vApplicationGetIdleTaskMemory+0x30>)
 800557e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	200005d4 	.word	0x200005d4
 8005598:	20000630 	.word	0x20000630

0800559c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80055ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a06      	ldr	r2, [pc, #24]	; (80055cc <vApplicationGetTimerTaskMemory+0x30>)
 80055b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000830 	.word	0x20000830
 80055cc:	2000088c 	.word	0x2000088c

080055d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0208 	add.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0208 	add.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d103      	bne.n	8005692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e00c      	b.n	80056ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3308      	adds	r3, #8
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <vListInsert+0x2e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d2f6      	bcs.n	800569a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d103      	bne.n	8005718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005762:	f002 f84f 	bl	8007804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005772:	fb01 f303 	mul.w	r3, r1, r3
 8005776:	441a      	add	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	3b01      	subs	r3, #1
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	441a      	add	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	22ff      	movs	r2, #255	; 0xff
 80057a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	22ff      	movs	r2, #255	; 0xff
 80057ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d114      	bne.n	80057e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01a      	beq.n	80057f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3310      	adds	r3, #16
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 f903 	bl	80069d0 <xTaskRemoveFromEventList>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d012      	beq.n	80057f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <xQueueGenericReset+0xcc>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	e009      	b.n	80057f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3310      	adds	r3, #16
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fef2 	bl	80055d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3324      	adds	r3, #36	; 0x24
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff feed 	bl	80055d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057f6:	f002 f835 	bl	8007864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	; 0x38
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <xQueueGenericCreateStatic+0x52>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <xQueueGenericCreateStatic+0x56>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericCreateStatic+0x58>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	623b      	str	r3, [r7, #32]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <xQueueGenericCreateStatic+0x7e>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <xQueueGenericCreateStatic+0x82>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <xQueueGenericCreateStatic+0x84>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058a6:	2350      	movs	r3, #80	; 0x50
 80058a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b50      	cmp	r3, #80	; 0x50
 80058ae:	d00a      	beq.n	80058c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61bb      	str	r3, [r7, #24]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00d      	beq.n	80058ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f805 	bl	80058f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3730      	adds	r7, #48	; 0x30
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e002      	b.n	800591a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005926:	2101      	movs	r1, #1
 8005928:	69b8      	ldr	r0, [r7, #24]
 800592a:	f7ff ff05 	bl	8005738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005936:	bf00      	nop
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800594e:	2300      	movs	r3, #0
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xQueueGenericSend+0x32>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <xQueueGenericSend+0x40>
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <xQueueGenericSend+0x44>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <xQueueGenericSend+0x46>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xQueueGenericSend+0x60>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d103      	bne.n	80059ae <xQueueGenericSend+0x6e>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericSend+0x72>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericSend+0x74>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xQueueGenericSend+0x8e>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	623b      	str	r3, [r7, #32]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ce:	f001 f9bd 	bl	8006d4c <xTaskGetSchedulerState>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <xQueueGenericSend+0x9e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueGenericSend+0xa2>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericSend+0xa4>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericSend+0xbe>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059fe:	f001 ff01 	bl	8007804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <xQueueGenericSend+0xd4>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d129      	bne.n	8005a68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1a:	f000 fa0b 	bl	8005e34 <prvCopyDataToQueue>
 8005a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	3324      	adds	r3, #36	; 0x24
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 ffcf 	bl	80069d0 <xTaskRemoveFromEventList>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d013      	beq.n	8005a60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a38:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <xQueueGenericSend+0x1f8>)
 8005a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	e00a      	b.n	8005a60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a50:	4b39      	ldr	r3, [pc, #228]	; (8005b38 <xQueueGenericSend+0x1f8>)
 8005a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a60:	f001 ff00 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e063      	b.n	8005b30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a6e:	f001 fef9 	bl	8007864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	e05c      	b.n	8005b30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 f809 	bl	8006a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a8a:	f001 feeb 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8e:	f000 fd7b 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a92:	f001 feb7 	bl	8007804 <vPortEnterCritical>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d103      	bne.n	8005aac <xQueueGenericSend+0x16c>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d103      	bne.n	8005ac2 <xQueueGenericSend+0x182>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ac2:	f001 fecf 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac6:	1d3a      	adds	r2, r7, #4
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4611      	mov	r1, r2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fff8 	bl	8006ac4 <xTaskCheckForTimeOut>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d124      	bne.n	8005b24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005adc:	f000 faa2 	bl	8006024 <prvIsQueueFull>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	3310      	adds	r3, #16
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 ff1e 	bl	8006930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af6:	f000 fa2d 	bl	8005f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005afa:	f000 fd53 	bl	80065a4 <xTaskResumeAll>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f47f af7c 	bne.w	80059fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <xQueueGenericSend+0x1f8>)
 8005b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	e772      	b.n	80059fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b1a:	f000 fa1b 	bl	8005f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1e:	f000 fd41 	bl	80065a4 <xTaskResumeAll>
 8005b22:	e76c      	b.n	80059fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b26:	f000 fa15 	bl	8005f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b2a:	f000 fd3b 	bl	80065a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3738      	adds	r7, #56	; 0x38
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b090      	sub	sp, #64	; 0x40
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <xQueueGenericSendFromISR+0x3c>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <xQueueGenericSendFromISR+0x40>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <xQueueGenericSendFromISR+0x42>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d103      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x6a>
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d101      	bne.n	8005baa <xQueueGenericSendFromISR+0x6e>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <xQueueGenericSendFromISR+0x70>
 8005baa:	2300      	movs	r3, #0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	623b      	str	r3, [r7, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc6:	f001 feff 	bl	80079c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bca:	f3ef 8211 	mrs	r2, BASEPRI
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	61fa      	str	r2, [r7, #28]
 8005be0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005be2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xQueueGenericSendFromISR+0xbc>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d12f      	bne.n	8005c58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c0e:	f000 f911 	bl	8005e34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d112      	bne.n	8005c42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fed1 	bl	80069d0 <xTaskRemoveFromEventList>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00e      	beq.n	8005c52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00b      	beq.n	8005c52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e007      	b.n	8005c52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c46:	3301      	adds	r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	b25a      	sxtb	r2, r3
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c52:	2301      	movs	r3, #1
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005c56:	e001      	b.n	8005c5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3740      	adds	r7, #64	; 0x40
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <xQueueReceive+0x30>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	623b      	str	r3, [r7, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <xQueueReceive+0x3e>
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <xQueueReceive+0x42>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <xQueueReceive+0x44>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueReceive+0x5e>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	61fb      	str	r3, [r7, #28]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cd2:	f001 f83b 	bl	8006d4c <xTaskGetSchedulerState>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d102      	bne.n	8005ce2 <xQueueReceive+0x6e>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <xQueueReceive+0x72>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <xQueueReceive+0x74>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xQueueReceive+0x8e>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	61bb      	str	r3, [r7, #24]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d02:	f001 fd7f 	bl	8007804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01f      	beq.n	8005d52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d16:	f000 f8f7 	bl	8005f08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1e5a      	subs	r2, r3, #1
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00f      	beq.n	8005d4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	3310      	adds	r3, #16
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fe4e 	bl	80069d0 <xTaskRemoveFromEventList>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d3a:	4b3d      	ldr	r3, [pc, #244]	; (8005e30 <xQueueReceive+0x1bc>)
 8005d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d4a:	f001 fd8b 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e069      	b.n	8005e26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d58:	f001 fd84 	bl	8007864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e062      	b.n	8005e26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d66:	f107 0310 	add.w	r3, r7, #16
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fe94 	bl	8006a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d70:	2301      	movs	r3, #1
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d74:	f001 fd76 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d78:	f000 fc06 	bl	8006588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d7c:	f001 fd42 	bl	8007804 <vPortEnterCritical>
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d103      	bne.n	8005d96 <xQueueReceive+0x122>
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d103      	bne.n	8005dac <xQueueReceive+0x138>
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dac:	f001 fd5a 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005db0:	1d3a      	adds	r2, r7, #4
 8005db2:	f107 0310 	add.w	r3, r7, #16
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fe83 	bl	8006ac4 <xTaskCheckForTimeOut>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d123      	bne.n	8005e0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc6:	f000 f917 	bl	8005ff8 <prvIsQueueEmpty>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	3324      	adds	r3, #36	; 0x24
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fda9 	bl	8006930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005de0:	f000 f8b8 	bl	8005f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005de4:	f000 fbde 	bl	80065a4 <xTaskResumeAll>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d189      	bne.n	8005d02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005dee:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xQueueReceive+0x1bc>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	e780      	b.n	8005d02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e02:	f000 f8a7 	bl	8005f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e06:	f000 fbcd 	bl	80065a4 <xTaskResumeAll>
 8005e0a:	e77a      	b.n	8005d02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0e:	f000 f8a1 	bl	8005f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e12:	f000 fbc7 	bl	80065a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e18:	f000 f8ee 	bl	8005ff8 <prvIsQueueEmpty>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f43f af6f 	beq.w	8005d02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3730      	adds	r7, #48	; 0x30
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	e000ed04 	.word	0xe000ed04

08005e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10d      	bne.n	8005e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d14d      	bne.n	8005ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ff92 	bl	8006d88 <xTaskPriorityDisinherit>
 8005e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	e043      	b.n	8005ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d119      	bne.n	8005ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6858      	ldr	r0, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	f001 fff6 	bl	8007e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d32b      	bcc.n	8005ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	e026      	b.n	8005ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68d8      	ldr	r0, [r3, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	f001 ffdc 	bl	8007e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	441a      	add	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d207      	bcs.n	8005ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	425b      	negs	r3, r3
 8005ede:	441a      	add	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d105      	bne.n	8005ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005efe:	697b      	ldr	r3, [r7, #20]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d018      	beq.n	8005f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	441a      	add	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d303      	bcc.n	8005f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68d9      	ldr	r1, [r3, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	461a      	mov	r2, r3
 8005f46:	6838      	ldr	r0, [r7, #0]
 8005f48:	f001 ff92 	bl	8007e70 <memcpy>
	}
}
 8005f4c:	bf00      	nop
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f5c:	f001 fc52 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f68:	e011      	b.n	8005f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d012      	beq.n	8005f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3324      	adds	r3, #36	; 0x24
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fd2a 	bl	80069d0 <xTaskRemoveFromEventList>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f82:	f000 fe01 	bl	8006b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dce9      	bgt.n	8005f6a <prvUnlockQueue+0x16>
 8005f96:	e000      	b.n	8005f9a <prvUnlockQueue+0x46>
					break;
 8005f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	22ff      	movs	r2, #255	; 0xff
 8005f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fa2:	f001 fc5f 	bl	8007864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fa6:	f001 fc2d 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fb2:	e011      	b.n	8005fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d012      	beq.n	8005fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3310      	adds	r3, #16
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fd05 	bl	80069d0 <xTaskRemoveFromEventList>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005fcc:	f000 fddc 	bl	8006b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dce9      	bgt.n	8005fb4 <prvUnlockQueue+0x60>
 8005fe0:	e000      	b.n	8005fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	22ff      	movs	r2, #255	; 0xff
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fec:	f001 fc3a 	bl	8007864 <vPortExitCritical>
}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006000:	f001 fc00 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	e001      	b.n	8006016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006016:	f001 fc25 	bl	8007864 <vPortExitCritical>

	return xReturn;
 800601a:	68fb      	ldr	r3, [r7, #12]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800602c:	f001 fbea 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	429a      	cmp	r2, r3
 800603a:	d102      	bne.n	8006042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e001      	b.n	8006046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006046:	f001 fc0d 	bl	8007864 <vPortExitCritical>

	return xReturn;
 800604a:	68fb      	ldr	r3, [r7, #12]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800605e:	2300      	movs	r3, #0
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	e014      	b.n	800608e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006064:	4a0f      	ldr	r2, [pc, #60]	; (80060a4 <vQueueAddToRegistry+0x50>)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10b      	bne.n	8006088 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006070:	490c      	ldr	r1, [pc, #48]	; (80060a4 <vQueueAddToRegistry+0x50>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800607a:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <vQueueAddToRegistry+0x50>)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	4413      	add	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006086:	e006      	b.n	8006096 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b07      	cmp	r3, #7
 8006092:	d9e7      	bls.n	8006064 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000c8c 	.word	0x20000c8c

080060a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060b8:	f001 fba4 	bl	8007804 <vPortEnterCritical>
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060c2:	b25b      	sxtb	r3, r3
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d103      	bne.n	80060d2 <vQueueWaitForMessageRestricted+0x2a>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d8:	b25b      	sxtb	r3, r3
 80060da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060de:	d103      	bne.n	80060e8 <vQueueWaitForMessageRestricted+0x40>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060e8:	f001 fbbc 	bl	8007864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fc3b 	bl	8006978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006102:	6978      	ldr	r0, [r7, #20]
 8006104:	f7ff ff26 	bl	8005f54 <prvUnlockQueue>
	}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af04      	add	r7, sp, #16
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800611e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	623b      	str	r3, [r7, #32]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <xTaskCreateStatic+0x46>
	__asm volatile
 8006140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006144:	f383 8811 	msr	BASEPRI, r3
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	f3bf 8f4f 	dsb	sy
 8006150:	61fb      	str	r3, [r7, #28]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006156:	235c      	movs	r3, #92	; 0x5c
 8006158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b5c      	cmp	r3, #92	; 0x5c
 800615e:	d00a      	beq.n	8006176 <xTaskCreateStatic+0x66>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	61bb      	str	r3, [r7, #24]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006176:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01e      	beq.n	80061bc <xTaskCreateStatic+0xac>
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01b      	beq.n	80061bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	2202      	movs	r2, #2
 8006192:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006196:	2300      	movs	r3, #0
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	9302      	str	r3, [sp, #8]
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 f850 	bl	8006254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061b6:	f000 f8dd 	bl	8006374 <prvAddNewTaskToReadyList>
 80061ba:	e001      	b.n	80061c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061c0:	697b      	ldr	r3, [r7, #20]
	}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b08c      	sub	sp, #48	; 0x30
 80061ce:	af04      	add	r7, sp, #16
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4618      	mov	r0, r3
 80061e0:	f001 fc32 	bl	8007a48 <pvPortMalloc>
 80061e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061ec:	205c      	movs	r0, #92	; 0x5c
 80061ee:	f001 fc2b 	bl	8007a48 <pvPortMalloc>
 80061f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006200:	e005      	b.n	800620e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f001 fcec 	bl	8007be0 <vPortFree>
 8006208:	e001      	b.n	800620e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d017      	beq.n	8006244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	2300      	movs	r3, #0
 8006220:	9303      	str	r3, [sp, #12]
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	9302      	str	r3, [sp, #8]
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f80e 	bl	8006254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006238:	69f8      	ldr	r0, [r7, #28]
 800623a:	f000 f89b 	bl	8006374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800623e:	2301      	movs	r3, #1
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	e002      	b.n	800624a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006244:	f04f 33ff 	mov.w	r3, #4294967295
 8006248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800624a:	69bb      	ldr	r3, [r7, #24]
	}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	461a      	mov	r2, r3
 800626c:	21a5      	movs	r1, #165	; 0xa5
 800626e:	f001 fe0d 	bl	8007e8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800627c:	3b01      	subs	r3, #1
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	617b      	str	r3, [r7, #20]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01f      	beq.n	80062f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	e012      	b.n	80062de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	7819      	ldrb	r1, [r3, #0]
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	3334      	adds	r3, #52	; 0x34
 80062c8:	460a      	mov	r2, r1
 80062ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d006      	beq.n	80062e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b0f      	cmp	r3, #15
 80062e2:	d9e9      	bls.n	80062b8 <prvInitialiseNewTask+0x64>
 80062e4:	e000      	b.n	80062e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80062e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f0:	e003      	b.n	80062fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	2b37      	cmp	r3, #55	; 0x37
 80062fe:	d901      	bls.n	8006304 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006300:	2337      	movs	r3, #55	; 0x37
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	3304      	adds	r3, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f978 	bl	8005610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	3318      	adds	r3, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff f973 	bl	8005610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800632e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2200      	movs	r2, #0
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	69b8      	ldr	r0, [r7, #24]
 8006354:	f001 f928 	bl	80075a8 <pxPortInitialiseStack>
 8006358:	4602      	mov	r2, r0
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800636a:	bf00      	nop
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800637c:	f001 fa42 	bl	8007804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006380:	4b2d      	ldr	r3, [pc, #180]	; (8006438 <prvAddNewTaskToReadyList+0xc4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <prvAddNewTaskToReadyList+0xc4>)
 8006388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800638a:	4b2c      	ldr	r3, [pc, #176]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006392:	4a2a      	ldr	r2, [pc, #168]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006398:	4b27      	ldr	r3, [pc, #156]	; (8006438 <prvAddNewTaskToReadyList+0xc4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d110      	bne.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063a0:	f000 fc16 	bl	8006bd0 <prvInitialiseTaskLists>
 80063a4:	e00d      	b.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063a6:	4b26      	ldr	r3, [pc, #152]	; (8006440 <prvAddNewTaskToReadyList+0xcc>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d802      	bhi.n	80063c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063bc:	4a1f      	ldr	r2, [pc, #124]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063c2:	4b20      	ldr	r3, [pc, #128]	; (8006444 <prvAddNewTaskToReadyList+0xd0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <prvAddNewTaskToReadyList+0xd0>)
 80063ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063cc:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <prvAddNewTaskToReadyList+0xd0>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <prvAddNewTaskToReadyList+0xd4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d903      	bls.n	80063e8 <prvAddNewTaskToReadyList+0x74>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a18      	ldr	r2, [pc, #96]	; (8006448 <prvAddNewTaskToReadyList+0xd4>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4a15      	ldr	r2, [pc, #84]	; (800644c <prvAddNewTaskToReadyList+0xd8>)
 80063f6:	441a      	add	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f7ff f913 	bl	800562a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006404:	f001 fa2e 	bl	8007864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <prvAddNewTaskToReadyList+0xcc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <prvAddNewTaskToReadyList+0xc8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	429a      	cmp	r2, r3
 800641c:	d207      	bcs.n	800642e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <prvAddNewTaskToReadyList+0xdc>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	200011a0 	.word	0x200011a0
 800643c:	20000ccc 	.word	0x20000ccc
 8006440:	200011ac 	.word	0x200011ac
 8006444:	200011bc 	.word	0x200011bc
 8006448:	200011a8 	.word	0x200011a8
 800644c:	20000cd0 	.word	0x20000cd0
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800645c:	2300      	movs	r3, #0
 800645e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d017      	beq.n	8006496 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <vTaskDelay+0x60>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <vTaskDelay+0x30>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60bb      	str	r3, [r7, #8]
}
 8006480:	bf00      	nop
 8006482:	e7fe      	b.n	8006482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006484:	f000 f880 	bl	8006588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fcea 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006490:	f000 f888 	bl	80065a4 <xTaskResumeAll>
 8006494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d107      	bne.n	80064ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <vTaskDelay+0x64>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	200011c8 	.word	0x200011c8
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ca:	463a      	mov	r2, r7
 80064cc:	1d39      	adds	r1, r7, #4
 80064ce:	f107 0308 	add.w	r3, r7, #8
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f848 	bl	8005568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	9202      	str	r2, [sp, #8]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	2300      	movs	r3, #0
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	460a      	mov	r2, r1
 80064ea:	4921      	ldr	r1, [pc, #132]	; (8006570 <vTaskStartScheduler+0xb4>)
 80064ec:	4821      	ldr	r0, [pc, #132]	; (8006574 <vTaskStartScheduler+0xb8>)
 80064ee:	f7ff fe0f 	bl	8006110 <xTaskCreateStatic>
 80064f2:	4603      	mov	r3, r0
 80064f4:	4a20      	ldr	r2, [pc, #128]	; (8006578 <vTaskStartScheduler+0xbc>)
 80064f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064f8:	4b1f      	ldr	r3, [pc, #124]	; (8006578 <vTaskStartScheduler+0xbc>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e001      	b.n	800650a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d102      	bne.n	8006516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006510:	f000 fcfc 	bl	8006f0c <xTimerCreateTimerTask>
 8006514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d116      	bne.n	800654a <vTaskStartScheduler+0x8e>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <vTaskStartScheduler+0xc0>)
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006538:	4b11      	ldr	r3, [pc, #68]	; (8006580 <vTaskStartScheduler+0xc4>)
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800653e:	4b11      	ldr	r3, [pc, #68]	; (8006584 <vTaskStartScheduler+0xc8>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006544:	f001 f8bc 	bl	80076c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006548:	e00e      	b.n	8006568 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d10a      	bne.n	8006568 <vTaskStartScheduler+0xac>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60fb      	str	r3, [r7, #12]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vTaskStartScheduler+0xaa>
}
 8006568:	bf00      	nop
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	08008814 	.word	0x08008814
 8006574:	08006ba1 	.word	0x08006ba1
 8006578:	200011c4 	.word	0x200011c4
 800657c:	200011c0 	.word	0x200011c0
 8006580:	200011ac 	.word	0x200011ac
 8006584:	200011a4 	.word	0x200011a4

08006588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800658c:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <vTaskSuspendAll+0x18>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a03      	ldr	r2, [pc, #12]	; (80065a0 <vTaskSuspendAll+0x18>)
 8006594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006596:	bf00      	nop
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	200011c8 	.word	0x200011c8

080065a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065b2:	4b42      	ldr	r3, [pc, #264]	; (80066bc <xTaskResumeAll+0x118>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	603b      	str	r3, [r7, #0]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065d0:	f001 f918 	bl	8007804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065d4:	4b39      	ldr	r3, [pc, #228]	; (80066bc <xTaskResumeAll+0x118>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3b01      	subs	r3, #1
 80065da:	4a38      	ldr	r2, [pc, #224]	; (80066bc <xTaskResumeAll+0x118>)
 80065dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065de:	4b37      	ldr	r3, [pc, #220]	; (80066bc <xTaskResumeAll+0x118>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d162      	bne.n	80066ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e6:	4b36      	ldr	r3, [pc, #216]	; (80066c0 <xTaskResumeAll+0x11c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d05e      	beq.n	80066ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ee:	e02f      	b.n	8006650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <xTaskResumeAll+0x120>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3318      	adds	r3, #24
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff f871 	bl	80056e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff f86c 	bl	80056e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <xTaskResumeAll+0x124>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d903      	bls.n	8006620 <xTaskResumeAll+0x7c>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a2a      	ldr	r2, [pc, #168]	; (80066c8 <xTaskResumeAll+0x124>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a27      	ldr	r2, [pc, #156]	; (80066cc <xTaskResumeAll+0x128>)
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3304      	adds	r3, #4
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7fe fff7 	bl	800562a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <xTaskResumeAll+0x12c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006646:	429a      	cmp	r2, r3
 8006648:	d302      	bcc.n	8006650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800664a:	4b22      	ldr	r3, [pc, #136]	; (80066d4 <xTaskResumeAll+0x130>)
 800664c:	2201      	movs	r2, #1
 800664e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006650:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <xTaskResumeAll+0x120>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1cb      	bne.n	80065f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800665e:	f000 fb55 	bl	8006d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <xTaskResumeAll+0x134>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d010      	beq.n	8006690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800666e:	f000 f847 	bl	8006700 <xTaskIncrementTick>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006678:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <xTaskResumeAll+0x130>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f1      	bne.n	800666e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <xTaskResumeAll+0x134>)
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006690:	4b10      	ldr	r3, [pc, #64]	; (80066d4 <xTaskResumeAll+0x130>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <xTaskResumeAll+0x138>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ac:	f001 f8da 	bl	8007864 <vPortExitCritical>

	return xAlreadyYielded;
 80066b0:	68bb      	ldr	r3, [r7, #8]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	200011c8 	.word	0x200011c8
 80066c0:	200011a0 	.word	0x200011a0
 80066c4:	20001160 	.word	0x20001160
 80066c8:	200011a8 	.word	0x200011a8
 80066cc:	20000cd0 	.word	0x20000cd0
 80066d0:	20000ccc 	.word	0x20000ccc
 80066d4:	200011b4 	.word	0x200011b4
 80066d8:	200011b0 	.word	0x200011b0
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <xTaskGetTickCount+0x1c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066ec:	687b      	ldr	r3, [r7, #4]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200011a4 	.word	0x200011a4

08006700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670a:	4b4f      	ldr	r3, [pc, #316]	; (8006848 <xTaskIncrementTick+0x148>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f040 808f 	bne.w	8006832 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006714:	4b4d      	ldr	r3, [pc, #308]	; (800684c <xTaskIncrementTick+0x14c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800671c:	4a4b      	ldr	r2, [pc, #300]	; (800684c <xTaskIncrementTick+0x14c>)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d120      	bne.n	800676a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006728:	4b49      	ldr	r3, [pc, #292]	; (8006850 <xTaskIncrementTick+0x150>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <xTaskIncrementTick+0x48>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	603b      	str	r3, [r7, #0]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xTaskIncrementTick+0x46>
 8006748:	4b41      	ldr	r3, [pc, #260]	; (8006850 <xTaskIncrementTick+0x150>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <xTaskIncrementTick+0x154>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a3f      	ldr	r2, [pc, #252]	; (8006850 <xTaskIncrementTick+0x150>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4a3f      	ldr	r2, [pc, #252]	; (8006854 <xTaskIncrementTick+0x154>)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b3e      	ldr	r3, [pc, #248]	; (8006858 <xTaskIncrementTick+0x158>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a3d      	ldr	r2, [pc, #244]	; (8006858 <xTaskIncrementTick+0x158>)
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	f000 fad1 	bl	8006d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800676a:	4b3c      	ldr	r3, [pc, #240]	; (800685c <xTaskIncrementTick+0x15c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	d349      	bcc.n	8006808 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006774:	4b36      	ldr	r3, [pc, #216]	; (8006850 <xTaskIncrementTick+0x150>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800677e:	4b37      	ldr	r3, [pc, #220]	; (800685c <xTaskIncrementTick+0x15c>)
 8006780:	f04f 32ff 	mov.w	r2, #4294967295
 8006784:	601a      	str	r2, [r3, #0]
					break;
 8006786:	e03f      	b.n	8006808 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	4b31      	ldr	r3, [pc, #196]	; (8006850 <xTaskIncrementTick+0x150>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d203      	bcs.n	80067a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067a0:	4a2e      	ldr	r2, [pc, #184]	; (800685c <xTaskIncrementTick+0x15c>)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067a6:	e02f      	b.n	8006808 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ff99 	bl	80056e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3318      	adds	r3, #24
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe ff90 	bl	80056e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <xTaskIncrementTick+0x160>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d903      	bls.n	80067d8 <xTaskIncrementTick+0xd8>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <xTaskIncrementTick+0x160>)
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <xTaskIncrementTick+0x164>)
 80067e6:	441a      	add	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f7fe ff1b 	bl	800562a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f8:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <xTaskIncrementTick+0x168>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	429a      	cmp	r2, r3
 8006800:	d3b8      	bcc.n	8006774 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006806:	e7b5      	b.n	8006774 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <xTaskIncrementTick+0x168>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	4915      	ldr	r1, [pc, #84]	; (8006864 <xTaskIncrementTick+0x164>)
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d901      	bls.n	8006824 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <xTaskIncrementTick+0x16c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800682c:	2301      	movs	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e004      	b.n	800683c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006832:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <xTaskIncrementTick+0x170>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3301      	adds	r3, #1
 8006838:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <xTaskIncrementTick+0x170>)
 800683a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800683c:	697b      	ldr	r3, [r7, #20]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	200011c8 	.word	0x200011c8
 800684c:	200011a4 	.word	0x200011a4
 8006850:	20001158 	.word	0x20001158
 8006854:	2000115c 	.word	0x2000115c
 8006858:	200011b8 	.word	0x200011b8
 800685c:	200011c0 	.word	0x200011c0
 8006860:	200011a8 	.word	0x200011a8
 8006864:	20000cd0 	.word	0x20000cd0
 8006868:	20000ccc 	.word	0x20000ccc
 800686c:	200011b4 	.word	0x200011b4
 8006870:	200011b0 	.word	0x200011b0

08006874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800687a:	4b28      	ldr	r3, [pc, #160]	; (800691c <vTaskSwitchContext+0xa8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006882:	4b27      	ldr	r3, [pc, #156]	; (8006920 <vTaskSwitchContext+0xac>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006888:	e041      	b.n	800690e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800688a:	4b25      	ldr	r3, [pc, #148]	; (8006920 <vTaskSwitchContext+0xac>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b24      	ldr	r3, [pc, #144]	; (8006924 <vTaskSwitchContext+0xb0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e010      	b.n	80068ba <vTaskSwitchContext+0x46>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	607b      	str	r3, [r7, #4]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vTaskSwitchContext+0x3e>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	491b      	ldr	r1, [pc, #108]	; (8006928 <vTaskSwitchContext+0xb4>)
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0e4      	beq.n	8006898 <vTaskSwitchContext+0x24>
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <vTaskSwitchContext+0xb4>)
 80068da:	4413      	add	r3, r2
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	605a      	str	r2, [r3, #4]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	3308      	adds	r3, #8
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d104      	bne.n	80068fe <vTaskSwitchContext+0x8a>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	605a      	str	r2, [r3, #4]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4a09      	ldr	r2, [pc, #36]	; (800692c <vTaskSwitchContext+0xb8>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4a06      	ldr	r2, [pc, #24]	; (8006924 <vTaskSwitchContext+0xb0>)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6013      	str	r3, [r2, #0]
}
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	200011c8 	.word	0x200011c8
 8006920:	200011b4 	.word	0x200011b4
 8006924:	200011a8 	.word	0x200011a8
 8006928:	20000cd0 	.word	0x20000cd0
 800692c:	20000ccc 	.word	0x20000ccc

08006930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <vTaskPlaceOnEventList+0x44>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3318      	adds	r3, #24
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fe fe87 	bl	8005672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006964:	2101      	movs	r1, #1
 8006966:	6838      	ldr	r0, [r7, #0]
 8006968:	f000 fa7c 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	20000ccc 	.word	0x20000ccc

08006978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	617b      	str	r3, [r7, #20]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <vTaskPlaceOnEventListRestricted+0x54>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3318      	adds	r3, #24
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f7fe fe3e 	bl	800562a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295
 80069b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f000 fa51 	bl	8006e64 <prvAddCurrentTaskToDelayedList>
	}
 80069c2:	bf00      	nop
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000ccc 	.word	0x20000ccc

080069d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60fb      	str	r3, [r7, #12]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3318      	adds	r3, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fe6f 	bl	80056e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a06:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <xTaskRemoveFromEventList+0xb0>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d11d      	bne.n	8006a4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe fe66 	bl	80056e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <xTaskRemoveFromEventList+0xb4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d903      	bls.n	8006a2c <xTaskRemoveFromEventList+0x5c>
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	4a16      	ldr	r2, [pc, #88]	; (8006a84 <xTaskRemoveFromEventList+0xb4>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a13      	ldr	r2, [pc, #76]	; (8006a88 <xTaskRemoveFromEventList+0xb8>)
 8006a3a:	441a      	add	r2, r3
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7fe fdf1 	bl	800562a <vListInsertEnd>
 8006a48:	e005      	b.n	8006a56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3318      	adds	r3, #24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	480e      	ldr	r0, [pc, #56]	; (8006a8c <xTaskRemoveFromEventList+0xbc>)
 8006a52:	f7fe fdea 	bl	800562a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <xTaskRemoveFromEventList+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d905      	bls.n	8006a70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a64:	2301      	movs	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a68:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <xTaskRemoveFromEventList+0xc4>)
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e001      	b.n	8006a74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a74:	697b      	ldr	r3, [r7, #20]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200011c8 	.word	0x200011c8
 8006a84:	200011a8 	.word	0x200011a8
 8006a88:	20000cd0 	.word	0x20000cd0
 8006a8c:	20001160 	.word	0x20001160
 8006a90:	20000ccc 	.word	0x20000ccc
 8006a94:	200011b4 	.word	0x200011b4

08006a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <vTaskInternalSetTimeOutState+0x24>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <vTaskInternalSetTimeOutState+0x28>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	605a      	str	r2, [r3, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	200011b8 	.word	0x200011b8
 8006ac0:	200011a4 	.word	0x200011a4

08006ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	613b      	str	r3, [r7, #16]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b06:	f000 fe7d 	bl	8007804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <xTaskCheckForTimeOut+0xbc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d102      	bne.n	8006b2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e023      	b.n	8006b72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b15      	ldr	r3, [pc, #84]	; (8006b84 <xTaskCheckForTimeOut+0xc0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d007      	beq.n	8006b46 <xTaskCheckForTimeOut+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d302      	bcc.n	8006b46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	e015      	b.n	8006b72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d20b      	bcs.n	8006b68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff ff9b 	bl	8006a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	e004      	b.n	8006b72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b72:	f000 fe77 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8006b76:	69fb      	ldr	r3, [r7, #28]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	200011a4 	.word	0x200011a4
 8006b84:	200011b8 	.word	0x200011b8

08006b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <vTaskMissedYield+0x14>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
}
 8006b92:	bf00      	nop
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	200011b4 	.word	0x200011b4

08006ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ba8:	f000 f852 	bl	8006c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <prvIdleTask+0x28>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d9f9      	bls.n	8006ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <prvIdleTask+0x2c>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bc4:	e7f0      	b.n	8006ba8 <prvIdleTask+0x8>
 8006bc6:	bf00      	nop
 8006bc8:	20000cd0 	.word	0x20000cd0
 8006bcc:	e000ed04 	.word	0xe000ed04

08006bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	e00c      	b.n	8006bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <prvInitialiseTaskLists+0x60>)
 8006be8:	4413      	add	r3, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fcf0 	bl	80055d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b37      	cmp	r3, #55	; 0x37
 8006bfa:	d9ef      	bls.n	8006bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bfc:	480d      	ldr	r0, [pc, #52]	; (8006c34 <prvInitialiseTaskLists+0x64>)
 8006bfe:	f7fe fce7 	bl	80055d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c02:	480d      	ldr	r0, [pc, #52]	; (8006c38 <prvInitialiseTaskLists+0x68>)
 8006c04:	f7fe fce4 	bl	80055d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c08:	480c      	ldr	r0, [pc, #48]	; (8006c3c <prvInitialiseTaskLists+0x6c>)
 8006c0a:	f7fe fce1 	bl	80055d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c0e:	480c      	ldr	r0, [pc, #48]	; (8006c40 <prvInitialiseTaskLists+0x70>)
 8006c10:	f7fe fcde 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c14:	480b      	ldr	r0, [pc, #44]	; (8006c44 <prvInitialiseTaskLists+0x74>)
 8006c16:	f7fe fcdb 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	; (8006c48 <prvInitialiseTaskLists+0x78>)
 8006c1c:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <prvInitialiseTaskLists+0x64>)
 8006c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <prvInitialiseTaskLists+0x7c>)
 8006c22:	4a05      	ldr	r2, [pc, #20]	; (8006c38 <prvInitialiseTaskLists+0x68>)
 8006c24:	601a      	str	r2, [r3, #0]
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000cd0 	.word	0x20000cd0
 8006c34:	20001130 	.word	0x20001130
 8006c38:	20001144 	.word	0x20001144
 8006c3c:	20001160 	.word	0x20001160
 8006c40:	20001174 	.word	0x20001174
 8006c44:	2000118c 	.word	0x2000118c
 8006c48:	20001158 	.word	0x20001158
 8006c4c:	2000115c 	.word	0x2000115c

08006c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c56:	e019      	b.n	8006c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c58:	f000 fdd4 	bl	8007804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <prvCheckTasksWaitingTermination+0x50>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fe fd3b 	bl	80056e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <prvCheckTasksWaitingTermination+0x54>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	4a0b      	ldr	r2, [pc, #44]	; (8006ca4 <prvCheckTasksWaitingTermination+0x54>)
 8006c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <prvCheckTasksWaitingTermination+0x58>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <prvCheckTasksWaitingTermination+0x58>)
 8006c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c82:	f000 fdef 	bl	8007864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f810 	bl	8006cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <prvCheckTasksWaitingTermination+0x58>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e1      	bne.n	8006c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20001174 	.word	0x20001174
 8006ca4:	200011a0 	.word	0x200011a0
 8006ca8:	20001188 	.word	0x20001188

08006cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ff8c 	bl	8007be0 <vPortFree>
				vPortFree( pxTCB );
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 ff89 	bl	8007be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cce:	e018      	b.n	8006d02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d103      	bne.n	8006ce2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 ff80 	bl	8007be0 <vPortFree>
	}
 8006ce0:	e00f      	b.n	8006d02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d00a      	beq.n	8006d02 <prvDeleteTCB+0x56>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <prvDeleteTCB+0x54>
	}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <prvResetNextTaskUnblockTime+0x38>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d104      	bne.n	8006d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d24:	e008      	b.n	8006d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <prvResetNextTaskUnblockTime+0x38>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <prvResetNextTaskUnblockTime+0x3c>)
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20001158 	.word	0x20001158
 8006d48:	200011c0 	.word	0x200011c0

08006d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <xTaskGetSchedulerState+0x34>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e008      	b.n	8006d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d60:	4b08      	ldr	r3, [pc, #32]	; (8006d84 <xTaskGetSchedulerState+0x38>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	e001      	b.n	8006d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d72:	687b      	ldr	r3, [r7, #4]
	}
 8006d74:	4618      	mov	r0, r3
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	200011ac 	.word	0x200011ac
 8006d84:	200011c8 	.word	0x200011c8

08006d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d056      	beq.n	8006e4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <xTaskPriorityDisinherit+0xd0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d00a      	beq.n	8006dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	60fb      	str	r3, [r7, #12]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de0:	1e5a      	subs	r2, r3, #1
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d02c      	beq.n	8006e4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d128      	bne.n	8006e4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe fc70 	bl	80056e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <xTaskPriorityDisinherit+0xd4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d903      	bls.n	8006e2c <xTaskPriorityDisinherit+0xa4>
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <xTaskPriorityDisinherit+0xd4>)
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <xTaskPriorityDisinherit+0xd8>)
 8006e3a:	441a      	add	r2, r3
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7fe fbf1 	bl	800562a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e4c:	697b      	ldr	r3, [r7, #20]
	}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000ccc 	.word	0x20000ccc
 8006e5c:	200011a8 	.word	0x200011a8
 8006e60:	20000cd0 	.word	0x20000cd0

08006e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e6e:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e74:	4b20      	ldr	r3, [pc, #128]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fc32 	bl	80056e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d10a      	bne.n	8006e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4819      	ldr	r0, [pc, #100]	; (8006efc <prvAddCurrentTaskToDelayedList+0x98>)
 8006e98:	f7fe fbc7 	bl	800562a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e9c:	e026      	b.n	8006eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d209      	bcs.n	8006eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b0f      	ldr	r3, [pc, #60]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7fe fbd5 	bl	8005672 <vListInsert>
}
 8006ec8:	e010      	b.n	8006eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f7fe fbcb 	bl	8005672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d202      	bcs.n	8006eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ee6:	4a08      	ldr	r2, [pc, #32]	; (8006f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200011a4 	.word	0x200011a4
 8006ef8:	20000ccc 	.word	0x20000ccc
 8006efc:	2000118c 	.word	0x2000118c
 8006f00:	2000115c 	.word	0x2000115c
 8006f04:	20001158 	.word	0x20001158
 8006f08:	200011c0 	.word	0x200011c0

08006f0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f16:	f000 fb07 	bl	8007528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <xTimerCreateTimerTask+0x80>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d021      	beq.n	8006f66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f2a:	1d3a      	adds	r2, r7, #4
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	f107 030c 	add.w	r3, r7, #12
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fb31 	bl	800559c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	9202      	str	r2, [sp, #8]
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	2302      	movs	r3, #2
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	4910      	ldr	r1, [pc, #64]	; (8006f90 <xTimerCreateTimerTask+0x84>)
 8006f4e:	4811      	ldr	r0, [pc, #68]	; (8006f94 <xTimerCreateTimerTask+0x88>)
 8006f50:	f7ff f8de 	bl	8006110 <xTaskCreateStatic>
 8006f54:	4603      	mov	r3, r0
 8006f56:	4a10      	ldr	r2, [pc, #64]	; (8006f98 <xTimerCreateTimerTask+0x8c>)
 8006f58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <xTimerCreateTimerTask+0x8c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f62:	2301      	movs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f82:	697b      	ldr	r3, [r7, #20]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	200011fc 	.word	0x200011fc
 8006f90:	0800881c 	.word	0x0800881c
 8006f94:	080070d1 	.word	0x080070d1
 8006f98:	20001200 	.word	0x20001200

08006f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	; 0x28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	623b      	str	r3, [r7, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fca:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <xTimerGenericCommand+0x98>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d02a      	beq.n	8007028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	dc18      	bgt.n	8007016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006fe4:	f7ff feb2 	bl	8006d4c <xTaskGetSchedulerState>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d109      	bne.n	8007002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006fee:	4b11      	ldr	r3, [pc, #68]	; (8007034 <xTimerGenericCommand+0x98>)
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	f107 0110 	add.w	r1, r7, #16
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffa:	f7fe fca1 	bl	8005940 <xQueueGenericSend>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8007000:	e012      	b.n	8007028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <xTimerGenericCommand+0x98>)
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	f107 0110 	add.w	r1, r7, #16
 800700a:	2300      	movs	r3, #0
 800700c:	2200      	movs	r2, #0
 800700e:	f7fe fc97 	bl	8005940 <xQueueGenericSend>
 8007012:	6278      	str	r0, [r7, #36]	; 0x24
 8007014:	e008      	b.n	8007028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <xTimerGenericCommand+0x98>)
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	f107 0110 	add.w	r1, r7, #16
 800701e:	2300      	movs	r3, #0
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	f7fe fd8b 	bl	8005b3c <xQueueGenericSendFromISR>
 8007026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800702a:	4618      	mov	r0, r3
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200011fc 	.word	0x200011fc

08007038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af02      	add	r7, sp, #8
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007042:	4b22      	ldr	r3, [pc, #136]	; (80070cc <prvProcessExpiredTimer+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	3304      	adds	r3, #4
 8007050:	4618      	mov	r0, r3
 8007052:	f7fe fb47 	bl	80056e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d022      	beq.n	80070aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	699a      	ldr	r2, [r3, #24]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	18d1      	adds	r1, r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f000 f8d1 	bl	8007218 <prvInsertTimerInActiveList>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01f      	beq.n	80070bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800707c:	2300      	movs	r3, #0
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	2100      	movs	r1, #0
 8007086:	6978      	ldr	r0, [r7, #20]
 8007088:	f7ff ff88 	bl	8006f9c <xTimerGenericCommand>
 800708c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d113      	bne.n	80070bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	6978      	ldr	r0, [r7, #20]
 80070c2:	4798      	blx	r3
}
 80070c4:	bf00      	nop
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200011f4 	.word	0x200011f4

080070d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070d8:	f107 0308 	add.w	r3, r7, #8
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 f857 	bl	8007190 <prvGetNextExpireTime>
 80070e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 f803 	bl	80070f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070ee:	f000 f8d5 	bl	800729c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070f2:	e7f1      	b.n	80070d8 <prvTimerTask+0x8>

080070f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80070fe:	f7ff fa43 	bl	8006588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007102:	f107 0308 	add.w	r3, r7, #8
 8007106:	4618      	mov	r0, r3
 8007108:	f000 f866 	bl	80071d8 <prvSampleTimeNow>
 800710c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d130      	bne.n	8007176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <prvProcessTimerOrBlockTask+0x3c>
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	429a      	cmp	r2, r3
 8007120:	d806      	bhi.n	8007130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007122:	f7ff fa3f 	bl	80065a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff85 	bl	8007038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800712e:	e024      	b.n	800717a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007136:	4b13      	ldr	r3, [pc, #76]	; (8007184 <prvProcessTimerOrBlockTask+0x90>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <prvProcessTimerOrBlockTask+0x50>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <prvProcessTimerOrBlockTask+0x52>
 8007144:	2300      	movs	r3, #0
 8007146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <prvProcessTimerOrBlockTask+0x94>)
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	4619      	mov	r1, r3
 8007156:	f7fe ffa7 	bl	80060a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800715a:	f7ff fa23 	bl	80065a4 <xTaskResumeAll>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007164:	4b09      	ldr	r3, [pc, #36]	; (800718c <prvProcessTimerOrBlockTask+0x98>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
}
 8007174:	e001      	b.n	800717a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007176:	f7ff fa15 	bl	80065a4 <xTaskResumeAll>
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200011f8 	.word	0x200011f8
 8007188:	200011fc 	.word	0x200011fc
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007198:	4b0e      	ldr	r3, [pc, #56]	; (80071d4 <prvGetNextExpireTime+0x44>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <prvGetNextExpireTime+0x16>
 80071a2:	2201      	movs	r2, #1
 80071a4:	e000      	b.n	80071a8 <prvGetNextExpireTime+0x18>
 80071a6:	2200      	movs	r2, #0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b4:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <prvGetNextExpireTime+0x44>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e001      	b.n	80071c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071c4:	68fb      	ldr	r3, [r7, #12]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	200011f4 	.word	0x200011f4

080071d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071e0:	f7ff fa7e 	bl	80066e0 <xTaskGetTickCount>
 80071e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <prvSampleTimeNow+0x3c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d205      	bcs.n	80071fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071f0:	f000 f936 	bl	8007460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	e002      	b.n	8007202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <prvSampleTimeNow+0x3c>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20001204 	.word	0x20001204

08007218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d812      	bhi.n	8007264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e01b      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <prvInsertTimerInActiveList+0x7c>)
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fe fa08 	bl	8005672 <vListInsert>
 8007262:	e012      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d206      	bcs.n	800727a <prvInsertTimerInActiveList+0x62>
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d302      	bcc.n	800727a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e007      	b.n	800728a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800727a:	4b07      	ldr	r3, [pc, #28]	; (8007298 <prvInsertTimerInActiveList+0x80>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fe f9f4 	bl	8005672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800728a:	697b      	ldr	r3, [r7, #20]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	200011f8 	.word	0x200011f8
 8007298:	200011f4 	.word	0x200011f4

0800729c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072a2:	e0ca      	b.n	800743a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	da18      	bge.n	80072dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072aa:	1d3b      	adds	r3, r7, #4
 80072ac:	3304      	adds	r3, #4
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	61fb      	str	r3, [r7, #28]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	6850      	ldr	r0, [r2, #4]
 80072d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d6:	6892      	ldr	r2, [r2, #8]
 80072d8:	4611      	mov	r1, r2
 80072da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f2c0 80aa 	blt.w	8007438 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe f9f5 	bl	80056e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fa:	463b      	mov	r3, r7
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff ff6b 	bl	80071d8 <prvSampleTimeNow>
 8007302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b09      	cmp	r3, #9
 8007308:	f200 8097 	bhi.w	800743a <prvProcessReceivedCommands+0x19e>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <prvProcessReceivedCommands+0x78>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	0800733d 	.word	0x0800733d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800733d 	.word	0x0800733d
 8007320:	080073b1 	.word	0x080073b1
 8007324:	080073c5 	.word	0x080073c5
 8007328:	0800740f 	.word	0x0800740f
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800733d 	.word	0x0800733d
 8007334:	080073b1 	.word	0x080073b1
 8007338:	080073c5 	.word	0x080073c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	18d1      	adds	r1, r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735c:	f7ff ff5c 	bl	8007218 <prvInsertTimerInActiveList>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d069      	beq.n	800743a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800736c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05e      	beq.n	800743a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	441a      	add	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	2300      	movs	r3, #0
 800738a:	2100      	movs	r1, #0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7ff fe05 	bl	8006f9c <xTimerGenericCommand>
 8007392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d14f      	bne.n	800743a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	61bb      	str	r3, [r7, #24]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073c2:	e03a      	b.n	800743a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ca:	f043 0301 	orr.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	617b      	str	r3, [r7, #20]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	18d1      	adds	r1, r2, r3
 8007402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007408:	f7ff ff06 	bl	8007218 <prvInsertTimerInActiveList>
					break;
 800740c:	e015      	b.n	800743a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f000 fbdf 	bl	8007be0 <vPortFree>
 8007422:	e00a      	b.n	800743a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007436:	e000      	b.n	800743a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800743a:	4b08      	ldr	r3, [pc, #32]	; (800745c <prvProcessReceivedCommands+0x1c0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1d39      	adds	r1, r7, #4
 8007440:	2200      	movs	r2, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe fc16 	bl	8005c74 <xQueueReceive>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f af2a 	bne.w	80072a4 <prvProcessReceivedCommands+0x8>
	}
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	3730      	adds	r7, #48	; 0x30
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	200011fc 	.word	0x200011fc

08007460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007466:	e048      	b.n	80074fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007468:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <prvSwitchTimerLists+0xc0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007472:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe f92f 	bl	80056e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d02e      	beq.n	80074fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d90e      	bls.n	80074cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ba:	4b19      	ldr	r3, [pc, #100]	; (8007520 <prvSwitchTimerLists+0xc0>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3304      	adds	r3, #4
 80074c2:	4619      	mov	r1, r3
 80074c4:	4610      	mov	r0, r2
 80074c6:	f7fe f8d4 	bl	8005672 <vListInsert>
 80074ca:	e016      	b.n	80074fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	2300      	movs	r3, #0
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	2100      	movs	r1, #0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7ff fd60 	bl	8006f9c <xTimerGenericCommand>
 80074dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	603b      	str	r3, [r7, #0]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <prvSwitchTimerLists+0xc0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1b1      	bne.n	8007468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800750a:	4b06      	ldr	r3, [pc, #24]	; (8007524 <prvSwitchTimerLists+0xc4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a04      	ldr	r2, [pc, #16]	; (8007520 <prvSwitchTimerLists+0xc0>)
 8007510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007512:	4a04      	ldr	r2, [pc, #16]	; (8007524 <prvSwitchTimerLists+0xc4>)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	200011f4 	.word	0x200011f4
 8007524:	200011f8 	.word	0x200011f8

08007528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800752e:	f000 f969 	bl	8007804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d120      	bne.n	800757c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800753a:	4814      	ldr	r0, [pc, #80]	; (800758c <prvCheckForValidListAndQueue+0x64>)
 800753c:	f7fe f848 	bl	80055d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007540:	4813      	ldr	r0, [pc, #76]	; (8007590 <prvCheckForValidListAndQueue+0x68>)
 8007542:	f7fe f845 	bl	80055d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007546:	4b13      	ldr	r3, [pc, #76]	; (8007594 <prvCheckForValidListAndQueue+0x6c>)
 8007548:	4a10      	ldr	r2, [pc, #64]	; (800758c <prvCheckForValidListAndQueue+0x64>)
 800754a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <prvCheckForValidListAndQueue+0x70>)
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <prvCheckForValidListAndQueue+0x68>)
 8007550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007552:	2300      	movs	r3, #0
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <prvCheckForValidListAndQueue+0x74>)
 8007558:	4a11      	ldr	r2, [pc, #68]	; (80075a0 <prvCheckForValidListAndQueue+0x78>)
 800755a:	2110      	movs	r1, #16
 800755c:	200a      	movs	r0, #10
 800755e:	f7fe f953 	bl	8005808 <xQueueGenericCreateStatic>
 8007562:	4603      	mov	r3, r0
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <prvCheckForValidListAndQueue+0x60>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	490b      	ldr	r1, [pc, #44]	; (80075a4 <prvCheckForValidListAndQueue+0x7c>)
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fd6c 	bl	8006054 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800757c:	f000 f972 	bl	8007864 <vPortExitCritical>
}
 8007580:	bf00      	nop
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200011fc 	.word	0x200011fc
 800758c:	200011cc 	.word	0x200011cc
 8007590:	200011e0 	.word	0x200011e0
 8007594:	200011f4 	.word	0x200011f4
 8007598:	200011f8 	.word	0x200011f8
 800759c:	200012a8 	.word	0x200012a8
 80075a0:	20001208 	.word	0x20001208
 80075a4:	08008824 	.word	0x08008824

080075a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3b04      	subs	r3, #4
 80075b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3b04      	subs	r3, #4
 80075c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f023 0201 	bic.w	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d8:	4a0c      	ldr	r2, [pc, #48]	; (800760c <pxPortInitialiseStack+0x64>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b14      	subs	r3, #20
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b04      	subs	r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f06f 0202 	mvn.w	r2, #2
 80075f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3b20      	subs	r3, #32
 80075fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	08007611 	.word	0x08007611

08007610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <prvTaskExitError+0x54>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d00a      	beq.n	800763a <prvTaskExitError+0x2a>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60fb      	str	r3, [r7, #12]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <prvTaskExitError+0x28>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	60bb      	str	r3, [r7, #8]
}
 800764c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800764e:	bf00      	nop
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0fc      	beq.n	8007650 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	2000000c 	.word	0x2000000c
	...

08007670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <pxCurrentTCBConst2>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	6808      	ldr	r0, [r1, #0]
 8007676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	f380 8809 	msr	PSP, r0
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	4770      	bx	lr
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst2>:
 8007690:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007698:	4808      	ldr	r0, [pc, #32]	; (80076bc <prvPortStartFirstTask+0x24>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f380 8808 	msr	MSP, r0
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8814 	msr	CONTROL, r0
 80076aa:	b662      	cpsie	i
 80076ac:	b661      	cpsie	f
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	df00      	svc	0
 80076b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ba:	bf00      	nop
 80076bc:	e000ed08 	.word	0xe000ed08

080076c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076c6:	4b46      	ldr	r3, [pc, #280]	; (80077e0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a46      	ldr	r2, [pc, #280]	; (80077e4 <xPortStartScheduler+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x26>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076e6:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <xPortStartScheduler+0x120>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3f      	ldr	r2, [pc, #252]	; (80077e8 <xPortStartScheduler+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10a      	bne.n	8007706 <xPortStartScheduler+0x46>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007706:	4b39      	ldr	r3, [pc, #228]	; (80077ec <xPortStartScheduler+0x12c>)
 8007708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <xPortStartScheduler+0x130>)
 800772c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800772e:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <xPortStartScheduler+0x134>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007734:	e009      	b.n	800774a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007736:	4b2f      	ldr	r3, [pc, #188]	; (80077f4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a2d      	ldr	r2, [pc, #180]	; (80077f4 <xPortStartScheduler+0x134>)
 800773e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d0ef      	beq.n	8007736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <xPortStartScheduler+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1c3 0307 	rsb	r3, r3, #7
 800775e:	2b04      	cmp	r3, #4
 8007760:	d00a      	beq.n	8007778 <xPortStartScheduler+0xb8>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007778:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <xPortStartScheduler+0x134>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <xPortStartScheduler+0x134>)
 8007780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xPortStartScheduler+0x134>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800778a:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <xPortStartScheduler+0x134>)
 800778c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007796:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <xPortStartScheduler+0x138>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <xPortStartScheduler+0x138>)
 800779c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a14      	ldr	r2, [pc, #80]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ae:	f000 f8dd 	bl	800796c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <xPortStartScheduler+0x13c>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077b8:	f000 f8fc 	bl	80079b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <xPortStartScheduler+0x140>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <xPortStartScheduler+0x140>)
 80077c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077c8:	f7ff ff66 	bl	8007698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077cc:	f7ff f852 	bl	8006874 <vTaskSwitchContext>
	prvTaskExitError();
 80077d0:	f7ff ff1e 	bl	8007610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	e000ed00 	.word	0xe000ed00
 80077e4:	410fc271 	.word	0x410fc271
 80077e8:	410fc270 	.word	0x410fc270
 80077ec:	e000e400 	.word	0xe000e400
 80077f0:	200012f8 	.word	0x200012f8
 80077f4:	200012fc 	.word	0x200012fc
 80077f8:	e000ed20 	.word	0xe000ed20
 80077fc:	2000000c 	.word	0x2000000c
 8007800:	e000ef34 	.word	0xe000ef34

08007804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <vPortEnterCritical+0x58>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <vPortEnterCritical+0x58>)
 8007826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <vPortEnterCritical+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10f      	bne.n	8007850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortEnterCritical+0x5c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <vPortEnterCritical+0x4c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <vPortEnterCritical+0x4a>
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	2000000c 	.word	0x2000000c
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <vPortExitCritical+0x50>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <vPortExitCritical+0x24>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <vPortExitCritical+0x50>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3b01      	subs	r3, #1
 800788e:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <vPortExitCritical+0x50>)
 8007890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <vPortExitCritical+0x42>
 800789a:	2300      	movs	r3, #0
 800789c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f383 8811 	msr	BASEPRI, r3
}
 80078a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2000000c 	.word	0x2000000c
	...

080078c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	; (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f7fe ffc0 	bl	8006874 <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007942:	f7fe fedd 	bl	8006700 <xTaskIncrementTick>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <xPortSysTickHandler+0x40>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <vPortSetupTimerInterrupt+0x38>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <vPortSetupTimerInterrupt+0x3c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <vPortSetupTimerInterrupt+0x40>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <vPortSetupTimerInterrupt+0x44>)
 800798a:	3b01      	subs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	e000e018 	.word	0xe000e018
 80079a8:	20000000 	.word	0x20000000
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	e000e014 	.word	0xe000e014

080079b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079c4 <vPortEnableVFP+0x10>
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079be:	6001      	str	r1, [r0, #0]
 80079c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079c2:	bf00      	nop
 80079c4:	e000ed88 	.word	0xe000ed88

080079c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d914      	bls.n	8007a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <vPortValidateInterruptPriority+0x70>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e4:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <vPortValidateInterruptPriority+0x74>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20a      	bcs.n	8007a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <vPortValidateInterruptPriority+0x78>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <vPortValidateInterruptPriority+0x7c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d90a      	bls.n	8007a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	603b      	str	r3, [r7, #0]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <vPortValidateInterruptPriority+0x60>
	}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	e000e3f0 	.word	0xe000e3f0
 8007a3c:	200012f8 	.word	0x200012f8
 8007a40:	e000ed0c 	.word	0xe000ed0c
 8007a44:	200012fc 	.word	0x200012fc

08007a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08a      	sub	sp, #40	; 0x28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a54:	f7fe fd98 	bl	8006588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a58:	4b5b      	ldr	r3, [pc, #364]	; (8007bc8 <pvPortMalloc+0x180>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a60:	f000 f920 	bl	8007ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <pvPortMalloc+0x184>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f040 8093 	bne.w	8007b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01d      	beq.n	8007ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a78:	2208      	movs	r2, #8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f023 0307 	bic.w	r3, r3, #7
 8007a90:	3308      	adds	r3, #8
 8007a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	617b      	str	r3, [r7, #20]
}
 8007ab0:	bf00      	nop
 8007ab2:	e7fe      	b.n	8007ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d06e      	beq.n	8007b98 <pvPortMalloc+0x150>
 8007aba:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <pvPortMalloc+0x188>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d869      	bhi.n	8007b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ac4:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <pvPortMalloc+0x18c>)
 8007ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ac8:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <pvPortMalloc+0x18c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ace:	e004      	b.n	8007ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d903      	bls.n	8007aec <pvPortMalloc+0xa4>
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f1      	bne.n	8007ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007aec:	4b36      	ldr	r3, [pc, #216]	; (8007bc8 <pvPortMalloc+0x180>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d050      	beq.n	8007b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2208      	movs	r2, #8
 8007afc:	4413      	add	r3, r2
 8007afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	2308      	movs	r3, #8
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d91f      	bls.n	8007b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <pvPortMalloc+0xf8>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	613b      	str	r3, [r7, #16]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b52:	69b8      	ldr	r0, [r7, #24]
 8007b54:	f000 f908 	bl	8007d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b58:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <pvPortMalloc+0x190>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d203      	bcs.n	8007b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <pvPortMalloc+0x188>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <pvPortMalloc+0x190>)
 8007b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <pvPortMalloc+0x184>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b8e:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <pvPortMalloc+0x194>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a11      	ldr	r2, [pc, #68]	; (8007bdc <pvPortMalloc+0x194>)
 8007b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b98:	f7fe fd04 	bl	80065a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <pvPortMalloc+0x174>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <pvPortMalloc+0x172>
	return pvReturn;
 8007bbc:	69fb      	ldr	r3, [r7, #28]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3728      	adds	r7, #40	; 0x28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20004f08 	.word	0x20004f08
 8007bcc:	20004f1c 	.word	0x20004f1c
 8007bd0:	20004f0c 	.word	0x20004f0c
 8007bd4:	20004f00 	.word	0x20004f00
 8007bd8:	20004f10 	.word	0x20004f10
 8007bdc:	20004f14 	.word	0x20004f14

08007be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d04d      	beq.n	8007c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	425b      	negs	r3, r3
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <vPortFree+0xb8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <vPortFree+0x44>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60fb      	str	r3, [r7, #12]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <vPortFree+0x62>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60bb      	str	r3, [r7, #8]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <vPortFree+0xb8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d01e      	beq.n	8007c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d11a      	bne.n	8007c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <vPortFree+0xb8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c68:	f7fe fc8e 	bl	8006588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <vPortFree+0xbc>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <vPortFree+0xbc>)
 8007c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f874 	bl	8007d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <vPortFree+0xc0>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a06      	ldr	r2, [pc, #24]	; (8007ca0 <vPortFree+0xc0>)
 8007c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c8a:	f7fe fc8b 	bl	80065a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20004f1c 	.word	0x20004f1c
 8007c9c:	20004f0c 	.word	0x20004f0c
 8007ca0:	20004f18 	.word	0x20004f18

08007ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cb0:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <prvHeapInit+0xac>)
 8007cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 0307 	bic.w	r3, r3, #7
 8007cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	4a1f      	ldr	r2, [pc, #124]	; (8007d50 <prvHeapInit+0xac>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cdc:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <prvHeapInit+0xb0>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <prvHeapInit+0xb0>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4413      	add	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1a9b      	subs	r3, r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0307 	bic.w	r3, r3, #7
 8007cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <prvHeapInit+0xb4>)
 8007d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d06:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <prvHeapInit+0xb4>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <prvHeapInit+0xb4>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	1ad2      	subs	r2, r2, r3
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <prvHeapInit+0xb4>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <prvHeapInit+0xb8>)
 8007d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a09      	ldr	r2, [pc, #36]	; (8007d60 <prvHeapInit+0xbc>)
 8007d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <prvHeapInit+0xc0>)
 8007d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	3714      	adds	r7, #20
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20001300 	.word	0x20001300
 8007d54:	20004f00 	.word	0x20004f00
 8007d58:	20004f08 	.word	0x20004f08
 8007d5c:	20004f10 	.word	0x20004f10
 8007d60:	20004f0c 	.word	0x20004f0c
 8007d64:	20004f1c 	.word	0x20004f1c

08007d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <prvInsertBlockIntoFreeList+0xac>)
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e002      	b.n	8007d7c <prvInsertBlockIntoFreeList+0x14>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d8f7      	bhi.n	8007d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	4413      	add	r3, r2
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d108      	bne.n	8007daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	441a      	add	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	441a      	add	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d118      	bne.n	8007df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <prvInsertBlockIntoFreeList+0xb0>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d00d      	beq.n	8007de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	e008      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007de6:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <prvInsertBlockIntoFreeList+0xb0>)
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	e003      	b.n	8007df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d002      	beq.n	8007e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20004f00 	.word	0x20004f00
 8007e18:	20004f08 	.word	0x20004f08

08007e1c <__errno>:
 8007e1c:	4b01      	ldr	r3, [pc, #4]	; (8007e24 <__errno+0x8>)
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	20000010 	.word	0x20000010

08007e28 <__libc_init_array>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	4d0d      	ldr	r5, [pc, #52]	; (8007e60 <__libc_init_array+0x38>)
 8007e2c:	4c0d      	ldr	r4, [pc, #52]	; (8007e64 <__libc_init_array+0x3c>)
 8007e2e:	1b64      	subs	r4, r4, r5
 8007e30:	10a4      	asrs	r4, r4, #2
 8007e32:	2600      	movs	r6, #0
 8007e34:	42a6      	cmp	r6, r4
 8007e36:	d109      	bne.n	8007e4c <__libc_init_array+0x24>
 8007e38:	4d0b      	ldr	r5, [pc, #44]	; (8007e68 <__libc_init_array+0x40>)
 8007e3a:	4c0c      	ldr	r4, [pc, #48]	; (8007e6c <__libc_init_array+0x44>)
 8007e3c:	f000 fc8e 	bl	800875c <_init>
 8007e40:	1b64      	subs	r4, r4, r5
 8007e42:	10a4      	asrs	r4, r4, #2
 8007e44:	2600      	movs	r6, #0
 8007e46:	42a6      	cmp	r6, r4
 8007e48:	d105      	bne.n	8007e56 <__libc_init_array+0x2e>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e50:	4798      	blx	r3
 8007e52:	3601      	adds	r6, #1
 8007e54:	e7ee      	b.n	8007e34 <__libc_init_array+0xc>
 8007e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5a:	4798      	blx	r3
 8007e5c:	3601      	adds	r6, #1
 8007e5e:	e7f2      	b.n	8007e46 <__libc_init_array+0x1e>
 8007e60:	08009398 	.word	0x08009398
 8007e64:	08009398 	.word	0x08009398
 8007e68:	08009398 	.word	0x08009398
 8007e6c:	0800939c 	.word	0x0800939c

08007e70 <memcpy>:
 8007e70:	440a      	add	r2, r1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e78:	d100      	bne.n	8007e7c <memcpy+0xc>
 8007e7a:	4770      	bx	lr
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e86:	4291      	cmp	r1, r2
 8007e88:	d1f9      	bne.n	8007e7e <memcpy+0xe>
 8007e8a:	bd10      	pop	{r4, pc}

08007e8c <memset>:
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d100      	bne.n	8007e96 <memset+0xa>
 8007e94:	4770      	bx	lr
 8007e96:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9a:	e7f9      	b.n	8007e90 <memset+0x4>

08007e9c <siprintf>:
 8007e9c:	b40e      	push	{r1, r2, r3}
 8007e9e:	b500      	push	{lr}
 8007ea0:	b09c      	sub	sp, #112	; 0x70
 8007ea2:	ab1d      	add	r3, sp, #116	; 0x74
 8007ea4:	9002      	str	r0, [sp, #8]
 8007ea6:	9006      	str	r0, [sp, #24]
 8007ea8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eac:	4809      	ldr	r0, [pc, #36]	; (8007ed4 <siprintf+0x38>)
 8007eae:	9107      	str	r1, [sp, #28]
 8007eb0:	9104      	str	r1, [sp, #16]
 8007eb2:	4909      	ldr	r1, [pc, #36]	; (8007ed8 <siprintf+0x3c>)
 8007eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb8:	9105      	str	r1, [sp, #20]
 8007eba:	6800      	ldr	r0, [r0, #0]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	a902      	add	r1, sp, #8
 8007ec0:	f000 f868 	bl	8007f94 <_svfiprintf_r>
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	b01c      	add	sp, #112	; 0x70
 8007ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed0:	b003      	add	sp, #12
 8007ed2:	4770      	bx	lr
 8007ed4:	20000010 	.word	0x20000010
 8007ed8:	ffff0208 	.word	0xffff0208

08007edc <__ssputs_r>:
 8007edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	688e      	ldr	r6, [r1, #8]
 8007ee2:	429e      	cmp	r6, r3
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4690      	mov	r8, r2
 8007eea:	461f      	mov	r7, r3
 8007eec:	d838      	bhi.n	8007f60 <__ssputs_r+0x84>
 8007eee:	898a      	ldrh	r2, [r1, #12]
 8007ef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef4:	d032      	beq.n	8007f5c <__ssputs_r+0x80>
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	6909      	ldr	r1, [r1, #16]
 8007efa:	eba5 0901 	sub.w	r9, r5, r1
 8007efe:	6965      	ldr	r5, [r4, #20]
 8007f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f08:	3301      	adds	r3, #1
 8007f0a:	444b      	add	r3, r9
 8007f0c:	106d      	asrs	r5, r5, #1
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf38      	it	cc
 8007f12:	461d      	movcc	r5, r3
 8007f14:	0553      	lsls	r3, r2, #21
 8007f16:	d531      	bpl.n	8007f7c <__ssputs_r+0xa0>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f000 fb55 	bl	80085c8 <_malloc_r>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	b950      	cbnz	r0, 8007f38 <__ssputs_r+0x5c>
 8007f22:	230c      	movs	r3, #12
 8007f24:	f8ca 3000 	str.w	r3, [sl]
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f38:	6921      	ldr	r1, [r4, #16]
 8007f3a:	464a      	mov	r2, r9
 8007f3c:	f7ff ff98 	bl	8007e70 <memcpy>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	6126      	str	r6, [r4, #16]
 8007f4e:	6165      	str	r5, [r4, #20]
 8007f50:	444e      	add	r6, r9
 8007f52:	eba5 0509 	sub.w	r5, r5, r9
 8007f56:	6026      	str	r6, [r4, #0]
 8007f58:	60a5      	str	r5, [r4, #8]
 8007f5a:	463e      	mov	r6, r7
 8007f5c:	42be      	cmp	r6, r7
 8007f5e:	d900      	bls.n	8007f62 <__ssputs_r+0x86>
 8007f60:	463e      	mov	r6, r7
 8007f62:	6820      	ldr	r0, [r4, #0]
 8007f64:	4632      	mov	r2, r6
 8007f66:	4641      	mov	r1, r8
 8007f68:	f000 faa8 	bl	80084bc <memmove>
 8007f6c:	68a3      	ldr	r3, [r4, #8]
 8007f6e:	1b9b      	subs	r3, r3, r6
 8007f70:	60a3      	str	r3, [r4, #8]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	4433      	add	r3, r6
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e7db      	b.n	8007f34 <__ssputs_r+0x58>
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	f000 fb97 	bl	80086b0 <_realloc_r>
 8007f82:	4606      	mov	r6, r0
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1e1      	bne.n	8007f4c <__ssputs_r+0x70>
 8007f88:	6921      	ldr	r1, [r4, #16]
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f000 fab0 	bl	80084f0 <_free_r>
 8007f90:	e7c7      	b.n	8007f22 <__ssputs_r+0x46>
	...

08007f94 <_svfiprintf_r>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4698      	mov	r8, r3
 8007f9a:	898b      	ldrh	r3, [r1, #12]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	b09d      	sub	sp, #116	; 0x74
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	d50e      	bpl.n	8007fc6 <_svfiprintf_r+0x32>
 8007fa8:	690b      	ldr	r3, [r1, #16]
 8007faa:	b963      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x32>
 8007fac:	2140      	movs	r1, #64	; 0x40
 8007fae:	f000 fb0b 	bl	80085c8 <_malloc_r>
 8007fb2:	6028      	str	r0, [r5, #0]
 8007fb4:	6128      	str	r0, [r5, #16]
 8007fb6:	b920      	cbnz	r0, 8007fc2 <_svfiprintf_r+0x2e>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e0d1      	b.n	8008166 <_svfiprintf_r+0x1d2>
 8007fc2:	2340      	movs	r3, #64	; 0x40
 8007fc4:	616b      	str	r3, [r5, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd4:	2330      	movs	r3, #48	; 0x30
 8007fd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008180 <_svfiprintf_r+0x1ec>
 8007fda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fde:	f04f 0901 	mov.w	r9, #1
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fea:	b10a      	cbz	r2, 8007ff0 <_svfiprintf_r+0x5c>
 8007fec:	2a25      	cmp	r2, #37	; 0x25
 8007fee:	d1f9      	bne.n	8007fe4 <_svfiprintf_r+0x50>
 8007ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff4:	d00b      	beq.n	800800e <_svfiprintf_r+0x7a>
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ff6d 	bl	8007edc <__ssputs_r>
 8008002:	3001      	adds	r0, #1
 8008004:	f000 80aa 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800800a:	445a      	add	r2, fp
 800800c:	9209      	str	r2, [sp, #36]	; 0x24
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 80a2 	beq.w	800815c <_svfiprintf_r+0x1c8>
 8008018:	2300      	movs	r3, #0
 800801a:	f04f 32ff 	mov.w	r2, #4294967295
 800801e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008022:	f10a 0a01 	add.w	sl, sl, #1
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800802e:	931a      	str	r3, [sp, #104]	; 0x68
 8008030:	4654      	mov	r4, sl
 8008032:	2205      	movs	r2, #5
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	4851      	ldr	r0, [pc, #324]	; (8008180 <_svfiprintf_r+0x1ec>)
 800803a:	f7f8 f8c9 	bl	80001d0 <memchr>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	b9d8      	cbnz	r0, 800807a <_svfiprintf_r+0xe6>
 8008042:	06d0      	lsls	r0, r2, #27
 8008044:	bf44      	itt	mi
 8008046:	2320      	movmi	r3, #32
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	0711      	lsls	r1, r2, #28
 800804e:	bf44      	itt	mi
 8008050:	232b      	movmi	r3, #43	; 0x2b
 8008052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b2a      	cmp	r3, #42	; 0x2a
 800805c:	d015      	beq.n	800808a <_svfiprintf_r+0xf6>
 800805e:	9a07      	ldr	r2, [sp, #28]
 8008060:	4654      	mov	r4, sl
 8008062:	2000      	movs	r0, #0
 8008064:	f04f 0c0a 	mov.w	ip, #10
 8008068:	4621      	mov	r1, r4
 800806a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806e:	3b30      	subs	r3, #48	; 0x30
 8008070:	2b09      	cmp	r3, #9
 8008072:	d94e      	bls.n	8008112 <_svfiprintf_r+0x17e>
 8008074:	b1b0      	cbz	r0, 80080a4 <_svfiprintf_r+0x110>
 8008076:	9207      	str	r2, [sp, #28]
 8008078:	e014      	b.n	80080a4 <_svfiprintf_r+0x110>
 800807a:	eba0 0308 	sub.w	r3, r0, r8
 800807e:	fa09 f303 	lsl.w	r3, r9, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	46a2      	mov	sl, r4
 8008088:	e7d2      	b.n	8008030 <_svfiprintf_r+0x9c>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	1d19      	adds	r1, r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	9103      	str	r1, [sp, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfbb      	ittet	lt
 8008096:	425b      	neglt	r3, r3
 8008098:	f042 0202 	orrlt.w	r2, r2, #2
 800809c:	9307      	strge	r3, [sp, #28]
 800809e:	9307      	strlt	r3, [sp, #28]
 80080a0:	bfb8      	it	lt
 80080a2:	9204      	strlt	r2, [sp, #16]
 80080a4:	7823      	ldrb	r3, [r4, #0]
 80080a6:	2b2e      	cmp	r3, #46	; 0x2e
 80080a8:	d10c      	bne.n	80080c4 <_svfiprintf_r+0x130>
 80080aa:	7863      	ldrb	r3, [r4, #1]
 80080ac:	2b2a      	cmp	r3, #42	; 0x2a
 80080ae:	d135      	bne.n	800811c <_svfiprintf_r+0x188>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9203      	str	r2, [sp, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfb8      	it	lt
 80080bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80080c0:	3402      	adds	r4, #2
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008190 <_svfiprintf_r+0x1fc>
 80080c8:	7821      	ldrb	r1, [r4, #0]
 80080ca:	2203      	movs	r2, #3
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7f8 f87f 	bl	80001d0 <memchr>
 80080d2:	b140      	cbz	r0, 80080e6 <_svfiprintf_r+0x152>
 80080d4:	2340      	movs	r3, #64	; 0x40
 80080d6:	eba0 000a 	sub.w	r0, r0, sl
 80080da:	fa03 f000 	lsl.w	r0, r3, r0
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	4303      	orrs	r3, r0
 80080e2:	3401      	adds	r4, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ea:	4826      	ldr	r0, [pc, #152]	; (8008184 <_svfiprintf_r+0x1f0>)
 80080ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080f0:	2206      	movs	r2, #6
 80080f2:	f7f8 f86d 	bl	80001d0 <memchr>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d038      	beq.n	800816c <_svfiprintf_r+0x1d8>
 80080fa:	4b23      	ldr	r3, [pc, #140]	; (8008188 <_svfiprintf_r+0x1f4>)
 80080fc:	bb1b      	cbnz	r3, 8008146 <_svfiprintf_r+0x1b2>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	3307      	adds	r3, #7
 8008102:	f023 0307 	bic.w	r3, r3, #7
 8008106:	3308      	adds	r3, #8
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	4433      	add	r3, r6
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	e767      	b.n	8007fe2 <_svfiprintf_r+0x4e>
 8008112:	fb0c 3202 	mla	r2, ip, r2, r3
 8008116:	460c      	mov	r4, r1
 8008118:	2001      	movs	r0, #1
 800811a:	e7a5      	b.n	8008068 <_svfiprintf_r+0xd4>
 800811c:	2300      	movs	r3, #0
 800811e:	3401      	adds	r4, #1
 8008120:	9305      	str	r3, [sp, #20]
 8008122:	4619      	mov	r1, r3
 8008124:	f04f 0c0a 	mov.w	ip, #10
 8008128:	4620      	mov	r0, r4
 800812a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800812e:	3a30      	subs	r2, #48	; 0x30
 8008130:	2a09      	cmp	r2, #9
 8008132:	d903      	bls.n	800813c <_svfiprintf_r+0x1a8>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0c5      	beq.n	80080c4 <_svfiprintf_r+0x130>
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	e7c3      	b.n	80080c4 <_svfiprintf_r+0x130>
 800813c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008140:	4604      	mov	r4, r0
 8008142:	2301      	movs	r3, #1
 8008144:	e7f0      	b.n	8008128 <_svfiprintf_r+0x194>
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4b0f      	ldr	r3, [pc, #60]	; (800818c <_svfiprintf_r+0x1f8>)
 800814e:	a904      	add	r1, sp, #16
 8008150:	4638      	mov	r0, r7
 8008152:	f3af 8000 	nop.w
 8008156:	1c42      	adds	r2, r0, #1
 8008158:	4606      	mov	r6, r0
 800815a:	d1d6      	bne.n	800810a <_svfiprintf_r+0x176>
 800815c:	89ab      	ldrh	r3, [r5, #12]
 800815e:	065b      	lsls	r3, r3, #25
 8008160:	f53f af2c 	bmi.w	8007fbc <_svfiprintf_r+0x28>
 8008164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008166:	b01d      	add	sp, #116	; 0x74
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	ab03      	add	r3, sp, #12
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	462a      	mov	r2, r5
 8008172:	4b06      	ldr	r3, [pc, #24]	; (800818c <_svfiprintf_r+0x1f8>)
 8008174:	a904      	add	r1, sp, #16
 8008176:	4638      	mov	r0, r7
 8008178:	f000 f87a 	bl	8008270 <_printf_i>
 800817c:	e7eb      	b.n	8008156 <_svfiprintf_r+0x1c2>
 800817e:	bf00      	nop
 8008180:	0800935c 	.word	0x0800935c
 8008184:	08009366 	.word	0x08009366
 8008188:	00000000 	.word	0x00000000
 800818c:	08007edd 	.word	0x08007edd
 8008190:	08009362 	.word	0x08009362

08008194 <_printf_common>:
 8008194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	4616      	mov	r6, r2
 800819a:	4699      	mov	r9, r3
 800819c:	688a      	ldr	r2, [r1, #8]
 800819e:	690b      	ldr	r3, [r1, #16]
 80081a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bfb8      	it	lt
 80081a8:	4613      	movlt	r3, r2
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081b0:	4607      	mov	r7, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b10a      	cbz	r2, 80081ba <_printf_common+0x26>
 80081b6:	3301      	adds	r3, #1
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	0699      	lsls	r1, r3, #26
 80081be:	bf42      	ittt	mi
 80081c0:	6833      	ldrmi	r3, [r6, #0]
 80081c2:	3302      	addmi	r3, #2
 80081c4:	6033      	strmi	r3, [r6, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	f015 0506 	ands.w	r5, r5, #6
 80081cc:	d106      	bne.n	80081dc <_printf_common+0x48>
 80081ce:	f104 0a19 	add.w	sl, r4, #25
 80081d2:	68e3      	ldr	r3, [r4, #12]
 80081d4:	6832      	ldr	r2, [r6, #0]
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc26      	bgt.n	800822a <_printf_common+0x96>
 80081dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081e0:	1e13      	subs	r3, r2, #0
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	bf18      	it	ne
 80081e6:	2301      	movne	r3, #1
 80081e8:	0692      	lsls	r2, r2, #26
 80081ea:	d42b      	bmi.n	8008244 <_printf_common+0xb0>
 80081ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f0:	4649      	mov	r1, r9
 80081f2:	4638      	mov	r0, r7
 80081f4:	47c0      	blx	r8
 80081f6:	3001      	adds	r0, #1
 80081f8:	d01e      	beq.n	8008238 <_printf_common+0xa4>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	68e5      	ldr	r5, [r4, #12]
 80081fe:	6832      	ldr	r2, [r6, #0]
 8008200:	f003 0306 	and.w	r3, r3, #6
 8008204:	2b04      	cmp	r3, #4
 8008206:	bf08      	it	eq
 8008208:	1aad      	subeq	r5, r5, r2
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	bf0c      	ite	eq
 8008210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008214:	2500      	movne	r5, #0
 8008216:	4293      	cmp	r3, r2
 8008218:	bfc4      	itt	gt
 800821a:	1a9b      	subgt	r3, r3, r2
 800821c:	18ed      	addgt	r5, r5, r3
 800821e:	2600      	movs	r6, #0
 8008220:	341a      	adds	r4, #26
 8008222:	42b5      	cmp	r5, r6
 8008224:	d11a      	bne.n	800825c <_printf_common+0xc8>
 8008226:	2000      	movs	r0, #0
 8008228:	e008      	b.n	800823c <_printf_common+0xa8>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4649      	mov	r1, r9
 8008230:	4638      	mov	r0, r7
 8008232:	47c0      	blx	r8
 8008234:	3001      	adds	r0, #1
 8008236:	d103      	bne.n	8008240 <_printf_common+0xac>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008240:	3501      	adds	r5, #1
 8008242:	e7c6      	b.n	80081d2 <_printf_common+0x3e>
 8008244:	18e1      	adds	r1, r4, r3
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	2030      	movs	r0, #48	; 0x30
 800824a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800824e:	4422      	add	r2, r4
 8008250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008254:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008258:	3302      	adds	r3, #2
 800825a:	e7c7      	b.n	80081ec <_printf_common+0x58>
 800825c:	2301      	movs	r3, #1
 800825e:	4622      	mov	r2, r4
 8008260:	4649      	mov	r1, r9
 8008262:	4638      	mov	r0, r7
 8008264:	47c0      	blx	r8
 8008266:	3001      	adds	r0, #1
 8008268:	d0e6      	beq.n	8008238 <_printf_common+0xa4>
 800826a:	3601      	adds	r6, #1
 800826c:	e7d9      	b.n	8008222 <_printf_common+0x8e>
	...

08008270 <_printf_i>:
 8008270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	7e0f      	ldrb	r7, [r1, #24]
 8008276:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008278:	2f78      	cmp	r7, #120	; 0x78
 800827a:	4691      	mov	r9, r2
 800827c:	4680      	mov	r8, r0
 800827e:	460c      	mov	r4, r1
 8008280:	469a      	mov	sl, r3
 8008282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008286:	d807      	bhi.n	8008298 <_printf_i+0x28>
 8008288:	2f62      	cmp	r7, #98	; 0x62
 800828a:	d80a      	bhi.n	80082a2 <_printf_i+0x32>
 800828c:	2f00      	cmp	r7, #0
 800828e:	f000 80d8 	beq.w	8008442 <_printf_i+0x1d2>
 8008292:	2f58      	cmp	r7, #88	; 0x58
 8008294:	f000 80a3 	beq.w	80083de <_printf_i+0x16e>
 8008298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800829c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082a0:	e03a      	b.n	8008318 <_printf_i+0xa8>
 80082a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082a6:	2b15      	cmp	r3, #21
 80082a8:	d8f6      	bhi.n	8008298 <_printf_i+0x28>
 80082aa:	a101      	add	r1, pc, #4	; (adr r1, 80082b0 <_printf_i+0x40>)
 80082ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b0:	08008309 	.word	0x08008309
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	08008299 	.word	0x08008299
 80082bc:	08008299 	.word	0x08008299
 80082c0:	08008299 	.word	0x08008299
 80082c4:	08008299 	.word	0x08008299
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008299 	.word	0x08008299
 80082d0:	08008299 	.word	0x08008299
 80082d4:	08008299 	.word	0x08008299
 80082d8:	08008299 	.word	0x08008299
 80082dc:	08008429 	.word	0x08008429
 80082e0:	0800834d 	.word	0x0800834d
 80082e4:	0800840b 	.word	0x0800840b
 80082e8:	08008299 	.word	0x08008299
 80082ec:	08008299 	.word	0x08008299
 80082f0:	0800844b 	.word	0x0800844b
 80082f4:	08008299 	.word	0x08008299
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	08008299 	.word	0x08008299
 8008300:	08008299 	.word	0x08008299
 8008304:	08008413 	.word	0x08008413
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	602a      	str	r2, [r5, #0]
 8008310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008318:	2301      	movs	r3, #1
 800831a:	e0a3      	b.n	8008464 <_printf_i+0x1f4>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	6829      	ldr	r1, [r5, #0]
 8008320:	0606      	lsls	r6, r0, #24
 8008322:	f101 0304 	add.w	r3, r1, #4
 8008326:	d50a      	bpl.n	800833e <_printf_i+0xce>
 8008328:	680e      	ldr	r6, [r1, #0]
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	2e00      	cmp	r6, #0
 800832e:	da03      	bge.n	8008338 <_printf_i+0xc8>
 8008330:	232d      	movs	r3, #45	; 0x2d
 8008332:	4276      	negs	r6, r6
 8008334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008338:	485e      	ldr	r0, [pc, #376]	; (80084b4 <_printf_i+0x244>)
 800833a:	230a      	movs	r3, #10
 800833c:	e019      	b.n	8008372 <_printf_i+0x102>
 800833e:	680e      	ldr	r6, [r1, #0]
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008346:	bf18      	it	ne
 8008348:	b236      	sxthne	r6, r6
 800834a:	e7ef      	b.n	800832c <_printf_i+0xbc>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	6029      	str	r1, [r5, #0]
 8008354:	0601      	lsls	r1, r0, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xec>
 8008358:	681e      	ldr	r6, [r3, #0]
 800835a:	e002      	b.n	8008362 <_printf_i+0xf2>
 800835c:	0646      	lsls	r6, r0, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xe8>
 8008360:	881e      	ldrh	r6, [r3, #0]
 8008362:	4854      	ldr	r0, [pc, #336]	; (80084b4 <_printf_i+0x244>)
 8008364:	2f6f      	cmp	r7, #111	; 0x6f
 8008366:	bf0c      	ite	eq
 8008368:	2308      	moveq	r3, #8
 800836a:	230a      	movne	r3, #10
 800836c:	2100      	movs	r1, #0
 800836e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008372:	6865      	ldr	r5, [r4, #4]
 8008374:	60a5      	str	r5, [r4, #8]
 8008376:	2d00      	cmp	r5, #0
 8008378:	bfa2      	ittt	ge
 800837a:	6821      	ldrge	r1, [r4, #0]
 800837c:	f021 0104 	bicge.w	r1, r1, #4
 8008380:	6021      	strge	r1, [r4, #0]
 8008382:	b90e      	cbnz	r6, 8008388 <_printf_i+0x118>
 8008384:	2d00      	cmp	r5, #0
 8008386:	d04d      	beq.n	8008424 <_printf_i+0x1b4>
 8008388:	4615      	mov	r5, r2
 800838a:	fbb6 f1f3 	udiv	r1, r6, r3
 800838e:	fb03 6711 	mls	r7, r3, r1, r6
 8008392:	5dc7      	ldrb	r7, [r0, r7]
 8008394:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008398:	4637      	mov	r7, r6
 800839a:	42bb      	cmp	r3, r7
 800839c:	460e      	mov	r6, r1
 800839e:	d9f4      	bls.n	800838a <_printf_i+0x11a>
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d10b      	bne.n	80083bc <_printf_i+0x14c>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	07de      	lsls	r6, r3, #31
 80083a8:	d508      	bpl.n	80083bc <_printf_i+0x14c>
 80083aa:	6923      	ldr	r3, [r4, #16]
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4299      	cmp	r1, r3
 80083b0:	bfde      	ittt	le
 80083b2:	2330      	movle	r3, #48	; 0x30
 80083b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083bc:	1b52      	subs	r2, r2, r5
 80083be:	6122      	str	r2, [r4, #16]
 80083c0:	f8cd a000 	str.w	sl, [sp]
 80083c4:	464b      	mov	r3, r9
 80083c6:	aa03      	add	r2, sp, #12
 80083c8:	4621      	mov	r1, r4
 80083ca:	4640      	mov	r0, r8
 80083cc:	f7ff fee2 	bl	8008194 <_printf_common>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d14c      	bne.n	800846e <_printf_i+0x1fe>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	b004      	add	sp, #16
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	4835      	ldr	r0, [pc, #212]	; (80084b4 <_printf_i+0x244>)
 80083e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083e4:	6829      	ldr	r1, [r5, #0]
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80083ec:	6029      	str	r1, [r5, #0]
 80083ee:	061d      	lsls	r5, r3, #24
 80083f0:	d514      	bpl.n	800841c <_printf_i+0x1ac>
 80083f2:	07df      	lsls	r7, r3, #31
 80083f4:	bf44      	itt	mi
 80083f6:	f043 0320 	orrmi.w	r3, r3, #32
 80083fa:	6023      	strmi	r3, [r4, #0]
 80083fc:	b91e      	cbnz	r6, 8008406 <_printf_i+0x196>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	f023 0320 	bic.w	r3, r3, #32
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	2310      	movs	r3, #16
 8008408:	e7b0      	b.n	800836c <_printf_i+0xfc>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	2378      	movs	r3, #120	; 0x78
 8008414:	4828      	ldr	r0, [pc, #160]	; (80084b8 <_printf_i+0x248>)
 8008416:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800841a:	e7e3      	b.n	80083e4 <_printf_i+0x174>
 800841c:	0659      	lsls	r1, r3, #25
 800841e:	bf48      	it	mi
 8008420:	b2b6      	uxthmi	r6, r6
 8008422:	e7e6      	b.n	80083f2 <_printf_i+0x182>
 8008424:	4615      	mov	r5, r2
 8008426:	e7bb      	b.n	80083a0 <_printf_i+0x130>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	6826      	ldr	r6, [r4, #0]
 800842c:	6961      	ldr	r1, [r4, #20]
 800842e:	1d18      	adds	r0, r3, #4
 8008430:	6028      	str	r0, [r5, #0]
 8008432:	0635      	lsls	r5, r6, #24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	d501      	bpl.n	800843c <_printf_i+0x1cc>
 8008438:	6019      	str	r1, [r3, #0]
 800843a:	e002      	b.n	8008442 <_printf_i+0x1d2>
 800843c:	0670      	lsls	r0, r6, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0x1c8>
 8008440:	8019      	strh	r1, [r3, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	6123      	str	r3, [r4, #16]
 8008446:	4615      	mov	r5, r2
 8008448:	e7ba      	b.n	80083c0 <_printf_i+0x150>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	1d1a      	adds	r2, r3, #4
 800844e:	602a      	str	r2, [r5, #0]
 8008450:	681d      	ldr	r5, [r3, #0]
 8008452:	6862      	ldr	r2, [r4, #4]
 8008454:	2100      	movs	r1, #0
 8008456:	4628      	mov	r0, r5
 8008458:	f7f7 feba 	bl	80001d0 <memchr>
 800845c:	b108      	cbz	r0, 8008462 <_printf_i+0x1f2>
 800845e:	1b40      	subs	r0, r0, r5
 8008460:	6060      	str	r0, [r4, #4]
 8008462:	6863      	ldr	r3, [r4, #4]
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	2300      	movs	r3, #0
 8008468:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800846c:	e7a8      	b.n	80083c0 <_printf_i+0x150>
 800846e:	6923      	ldr	r3, [r4, #16]
 8008470:	462a      	mov	r2, r5
 8008472:	4649      	mov	r1, r9
 8008474:	4640      	mov	r0, r8
 8008476:	47d0      	blx	sl
 8008478:	3001      	adds	r0, #1
 800847a:	d0ab      	beq.n	80083d4 <_printf_i+0x164>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	d413      	bmi.n	80084aa <_printf_i+0x23a>
 8008482:	68e0      	ldr	r0, [r4, #12]
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	4298      	cmp	r0, r3
 8008488:	bfb8      	it	lt
 800848a:	4618      	movlt	r0, r3
 800848c:	e7a4      	b.n	80083d8 <_printf_i+0x168>
 800848e:	2301      	movs	r3, #1
 8008490:	4632      	mov	r2, r6
 8008492:	4649      	mov	r1, r9
 8008494:	4640      	mov	r0, r8
 8008496:	47d0      	blx	sl
 8008498:	3001      	adds	r0, #1
 800849a:	d09b      	beq.n	80083d4 <_printf_i+0x164>
 800849c:	3501      	adds	r5, #1
 800849e:	68e3      	ldr	r3, [r4, #12]
 80084a0:	9903      	ldr	r1, [sp, #12]
 80084a2:	1a5b      	subs	r3, r3, r1
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	dcf2      	bgt.n	800848e <_printf_i+0x21e>
 80084a8:	e7eb      	b.n	8008482 <_printf_i+0x212>
 80084aa:	2500      	movs	r5, #0
 80084ac:	f104 0619 	add.w	r6, r4, #25
 80084b0:	e7f5      	b.n	800849e <_printf_i+0x22e>
 80084b2:	bf00      	nop
 80084b4:	0800936d 	.word	0x0800936d
 80084b8:	0800937e 	.word	0x0800937e

080084bc <memmove>:
 80084bc:	4288      	cmp	r0, r1
 80084be:	b510      	push	{r4, lr}
 80084c0:	eb01 0402 	add.w	r4, r1, r2
 80084c4:	d902      	bls.n	80084cc <memmove+0x10>
 80084c6:	4284      	cmp	r4, r0
 80084c8:	4623      	mov	r3, r4
 80084ca:	d807      	bhi.n	80084dc <memmove+0x20>
 80084cc:	1e43      	subs	r3, r0, #1
 80084ce:	42a1      	cmp	r1, r4
 80084d0:	d008      	beq.n	80084e4 <memmove+0x28>
 80084d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084da:	e7f8      	b.n	80084ce <memmove+0x12>
 80084dc:	4402      	add	r2, r0
 80084de:	4601      	mov	r1, r0
 80084e0:	428a      	cmp	r2, r1
 80084e2:	d100      	bne.n	80084e6 <memmove+0x2a>
 80084e4:	bd10      	pop	{r4, pc}
 80084e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ee:	e7f7      	b.n	80084e0 <memmove+0x24>

080084f0 <_free_r>:
 80084f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d044      	beq.n	8008580 <_free_r+0x90>
 80084f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fa:	9001      	str	r0, [sp, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008502:	bfb8      	it	lt
 8008504:	18e4      	addlt	r4, r4, r3
 8008506:	f000 f913 	bl	8008730 <__malloc_lock>
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <_free_r+0x94>)
 800850c:	9801      	ldr	r0, [sp, #4]
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	b933      	cbnz	r3, 8008520 <_free_r+0x30>
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6014      	str	r4, [r2, #0]
 8008516:	b003      	add	sp, #12
 8008518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800851c:	f000 b90e 	b.w	800873c <__malloc_unlock>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d908      	bls.n	8008536 <_free_r+0x46>
 8008524:	6825      	ldr	r5, [r4, #0]
 8008526:	1961      	adds	r1, r4, r5
 8008528:	428b      	cmp	r3, r1
 800852a:	bf01      	itttt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	1949      	addeq	r1, r1, r5
 8008532:	6021      	streq	r1, [r4, #0]
 8008534:	e7ed      	b.n	8008512 <_free_r+0x22>
 8008536:	461a      	mov	r2, r3
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b10b      	cbz	r3, 8008540 <_free_r+0x50>
 800853c:	42a3      	cmp	r3, r4
 800853e:	d9fa      	bls.n	8008536 <_free_r+0x46>
 8008540:	6811      	ldr	r1, [r2, #0]
 8008542:	1855      	adds	r5, r2, r1
 8008544:	42a5      	cmp	r5, r4
 8008546:	d10b      	bne.n	8008560 <_free_r+0x70>
 8008548:	6824      	ldr	r4, [r4, #0]
 800854a:	4421      	add	r1, r4
 800854c:	1854      	adds	r4, r2, r1
 800854e:	42a3      	cmp	r3, r4
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	d1e0      	bne.n	8008516 <_free_r+0x26>
 8008554:	681c      	ldr	r4, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	6053      	str	r3, [r2, #4]
 800855a:	4421      	add	r1, r4
 800855c:	6011      	str	r1, [r2, #0]
 800855e:	e7da      	b.n	8008516 <_free_r+0x26>
 8008560:	d902      	bls.n	8008568 <_free_r+0x78>
 8008562:	230c      	movs	r3, #12
 8008564:	6003      	str	r3, [r0, #0]
 8008566:	e7d6      	b.n	8008516 <_free_r+0x26>
 8008568:	6825      	ldr	r5, [r4, #0]
 800856a:	1961      	adds	r1, r4, r5
 800856c:	428b      	cmp	r3, r1
 800856e:	bf04      	itt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	bf04      	itt	eq
 8008578:	1949      	addeq	r1, r1, r5
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	6054      	str	r4, [r2, #4]
 800857e:	e7ca      	b.n	8008516 <_free_r+0x26>
 8008580:	b003      	add	sp, #12
 8008582:	bd30      	pop	{r4, r5, pc}
 8008584:	20004f20 	.word	0x20004f20

08008588 <sbrk_aligned>:
 8008588:	b570      	push	{r4, r5, r6, lr}
 800858a:	4e0e      	ldr	r6, [pc, #56]	; (80085c4 <sbrk_aligned+0x3c>)
 800858c:	460c      	mov	r4, r1
 800858e:	6831      	ldr	r1, [r6, #0]
 8008590:	4605      	mov	r5, r0
 8008592:	b911      	cbnz	r1, 800859a <sbrk_aligned+0x12>
 8008594:	f000 f8bc 	bl	8008710 <_sbrk_r>
 8008598:	6030      	str	r0, [r6, #0]
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 f8b7 	bl	8008710 <_sbrk_r>
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	d00a      	beq.n	80085bc <sbrk_aligned+0x34>
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d007      	beq.n	80085c0 <sbrk_aligned+0x38>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f8ac 	bl	8008710 <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d101      	bne.n	80085c0 <sbrk_aligned+0x38>
 80085bc:	f04f 34ff 	mov.w	r4, #4294967295
 80085c0:	4620      	mov	r0, r4
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	20004f24 	.word	0x20004f24

080085c8 <_malloc_r>:
 80085c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085cc:	1ccd      	adds	r5, r1, #3
 80085ce:	f025 0503 	bic.w	r5, r5, #3
 80085d2:	3508      	adds	r5, #8
 80085d4:	2d0c      	cmp	r5, #12
 80085d6:	bf38      	it	cc
 80085d8:	250c      	movcc	r5, #12
 80085da:	2d00      	cmp	r5, #0
 80085dc:	4607      	mov	r7, r0
 80085de:	db01      	blt.n	80085e4 <_malloc_r+0x1c>
 80085e0:	42a9      	cmp	r1, r5
 80085e2:	d905      	bls.n	80085f0 <_malloc_r+0x28>
 80085e4:	230c      	movs	r3, #12
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	2600      	movs	r6, #0
 80085ea:	4630      	mov	r0, r6
 80085ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f0:	4e2e      	ldr	r6, [pc, #184]	; (80086ac <_malloc_r+0xe4>)
 80085f2:	f000 f89d 	bl	8008730 <__malloc_lock>
 80085f6:	6833      	ldr	r3, [r6, #0]
 80085f8:	461c      	mov	r4, r3
 80085fa:	bb34      	cbnz	r4, 800864a <_malloc_r+0x82>
 80085fc:	4629      	mov	r1, r5
 80085fe:	4638      	mov	r0, r7
 8008600:	f7ff ffc2 	bl	8008588 <sbrk_aligned>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	4604      	mov	r4, r0
 8008608:	d14d      	bne.n	80086a6 <_malloc_r+0xde>
 800860a:	6834      	ldr	r4, [r6, #0]
 800860c:	4626      	mov	r6, r4
 800860e:	2e00      	cmp	r6, #0
 8008610:	d140      	bne.n	8008694 <_malloc_r+0xcc>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	4631      	mov	r1, r6
 8008616:	4638      	mov	r0, r7
 8008618:	eb04 0803 	add.w	r8, r4, r3
 800861c:	f000 f878 	bl	8008710 <_sbrk_r>
 8008620:	4580      	cmp	r8, r0
 8008622:	d13a      	bne.n	800869a <_malloc_r+0xd2>
 8008624:	6821      	ldr	r1, [r4, #0]
 8008626:	3503      	adds	r5, #3
 8008628:	1a6d      	subs	r5, r5, r1
 800862a:	f025 0503 	bic.w	r5, r5, #3
 800862e:	3508      	adds	r5, #8
 8008630:	2d0c      	cmp	r5, #12
 8008632:	bf38      	it	cc
 8008634:	250c      	movcc	r5, #12
 8008636:	4629      	mov	r1, r5
 8008638:	4638      	mov	r0, r7
 800863a:	f7ff ffa5 	bl	8008588 <sbrk_aligned>
 800863e:	3001      	adds	r0, #1
 8008640:	d02b      	beq.n	800869a <_malloc_r+0xd2>
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	442b      	add	r3, r5
 8008646:	6023      	str	r3, [r4, #0]
 8008648:	e00e      	b.n	8008668 <_malloc_r+0xa0>
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	1b52      	subs	r2, r2, r5
 800864e:	d41e      	bmi.n	800868e <_malloc_r+0xc6>
 8008650:	2a0b      	cmp	r2, #11
 8008652:	d916      	bls.n	8008682 <_malloc_r+0xba>
 8008654:	1961      	adds	r1, r4, r5
 8008656:	42a3      	cmp	r3, r4
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	bf18      	it	ne
 800865c:	6059      	strne	r1, [r3, #4]
 800865e:	6863      	ldr	r3, [r4, #4]
 8008660:	bf08      	it	eq
 8008662:	6031      	streq	r1, [r6, #0]
 8008664:	5162      	str	r2, [r4, r5]
 8008666:	604b      	str	r3, [r1, #4]
 8008668:	4638      	mov	r0, r7
 800866a:	f104 060b 	add.w	r6, r4, #11
 800866e:	f000 f865 	bl	800873c <__malloc_unlock>
 8008672:	f026 0607 	bic.w	r6, r6, #7
 8008676:	1d23      	adds	r3, r4, #4
 8008678:	1af2      	subs	r2, r6, r3
 800867a:	d0b6      	beq.n	80085ea <_malloc_r+0x22>
 800867c:	1b9b      	subs	r3, r3, r6
 800867e:	50a3      	str	r3, [r4, r2]
 8008680:	e7b3      	b.n	80085ea <_malloc_r+0x22>
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	42a3      	cmp	r3, r4
 8008686:	bf0c      	ite	eq
 8008688:	6032      	streq	r2, [r6, #0]
 800868a:	605a      	strne	r2, [r3, #4]
 800868c:	e7ec      	b.n	8008668 <_malloc_r+0xa0>
 800868e:	4623      	mov	r3, r4
 8008690:	6864      	ldr	r4, [r4, #4]
 8008692:	e7b2      	b.n	80085fa <_malloc_r+0x32>
 8008694:	4634      	mov	r4, r6
 8008696:	6876      	ldr	r6, [r6, #4]
 8008698:	e7b9      	b.n	800860e <_malloc_r+0x46>
 800869a:	230c      	movs	r3, #12
 800869c:	603b      	str	r3, [r7, #0]
 800869e:	4638      	mov	r0, r7
 80086a0:	f000 f84c 	bl	800873c <__malloc_unlock>
 80086a4:	e7a1      	b.n	80085ea <_malloc_r+0x22>
 80086a6:	6025      	str	r5, [r4, #0]
 80086a8:	e7de      	b.n	8008668 <_malloc_r+0xa0>
 80086aa:	bf00      	nop
 80086ac:	20004f20 	.word	0x20004f20

080086b0 <_realloc_r>:
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	4680      	mov	r8, r0
 80086b6:	4614      	mov	r4, r2
 80086b8:	460e      	mov	r6, r1
 80086ba:	b921      	cbnz	r1, 80086c6 <_realloc_r+0x16>
 80086bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086c0:	4611      	mov	r1, r2
 80086c2:	f7ff bf81 	b.w	80085c8 <_malloc_r>
 80086c6:	b92a      	cbnz	r2, 80086d4 <_realloc_r+0x24>
 80086c8:	f7ff ff12 	bl	80084f0 <_free_r>
 80086cc:	4625      	mov	r5, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	f000 f838 	bl	8008748 <_malloc_usable_size_r>
 80086d8:	4284      	cmp	r4, r0
 80086da:	4607      	mov	r7, r0
 80086dc:	d802      	bhi.n	80086e4 <_realloc_r+0x34>
 80086de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086e2:	d812      	bhi.n	800870a <_realloc_r+0x5a>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4640      	mov	r0, r8
 80086e8:	f7ff ff6e 	bl	80085c8 <_malloc_r>
 80086ec:	4605      	mov	r5, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d0ed      	beq.n	80086ce <_realloc_r+0x1e>
 80086f2:	42bc      	cmp	r4, r7
 80086f4:	4622      	mov	r2, r4
 80086f6:	4631      	mov	r1, r6
 80086f8:	bf28      	it	cs
 80086fa:	463a      	movcs	r2, r7
 80086fc:	f7ff fbb8 	bl	8007e70 <memcpy>
 8008700:	4631      	mov	r1, r6
 8008702:	4640      	mov	r0, r8
 8008704:	f7ff fef4 	bl	80084f0 <_free_r>
 8008708:	e7e1      	b.n	80086ce <_realloc_r+0x1e>
 800870a:	4635      	mov	r5, r6
 800870c:	e7df      	b.n	80086ce <_realloc_r+0x1e>
	...

08008710 <_sbrk_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d06      	ldr	r5, [pc, #24]	; (800872c <_sbrk_r+0x1c>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	602b      	str	r3, [r5, #0]
 800871c:	f7f9 fc6e 	bl	8001ffc <_sbrk>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_sbrk_r+0x1a>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_sbrk_r+0x1a>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	20004f28 	.word	0x20004f28

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f000 b811 	b.w	8008758 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	20004f2c 	.word	0x20004f2c

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f000 b80c 	b.w	800875a <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	20004f2c 	.word	0x20004f2c

08008748 <_malloc_usable_size_r>:
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f18      	subs	r0, r3, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfbc      	itt	lt
 8008752:	580b      	ldrlt	r3, [r1, r0]
 8008754:	18c0      	addlt	r0, r0, r3
 8008756:	4770      	bx	lr

08008758 <__retarget_lock_acquire_recursive>:
 8008758:	4770      	bx	lr

0800875a <__retarget_lock_release_recursive>:
 800875a:	4770      	bx	lr

0800875c <_init>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr

08008768 <_fini>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr
